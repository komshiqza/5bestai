Какви “Pro” инструменти да пуснем (готови пресети)

A. Enhance & Clean

Upscale 2×/4×/8× → Real-ESRGAN / SDXL 超Resampler

Face restore → CodeFormer / GFPGAN

JPEG de-artifact / denoise → BSRGAN/SCUNet

Sharpen + Micro-contrast → stable-diffusion refiner pass

B. Background & Subject

Remove/replace background → Rembg + Segment Anything (SAM)

Subject cutout с меки маски → SAM + matting

Relight → Depth (MiDaS/ZoeDepth) + relight models

C. Inpaint & Fix

Inpaint (премахване/добавяне на обекти) → SDXL Inpainting / Flux inpaint

Text/Logo cleanup на принтове/плакати

D. Color & Look

Auto white balance, skintone fix

Film LUTs (Kodak/Portra), teal-orange, “cinematic”

HDR pop / local contrast

E. Portrait Pro Pack

Skin retouch (frequency-like AI)

Eye/teeth enhance

Hair flyaways cleanup

Subtle body symmetry (леки корекции)

Всичко това го превръщаме в 6–8 Preset бутона:
Clean, Portrait Pro, Print-Ready 4K, Cinematic Color, Product Cutout, Inpaint Fix, Relight, Upscale 8×.

2) Архитектура (скейлабилна и евтина)

Front (Vite + React + TS):

Бутон “Pro Edit” върху всяко изображение → модал с табове Enhance / Background / Inpaint / Color.

Потребителят избира пресет + параметри → Create Job.

Backend (Edge/Serverless):

Пращаш заявка към Replicate (или локален worker по-късно).

Webhook от Replicate → записва резултата (status, outputs) в Supabase.

Файловете (input/output) в Cloudinary или Supabase Storage с версии.

DB (Supabase) – предложена схема:

-- изображения
create table images (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references auth.users(id) on delete set null,
  original_url text not null,
  current_version_id uuid,
  created_at timestamptz default now()
);

-- версии (нерушима история)
create table image_versions (
  id uuid primary key default gen_random_uuid(),
  image_id uuid references images(id) on delete cascade,
  url text not null,
  width int, height int, format text,
  source text check (source in ('upload','generate','edit')),
  meta jsonb default '{}'::jsonb,
  created_at timestamptz default now()
);

-- задачи за едит
create table edit_jobs (
  id uuid primary key default gen_random_uuid(),
  image_id uuid references images(id) on delete cascade,
  input_version_id uuid references image_versions(id) on delete set null,
  preset text not null,           -- 'clean', 'portrait_pro', ...
  params jsonb not null,          -- детайли по избрания preset
  status text not null default 'queued', -- queued|running|succeeded|failed
  replicate_prediction_id text,
  output_version_id uuid references image_versions(id),
  cost_credits int default 0,
  created_at timestamptz default now(),
  finished_at timestamptz
);

3) Интеграция с Replicate (примерен поток)

1) Create Job (server route):

Приема: image_id, input_version_id, preset, params

Качва входа към Replicate по signed URL (ако не е публичен)

Стартира prediction с model & weights според preset

Съхранява replicate_prediction_id

Връща {job_id}

2) Webhook /api/replicate-webhook:

Получава prediction.completed/failed

При success: качва output в Cloudinary → прави нов image_versions запис, обновява edit_jobs.status='succeeded' + output_version_id

По желание: маркира images.current_version_id = output_version_id

3) Front-end polling/subscribe:

React Query → /api/edit-jobs/:id до status succeeded

Показва сравнение Before / After с плъзгач + бутон “Set as Current”.

Примерен handler (Node/Express стил, съкратен):

// POST /api/edits
// body: { imageId, inputVersionId, preset, params }
import { createClient } from '@supabase/supabase-js';
import Replicate from 'replicate';

export async function createEdit(req, res) {
  const { imageId, inputVersionId, preset, params } = req.body;

  // 1) избираме модел според preset
  const modelMap = {
    clean: { model: "scunet/denoise", version: "..." },
    upscale4x: { model: "real-esrgan", version: "..." },
    portrait_pro: { model: "codeformer+refiner", version: "..." },
    inpaint: { model: "sdxl-inpaint", version: "..." },
    bg_remove: { model: "rembg", version: "..." },
    relight: { model: "relight-midas", version: "..." },
    color_cinema: { model: "sdxl-refiner-lut", version: "..." }
  };

  const cfg = modelMap[preset];
  // 2) стартираме prediction
  const replicate = new Replicate({ auth: process.env.REPLICATE_API_TOKEN });
  const prediction = await replicate.predictions.create({
    version: cfg.version,
    input: { ...params, image: params.inputUrl }, // signed URL към input
    webhook: `${process.env.PUBLIC_URL}/api/replicate-webhook`,
    webhook_events_filter: ["completed"]
  });

  // 3) запис job
  // ... insert в edit_jobs с prediction.id

  res.json({ jobId: /*new id*/, predictionId: prediction.id });
}

4) Модели/Мапинг по Preset (практично)
Preset	Pipeline (препоръка)	Бележки
Clean	SCUNet/BSRGAN → light refiner	Премахва шум/артефакти
Upscale 4×/8×	Real-ESRGAN → SDXL Refiner	Острота без халюцинации
Portrait Pro	CodeFormer (face) → skin smoothing → color balance	Дръж ефекта “subtle”
Background Remove/Replace	Rembg → SAM matting → compositing	С опция за готови бекграунди
Inpaint Fix	SDXL-Inpaint / Flux-Inpaint	Маска + текстови указания
Relight	Depth (Zoe/MiDaS) → relight	Внимавай със skin tones
Cinematic Color	LUT apply + local contrast	Дай 6 готови LUT-a
5) UX детайли за Pro Edit

Before/After slider (дръж и 100% zoom)

Versioning: „Save as new version” + “Set as current”

Non-destructive: винаги нова версия; потребителят може да се върне назад

Batch: “Apply to all in this album/contest” (опция за платен tier)

Presets with Tooltips + „Advanced” (разкрива параметри)

6) Плащане и лимити (кредити/смесен модел)

Tier лимити (напр. Starter: 100 кред./месец; Pro: 1000; Studio: 5000)

Цена по операция (реалистично):

Clean: 1 кредит

Upscale 4×: 3–5

Upscale 8×: 6–8

Portrait Pro: 4

BG Remove: 2

Inpaint: 4–6 (спрямо резолюция)

Relight: 4

Cinematic Color: 2

On-chain бонус: -10% кредити, ако държат Glory (token-gated perk).

7) Сторидж и формати

Вход: PNG/JPG/WebP до 12–25MP (ограничи за стабилни разходи)

Изход: PNG/WebP (print-ready TIFF за Studio tier)

Cloudinary: подпапки /users/:id/images/:imageId/versions/:versionId.*

Автоматични деривати: 2048px preview, 1024px web, оригинал запазен

8) Надеждност, скорост, разходи

Queue & Retry: ако prediction падне → 2 ретрая с backoff

Timeout guard: ако >5 мин → mark failed, изчакай потребителя да рестартира

Webhook верификация: подпис или secret token

RLS: image_versions и edit_jobs – достъп само на owner

9) Примерни “интелигентни” параметри за UI

Portrait Pro (auto):
face_restore_strength: 0.5–0.7, skin_smooth: low, eye_clarity: +10%, teeth: +5%, saturation: +4, warmth: +2

Cinematic:
lut: "Kodak 2383 soft", contrast:+8, lift_shadows:+4, halation:+6, bloom:+3

Relight:
key_light_dir: from_top_left, key_intensity: 0.35, fill: 0.15, temp: 5200K

10) Мини API договор (за фронта)

POST /api/edits

{
  "imageId": "...",
  "inputVersionId": "...",
  "preset": "portrait_pro",
  "params": {
    "inputUrl": "https://...signed",
    "face_restore_strength": 0.65
  }
}


GET /api/edit-jobs/:id

{
  "status": "succeeded",
  "outputVersion": {
    "id": "...",
    "url": "https://cloudinary/.../v123.png",
    "width": 4096, "height": 4096
  }
}


Webhook /api/replicate-webhook
→ обработва completed/failed, качва output, пише в image_versions, връща 200.

11) Безопасност и правни

Филтри за непозволено съдържание (NSFW, лица на публични личности, лога/търговски марки при inpaint) — предупреди в UI при опит за нарушение.

Лицензно инфо към всяка версия: meta.license = "Creator retains rights; platform non-exclusive license for hosting/contests", плюс хеш за интегритет.

12) Бърз чеклист за имплементация

Добави таблиците images, image_versions, edit_jobs в Supabase.

Внедри /api/edits (create job) + /api/edit-jobs/:id (status).

Репликейт webhook /api/replicate-webhook.

Cloudinary upload/rename конвенции + signed URLs.

UI модал с Presets → Params → Create Job → Progress → Before/After.

Кредитен метрик + тарифи + лимити по tier.

Логване, retry, алерти при fail.

A/B тест на пресети (кой да е по подразбиране).