import { useState, useEffect } from 'react';
import { X, Tag } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { formatPrizeAmount } from '@/lib/utils';

interface EditSubmissionModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (data: { 
    title: string; 
    description: string; 
    tags: string[];
    promptForSale?: boolean;
    promptPrice?: number;
    promptCurrency?: string;
  }) => void;
  submission: {
    id: string;
    title: string;
    description?: string;
    tags?: string[];
    aiModel?: string;
    prompt?: string;
    generationId?: string;
    promptForSale?: boolean;
    promptPrice?: number;
    promptCurrency?: string;
  };
}

export function EditSubmissionModal({ isOpen, onClose, onSubmit, submission }: EditSubmissionModalProps) {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [tags, setTags] = useState<string[]>([]);
  const [tagInput, setTagInput] = useState('');
  const [promptForSale, setPromptForSale] = useState(false);
  const [promptPrice, setPromptPrice] = useState('0');
  const [promptCurrency, setPromptCurrency] = useState('GLORY');

  // Check if submission was generated by platform
  const isGeneratedByPlatform = !!submission.generationId;

  useEffect(() => {
    if (submission && isOpen) {
      setTitle(submission.title || '');
      setDescription(submission.description || '');
      setTags(submission.tags || []);
      setTagInput('');
      setPromptForSale(submission.promptForSale || false);
      // Format promptPrice to avoid long trailing zeros (e.g., 1.000000 -> 1)
      setPromptPrice(formatPrizeAmount(submission.promptPrice));
      setPromptCurrency(submission.promptCurrency || 'GLORY');
    }
  }, [submission, isOpen]);

  // Handle browser back button and Escape key
  useEffect(() => {
    if (!isOpen) return;

    const modalId = Date.now();

    // Push unique history state when modal opens
    window.history.pushState({ modal: 'editSubmission', modalId }, '');

    // Handle Escape key
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };

    // Handle browser back button
    const handlePopState = () => {
      // Close modal when going back in history
      if (window.history.state?.modalId !== modalId) {
        onClose();
      }
    };

    window.addEventListener('keydown', handleEscape);
    window.addEventListener('popstate', handlePopState);

    return () => {
      window.removeEventListener('keydown', handleEscape);
      window.removeEventListener('popstate', handlePopState);
    };
  }, [isOpen, onClose]);

  const handleTagAdd = (value: string) => {
    const t = value.trim();
    if (!t) return;
    if (tags.includes(t)) return;
    if (tags.length >= 10) return;
    setTags((prev) => [...prev, t]);
    setTagInput('');
  };

  const removeTag = (t: string) => {
    setTags((prev) => prev.filter((x) => x !== t));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    onSubmit({ 
      title, 
      description, 
      tags,
      promptForSale,
      promptPrice: parseFloat(promptPrice) || 0,
      promptCurrency,
    });
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50" onClick={onClose}>
      <div 
        className="bg-background rounded-2xl p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto"
        onClick={(e) => e.stopPropagation()}
        data-testid="edit-submission-modal"
      >
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-2xl font-bold">Edit Submission</h2>
          <button
            onClick={onClose}
            className="p-2 hover:bg-muted rounded-lg transition-colors"
            data-testid="close-modal-button"
          >
            <X className="w-5 h-5" />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="space-y-2">
            <Label htmlFor="title">Title *</Label>
            <Input
              id="title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              placeholder="Enter submission title"
              required
              data-testid="input-title"
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="description">Description</Label>
            <Textarea
              id="description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder="Describe your submission..."
              rows={4}
              data-testid="input-description"
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="tags">Tags (up to 10)</Label>
            <div className="flex items-center gap-2">
              <div className="relative flex-1">
                <Tag className="h-4 w-4 absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground" />
                <Input
                  id="tags"
                  value={tagInput}
                  onChange={(e) => setTagInput(e.target.value)}
                  onKeyDown={(e) => {
                    if (e.key === "Enter") {
                      e.preventDefault();
                      handleTagAdd(tagInput);
                    }
                  }}
                  placeholder="Type tag and press Enter"
                  className="pl-9"
                  data-testid="input-tags"
                />
              </div>
              <Button
                type="button"
                onClick={() => handleTagAdd(tagInput)}
                className="px-4"
                variant="default"
              >
                Add
              </Button>
            </div>
            
            {tags.length > 0 && (
              <div className="mt-3 flex flex-wrap gap-2">
                {tags.map((t) => (
                  <span
                    key={t}
                    className="inline-flex items-center gap-2 rounded-full border border-primary/30 bg-primary/10 px-3 py-1 text-xs text-primary"
                  >
                    {t}
                    <button
                      type="button"
                      onClick={() => removeTag(t)}
                      className="ml-1 hover:opacity-70 transition-opacity"
                    >
                      <X className="h-3 w-3" />
                    </button>
                  </span>
                ))}
              </div>
            )}
          </div>

          {/* AI Model - Read-only if platform generated */}
          {submission.aiModel && (
            <div className="space-y-2">
              <Label>AI Model</Label>
              <Input
                type="text"
                value={submission.aiModel}
                disabled={true}
                className="bg-muted opacity-60 cursor-not-allowed"
              />
              {isGeneratedByPlatform && (
                <p className="text-xs text-muted-foreground">ℹ️ Platform-generated submissions cannot change the AI model</p>
              )}
            </div>
          )}

          {/* Prompt - Read-only if platform generated */}
          {submission.prompt && (
            <div className="space-y-2">
              <Label>Prompt</Label>
              <Textarea
                value={submission.prompt}
                disabled={true}
                rows={3}
                className="bg-muted opacity-60 cursor-not-allowed resize-none"
              />
              {isGeneratedByPlatform && (
                <p className="text-xs text-muted-foreground">ℹ️ Platform-generated submissions cannot change the prompt</p>
              )}
            </div>
          )}

          {/* Prompt for Sale Section */}
          {submission.prompt && (
            <div className="space-y-4 p-4 bg-muted/50 rounded-lg border border-border">
              <div className="flex items-center gap-3">
                <input
                  type="checkbox"
                  id="promptForSale"
                  checked={promptForSale}
                  onChange={(e) => setPromptForSale(e.target.checked)}
                  className="w-4 h-4 rounded"
                />
                <Label htmlFor="promptForSale" className="cursor-pointer">
                  Make this prompt available for sale
                </Label>
              </div>

              {promptForSale && (
                <>
                  <div className="space-y-2">
                    <Label htmlFor="promptPrice">Prompt Price</Label>
                    <Input
                      id="promptPrice"
                      type="number"
                      min="0"
                      step="0.01"
                      value={promptPrice}
                      onChange={(e) => setPromptPrice(e.target.value)}
                      placeholder="0"
                      data-testid="input-prompt-price"
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="promptCurrency">Currency</Label>
                    <select
                      id="promptCurrency"
                      value={promptCurrency}
                      onChange={(e) => setPromptCurrency(e.target.value)}
                      className="w-full px-3 py-2 bg-background border border-input rounded-md text-foreground focus:outline-none focus:ring-2 focus:ring-primary"
                    >
                      <option value="GLORY">GLORY</option>
                      <option value="SOL">SOL</option>
                      <option value="USDC">USDC</option>
                    </select>
                  </div>
                </>
              )}
            </div>
          )}

          <div className="flex items-center justify-end gap-3 pt-4 border-t border-border">
            <Button
              type="button"
              variant="outline"
              onClick={onClose}
              data-testid="button-cancel"
            >
              Cancel
            </Button>
            <Button
              type="submit"
              className="gradient-glory hover:opacity-90 transition-opacity"
              data-testid="button-save"
            >
              Save Changes
            </Button>
          </div>
        </form>
      </div>
    </div>
  );
}
