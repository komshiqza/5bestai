{"file_contents":{"client/src/lib/constants.ts":{"content":"export const GLORY_DISTRIBUTION = [0.4, 0.25, 0.15, 0.1, 0.1] as const;\n\nexport const CONTEST_STATUS = {\n  DRAFT: \"draft\",\n  ACTIVE: \"active\",\n  ENDED: \"ended\",\n} as const;\n\nexport const SUBMISSION_STATUS = {\n  PENDING: \"pending\",\n  APPROVED: \"approved\",\n  REJECTED: \"rejected\",\n} as const;\n\nexport const USER_STATUS = {\n  PENDING: \"pending\",\n  APPROVED: \"approved\",\n  BANNED: \"banned\",\n} as const;\n\nexport const USER_ROLES = {\n  USER: \"user\",\n  ADMIN: \"admin\",\n} as const;\n\nexport const SUBMISSION_TYPES = {\n  IMAGE: \"image\",\n  VIDEO: \"video\",\n} as const;\n\nexport const MAX_FILE_SIZE = {\n  IMAGE: 10 * 1024 * 1024, // 10MB\n  VIDEO: 100 * 1024 * 1024, // 100MB\n} as const;\n\nexport const VOTING_RATE_LIMIT = {\n  MAX_VOTES: 30,\n  WINDOW_HOURS: 1,\n} as const;\n","size_bytes":757},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/App.tsx":{"content":"import { useEffect } from \"react\";\nimport { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/lib/theme\";\nimport { SolanaWalletProvider } from \"@/lib/wallet-provider\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { Footer } from \"@/components/layout/footer\";\nimport { BottomNav } from \"@/components/layout/bottom-nav\";\nimport { PrivateModeGuard } from \"@/components/PrivateModeGuard\";\nimport { PrivateModeProvider, usePrivateMode } from \"@/lib/private-mode-context\";\nimport { useAuth } from \"@/lib/auth\";\nimport Home from \"@/pages/home\";\nimport Login from \"@/pages/login\";\nimport Register from \"@/pages/register\";\nimport Contests from \"@/pages/contests\";\nimport ContestDetail from \"@/pages/contest-detail\";\nimport SubmissionDetail from \"@/pages/submission-detail\";\nimport Upload from \"@/pages/upload\";\nimport Profile from \"@/pages/profile\";\nimport MySubmissions from \"@/pages/my-submissions\";\nimport AdminDashboard from \"@/pages/admin/dashboard\";\nimport AdminContestDetail from \"@/pages/admin/contest-detail\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction ScrollToTop() {\n  const [location] = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location]);\n\n  return null;\n}\n\nfunction Router() {\n  const { data: user } = useAuth();\n  const { privateMode } = usePrivateMode();\n\n  // Show Footer and BottomNav when: Private Mode is OFF OR user is logged in\n  const showFooterAndBottomNav = !privateMode || !!user;\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Navbar />\n      <main className=\"flex-1 pb-16\">\n        <ScrollToTop />\n        <Switch>\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/register\" component={Register} />\n          <Route>\n            <PrivateModeGuard>\n              <Switch>\n                <Route path=\"/\" component={Home} />\n                <Route path=\"/contests\" component={Contests} />\n                <Route path=\"/contest/:slug\" component={ContestDetail} />\n                <Route path=\"/submission/:id\" component={SubmissionDetail} />\n                <Route path=\"/upload\" component={Upload} />\n                <Route path=\"/profile\" component={Profile} />\n                <Route path=\"/my-submissions\" component={MySubmissions} />\n                <Route path=\"/admin\" component={AdminDashboard} />\n                <Route path=\"/admin/dashboard\" component={AdminDashboard} />\n                <Route path=\"/admin/contest/:id\" component={AdminContestDetail} />\n                <Route component={NotFound} />\n              </Switch>\n            </PrivateModeGuard>\n          </Route>\n        </Switch>\n      </main>\n      {showFooterAndBottomNav && <Footer />}\n      {showFooterAndBottomNav && <BottomNav />}\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <SolanaWalletProvider>\n          <PrivateModeProvider>\n            <TooltipProvider>\n              <Toaster />\n              <Router />\n            </TooltipProvider>\n          </PrivateModeProvider>\n        </SolanaWalletProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3409},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/EditSubmissionModal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { X } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\n\ninterface EditSubmissionModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (data: { title: string; description: string; tags: string[] }) => void;\n  submission: {\n    id: string;\n    title: string;\n    description?: string;\n    tags?: string[];\n  };\n}\n\nexport function EditSubmissionModal({ isOpen, onClose, onSubmit, submission }: EditSubmissionModalProps) {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [tagsInput, setTagsInput] = useState('');\n\n  useEffect(() => {\n    if (submission && isOpen) {\n      setTitle(submission.title || '');\n      setDescription(submission.description || '');\n      setTagsInput(submission.tags?.join(', ') || '');\n    }\n  }, [submission, isOpen]);\n\n  // Handle browser back button and Escape key\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const modalId = Date.now();\n\n    // Push unique history state when modal opens\n    window.history.pushState({ modal: 'editSubmission', modalId }, '');\n\n    // Handle Escape key\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        onClose();\n      }\n    };\n\n    // Handle browser back button\n    const handlePopState = () => {\n      // Close modal when going back in history\n      if (window.history.state?.modalId !== modalId) {\n        onClose();\n      }\n    };\n\n    window.addEventListener('keydown', handleEscape);\n    window.addEventListener('popstate', handlePopState);\n\n    return () => {\n      window.removeEventListener('keydown', handleEscape);\n      window.removeEventListener('popstate', handlePopState);\n    };\n  }, [isOpen, onClose]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Parse tags from comma-separated input\n    const tags = tagsInput\n      .split(',')\n      .map(tag => tag.trim())\n      .filter(tag => tag.length > 0);\n\n    onSubmit({ title, description, tags });\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/50\" onClick={onClose}>\n      <div \n        className=\"bg-background rounded-2xl p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto\"\n        onClick={(e) => e.stopPropagation()}\n        data-testid=\"edit-submission-modal\"\n      >\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-2xl font-bold\">Edit Submission</h2>\n          <button\n            onClick={onClose}\n            className=\"p-2 hover:bg-muted rounded-lg transition-colors\"\n            data-testid=\"close-modal-button\"\n          >\n            <X className=\"w-5 h-5\" />\n          </button>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"title\">Title *</Label>\n            <Input\n              id=\"title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              placeholder=\"Enter submission title\"\n              required\n              data-testid=\"input-title\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea\n              id=\"description\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              placeholder=\"Describe your submission...\"\n              rows={4}\n              data-testid=\"input-description\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"tags\">Tags</Label>\n            <Input\n              id=\"tags\"\n              value={tagsInput}\n              onChange={(e) => setTagsInput(e.target.value)}\n              placeholder=\"Enter tags separated by commas (e.g., digital art, abstract, colorful)\"\n              data-testid=\"input-tags\"\n            />\n            <p className=\"text-sm text-muted-foreground\">Separate tags with commas</p>\n          </div>\n\n          <div className=\"flex items-center justify-end gap-3 pt-4 border-t border-border\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onClose}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              className=\"gradient-glory hover:opacity-90 transition-opacity\"\n              data-testid=\"button-save\"\n            >\n              Save Changes\n            </Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4840},"client/src/pages/my-submissions.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Image, Share2, Expand, Trash2, Play, X, User, Calendar } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { SubmissionWithUser } from \"@shared/schema\";\nimport { GlassButton } from \"@/components/ui/glass-button\";\n\nexport default function MySubmissions() {\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [selectedSubmission, setSelectedSubmission] = useState<SubmissionWithUser | null>(null);\n  const [activeCardId, setActiveCardId] = useState<string | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Handle browser back button and Escape key for lightbox modal\n  useEffect(() => {\n    if (!selectedSubmission) return;\n\n    const modalId = Date.now();\n\n    // Push unique history state when modal opens\n    window.history.pushState({ modal: 'galleryLightbox', modalId }, '');\n\n    // Handle Escape key\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        // Remove focus/hover state to prevent visual artifacts\n        (document.activeElement as HTMLElement)?.blur();\n        setSelectedSubmission(null);\n      }\n    };\n\n    // Handle browser back button\n    const handlePopState = () => {\n      // Close modal when going back in history\n      if (window.history.state?.modalId !== modalId) {\n        setSelectedSubmission(null);\n      }\n    };\n\n    window.addEventListener('keydown', handleEscape);\n    window.addEventListener('popstate', handlePopState);\n\n    return () => {\n      window.removeEventListener('keydown', handleEscape);\n      window.removeEventListener('popstate', handlePopState);\n    };\n  }, [selectedSubmission]);\n\n  // Always fetch all submissions for accurate counts\n  const { data: allSubmissions, isLoading } = useQuery<SubmissionWithUser[]>({\n    queryKey: [\"/api/me/submissions\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/me/submissions`, {\n        credentials: \"include\"\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch submissions\");\n      return response.json();\n    }\n  });\n\n  const deleteSubmissionMutation = useMutation({\n    mutationFn: async (submissionId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/submissions/${submissionId}`);\n      if (!response.ok) throw new Error(\"Failed to delete submission\");\n      return await response.json();\n    },\n    onMutate: async (submissionId: string) => {\n      // Cancel outgoing refetches\n      await queryClient.cancelQueries({ queryKey: [\"/api/me/submissions\"] });\n      \n      // Snapshot previous value\n      const previousSubmissions = queryClient.getQueryData([\"/api/me/submissions\"]);\n      \n      // Optimistically update - immediately remove from UI\n      queryClient.setQueryData<SubmissionWithUser[]>([\"/api/me/submissions\"], (old) => \n        old?.filter(s => s.id !== submissionId) || []\n      );\n      \n      return { previousSubmissions };\n    },\n    onSuccess: () => {\n      // Invalidate all submissions caches to remove deleted submission everywhere\n      queryClient.invalidateQueries({ queryKey: [\"/api/me/submissions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      toast({\n        title: \"Submission deleted\",\n        description: \"Your submission has been permanently deleted.\",\n      });\n    },\n    onError: (error: any, _variables, context) => {\n      // Rollback on error\n      if (context?.previousSubmissions) {\n        queryClient.setQueryData([\"/api/me/submissions\"], context.previousSubmissions);\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete submission.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleShare = (submission: SubmissionWithUser) => {\n    const shareUrl = `${window.location.origin}/submission/${submission.id}`;\n    \n    if (navigator.share) {\n      navigator.share({\n        title: submission.title,\n        text: `Check out this amazing submission: ${submission.title}`,\n        url: shareUrl,\n      }).catch(() => {\n        fallbackShare(shareUrl);\n      });\n    } else {\n      fallbackShare(shareUrl);\n    }\n  };\n\n  const fallbackShare = (url: string) => {\n    navigator.clipboard.writeText(url).then(() => {\n      toast({\n        title: \"Link copied!\",\n        description: \"Submission link has been copied to clipboard.\",\n      });\n    }).catch(() => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy link to clipboard.\",\n        variant: \"destructive\",\n      });\n    });\n  };\n\n  const handleExpand = (submission: SubmissionWithUser) => {\n    setSelectedSubmission(submission);\n  };\n\n  const handleDelete = (submissionId: string) => {\n    if (confirm('Are you sure you want to delete this submission? This action cannot be undone.')) {\n      deleteSubmissionMutation.mutate(submissionId);\n    }\n  };\n\n  const handleCardClick = (e: React.MouseEvent, submissionId: string) => {\n    // Only toggle on mobile (below lg breakpoint)\n    if (window.innerWidth < 1024) {\n      e.stopPropagation();\n      setActiveCardId(activeCardId === submissionId ? null : submissionId);\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return <Badge className=\"bg-green-500/20 text-green-400 border-green-500/30\">Approved</Badge>;\n      case \"pending\":\n        return <Badge className=\"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\">Pending</Badge>;\n      case \"rejected\":\n        return <Badge className=\"bg-red-500/20 text-red-400 border-red-500/30\">Rejected</Badge>;\n      default:\n        return <Badge>{status}</Badge>;\n    }\n  };\n\n  const statusCounts = {\n    all: allSubmissions?.length || 0,\n    pending: allSubmissions?.filter(s => s.status === \"pending\").length || 0,\n    approved: allSubmissions?.filter(s => s.status === \"approved\").length || 0,\n    rejected: allSubmissions?.filter(s => s.status === \"rejected\").length || 0\n  };\n\n  const filteredSubmissions = (statusFilter === \"all\" \n    ? allSubmissions \n    : allSubmissions?.filter(s => s.status === statusFilter))?.filter(s => s.mediaUrl);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-950 via-purple-950/20 to-gray-950 pb-32 md:pb-0\">\n      <div className=\"container mx-auto px-4 py-6 md:py-8 max-w-7xl\">\n        <div className=\"mb-6 md:mb-8\">\n          <h1 className=\"text-3xl md:text-4xl font-bold mb-1 md:mb-2 bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent\" data-testid=\"heading-my-submissions\">\n            My Gallery\n          </h1>\n          <p className=\"text-sm md:text-base text-gray-400\" data-testid=\"text-gallery-description\">\n            View all your uploaded creative works\n          </p>\n        </div>\n\n        <Tabs value={statusFilter} onValueChange={setStatusFilter} className=\"mb-6 md:mb-8\">\n          <TabsList className=\"bg-white/5 border border-white/10\">\n            <TabsTrigger value=\"all\" data-testid=\"tab-all\">\n              All ({statusCounts.all})\n            </TabsTrigger>\n            <TabsTrigger value=\"pending\" data-testid=\"tab-pending\">\n              Pending ({statusCounts.pending})\n            </TabsTrigger>\n            <TabsTrigger value=\"approved\" data-testid=\"tab-approved\">\n              Approved ({statusCounts.approved})\n            </TabsTrigger>\n            <TabsTrigger value=\"rejected\" data-testid=\"tab-rejected\">\n              Rejected ({statusCounts.rejected})\n            </TabsTrigger>\n          </TabsList>\n        </Tabs>\n\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <Card key={i} className=\"bg-white/5 border-white/10\">\n                <CardContent className=\"p-0\">\n                  <Skeleton className=\"w-full h-64\" />\n                  <div className=\"p-4\">\n                    <Skeleton className=\"h-6 w-3/4 mb-2\" />\n                    <Skeleton className=\"h-4 w-1/2\" />\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : filteredSubmissions && filteredSubmissions.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredSubmissions.map((submission) => (\n              <Card\n                key={submission.id}\n                className=\"group relative overflow-hidden hover:border-primary/50 transition-all duration-300 rounded-2xl shadow-lg hover:shadow-xl\"\n                data-testid={`submission-card-${submission.id}`}\n              >\n                <div className=\"relative overflow-hidden rounded-t-2xl aspect-square\" onClick={(e) => handleCardClick(e, submission.id)}>\n                  <img\n                    src={submission.type === \"video\" ? submission.thumbnailUrl || submission.mediaUrl : submission.mediaUrl}\n                    alt={submission.title}\n                    className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n                    loading=\"lazy\"\n                    onError={(e) => {\n                      const target = e.target as HTMLImageElement;\n                      target.src = 'data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"400\" height=\"400\"%3E%3Crect fill=\"%23334155\" width=\"400\" height=\"400\"/%3E%3Ctext fill=\"%239ca3af\" font-family=\"system-ui\" font-size=\"48\" x=\"50%25\" y=\"50%25\" text-anchor=\"middle\" dominant-baseline=\"middle\"%3E%3Ctspan x=\"50%25\" dy=\"-20\"%3E' + (submission.type === 'video' ? '🎬' : '🖼️') + '%3C/tspan%3E%3Ctspan x=\"50%25\" dy=\"60\" font-size=\"16\"%3EImage not available%3C/tspan%3E%3C/text%3E%3C/svg%3E';\n                      target.onerror = null;\n                    }}\n                  />\n\n                  {/* Hover Overlay */}\n                  <div className=\"absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-all duration-300\">\n                    <div className={`absolute top-2 sm:top-3 right-2 sm:right-3 flex flex-row items-center gap-1 sm:gap-2 ${activeCardId === submission.id ? 'opacity-100 lg:opacity-0' : 'opacity-0'} lg:group-hover:opacity-100 transition-opacity duration-300`}>\n                      <GlassButton \n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"h-8 w-8 sm:h-10 sm:w-10 rounded-full\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleShare(submission);\n                        }}\n                        data-testid={`button-share-${submission.id}`}\n                      >\n                        <Share2 className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                      </GlassButton>\n                      <GlassButton \n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"h-8 w-8 sm:h-10 sm:w-10 rounded-full\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleExpand(submission);\n                        }}\n                        data-testid={`button-expand-${submission.id}`}\n                      >\n                        <Expand className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                      </GlassButton>\n                    </div>\n                  </div>\n\n                  {/* Status badge */}\n                  <div className=\"absolute top-3 left-3 z-10\">\n                    {getStatusBadge(submission.status)}\n                  </div>\n\n                  {/* Video play overlay */}\n                  {submission.type === \"video\" && (\n                    <div className=\"absolute inset-0 flex items-center justify-center bg-black/20 pointer-events-none\">\n                      <div className=\"w-16 h-16 rounded-full bg-primary/90 flex items-center justify-center\">\n                        <Play className=\"w-6 h-6 text-white ml-1\" />\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Delete button */}\n                  <div className={`absolute bottom-2 sm:bottom-3 right-2 sm:right-3 z-10 ${activeCardId === submission.id ? 'opacity-100 lg:opacity-0' : 'opacity-0'} lg:group-hover:opacity-100 transition-opacity duration-300`}>\n                    <GlassButton \n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"h-8 w-8 sm:h-10 sm:w-10 rounded-full bg-red-500/80 hover:bg-red-500\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleDelete(submission.id);\n                      }}\n                      disabled={deleteSubmissionMutation.isPending}\n                      data-testid={`button-delete-${submission.id}`}\n                    >\n                      <Trash2 className=\"h-3 w-3 sm:h-4 sm:w-4 text-white\" />\n                    </GlassButton>\n                  </div>\n                </div>\n\n                <CardContent className={`absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/90 via-black/70 to-transparent ${activeCardId === submission.id ? 'opacity-100 lg:opacity-0' : 'opacity-0'} lg:group-hover:opacity-100 transition-opacity duration-300 rounded-b-2xl`}>\n                  <h3 className=\"font-semibold text-lg mb-2 line-clamp-1 text-white drop-shadow-lg\">\n                    {submission.title}\n                  </h3>\n\n                  <div className=\"text-gray-200 text-xs truncate\">\n                    {submission.contest?.title || submission.contestName || 'Contest deleted'}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-20\">\n            <div className=\"inline-block p-6 bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl mb-4\">\n              <Image className=\"w-16 h-16 text-purple-400 mx-auto\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2 text-white\" data-testid=\"text-no-submissions\">\n              No submissions yet\n            </h3>\n            <p className=\"text-gray-400\" data-testid=\"text-no-submissions-description\">\n              {statusFilter === \"all\" \n                ? \"Start creating and uploading your work to contests!\"\n                : `You don't have any ${statusFilter} submissions.`}\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Fullscreen Lightbox Modal */}\n      {selectedSubmission && (\n        <div \n          className=\"fixed inset-0 z-50 bg-black\"\n          onClick={() => setSelectedSubmission(null)}\n          data-testid=\"lightbox-overlay\"\n        >\n          {/* Full-screen image */}\n          <div className=\"absolute inset-0 flex items-center justify-center z-0\">\n            <img\n              src={selectedSubmission.type === \"video\" ? selectedSubmission.thumbnailUrl || selectedSubmission.mediaUrl : selectedSubmission.mediaUrl}\n              alt={selectedSubmission.title}\n              className=\"max-w-full max-h-full object-contain\"\n              data-testid=\"lightbox-image\"\n              onClick={(e) => e.stopPropagation()}\n            />\n          </div>\n\n          {/* Top Left - Share and Delete Icons */}\n          <div className=\"absolute top-6 left-6 flex gap-3 z-30\">\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                handleShare(selectedSubmission);\n              }}\n              className=\"p-3 rounded-full bg-black/50 backdrop-blur-sm text-white hover:bg-primary/90 transition-all duration-300 border border-white/20\"\n              data-testid=\"button-share-lightbox\"\n            >\n              <Share2 className=\"h-6 w-6\" />\n            </button>\n            \n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                setSelectedSubmission(null);\n                handleDelete(selectedSubmission.id);\n              }}\n              className=\"p-3 rounded-full bg-black/50 backdrop-blur-sm text-white hover:bg-red-500 transition-all duration-300 border border-white/20\"\n              data-testid=\"button-delete-lightbox\"\n            >\n              <Trash2 className=\"h-6 w-6\" />\n            </button>\n          </div>\n\n          {/* Top Right - Close Icon */}\n          <button\n            onClick={() => setSelectedSubmission(null)}\n            className=\"absolute top-6 right-6 p-3 rounded-full bg-black/50 backdrop-blur-sm text-white hover:bg-red-500 transition-all duration-300 border border-white/20 z-30\"\n            data-testid=\"button-close-lightbox\"\n          >\n            <X className=\"h-6 w-6\" />\n          </button>\n\n          {/* Bottom Info Bar */}\n          <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 via-black/50 to-transparent p-6 z-20\">\n            <div className=\"max-w-4xl mx-auto\">\n              <h2 className=\"text-2xl font-bold text-white mb-2\" data-testid=\"text-submission-title\">\n                {selectedSubmission.title}\n              </h2>\n              {selectedSubmission.description && (\n                <p className=\"text-gray-300 text-sm mb-3\" data-testid=\"text-submission-description\">\n                  {selectedSubmission.description}\n                </p>\n              )}\n              \n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"h-8 w-8 rounded-full bg-violet-600/20 border border-violet-500/30 flex items-center justify-center\">\n                    <User className=\"h-4 w-4 text-violet-400\" />\n                  </div>\n                  <div>\n                    <p className=\"text-white font-semibold text-sm\" data-testid=\"text-creator-username\">\n                      @{selectedSubmission.user?.username || 'You'}\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center gap-4 text-sm text-gray-400\">\n                  <div className=\"flex items-center gap-2\">\n                    <Calendar className=\"h-4 w-4\" />\n                    <span>{new Date(selectedSubmission.createdAt).toLocaleDateString()}</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <Badge className={\n                      selectedSubmission.status === \"approved\" ? \"bg-green-500/20 text-green-400 border-green-500/30\" :\n                      selectedSubmission.status === \"pending\" ? \"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\" :\n                      \"bg-red-500/20 text-red-400 border-red-500/30\"\n                    }>\n                      {selectedSubmission.status}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":19347},"server/services/rate-limiter.ts":{"content":"// Simple in-memory rate limiter\n// In production, this should use Redis for distributed rate limiting\n\ninterface RateLimitEntry {\n  count: number;\n  windowStart: number;\n}\n\nclass RateLimiter {\n  private limits = new Map<string, RateLimitEntry>();\n  private readonly windowMs: number;\n  private readonly maxRequests: number;\n\n  constructor(windowMs = 60 * 60 * 1000, maxRequests = 30) { // 1 hour window, 30 max requests\n    this.windowMs = windowMs;\n    this.maxRequests = maxRequests;\n    \n    // Clean up expired entries every 5 minutes\n    setInterval(() => this.cleanup(), 5 * 60 * 1000);\n  }\n\n  isAllowed(key: string): boolean {\n    const now = Date.now();\n    const entry = this.limits.get(key);\n\n    if (!entry) {\n      this.limits.set(key, { count: 1, windowStart: now });\n      return true;\n    }\n\n    // Check if window has expired\n    if (now - entry.windowStart > this.windowMs) {\n      this.limits.set(key, { count: 1, windowStart: now });\n      return true;\n    }\n\n    // Check if limit exceeded\n    if (entry.count >= this.maxRequests) {\n      return false;\n    }\n\n    // Increment count\n    entry.count++;\n    this.limits.set(key, entry);\n    return true;\n  }\n\n  getRemainingRequests(key: string): number {\n    const entry = this.limits.get(key);\n    if (!entry) return this.maxRequests;\n    \n    const now = Date.now();\n    if (now - entry.windowStart > this.windowMs) {\n      return this.maxRequests;\n    }\n    \n    return Math.max(0, this.maxRequests - entry.count);\n  }\n\n  getResetTime(key: string): number {\n    const entry = this.limits.get(key);\n    if (!entry) return 0;\n    \n    return entry.windowStart + this.windowMs;\n  }\n\n  private cleanup() {\n    const now = Date.now();\n    for (const [key, entry] of this.limits.entries()) {\n      if (now - entry.windowStart > this.windowMs) {\n        this.limits.delete(key);\n      }\n    }\n  }\n}\n\nexport const votingRateLimiter = new RateLimiter(60 * 60 * 1000, 30); // 30 votes per hour\n","size_bytes":1956},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/pages/auth/login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { loginSchema } from \"@shared/schema\";\nimport { useAuth } from \"@/lib/auth\";\nimport { Link } from \"wouter\";\nimport { Eye, EyeOff, LogIn, Trophy } from \"lucide-react\";\nimport type { z } from \"zod\";\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { refetch } = useAuth();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      refetch();\n      setLocation(\"/\");\n    },\n  });\n\n  const onSubmit = (data: LoginFormData) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-background px-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        <div className=\"text-center\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <div className=\"w-12 h-12 rounded-lg gradient-glory flex items-center justify-center\">\n              <Trophy className=\"text-white text-xl\" />\n            </div>\n            <span className=\"text-3xl font-bold tracking-tight\">5best</span>\n          </div>\n          <h1 className=\"text-2xl font-bold\">Welcome back</h1>\n          <p className=\"text-muted-foreground\">Sign in to your account to compete and create</p>\n        </div>\n\n        <Card className=\"glass-effect border-border\">\n          <CardHeader className=\"space-y-1 pb-4\">\n            <CardTitle className=\"text-xl font-semibold\">Sign In</CardTitle>\n            <CardDescription>\n              Enter your credentials to access your account\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input\n                          data-testid=\"input-email\"\n                          {...field}\n                          type=\"email\"\n                          placeholder=\"your@email.com\"\n                          className=\"bg-muted border-border focus:border-primary\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            data-testid=\"input-password\"\n                            {...field}\n                            type={showPassword ? \"text\" : \"password\"}\n                            placeholder=\"Enter your password\"\n                            className=\"bg-muted border-border focus:border-primary pr-10\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowPassword(!showPassword)}\n                          >\n                            {showPassword ? (\n                              <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {loginMutation.error && (\n                  <Alert variant=\"destructive\">\n                    <AlertDescription data-testid=\"error-message\">\n                      {loginMutation.error instanceof Error ? loginMutation.error.message : \"Login failed\"}\n                    </AlertDescription>\n                  </Alert>\n                )}\n\n                <Button\n                  data-testid=\"button-submit\"\n                  type=\"submit\"\n                  className=\"w-full gradient-glory font-semibold\"\n                  disabled={loginMutation.isPending}\n                >\n                  {loginMutation.isPending ? (\n                    \"Signing in...\"\n                  ) : (\n                    <>\n                      <LogIn className=\"w-4 h-4 mr-2\" />\n                      Sign In\n                    </>\n                  )}\n                </Button>\n              </form>\n            </Form>\n\n            <div className=\"mt-6 text-center text-sm\">\n              <span className=\"text-muted-foreground\">Don't have an account? </span>\n              <Link href=\"/register\">\n                <Button variant=\"link\" className=\"p-0 h-auto text-primary font-semibold\" data-testid=\"link-register\">\n                  Sign up\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6405},"client/src/pages/register.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Trophy, Eye, EyeOff, CheckCircle } from \"lucide-react\";\nimport { useRegister, useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst registerSchema = z.object({\n  username: z.string()\n    .min(3, \"Username must be at least 3 characters\")\n    .max(50, \"Username must be less than 50 characters\")\n    .regex(/^[a-zA-Z0-9_-]+$/, \"Username can only contain letters, numbers, underscores, and hyphens\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string()\n    .min(6, \"Password must be at least 6 characters\")\n    .regex(/[A-Z]/, \"Password must contain at least one uppercase letter\")\n    .regex(/[a-z]/, \"Password must contain at least one lowercase letter\")\n    .regex(/[0-9]/, \"Password must contain at least one number\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype RegisterForm = z.infer<typeof registerSchema>;\n\nexport default function Register() {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [registrationSuccess, setRegistrationSuccess] = useState(false);\n  const [, setLocation] = useLocation();\n  const { data: user } = useAuth();\n  const register = useRegister();\n  const { toast } = useToast();\n\n  const {\n    register: registerField,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n  } = useForm<RegisterForm>({\n    resolver: zodResolver(registerSchema),\n  });\n\n  // Redirect if already logged in\n  if (user) {\n    setLocation(\"/\");\n    return null;\n  }\n\n  const onSubmit = async (data: RegisterForm) => {\n    try {\n      const response = await register.mutateAsync({\n        username: data.username,\n        email: data.email,\n        password: data.password,\n      });\n      \n      setRegistrationSuccess(true);\n      toast({\n        title: \"Registration successful!\",\n        description: \"Please wait for admin approval to start participating.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Registration failed\",\n        description: error.message || \"Please try again with different credentials.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (registrationSuccess) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\" data-testid=\"registration-success-page\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <CheckCircle className=\"w-16 h-16 text-success mx-auto mb-4\" />\n              <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"success-title\">\n                Registration Successful!\n              </h2>\n              <p className=\"text-muted-foreground mb-6\">\n                Your account has been created. Please wait for admin approval to start participating in contests.\n              </p>\n              <Link href=\"/login\" data-testid=\"success-login-link\">\n                <Button className=\"gradient-glory\">\n                  Go to Login\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\" data-testid=\"register-page\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"w-12 h-12 rounded-lg gradient-glory flex items-center justify-center\">\n              <Trophy className=\"text-white text-xl\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold\" data-testid=\"register-title\">\n            Join 5best\n          </CardTitle>\n          <p className=\"text-muted-foreground\">\n            Create your account and start competing for GLORY\n          </p>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\" data-testid=\"register-form\">\n            <div>\n              <Label htmlFor=\"username\">Username</Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                placeholder=\"Choose a unique username\"\n                {...registerField(\"username\")}\n                className={errors.username ? \"border-destructive\" : \"\"}\n                data-testid=\"input-username\"\n              />\n              {errors.username && (\n                <p className=\"text-sm text-destructive mt-1\" data-testid=\"error-username\">\n                  {errors.username.message}\n                </p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                {...registerField(\"email\")}\n                className={errors.email ? \"border-destructive\" : \"\"}\n                data-testid=\"input-email\"\n              />\n              {errors.email && (\n                <p className=\"text-sm text-destructive mt-1\" data-testid=\"error-email\">\n                  {errors.email.message}\n                </p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Create a strong password\"\n                  {...registerField(\"password\")}\n                  className={errors.password ? \"border-destructive pr-10\" : \"pr-10\"}\n                  data-testid=\"input-password\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  data-testid=\"toggle-password-visibility\"\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                  )}\n                </Button>\n              </div>\n              {errors.password && (\n                <p className=\"text-sm text-destructive mt-1\" data-testid=\"error-password\">\n                  {errors.password.message}\n                </p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"confirmPassword\"\n                  type={showConfirmPassword ? \"text\" : \"password\"}\n                  placeholder=\"Confirm your password\"\n                  {...registerField(\"confirmPassword\")}\n                  className={errors.confirmPassword ? \"border-destructive pr-10\" : \"pr-10\"}\n                  data-testid=\"input-confirm-password\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                  data-testid=\"toggle-confirm-password-visibility\"\n                >\n                  {showConfirmPassword ? (\n                    <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                  )}\n                </Button>\n              </div>\n              {errors.confirmPassword && (\n                <p className=\"text-sm text-destructive mt-1\" data-testid=\"error-confirm-password\">\n                  {errors.confirmPassword.message}\n                </p>\n              )}\n            </div>\n\n            {register.isError && (\n              <Alert variant=\"destructive\" data-testid=\"register-error\">\n                <AlertDescription>\n                  {(register.error as any)?.message || \"Registration failed. Please try again.\"}\n                </AlertDescription>\n              </Alert>\n            )}\n\n            <Button\n              type=\"submit\"\n              className=\"w-full gradient-glory hover:opacity-90 transition-opacity\"\n              disabled={isSubmitting || register.isPending}\n              data-testid=\"button-register\"\n            >\n              {register.isPending ? \"Creating account...\" : \"Create Account\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Already have an account?{\" \"}\n              <Link href=\"/login\" className=\"text-primary hover:underline\" data-testid=\"link-login\">\n                Sign in here\n              </Link>\n            </p>\n          </div>\n\n          <div className=\"mt-4 p-4 bg-muted rounded-lg\">\n            <p className=\"text-xs text-muted-foreground\">\n              <strong>Password requirements:</strong> At least 6 characters with uppercase, lowercase, and numbers.\n              Your account will be pending admin approval after registration.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10052},"client/src/components/contest-card.tsx":{"content":"import { Calendar, Trophy, Share2, Users } from \"lucide-react\";\nimport { GlassButton } from \"@/components/ui/glass-button\";\nimport { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Contest {\n  id: string;\n  title: string;\n  slug: string;\n  description: string;\n  rules: string;\n  coverImageUrl?: string;\n  topSubmissionImageUrl?: string;\n  status: string;\n  prizeGlory: number;\n  startAt: string;\n  endAt: string;\n  createdAt: string;\n}\n\ninterface ContestCardProps {\n  contest: Contest;\n}\n\nexport function ContestCard({ contest }: ContestCardProps) {\n  const [, setLocation] = useLocation();\n  const [timeLeft, setTimeLeft] = useState({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n  const { toast } = useToast();\n\n  const handleShare = async () => {\n    const shareUrl = `${window.location.origin}/contest/${contest.slug}`;\n    \n    if (navigator.share) {\n      try {\n        await navigator.share({\n          title: contest.title,\n          text: contest.description,\n          url: shareUrl,\n        });\n      } catch (error) {\n        if ((error as Error).name !== 'AbortError') {\n          console.error('Error sharing:', error);\n        }\n      }\n    } else {\n      // Fallback: copy to clipboard\n      try {\n        await navigator.clipboard.writeText(shareUrl);\n        toast({\n          title: \"Link copied!\",\n          description: \"Contest link copied to clipboard\",\n        });\n      } catch (error) {\n        console.error('Error copying to clipboard:', error);\n        toast({\n          title: \"Error\",\n          description: \"Could not copy link to clipboard\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    const calculateTimeLeft = () => {\n      if (contest.status === \"ended\") {\n        setTimeLeft({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n        return;\n      }\n\n      const endTime = new Date(contest.endAt).getTime();\n      const now = new Date().getTime();\n      const difference = endTime - now;\n\n      if (difference > 0) {\n        const days = Math.floor(difference / (1000 * 60 * 60 * 24));\n        const hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));\n        const seconds = Math.floor((difference % (1000 * 60)) / 1000);\n        setTimeLeft({ days, hours, minutes, seconds });\n      } else {\n        setTimeLeft({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n      }\n    };\n\n    calculateTimeLeft();\n    const timer = setInterval(calculateTimeLeft, 1000);\n    return () => clearInterval(timer);\n  }, [contest.endAt, contest.status]);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return \"bg-green-500/20 text-green-400 border-green-500/30\";\n      case \"upcoming\":\n        return \"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\";\n      case \"ended\":\n        return \"bg-gray-500/20 text-gray-400 border-gray-500/30\";\n      default:\n        return \"bg-primary/20 text-primary border-primary/30\";\n    }\n  };\n\n  const defaultImage = \"https://images.unsplash.com/photo-1618005182384-a83a8bd57fbe?w=800&q=80\";\n  const coverImage = contest.topSubmissionImageUrl || contest.coverImageUrl || defaultImage;\n  \n  return (\n    <div className=\"relative min-h-[600px] w-full overflow-hidden rounded-xl shadow-lg transition-all duration-300 hover:shadow-primary/20 hover:-translate-y-1 group border border-transparent hover:border-primary/50 hover:shadow-[0_0_30px_rgba(124,60,236,0.3)]\">\n      {/* Background image with smooth zoom on hover */}\n      <img\n        src={coverImage}\n        alt={contest.title}\n        className=\"absolute inset-0 h-full w-full object-cover transition-transform duration-700 ease-out group-hover:scale-105\"\n      />\n\n      {/* Readability overlays (always on) */}\n      {/* Soft dark veil that slightly increases on hover */}\n      <div className=\"absolute inset-0 bg-black/25 transition-colors duration-500 group-hover:bg-black/35\" />\n      {/* Gradient from bottom for text contrast */}\n      <div className=\"absolute inset-0 bg-gradient-to-t from-[#171121] via-[#171121]/70 to-transparent pointer-events-none\" />\n\n      {/* Content */}\n      <div className=\"relative z-10 flex flex-col justify-end h-full p-4 sm:p-6 text-center\">\n        {/* Status */}\n        <div className=\"absolute top-4 left-4\">\n          <div\n            className={`px-2 sm:px-3 py-1 rounded-full text-xs font-bold border backdrop-blur-sm ${getStatusColor(contest.status)}`}\n          >\n            {contest.status.charAt(0).toUpperCase() + contest.status.slice(1)}\n          </div>\n        </div>\n\n        {/* Prize */}\n        <div className=\"absolute top-4 right-4\">\n          <div className=\"glassmorphism px-3 py-1 rounded-lg\">\n            <div className=\"flex items-center gap-1 text-yellow-400\">\n              <Trophy size={14} />\n              <span className=\"text-xs sm:text-sm font-bold text-white\">\n                {contest.prizeGlory.toLocaleString()} {((contest as any).config?.currency) || 'GLORY'}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Title + Desc */}\n        <div className=\"mb-6\">\n          <h1 className=\"text-xl sm:text-2xl lg:text-3xl font-black text-white drop-shadow mb-2\">\n            {contest.title}\n          </h1>\n          <p className=\"text-xs sm:text-sm lg:text-base text-white/85 max-w-md mx-auto line-clamp-2\">\n            {contest.description}\n          </p>\n        </div>\n\n        {/* Countdown */}\n        <div className=\"mb-6 flex justify-center gap-1 sm:gap-2 lg:gap-3\">\n          {[\n            { label: \"Days\", val: String(timeLeft.days).padStart(2, \"0\") },\n            { label: \"Hours\", val: String(timeLeft.hours).padStart(2, \"0\") },\n            { label: \"Min\", val: String(timeLeft.minutes).padStart(2, \"0\") },\n            {\n              label: \"Sec\",\n              val: String(timeLeft.seconds).padStart(2, \"0\"),\n              pulse: true,\n            },\n          ].map(({ label, val, pulse }) => (\n            <div key={label} className=\"flex flex-col items-center\">\n              <div className=\"glassmorphism flex h-10 w-10 sm:h-12 sm:w-12 lg:h-16 lg:w-16 items-center justify-center rounded-lg\">\n                <p\n                  className={`text-sm sm:text-lg lg:text-2xl font-bold text-white ${pulse ? \"animate-pulse\" : \"\"}`}\n                >\n                  {val}\n                </p>\n              </div>\n              <p className=\"mt-1 text-xs font-medium text-white/75 uppercase tracking-widest\">\n                {label}\n              </p>\n            </div>\n          ))}\n        </div>\n\n        {/* Info: Status | Prize | Participants */}\n        <div className=\"mb-6 flex flex-wrap justify-center gap-2\">\n          <div className=\"glassmorphism flex-grow rounded-lg p-2 sm:p-3 text-center min-w-[100px] sm:min-w-[120px] max-w-[140px] sm:max-w-[160px]\">\n            <p className=\"text-xs font-medium text-white/80\">Status</p>\n            <p className=\"text-xs sm:text-sm lg:text-lg font-bold text-primary mt-1 capitalize\">\n              {contest.status}\n            </p>\n          </div>\n\n          {/* Prize tile removed */}\n\n          <div className=\"glassmorphism flex-grow rounded-lg p-2 sm:p-3 text-center min-w-[100px] sm:min-w-[120px] max-w-[140px] sm:max-w-[160px]\">\n            <p className=\"text-xs font-medium text-white/80\">Participants</p>\n            <p className=\"text-xs sm:text-sm lg:text-lg font-bold text-white mt-1\">\n              {typeof (contest as any).submissionCount === 'number'\n                ? (contest as any).submissionCount.toLocaleString()\n                : ((contest as any).submissions ? (contest as any).submissions.length : 0)}\n            </p>\n          </div>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex justify-center items-center\">\n          <GlassButton\n            onClick={() => setLocation(`/contest/${contest.slug}`)}\n            className=\"rounded-lg bg-background-dark/80 backdrop-blur-sm border border-primary/30 text-white font-bold transition-all duration-300 focus-ring hover:border-primary/50 glow-border px-6 py-3 text-base hover:bg-primary/20 w-full sm:w-auto min-w-[140px] sm:min-w-[160px] h-10 sm:h-12 px-4 sm:px-6 text-xs sm:text-sm tracking-wide hover:scale-105 flex items-center justify-center\"\n            data-testid={`button-join-contest-${contest.id}`}\n          >\n            {contest.status === \"ended\" ? (\n              <>\n                <Trophy size={16} className=\"mr-2\" />\n                <span className=\"truncate\">View Results</span>\n              </>\n            ) : (\n              <>\n                <Calendar size={16} className=\"mr-2\" />\n                <span className=\"truncate\">Join Contest</span>\n              </>\n            )}\n          </GlassButton>\n        </div>\n\n        {/* Share */}\n        <div className=\"mt-4 flex justify-center items-center gap-3\">\n          <p className=\"text-xs font-medium text-white/75\">Share:</p>\n          <div className=\"flex items-center gap-2\">\n            <button\n              onClick={handleShare}\n              className=\"group flex items-center justify-center rounded-full size-8 bg-primary/20 dark:bg-primary/30 hover:bg-primary/40 transition-colors\"\n              aria-label=\"Share contest\"\n            >\n              <Share2 className=\"text-white\" size={14} />\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9546},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Trophy, Eye, EyeOff } from \"lucide-react\";\nimport { useLogin, useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [showPassword, setShowPassword] = useState(false);\n  const [, setLocation] = useLocation();\n  const { data: user } = useAuth();\n  const login = useLogin();\n  const { toast } = useToast();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n  } = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n  });\n\n  // Redirect if already logged in\n  if (user) {\n    setLocation(\"/\");\n    return null;\n  }\n\n  const onSubmit = async (data: LoginForm) => {\n    try {\n      await login.mutateAsync(data);\n      toast({\n        title: \"Welcome back!\",\n        description: \"You have been successfully logged in.\",\n      });\n      setLocation(\"/\");\n    } catch (error: any) {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Please check your credentials and try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\" data-testid=\"login-page\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"w-12 h-12 rounded-lg gradient-glory flex items-center justify-center\">\n              <Trophy className=\"text-white text-xl\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold\" data-testid=\"login-title\">\n            Welcome back to 5best\n          </CardTitle>\n          <p className=\"text-muted-foreground\">\n            Sign in to your account to continue competing\n          </p>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\" data-testid=\"login-form\">\n            <div>\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                {...register(\"email\")}\n                className={errors.email ? \"border-destructive\" : \"\"}\n                data-testid=\"input-email\"\n              />\n              {errors.email && (\n                <p className=\"text-sm text-destructive mt-1\" data-testid=\"error-email\">\n                  {errors.email.message}\n                </p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Enter your password\"\n                  {...register(\"password\")}\n                  className={errors.password ? \"border-destructive pr-10\" : \"pr-10\"}\n                  data-testid=\"input-password\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  data-testid=\"toggle-password-visibility\"\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                  )}\n                </Button>\n              </div>\n              {errors.password && (\n                <p className=\"text-sm text-destructive mt-1\" data-testid=\"error-password\">\n                  {errors.password.message}\n                </p>\n              )}\n            </div>\n\n            {login.isError && (\n              <Alert variant=\"destructive\" data-testid=\"login-error\">\n                <AlertDescription>\n                  {(login.error as any)?.message || \"Login failed. Please try again.\"}\n                </AlertDescription>\n              </Alert>\n            )}\n\n            <Button\n              type=\"submit\"\n              className=\"w-full gradient-glory hover:opacity-90 transition-opacity\"\n              disabled={isSubmitting || login.isPending}\n              data-testid=\"button-login\"\n            >\n              {login.isPending ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Don't have an account?{\" \"}\n              <Link href=\"/register\" className=\"text-primary hover:underline\" data-testid=\"link-register\">\n                Sign up here\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5590},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/UploadCard.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { X, Upload, Image as ImageIcon, Loader2 } from \"lucide-react\";\nimport { GlassButton } from \"./GlassButton\";\nimport { Input } from \"./ui/input\";\nimport { Textarea } from \"./ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface UploadCardProps {\n  isOpen: boolean;\n  contestId: string;\n  onClose: () => void;\n  onSuccess: () => void;\n}\n\nexport function UploadCard({ isOpen, contestId, onClose, onSuccess }: UploadCardProps) {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [preview, setPreview] = useState<string>(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [isUploading, setIsUploading] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  if (!isOpen) return null;\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setSelectedFile(file);\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setPreview(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    const file = e.dataTransfer.files[0];\n    if (file && file.type.startsWith('image/')) {\n      setSelectedFile(file);\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setPreview(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (!selectedFile || !title.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a file and provide a title\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsUploading(true);\n\n    try {\n      const formData = new FormData();\n      formData.append('file', selectedFile);\n      formData.append('contestId', contestId);\n      formData.append('title', title);\n      formData.append('description', description);\n      formData.append('type', selectedFile.type.startsWith('video/') ? 'video' : 'image');\n\n      const response = await fetch('/api/submissions', {\n        method: 'POST',\n        credentials: 'include',\n        body: formData\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to submit');\n      }\n\n      toast({\n        title: \"Success!\",\n        description: \"Your submission has been uploaded and is pending approval\"\n      });\n\n      onSuccess();\n      handleClose();\n    } catch (error) {\n      toast({\n        title: \"Upload Failed\",\n        description: error instanceof Error ? error.message : \"Please try again\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const handleClose = () => {\n    setSelectedFile(null);\n    setPreview(\"\");\n    setTitle(\"\");\n    setDescription(\"\");\n    onClose();\n  };\n\n  return (\n    <div \n      className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/80 backdrop-blur-sm p-4\"\n      onClick={handleClose}\n      data-testid=\"upload-card-overlay\"\n    >\n      <div \n        className=\"relative max-w-2xl w-full max-h-[90vh] overflow-y-auto bg-slate-900/90 backdrop-blur-xl rounded-2xl border border-white/10 shadow-2xl shadow-violet-600/20\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* Header */}\n        <div className=\"sticky top-0 bg-slate-900/95 backdrop-blur-xl border-b border-white/10 p-6 flex items-center justify-between\">\n          <h2 className=\"text-2xl font-bold text-white\">Upload Submission</h2>\n          <button\n            onClick={handleClose}\n            className=\"p-2 hover:bg-white/10 rounded-lg transition-colors\"\n            data-testid=\"button-close-upload\"\n          >\n            <X className=\"h-6 w-6 text-slate-400\" />\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6 space-y-6\">\n          {/* File Upload Area */}\n          <div\n            onDragOver={(e) => e.preventDefault()}\n            onDrop={handleDrop}\n            onClick={() => fileInputRef.current?.click()}\n            className=\"relative border-2 border-dashed border-white/20 hover:border-violet-500/50 rounded-xl p-8 text-center cursor-pointer transition-colors bg-white/5\"\n            data-testid=\"upload-drop-zone\"\n          >\n            {preview ? (\n              <div className=\"relative\">\n                <img src={preview} alt=\"Preview\" className=\"max-h-64 mx-auto rounded-lg\" />\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setSelectedFile(null);\n                    setPreview(\"\");\n                  }}\n                  className=\"absolute top-2 right-2 p-2 bg-black/50 hover:bg-black/70 rounded-lg transition-colors\"\n                  data-testid=\"button-remove-file\"\n                >\n                  <X className=\"h-5 w-5 text-white\" />\n                </button>\n              </div>\n            ) : (\n              <div className=\"flex flex-col items-center gap-4\">\n                <div className=\"p-4 rounded-full bg-violet-600/20 border border-violet-500/30\">\n                  <ImageIcon className=\"h-12 w-12 text-violet-400\" />\n                </div>\n                <div>\n                  <p className=\"text-lg font-semibold text-white mb-1\">\n                    Drop your image here or click to browse\n                  </p>\n                  <p className=\"text-sm text-slate-400\">\n                    PNG, JPG up to 10MB\n                  </p>\n                </div>\n              </div>\n            )}\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              accept=\"image/*,video/*\"\n              onChange={handleFileSelect}\n              className=\"hidden\"\n              data-testid=\"input-file\"\n            />\n          </div>\n\n          {/* Title */}\n          <div>\n            <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n              Title *\n            </label>\n            <Input\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              placeholder=\"Enter submission title\"\n              className=\"bg-white/5 border-white/10 text-white\"\n              data-testid=\"input-title\"\n            />\n          </div>\n\n          {/* Description */}\n          <div>\n            <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n              Description (optional)\n            </label>\n            <Textarea\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              placeholder=\"Tell us about your submission...\"\n              rows={4}\n              className=\"bg-white/5 border-white/10 text-white\"\n              data-testid=\"input-description\"\n            />\n          </div>\n\n          {/* Submit Button */}\n          <GlassButton\n            onClick={handleSubmit}\n            disabled={!selectedFile || !title.trim() || isUploading}\n            variant=\"purple\"\n            className=\"w-full py-4 flex items-center justify-center gap-2\"\n            data-testid=\"button-submit-upload\"\n          >\n            {isUploading ? (\n              <>\n                <Loader2 className=\"h-5 w-5 animate-spin\" />\n                Uploading...\n              </>\n            ) : (\n              <>\n                <Upload className=\"h-5 w-5\" />\n                Submit Entry\n              </>\n            )}\n          </GlassButton>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7659},"server/services/file-upload.ts":{"content":"import { v2 as cloudinary } from \"cloudinary\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\n\n// Configure Cloudinary\ncloudinary.config({\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n  api_key: process.env.CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_API_SECRET,\n});\n\n// Check if Cloudinary is configured\nconst isCloudinaryConfigured = () => {\n  return !!(\n    process.env.CLOUDINARY_CLOUD_NAME &&\n    process.env.CLOUDINARY_API_KEY &&\n    process.env.CLOUDINARY_API_SECRET\n  );\n};\n\n// Local upload configuration\nconst localStorage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    const uploadsDir = path.join(process.cwd(), \"public\", \"uploads\");\n    if (!fs.existsSync(uploadsDir)) {\n      fs.mkdirSync(uploadsDir, { recursive: true });\n    }\n    cb(null, uploadsDir);\n  },\n  filename: (req, file, cb) => {\n    const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);\n    cb(null, file.fieldname + \"-\" + uniqueSuffix + path.extname(file.originalname));\n  },\n});\n\n// File filter\nconst fileFilter = (req: any, file: any, cb: any) => {\n  // Accept images and videos\n  if (file.mimetype.startsWith(\"image/\") || file.mimetype.startsWith(\"video/\")) {\n    cb(null, true);\n  } else {\n    cb(new Error(\"Only image and video files are allowed\"), false);\n  }\n};\n\nexport const upload = multer({\n  storage: localStorage,\n  fileFilter,\n  limits: {\n    fileSize: 100 * 1024 * 1024, // 100MB limit\n  },\n});\n\nexport async function uploadToCloudinary(file: Express.Multer.File): Promise<{\n  url: string;\n  publicId: string;\n  thumbnailUrl?: string;\n  resourceType: string;\n}> {\n  try {\n    const isVideo = file.mimetype.startsWith(\"video/\");\n    const resourceType = isVideo ? \"video\" : \"image\";\n    \n    // Upload to Cloudinary with optimization\n    const result = await cloudinary.uploader.upload(file.path, {\n      resource_type: resourceType,\n      folder: \"5best-submissions\",\n      // Auto-optimization settings\n      quality: \"auto:good\", // Automatic quality optimization\n      fetch_format: \"auto\", // Automatic format selection (WebP, AVIF when supported)\n    });\n\n    let thumbnailUrl: string | undefined;\n    \n    if (isVideo) {\n      // Generate video thumbnail using Cloudinary transformation\n      thumbnailUrl = cloudinary.url(result.public_id, {\n        resource_type: \"video\",\n        format: \"jpg\",\n        transformation: [\n          { width: 400, height: 400, crop: \"fill\", quality: \"auto:good\" },\n          { fetch_format: \"auto\" }\n        ]\n      });\n    }\n\n    return {\n      url: result.secure_url,\n      publicId: result.public_id,\n      thumbnailUrl,\n      resourceType,\n    };\n  } catch (error) {\n    throw new Error(`Cloudinary upload failed: ${error}`);\n  }\n}\n\nexport async function uploadFile(file: Express.Multer.File): Promise<{\n  url: string;\n  thumbnailUrl?: string;\n  cloudinaryPublicId?: string;\n  cloudinaryResourceType?: string;\n}> {\n  if (isCloudinaryConfigured()) {\n    try {\n      const result = await uploadToCloudinary(file);\n      \n      // Clean up local file\n      fs.unlinkSync(file.path);\n      \n      return {\n        url: result.url,\n        thumbnailUrl: result.thumbnailUrl,\n        cloudinaryPublicId: result.publicId,\n        cloudinaryResourceType: result.resourceType,\n      };\n    } catch (error) {\n      console.error(\"Cloudinary upload failed, falling back to local:\", error);\n    }\n  }\n\n  // Fallback to local storage\n  const url = `/uploads/${file.filename}`;\n  \n  let thumbnailUrl: string | undefined;\n  if (file.mimetype.startsWith(\"video/\")) {\n    // For videos, use a placeholder thumbnail in local mode\n    thumbnailUrl = \"/api/placeholder/video-thumbnail\";\n  }\n\n  return { url, thumbnailUrl };\n}\n\nexport async function deleteFile(\n  mediaUrl: string, \n  cloudinaryPublicId?: string | null,\n  cloudinaryResourceType?: string,\n  isLegacySubmission: boolean = false\n): Promise<void> {\n  try {\n    // Handle Cloudinary URLs\n    if (mediaUrl.includes('cloudinary.com')) {\n      let publicIdToDelete = cloudinaryPublicId;\n      let resourceType = cloudinaryResourceType || 'image';\n      \n      // If no publicId stored, check if this is legacy or gallery reuse\n      if (!publicIdToDelete) {\n        if (isLegacySubmission) {\n          // Legacy submission: parse URL to extract publicId\n          console.log('Legacy Cloudinary submission - parsing URL for deletion');\n          \n          const urlParts = mediaUrl.split('/');\n          const uploadIndex = urlParts.indexOf('upload');\n          \n          // Determine resource type from URL\n          const resourceTypeIndex = uploadIndex - 1;\n          if (resourceTypeIndex >= 0) {\n            resourceType = urlParts[resourceTypeIndex] === 'video' ? 'video' : 'image';\n          }\n          \n          if (uploadIndex !== -1) {\n            // Find the version part (starts with 'v' followed by numbers)\n            let versionIndex = -1;\n            for (let i = uploadIndex + 1; i < urlParts.length; i++) {\n              if (urlParts[i].match(/^v\\d+$/)) {\n                versionIndex = i;\n                break;\n              }\n            }\n            \n            if (versionIndex !== -1 && versionIndex + 1 < urlParts.length) {\n              // Get everything after version as the public_id path\n              const pathAfterVersion = urlParts.slice(versionIndex + 1).join('/');\n              // Remove file extension\n              publicIdToDelete = pathAfterVersion.replace(/\\.[^/.]+$/, '');\n            }\n          }\n        } else {\n          // No publicId and not legacy = gallery reuse, don't delete\n          console.log(`Skipping Cloudinary deletion - no publicId stored (likely gallery reuse): ${mediaUrl}`);\n          return;\n        }\n      }\n      \n      if (publicIdToDelete) {\n        await cloudinary.uploader.destroy(publicIdToDelete, {\n          resource_type: resourceType\n        });\n        console.log(`Deleted Cloudinary asset: ${publicIdToDelete} (${resourceType})`);\n      }\n    } else if (mediaUrl.startsWith('/uploads/')) {\n      // Local file - extract filename and delete\n      const fileName = mediaUrl.replace('/uploads/', '');\n      const filePath = path.join(process.cwd(), \"public\", \"uploads\", fileName);\n      \n      if (fs.existsSync(filePath)) {\n        fs.unlinkSync(filePath);\n        console.log(`Deleted local file: ${fileName}`);\n      }\n    }\n  } catch (error) {\n    console.error(`File deletion failed: ${error}`);\n    // Don't throw error - we still want to delete the database record even if file deletion fails\n  }\n}\n","size_bytes":6547},"client/src/lib/auth.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport interface User {\n  id: string;\n  username: string;\n  email: string;\n  role: string;\n  status: string;\n  gloryBalance: number;\n  solBalance: number;\n  usdcBalance: number;\n  avatarUrl?: string | null;\n  withdrawalAddress?: string | null;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport function useAuth() {\n  return useQuery<User | null>({\n    queryKey: [\"/api/me\"],\n    queryFn: async () => {\n      try {\n        const response = await fetch(\"/api/me\", { credentials: \"include\" });\n        if (response.status === 401) {\n          return null;\n        }\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch user\");\n        }\n        return await response.json();\n      } catch (error) {\n        return null;\n      }\n    },\n    staleTime: 5000, // Consider data stale after 5 seconds\n    refetchInterval: 30000, // Refetch every 30 seconds\n    refetchOnWindowFocus: true, // Refetch when window gets focus\n  });\n}\n\nexport function useLogin() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (data: { email: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n    },\n  });\n}\n\nexport function useRegister() {\n  return useMutation({\n    mutationFn: async (data: { username: string; email: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", data);\n      return await response.json();\n    },\n  });\n}\n\nexport function useLogout() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/auth/logout\");\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.clear();\n    },\n  });\n}\n\nexport function isAuthenticated(user: User | null | undefined): user is User {\n  return user != null;\n}\n\nexport function isAdmin(user: User | null | undefined): boolean {\n  return user?.role === \"admin\";\n}\n\nexport function isApproved(user: User | null | undefined): boolean {\n  return user?.status === \"approved\";\n}\n","size_bytes":2346},"client/src/components/ContestLightboxModal.tsx":{"content":"import { useEffect } from \"react\";\nimport { X, Heart, User, Calendar, Share2 } from \"lucide-react\";\nimport { GlassButton } from \"./GlassButton\";\n\ninterface ContestLightboxModalProps {\n  isOpen: boolean;\n  submission: {\n    id: string;\n    title: string;\n    description?: string;\n    mediaUrl: string;\n    userId: string;\n    user?: {\n      username: string;\n    };\n    createdAt: string;\n    voteCount?: number;\n    hasVoted?: boolean;\n  } | null;\n  onClose: () => void;\n  onVote?: (submissionId: string) => void;\n  onShare?: () => void;\n}\n\nexport function ContestLightboxModal({ \n  isOpen, \n  submission, \n  onClose, \n  onVote,\n  onShare\n}: ContestLightboxModalProps) {\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const modalId = Date.now();\n\n    // Push unique history state when modal opens\n    window.history.pushState({ modal: 'lightbox', modalId }, '');\n\n    // Handle Escape key\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        // Remove focus/hover state to prevent visual artifacts\n        (document.activeElement as HTMLElement)?.blur();\n        onClose();\n      }\n    };\n\n    // Handle browser back button\n    const handlePopState = () => {\n      // Close modal when going back in history\n      if (window.history.state?.modalId !== modalId) {\n        onClose();\n      }\n    };\n\n    window.addEventListener('keydown', handleEscape);\n    window.addEventListener('popstate', handlePopState);\n\n    return () => {\n      window.removeEventListener('keydown', handleEscape);\n      window.removeEventListener('popstate', handlePopState);\n    };\n  }, [isOpen, onClose]);\n\n  if (!isOpen || !submission) return null;\n\n  const handleVote = () => {\n    if (onVote) {\n      onVote(submission.id);\n    }\n  };\n\n  const handleShare = () => {\n    if (onShare) {\n      onShare();\n    } else {\n      // Fallback share functionality if no onShare prop provided\n      const shareUrl = `${window.location.origin}/submission/${submission.id}`;\n      \n      if (navigator.share) {\n        navigator.share({\n          title: submission.title,\n          text: `Check out this amazing submission: ${submission.title}`,\n          url: shareUrl,\n        }).catch(() => {\n          navigator.clipboard.writeText(shareUrl);\n        });\n      } else {\n        navigator.clipboard.writeText(shareUrl);\n      }\n    }\n  };\n\n  return (\n    <div \n      className=\"fixed inset-0 z-[100] bg-black\"\n      onClick={onClose}\n      data-testid=\"lightbox-overlay\"\n    >\n      {/* Full-screen image */}\n      <div className=\"absolute inset-0 flex items-center justify-center z-0\">\n        <img\n          src={submission.mediaUrl}\n          alt={submission.title}\n          className=\"max-w-full max-h-full object-contain\"\n          data-testid=\"lightbox-image\"\n          onClick={(e) => e.stopPropagation()}\n        />\n      </div>\n\n      {/* Top Left - Vote and Share Icons */}\n      <div className=\"absolute top-4 left-4 sm:top-6 sm:left-6 flex gap-2 sm:gap-3 z-30\">\n        <button\n          onClick={(e) => {\n            e.stopPropagation();\n            handleVote();\n          }}\n          className=\"p-2 sm:p-3 rounded-full bg-black/50 backdrop-blur-sm text-white hover:bg-primary/90 transition-all duration-300 border border-white/20\"\n          data-testid=\"button-vote-submission\"\n        >\n          <Heart \n            className={`h-5 w-5 sm:h-6 sm:w-6 ${submission.hasVoted ? 'fill-current text-red-500' : ''}`}\n          />\n        </button>\n        \n        <button\n          onClick={(e) => {\n            e.stopPropagation();\n            handleShare();\n          }}\n          className=\"p-2 sm:p-3 rounded-full bg-black/50 backdrop-blur-sm text-white hover:bg-primary/90 transition-all duration-300 border border-white/20\"\n          data-testid=\"button-share-submission\"\n        >\n          <Share2 className=\"h-5 w-5 sm:h-6 sm:w-6\" />\n        </button>\n      </div>\n\n      {/* Top Right - Close Icon */}\n      <button\n        onClick={onClose}\n        className=\"absolute top-4 right-4 sm:top-6 sm:right-6 p-2 sm:p-3 rounded-full bg-black/50 backdrop-blur-sm text-white hover:bg-red-500 transition-all duration-300 border border-white/20 z-30\"\n        data-testid=\"button-close-lightbox\"\n      >\n        <X className=\"h-5 w-5 sm:h-6 sm:w-6\" />\n      </button>\n\n      {/* Bottom Info Bar (Optional - can be toggled) */}\n      <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 via-black/50 to-transparent p-4 sm:p-6 z-20\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h2 className=\"text-lg sm:text-2xl font-bold text-white mb-1 sm:mb-2\" data-testid=\"text-submission-title\">\n            {submission.title}\n          </h2>\n          {submission.description && (\n            <p className=\"text-gray-300 text-xs sm:text-sm mb-2 sm:mb-3 line-clamp-2\" data-testid=\"text-submission-description\">\n              {submission.description}\n            </p>\n          )}\n          \n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center sm:justify-between gap-3 sm:gap-0\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"h-8 w-8 rounded-full bg-violet-600/20 border border-violet-500/30 flex items-center justify-center\">\n                <User className=\"h-4 w-4 text-violet-400\" />\n              </div>\n              <div>\n                <p className=\"text-white font-semibold text-sm\" data-testid=\"text-creator-username\">\n                  @{submission.user?.username || 'Unknown'}\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-4 text-sm text-gray-400\">\n              <div className=\"flex items-center gap-2\">\n                <Calendar className=\"h-4 w-4\" />\n                <span>{new Date(submission.createdAt).toLocaleDateString()}</span>\n              </div>\n              {submission.voteCount !== undefined && (\n                <div className=\"flex items-center gap-2\">\n                  <Heart className=\"h-4 w-4\" />\n                  <span>{submission.voteCount} votes</span>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6201},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/lib/wallet-provider.tsx":{"content":"import { createContext, useContext, useMemo, ReactNode, useCallback } from \"react\";\nimport {\n  ConnectionProvider,\n  WalletProvider,\n  useWallet as useSolanaWallet,\n} from '@solana/wallet-adapter-react';\nimport { WalletModalProvider } from '@solana/wallet-adapter-react-ui';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport bs58 from 'bs58';\n\n// Import default wallet adapter styles\nimport '@solana/wallet-adapter-react-ui/styles.css';\n\ninterface WalletContextType {\n  connected: boolean;\n  connecting: boolean;\n  publicKey: string | null;\n  connect: () => Promise<void>;\n  disconnect: () => void;\n  signMessage: (message: string) => Promise<string>;\n}\n\nconst WalletContext = createContext<WalletContextType | null>(null);\n\nexport function SolanaWalletProvider({ children }: { children: ReactNode }) {\n  // Use devnet for testing, can be changed to mainnet-beta for production\n  const network = import.meta.env.VITE_SOLANA_NETWORK || 'devnet';\n  const endpoint = useMemo(() => {\n    // Use custom RPC if provided, otherwise use default cluster API\n    const customRpc = import.meta.env.VITE_SOLANA_RPC_ENDPOINT;\n    if (customRpc) {\n      return customRpc;\n    }\n    return clusterApiUrl(network as 'devnet' | 'testnet' | 'mainnet-beta');\n  }, [network]);\n  \n  // Empty array - Wallet Standard automatically detects Phantom, Solflare, Backpack, etc.\n  const wallets = useMemo(() => [], []);\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletModalProvider>\n          <WalletContextWrapper>\n            {children}\n          </WalletContextWrapper>\n        </WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}\n\n// Wrapper to provide compatibility with existing useWallet hook\nfunction WalletContextWrapper({ children }: { children: ReactNode }) {\n  const { \n    publicKey: solanaPublicKey, \n    connected, \n    connecting, \n    connect: solanaConnect,\n    disconnect: solanaDisconnect,\n    signMessage: solanaSignMessage,\n  } = useSolanaWallet();\n\n  const publicKey = solanaPublicKey?.toBase58() || null;\n\n  const connect = useCallback(async () => {\n    if (!solanaConnect) {\n      throw new Error(\"Wallet adapter not initialized\");\n    }\n    await solanaConnect();\n  }, [solanaConnect]);\n\n  const disconnect = useCallback(async () => {\n    if (solanaDisconnect) {\n      await solanaDisconnect();\n    }\n  }, [solanaDisconnect]);\n\n  const signMessage = useCallback(async (message: string): Promise<string> => {\n    if (!solanaSignMessage || !connected) {\n      throw new Error(\"Wallet not connected\");\n    }\n\n    const encodedMessage = new TextEncoder().encode(message);\n    const signature = await solanaSignMessage(encodedMessage);\n    \n    // Convert Uint8Array to base58\n    return bs58.encode(signature);\n  }, [solanaSignMessage, connected]);\n\n  const value = useMemo(() => ({\n    connected,\n    connecting,\n    publicKey,\n    connect,\n    disconnect,\n    signMessage,\n  }), [connected, connecting, publicKey, connect, disconnect, signMessage]);\n\n  return (\n    <WalletContext.Provider value={value}>\n      {children}\n    </WalletContext.Provider>\n  );\n}\n\nexport function useWallet() {\n  const context = useContext(WalletContext);\n  if (!context) {\n    throw new Error(\"useWallet must be used within SolanaWalletProvider\");\n  }\n  return context;\n}\n\n// Export additional wallet adapter hooks for advanced usage\nexport { useConnection } from '@solana/wallet-adapter-react';\nexport { useWallet as useSolanaWalletAdapter } from '@solana/wallet-adapter-react';\n\ndeclare global {\n  interface Window {\n    solana?: any;\n  }\n}\n","size_bytes":3629},"client/src/pages/admin/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { \n  Shield, \n  Users, \n  Image as ImageIcon, \n  Trophy, \n  Crown, \n  Clock, \n  Search, \n  CheckCircle, \n  XCircle,\n  AlertTriangle,\n  Calendar,\n  Eye,\n  BarChart3,\n  DollarSign,\n  Loader2,\n  Trash2,\n  Edit3,\n  Copy,\n  Download\n} from \"lucide-react\";\nimport { useAuth, isAdmin } from \"@/lib/auth\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { CreateContestModal } from \"@/components/CreateContestModal\";\n\nexport default function AdminDashboard() {\n  const { data: user } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [userStatusFilter, setUserStatusFilter] = useState(\"all\");\n  const [userSearchQuery, setUserSearchQuery] = useState(\"\");\n  const [submissionStatusFilter, setSubmissionStatusFilter] = useState(\"all\");\n  const [submissionContestFilter, setSubmissionContestFilter] = useState(\"all\");\n  const [submissionSearchQuery, setSubmissionSearchQuery] = useState(\"\");\n  const [isCreateContestModalOpen, setIsCreateContestModalOpen] = useState(false);\n  \n  // Bulk deletion state\n  const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);\n  const [bulkDeleteDialogOpen, setBulkDeleteDialogOpen] = useState(false);\n  const [deleteConfirmText, setDeleteConfirmText] = useState(\"\");\n\n  // Bulk submission actions state\n  const [selectedSubmissionIds, setSelectedSubmissionIds] = useState<string[]>([]);\n\n  // Bulk contest actions state\n  const [selectedContestIds, setSelectedContestIds] = useState<string[]>([]);\n  const [bulkDeleteContestsDialogOpen, setBulkDeleteContestsDialogOpen] = useState(false);\n  const [deleteContestsConfirmText, setDeleteContestsConfirmText] = useState(\"\");\n\n  // Bulk cashout actions state\n  const [selectedCashoutIds, setSelectedCashoutIds] = useState<string[]>([]);\n\n  // Balance edit state\n  const [gloryEditDialogOpen, setGloryEditDialogOpen] = useState(false);\n  const [selectedUserId, setSelectedUserId] = useState(\"\");\n  const [gloryAmountInput, setGloryAmountInput] = useState(\"\");\n  const [selectedCurrency, setSelectedCurrency] = useState<\"GLORY\" | \"SOL\" | \"USDC\">(\"GLORY\");\n\n  // Clear audit logs state\n  const [clearLogsDialogOpen, setClearLogsDialogOpen] = useState(false);\n  const [clearLogsConfirmText, setClearLogsConfirmText] = useState(\"\");\n\n  // Redirect if not admin\n  if (!user || !isAdmin(user)) {\n    setLocation(\"/\");\n    return null;\n  }\n\n  // Fetch admin data\n  const { data: users = [] } = useQuery({\n    queryKey: [\"/api/admin/users\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/users\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch users\");\n      return response.json();\n    },\n  });\n\n  const { data: submissions = [] } = useQuery({\n    queryKey: [\"/api/admin/submissions\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/submissions\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch submissions\");\n      return response.json();\n    },\n  });\n\n  const { data: contests = [] } = useQuery({\n    queryKey: [\"/api/contests\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/contests\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch contests\");\n      return response.json();\n    },\n  });\n\n  const { data: auditLogs = [] } = useQuery({\n    queryKey: [\"/api/admin/audit-logs\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/audit-logs\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch audit logs\");\n      return response.json();\n    },\n  });\n\n  const { data: cashoutRequests = [] } = useQuery({\n    queryKey: [\"/api/admin/cashout/requests\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/cashout/requests\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch cashout requests\");\n      const data = await response.json();\n      return data.requests;\n    },\n    refetchInterval: 10000,\n  });\n\n  // Site Settings\n  const { data: siteSettings } = useQuery<{ privateMode: boolean }>({\n    queryKey: [\"/api/admin/settings\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/settings\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch site settings\");\n      return response.json();\n    },\n  });\n\n  // Mutations\n  const updateUserStatusMutation = useMutation({\n    mutationFn: async ({ userId, status }: { userId: string; status: string }) => {\n      const response = await apiRequest(\"PATCH\", `/api/admin/users/${userId}`, { status });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"User status updated\",\n        description: \"The user's status has been successfully updated.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update user status.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateSubmissionStatusMutation = useMutation({\n    mutationFn: async ({ submissionId, status }: { submissionId: string; status: string }) => {\n      const response = await apiRequest(\"PATCH\", `/api/admin/submissions/${submissionId}`, { status });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/submissions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      toast({\n        title: \"Submission status updated\",\n        description: \"The submission's status has been successfully updated.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update submission status.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteSubmissionMutation = useMutation({\n    mutationFn: async (submissionId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/admin/submissions/${submissionId}`);\n      if (!response.ok) throw new Error(\"Failed to delete submission\");\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/submissions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      toast({\n        title: \"Submission deleted\",\n        description: \"The submission has been permanently deleted.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete submission.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const bulkApproveSubmissionsMutation = useMutation({\n    mutationFn: async (submissionIds: string[]) => {\n      const response = await apiRequest(\"PATCH\", \"/api/admin/submissions/bulk/approve\", { submissionIds });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/submissions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      setSelectedSubmissionIds([]);\n      toast({\n        title: \"Submissions approved\",\n        description: `Successfully approved ${data.count} submission(s).`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to approve submissions.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const bulkRejectSubmissionsMutation = useMutation({\n    mutationFn: async (submissionIds: string[]) => {\n      const response = await apiRequest(\"PATCH\", \"/api/admin/submissions/bulk/reject\", { submissionIds });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/submissions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      setSelectedSubmissionIds([]);\n      toast({\n        title: \"Submissions rejected\",\n        description: `Successfully rejected ${data.count} submission(s).`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reject submissions.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const bulkDeleteSubmissionsMutation = useMutation({\n    mutationFn: async (submissionIds: string[]) => {\n      const response = await apiRequest(\"DELETE\", \"/api/admin/submissions/bulk\", { submissionIds });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/submissions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      setSelectedSubmissionIds([]);\n      toast({\n        title: \"Submissions deleted\",\n        description: `Successfully deleted ${data.count} submission(s).`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete submissions.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const cleanupBrokenSubmissionsMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/admin/cleanup-broken-submissions\", {});\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/submissions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/me/submissions\"] });\n      toast({\n        title: \"Cleanup completed\",\n        description: data.message || `Successfully removed ${data.deletedCount} broken submission(s).`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to cleanup broken submissions.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const activateContestMutation = useMutation({\n    mutationFn: async (contestId: string) => {\n      const response = await apiRequest(\"PATCH\", `/api/admin/contests/${contestId}/activate`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contests\"] });\n      toast({\n        title: \"Contest activated\",\n        description: \"Contest is now active and users can submit entries.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to activate contest.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const endContestMutation = useMutation({\n    mutationFn: async (contestId: string) => {\n      const response = await apiRequest(\"POST\", `/api/admin/contests/${contestId}/end`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contests\"] });\n      toast({\n        title: \"Contest ended\",\n        description: \"Contest has been ended and rewards have been distributed.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to end contest.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const bulkActivateContestsMutation = useMutation({\n    mutationFn: async (contestIds: string[]) => {\n      const response = await apiRequest(\"PATCH\", \"/api/admin/contests/bulk/activate\", { contestIds });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contests\"] });\n      setSelectedContestIds([]);\n      toast({\n        title: \"Contests activated\",\n        description: `Successfully activated ${data.updatedCount} contests.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to activate contests.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const bulkEndContestsMutation = useMutation({\n    mutationFn: async (contestIds: string[]) => {\n      const response = await apiRequest(\"POST\", \"/api/admin/contests/bulk/end\", { contestIds });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contests\"] });\n      setSelectedContestIds([]);\n      toast({\n        title: \"Contests ended\",\n        description: `Successfully ended ${data.endedCount} contests and distributed rewards.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to end contests.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const bulkDeleteContestsMutation = useMutation({\n    mutationFn: async (contestIds: string[]) => {\n      const response = await apiRequest(\"DELETE\", \"/api/admin/contests/bulk\", { contestIds });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contests\"] });\n      setSelectedContestIds([]);\n      setBulkDeleteContestsDialogOpen(false);\n      setDeleteContestsConfirmText(\"\");\n      toast({\n        title: \"Contests deleted\",\n        description: `Successfully deleted ${data.deletedCount} contests.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete contests.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createContestMutation = useMutation({\n    mutationFn: async (formData: any) => {\n      // The CreateContestModal already sends data in the correct format\n      // with all processing done (slug, dates, config object, etc.)\n      const response = await apiRequest(\"POST\", \"/api/admin/contests\", formData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contests\"] });\n      setIsCreateContestModalOpen(false);\n      toast({\n        title: \"Contest created\",\n        description: \"The contest has been successfully created.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create contest.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const approveCashoutMutation = useMutation({\n    mutationFn: async (requestId: string) => {\n      return apiRequest(\"POST\", \"/api/admin/cashout/approve\", { requestId });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/cashout/requests\"] });\n      toast({\n        title: \"Cashout Approved\",\n        description: \"GLORY has been deducted. Remember to send tokens and mark as sent.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to approve cashout.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const rejectCashoutMutation = useMutation({\n    mutationFn: async (requestId: string) => {\n      return apiRequest(\"POST\", \"/api/admin/cashout/reject\", { requestId });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/cashout/requests\"] });\n      toast({\n        title: \"Cashout Rejected\",\n        description: \"The cashout request has been rejected.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reject cashout.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Bulk cashout approval mutation\n  const bulkApproveCashoutsMutation = useMutation({\n    mutationFn: async (requestIds: string[]) => {\n      const response = await apiRequest(\"POST\", \"/api/admin/cashout/bulk-approve\", { requestIds });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/cashout/requests\"] });\n      setSelectedCashoutIds([]);\n      toast({\n        title: \"Cashouts approved\",\n        description: `Successfully approved ${data.approvedCount} cashout requests.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to approve cashouts.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Bulk cashout rejection mutation\n  const bulkRejectCashoutsMutation = useMutation({\n    mutationFn: async (requestIds: string[]) => {\n      const response = await apiRequest(\"POST\", \"/api/admin/cashout/bulk-reject\", { requestIds });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/cashout/requests\"] });\n      setSelectedCashoutIds([]);\n      toast({\n        title: \"Cashouts rejected\",\n        description: `Successfully rejected ${data.rejectedCount} cashout requests.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reject cashouts.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Bulk user approval mutation\n  const bulkApproveUsersMutation = useMutation({\n    mutationFn: async (userIds: string[]) => {\n      const response = await apiRequest(\"PATCH\", \"/api/admin/users/bulk/approve\", { userIds });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      setSelectedUserIds([]);\n      toast({\n        title: \"Users approved\",\n        description: `Successfully approved ${data.updatedCount} users.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to approve users.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Bulk user deletion mutation\n  const bulkDeleteUsersMutation = useMutation({\n    mutationFn: async (userIds: string[]) => {\n      const response = await apiRequest(\"DELETE\", \"/api/admin/users/bulk\", { userIds });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/submissions\"] });\n      setSelectedUserIds([]);\n      setBulkDeleteDialogOpen(false);\n      setDeleteConfirmText(\"\");\n      toast({\n        title: \"Users deleted\",\n        description: `Successfully deleted ${data.deletedCount} users and all their associated assets.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete users.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Clear audit logs mutation\n  const clearAuditLogsMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"DELETE\", \"/api/admin/audit-logs\", {});\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/audit-logs\"] });\n      setClearLogsDialogOpen(false);\n      setClearLogsConfirmText(\"\");\n      toast({\n        title: \"Audit logs cleared\",\n        description: \"All audit logs have been successfully cleared.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to clear audit logs.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update Balance mutation\n  const updateGloryBalanceMutation = useMutation({\n    mutationFn: async ({ userId, amount, operation, currency }: { userId: string; amount: number; operation: 'set' | 'add' | 'subtract'; currency: 'GLORY' | 'SOL' | 'USDC' }) => {\n      const response = await apiRequest(\"PATCH\", `/api/admin/users/${userId}/balance`, { \n        amount, \n        operation,\n        currency\n      });\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      setGloryEditDialogOpen(false);\n      setGloryAmountInput(\"\");\n      setSelectedUserId(\"\");\n      const updatedCurrency = variables.currency;\n      setSelectedCurrency(\"GLORY\");\n      \n      // Also invalidate /api/me for all users to update their balance display\n      queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n      \n      // Force refetch to ensure immediate update\n      queryClient.refetchQueries({ queryKey: [\"/api/me\"] });\n      \n      toast({\n        title: \"Balance updated\",\n        description: data.message || `Successfully updated user's ${updatedCurrency} balance.`,\n      });\n    },\n    onError: (error: any, variables) => {\n      toast({\n        title: \"Error\",\n        description: error.message || `Failed to update ${variables.currency} balance.`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update Private Mode mutation\n  const updatePrivateModeMutation = useMutation({\n    mutationFn: async (privateMode: boolean) => {\n      const response = await apiRequest(\"PATCH\", \"/api/admin/settings\", { privateMode });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/settings\"] });\n      toast({\n        title: \"Settings Updated\",\n        description: `Private mode is now ${!siteSettings?.privateMode ? \"enabled\" : \"disabled\"}.`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Update Failed\",\n        description: \"Failed to update private mode setting.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Helper functions\n  const getInitials = (username: string) => {\n    return username.substring(0, 2).toUpperCase();\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return \"bg-success/20 text-success border-success/30\";\n      case \"pending\":\n        return \"bg-muted text-muted-foreground border-border\";\n      case \"banned\":\n      case \"rejected\":\n        return \"bg-destructive/20 text-destructive border-destructive/30\";\n      case \"active\":\n        return \"bg-success/20 text-success border-success/30\";\n      case \"ended\":\n        return \"bg-muted text-muted-foreground border-border\";\n      default:\n        return \"bg-muted text-muted-foreground border-border\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"approved\":\n      case \"active\":\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case \"pending\":\n        return <Clock className=\"w-4 h-4\" />;\n      case \"banned\":\n      case \"rejected\":\n        return <XCircle className=\"w-4 h-4\" />;\n      default:\n        return <AlertTriangle className=\"w-4 h-4\" />;\n    }\n  };\n\n  // Stats calculations\n  const pendingUsers = users.filter((u: any) => u.status === \"pending\").length;\n  const pendingSubmissions = submissions.filter((s: any) => s.status === \"pending\").length;\n  const activeContests = contests.filter((c: any) => c.status === \"active\").length;\n  const totalGloryDistributed = users.reduce((sum: number, u: any) => sum + u.gloryBalance, 0);\n  const pendingCashouts = cashoutRequests.filter((r: any) => r.status === \"pending\").length;\n\n  // Filtered users\n  const filteredUsers = users.filter((user: any) => {\n    const matchesStatus = userStatusFilter === \"all\" || user.status === userStatusFilter;\n    const matchesSearch = user.username.toLowerCase().includes(userSearchQuery.toLowerCase()) ||\n                         user.email.toLowerCase().includes(userSearchQuery.toLowerCase());\n    return matchesStatus && matchesSearch;\n  });\n\n  // Filtered submissions\n  const filteredSubmissions = submissions.filter((submission: any) => {\n    const matchesStatus = submissionStatusFilter === \"all\" || submission.status === submissionStatusFilter;\n    const matchesContest = submissionContestFilter === \"all\" || submission.contestId === submissionContestFilter;\n    const matchesSearch = \n      submission.title.toLowerCase().includes(submissionSearchQuery.toLowerCase()) ||\n      (submission.description?.toLowerCase() || \"\").includes(submissionSearchQuery.toLowerCase()) ||\n      submission.user.username.toLowerCase().includes(submissionSearchQuery.toLowerCase());\n    return matchesStatus && matchesContest && matchesSearch;\n  });\n\n  // Helper functions for bulk selection\n  const handleUserSelect = (userId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedUserIds(prev => [...prev, userId]);\n    } else {\n      setSelectedUserIds(prev => prev.filter(id => id !== userId));\n    }\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      setSelectedUserIds(filteredUsers.map((user: any) => user.id));\n    } else {\n      setSelectedUserIds([]);\n    }\n  };\n\n  const isAllSelected = filteredUsers.length > 0 && selectedUserIds.length === filteredUsers.length;\n  const isSomeSelected = selectedUserIds.length > 0 && selectedUserIds.length < filteredUsers.length;\n\n  const handleBulkApprove = () => {\n    if (selectedUserIds.length === 0) return;\n    bulkApproveUsersMutation.mutate(selectedUserIds);\n  };\n\n  const handleBulkDelete = () => {\n    if (selectedUserIds.length === 0) return;\n    setBulkDeleteDialogOpen(true);\n  };\n\n  const confirmBulkDelete = () => {\n    if (deleteConfirmText !== \"DELETE\") {\n      toast({\n        title: \"Confirmation required\",\n        description: 'Please type \"DELETE\" to confirm the deletion.',\n        variant: \"destructive\",\n      });\n      return;\n    }\n    bulkDeleteUsersMutation.mutate(selectedUserIds);\n  };\n\n  // Helper functions for bulk submission selection\n  const handleSubmissionSelect = (submissionId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedSubmissionIds(prev => [...prev, submissionId]);\n    } else {\n      setSelectedSubmissionIds(prev => prev.filter(id => id !== submissionId));\n    }\n  };\n\n  const handleSelectAllSubmissions = (checked: boolean) => {\n    if (checked) {\n      setSelectedSubmissionIds(filteredSubmissions.map((sub: any) => sub.id));\n    } else {\n      setSelectedSubmissionIds([]);\n    }\n  };\n\n  const isAllSubmissionsSelected = filteredSubmissions.length > 0 && selectedSubmissionIds.length === filteredSubmissions.length;\n  const isSomeSubmissionsSelected = selectedSubmissionIds.length > 0 && selectedSubmissionIds.length < filteredSubmissions.length;\n\n  // Helper function to open Balance edit dialog\n  const openGloryEditDialog = (userId: string) => {\n    setSelectedUserId(userId);\n    setGloryAmountInput(\"\");\n    setSelectedCurrency(\"GLORY\");\n    setGloryEditDialogOpen(true);\n  };\n\n  // Helper function to handle Glory balance update\n  const handleGloryBalanceUpdate = () => {\n    // Prevent double clicks while mutation is pending\n    if (updateGloryBalanceMutation.isPending) {\n      return;\n    }\n\n    const input = gloryAmountInput.trim();\n    if (!input) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a valid amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    let operation: 'set' | 'add' | 'subtract';\n    let amount: number;\n\n    if (input.startsWith('+')) {\n      operation = 'add';\n      amount = parseInt(input.substring(1));\n    } else if (input.startsWith('-')) {\n      operation = 'subtract';\n      amount = parseInt(input.substring(1));\n    } else {\n      // When no +/- prefix, treat as 'set' operation\n      operation = 'set';\n      amount = parseInt(input);\n    }\n\n    if (isNaN(amount) || amount < 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a valid number (0 or greater)\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateGloryBalanceMutation.mutate({ userId: selectedUserId, amount, operation, currency: selectedCurrency });\n  };\n\n  // Helper functions for bulk contest selection\n  const handleContestSelect = (contestId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedContestIds(prev => [...prev, contestId]);\n    } else {\n      setSelectedContestIds(prev => prev.filter(id => id !== contestId));\n    }\n  };\n\n  const handleSelectAllContests = (checked: boolean) => {\n    if (checked) {\n      setSelectedContestIds(contests.map((contest: any) => contest.id));\n    } else {\n      setSelectedContestIds([]);\n    }\n  };\n\n  const isAllContestsSelected = contests.length > 0 && selectedContestIds.length === contests.length;\n  const isSomeContestsSelected = selectedContestIds.length > 0 && selectedContestIds.length < contests.length;\n\n  const handleBulkActivateContests = () => {\n    if (selectedContestIds.length === 0) return;\n    bulkActivateContestsMutation.mutate(selectedContestIds);\n  };\n\n  const handleBulkEndContests = () => {\n    if (selectedContestIds.length === 0) return;\n    bulkEndContestsMutation.mutate(selectedContestIds);\n  };\n\n  const handleBulkDeleteContests = () => {\n    if (selectedContestIds.length === 0) return;\n    setBulkDeleteContestsDialogOpen(true);\n  };\n\n  const confirmBulkDeleteContests = () => {\n    if (deleteContestsConfirmText !== \"DELETE\") {\n      toast({\n        title: \"Confirmation required\",\n        description: 'Please type \"DELETE\" to confirm the deletion.',\n        variant: \"destructive\",\n      });\n      return;\n    }\n    bulkDeleteContestsMutation.mutate(selectedContestIds);\n  };\n\n  return (\n    <div className=\"min-h-screen py-8 md:py-16\" data-testid=\"admin-dashboard\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-2xl md:text-4xl font-black tracking-tight mb-2 flex items-center\" data-testid=\"admin-title\">\n              <Shield className=\"w-8 h-8 md:w-10 md:h-10 text-primary mr-2 md:mr-3\" />\n              Admin Dashboard\n            </h1>\n            <p className=\"text-muted-foreground\">Manage users, submissions, and contests</p>\n          </div>\n          <Badge variant=\"outline\" className=\"text-primary border-primary\">\n            <Shield className=\"w-4 h-4 mr-2\" />\n            Admin Access\n          </Badge>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid sm:grid-cols-2 lg:grid-cols-5 gap-6 mb-8\">\n          <Card data-testid=\"stat-pending-users\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Pending Users</CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{pendingUsers}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Awaiting approval\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-pending-submissions\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Pending Submissions</CardTitle>\n              <ImageIcon className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{pendingSubmissions}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Awaiting review\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-active-contests\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Active Contests</CardTitle>\n              <Trophy className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{activeContests}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Currently running\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-total-glory\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total GLORY</CardTitle>\n              <Crown className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{totalGloryDistributed.toLocaleString()}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Distributed to users\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-private-mode\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Private Mode</CardTitle>\n              <Shield className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-sm font-medium\">\n                  {siteSettings?.privateMode ? \"Enabled\" : \"Disabled\"}\n                </div>\n                <Switch\n                  checked={siteSettings?.privateMode || false}\n                  onCheckedChange={(checked) => updatePrivateModeMutation.mutate(checked)}\n                  disabled={updatePrivateModeMutation.isPending}\n                  data-testid=\"switch-private-mode\"\n                />\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-2\">\n                {siteSettings?.privateMode ? \"Login required\" : \"Public access\"}\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Admin Tabs */}\n        <Tabs defaultValue=\"users\" className=\"space-y-4\" data-testid=\"admin-tabs\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"users\" data-testid=\"tab-users\">\n              <Users className=\"w-4 h-4 mr-2\" />\n              Users\n            </TabsTrigger>\n            <TabsTrigger value=\"submissions\" data-testid=\"tab-submissions\">\n              <ImageIcon className=\"w-4 h-4 mr-2\" />\n              Submissions\n            </TabsTrigger>\n            <TabsTrigger value=\"contests\" data-testid=\"tab-contests\">\n              <Trophy className=\"w-4 h-4 mr-2\" />\n              Contests\n            </TabsTrigger>\n            <TabsTrigger value=\"cashouts\" data-testid=\"tab-cashouts\">\n              <DollarSign className=\"w-4 h-4 mr-2\" />\n              Cashouts\n            </TabsTrigger>\n            <TabsTrigger value=\"audit\" data-testid=\"tab-audit\">\n              <BarChart3 className=\"w-4 h-4 mr-2\" />\n              Audit Logs\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Users Management Tab */}\n          <TabsContent value=\"users\" className=\"space-y-4\" data-testid=\"users-tab\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>User Management</CardTitle>\n                  <div className=\"flex items-center space-x-2\">\n                    {selectedUserIds.length > 0 && (\n                      <>\n                        <Button\n                          variant=\"outline\"\n                          className=\"bg-success/20 text-success hover:bg-success/30 border-success/30\"\n                          onClick={handleBulkApprove}\n                          data-testid=\"bulk-approve-button\"\n                        >\n                          <CheckCircle className=\"w-4 h-4 mr-2\" />\n                          Approve Selected ({selectedUserIds.length})\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          className=\"bg-destructive/20 text-destructive hover:bg-destructive/30 border-destructive/30\"\n                          onClick={handleBulkDelete}\n                          data-testid=\"bulk-delete-button\"\n                        >\n                          <Trash2 className=\"w-4 h-4 mr-2\" />\n                          Delete Selected ({selectedUserIds.length})\n                        </Button>\n                      </>\n                    )}\n                    <Select value={userStatusFilter} onValueChange={setUserStatusFilter} data-testid=\"user-status-filter\">\n                      <SelectTrigger className=\"w-40\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Statuses</SelectItem>\n                        <SelectItem value=\"pending\">Pending</SelectItem>\n                        <SelectItem value=\"approved\">Approved</SelectItem>\n                        <SelectItem value=\"banned\">Banned</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                      <Input\n                        placeholder=\"Search users...\"\n                        value={userSearchQuery}\n                        onChange={(e) => setUserSearchQuery(e.target.value)}\n                        className=\"pl-10 w-64\"\n                        data-testid=\"user-search\"\n                      />\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        const csvData = filteredUsers.map((user: any) => ({\n                          Username: user.username,\n                          Email: user.email,\n                          Status: user.status,\n                          'GLORY Balance': user.gloryBalance || 0,\n                          'SOL Balance': user.solBalance || 0,\n                          'USDC Balance': user.usdcBalance || 0,\n                          'Withdrawal Address': user.withdrawalAddress || 'Not set',\n                          'Joined': new Date(user.createdAt).toLocaleDateString(),\n                        }));\n                        \n                        const headers = Object.keys(csvData[0] || {});\n                        const csv = [\n                          headers.join(','),\n                          ...csvData.map((row: any) => headers.map(h => `\"${row[h]}\"`).join(','))\n                        ].join('\\n');\n                        \n                        const blob = new Blob([csv], { type: 'text/csv' });\n                        const url = window.URL.createObjectURL(blob);\n                        const a = document.createElement('a');\n                        a.href = url;\n                        a.download = `users-${new Date().toISOString().split('T')[0]}.csv`;\n                        a.click();\n                        window.URL.revokeObjectURL(url);\n                        \n                        toast({\n                          title: \"CSV Downloaded\",\n                          description: `${filteredUsers.length} users exported successfully`,\n                        });\n                      }}\n                      data-testid=\"export-users-csv\"\n                    >\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Export CSV\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                {/* Desktop Table View */}\n                <div className=\"hidden md:block overflow-x-auto\">\n                  <table className=\"w-full\" data-testid=\"users-table\">\n                    <thead className=\"bg-muted\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left\">\n                          <Checkbox\n                            checked={isSomeSelected ? \"indeterminate\" : isAllSelected}\n                            onCheckedChange={(checked) => handleSelectAll(!!checked)}\n                            data-testid=\"select-all-checkbox\"\n                          />\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          User\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          Status\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          GLORY\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          Joined\n                        </th>\n                        <th className=\"px-6 py-3 text-right text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          Actions\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-border\">\n                      {filteredUsers.map((user: any) => (\n                        <tr key={user.id} className=\"hover:bg-muted/30 transition-colors\" data-testid={`user-row-${user.id}`}>\n                          <td className=\"px-6 py-4\">\n                            <Checkbox\n                              checked={selectedUserIds.includes(user.id)}\n                              onCheckedChange={(checked) => handleUserSelect(user.id, !!checked)}\n                              data-testid={`select-user-${user.id}`}\n                            />\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"flex items-center space-x-3\">\n                              <Avatar>\n                                <AvatarFallback className={user.status === \"banned\" ? \"bg-destructive/20 text-destructive\" : \"bg-secondary text-secondary-foreground\"}>\n                                  {getInitials(user.username)}\n                                </AvatarFallback>\n                              </Avatar>\n                              <div>\n                                <div className={`font-semibold ${user.status === \"banned\" ? \"line-through opacity-60\" : \"\"}`} data-testid={`username-${user.id}`}>\n                                  {user.username}\n                                </div>\n                                <div className=\"text-sm text-muted-foreground\" data-testid={`email-${user.id}`}>\n                                  {user.email}\n                                </div>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <Badge className={getStatusColor(user.status)} data-testid={`status-${user.id}`}>\n                              {getStatusIcon(user.status)}\n                              <span className=\"ml-1\">{user.status.charAt(0).toUpperCase() + user.status.slice(1)}</span>\n                            </Badge>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"flex items-center space-x-2\">\n                              <span className=\"font-semibold font-mono\" data-testid={`glory-${user.id}`}>\n                                {user.gloryBalance.toLocaleString()}\n                              </span>\n                              <Button\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                className=\"h-6 w-6 p-0 hover:bg-primary/20\"\n                                onClick={() => openGloryEditDialog(user.id)}\n                                data-testid={`edit-balance-${user.id}`}\n                                title=\"Edit user balance\"\n                              >\n                                <Edit3 className=\"w-3 h-3\" />\n                              </Button>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\" data-testid={`joined-${user.id}`}>\n                            {new Date(user.createdAt).toLocaleDateString()}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-right\">\n                            <div className=\"flex items-center justify-end space-x-2\">\n                              {user.status === \"pending\" && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  className=\"bg-success/20 text-success hover:bg-success/30 border-success/30\"\n                                  onClick={() => updateUserStatusMutation.mutate({ userId: user.id, status: \"approved\" })}\n                                  disabled={updateUserStatusMutation.isPending}\n                                  data-testid={`approve-user-${user.id}`}\n                                >\n                                  <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                  Approve\n                                </Button>\n                              )}\n                              {user.status !== \"banned\" && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  className=\"bg-destructive/20 text-destructive hover:bg-destructive/30 border-destructive/30\"\n                                  onClick={() => updateUserStatusMutation.mutate({ userId: user.id, status: \"banned\" })}\n                                  disabled={updateUserStatusMutation.isPending}\n                                  data-testid={`ban-user-${user.id}`}\n                                >\n                                  <XCircle className=\"w-3 h-3 mr-1\" />\n                                  Ban\n                                </Button>\n                              )}\n                              {user.status === \"banned\" && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  className=\"bg-success/20 text-success hover:bg-success/30 border-success/30\"\n                                  onClick={() => updateUserStatusMutation.mutate({ userId: user.id, status: \"approved\" })}\n                                  disabled={updateUserStatusMutation.isPending}\n                                  data-testid={`unban-user-${user.id}`}\n                                >\n                                  <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                  Unban\n                                </Button>\n                              )}\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n\n                {/* Mobile Card View */}\n                <div className=\"md:hidden\">\n                  {/* Mobile Select All Header */}\n                  {filteredUsers.length > 0 && (\n                    <div className=\"flex items-center gap-3 p-4 border-b border-border bg-muted/50\">\n                      <Checkbox\n                        checked={isSomeSelected ? \"indeterminate\" : isAllSelected}\n                        onCheckedChange={(checked) => handleSelectAll(!!checked)}\n                        data-testid=\"select-all-checkbox-mobile\"\n                      />\n                      <span className=\"text-sm font-medium\">\n                        {selectedUserIds.length > 0 \n                          ? `${selectedUserIds.length} selected` \n                          : 'Select all'}\n                      </span>\n                    </div>\n                  )}\n                  \n                  <div className=\"divide-y divide-border\">\n                    {filteredUsers.map((user: any) => (\n                    <div key={user.id} className=\"p-4 hover:bg-muted/30 transition-colors\" data-testid={`user-card-${user.id}`}>\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Checkbox\n                            checked={selectedUserIds.includes(user.id)}\n                            onCheckedChange={(checked) => handleUserSelect(user.id, !!checked)}\n                            data-testid={`select-user-mobile-${user.id}`}\n                          />\n                          <Avatar className=\"h-10 w-10\">\n                            <AvatarFallback className={user.status === \"banned\" ? \"bg-destructive/20 text-destructive\" : \"bg-secondary text-secondary-foreground\"}>\n                              {getInitials(user.username)}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"flex-1 min-w-0\">\n                            <div className={`font-semibold truncate ${user.status === \"banned\" ? \"line-through opacity-60\" : \"\"}`}>\n                              {user.username}\n                            </div>\n                            <div className=\"text-sm text-muted-foreground truncate\">\n                              {user.email}\n                            </div>\n                          </div>\n                        </div>\n                        <Badge className={getStatusColor(user.status)}>\n                          {getStatusIcon(user.status)}\n                          <span className=\"ml-1\">{user.status.charAt(0).toUpperCase() + user.status.slice(1)}</span>\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-3 mb-3 text-sm\">\n                        <div>\n                          <div className=\"text-muted-foreground text-xs\">GLORY Balance</div>\n                          <div className=\"flex items-center space-x-2 mt-1\">\n                            <span className=\"font-semibold font-mono\">{user.gloryBalance.toLocaleString()}</span>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              className=\"h-6 w-6 p-0 hover:bg-primary/20\"\n                              onClick={() => openGloryEditDialog(user.id)}\n                              title=\"Edit balance\"\n                            >\n                              <Edit3 className=\"w-3 h-3\" />\n                            </Button>\n                          </div>\n                        </div>\n                        <div>\n                          <div className=\"text-muted-foreground text-xs\">Joined</div>\n                          <div className=\"mt-1\">{new Date(user.createdAt).toLocaleDateString()}</div>\n                        </div>\n                      </div>\n\n                      <div className=\"flex gap-2 flex-wrap\">\n                        {user.status === \"pending\" && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"flex-1 bg-success/20 text-success hover:bg-success/30 border-success/30\"\n                            onClick={() => updateUserStatusMutation.mutate({ userId: user.id, status: \"approved\" })}\n                            disabled={updateUserStatusMutation.isPending}\n                          >\n                            <CheckCircle className=\"w-3 h-3 mr-1\" />\n                            Approve\n                          </Button>\n                        )}\n                        {user.status !== \"banned\" && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"flex-1 bg-destructive/20 text-destructive hover:bg-destructive/30 border-destructive/30\"\n                            onClick={() => updateUserStatusMutation.mutate({ userId: user.id, status: \"banned\" })}\n                            disabled={updateUserStatusMutation.isPending}\n                          >\n                            <XCircle className=\"w-3 h-3 mr-1\" />\n                            Ban\n                          </Button>\n                        )}\n                        {user.status === \"banned\" && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"flex-1 bg-success/20 text-success hover:bg-success/30 border-success/30\"\n                            onClick={() => updateUserStatusMutation.mutate({ userId: user.id, status: \"approved\" })}\n                            disabled={updateUserStatusMutation.isPending}\n                          >\n                            <CheckCircle className=\"w-3 h-3 mr-1\" />\n                            Unban\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Submissions Tab */}\n          <TabsContent value=\"submissions\" className=\"space-y-4\" data-testid=\"submissions-tab\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <CardTitle>Submission Management</CardTitle>\n                    {filteredSubmissions.length > 0 && (\n                      <div className=\"flex items-center gap-2\">\n                        <Checkbox\n                          checked={isAllSubmissionsSelected}\n                          onCheckedChange={handleSelectAllSubmissions}\n                          data-testid=\"select-all-submissions\"\n                        />\n                        <span className=\"text-sm text-muted-foreground\">\n                          {selectedSubmissionIds.length > 0 ? `${selectedSubmissionIds.length} selected` : 'Select all'}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    {selectedSubmissionIds.length > 0 && (\n                      <>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"bg-success/20 text-success hover:bg-success/30 border-success/30\"\n                          onClick={() => bulkApproveSubmissionsMutation.mutate(selectedSubmissionIds)}\n                          disabled={bulkApproveSubmissionsMutation.isPending}\n                          data-testid=\"bulk-approve-submissions\"\n                        >\n                          <CheckCircle className=\"w-4 h-4 mr-1\" />\n                          Approve ({selectedSubmissionIds.length})\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"bg-destructive/20 text-destructive hover:bg-destructive/30 border-destructive/30\"\n                          onClick={() => bulkRejectSubmissionsMutation.mutate(selectedSubmissionIds)}\n                          disabled={bulkRejectSubmissionsMutation.isPending}\n                          data-testid=\"bulk-reject-submissions\"\n                        >\n                          <XCircle className=\"w-4 h-4 mr-1\" />\n                          Reject ({selectedSubmissionIds.length})\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"bg-destructive/20 text-destructive hover:bg-destructive/30 border-destructive/30\"\n                          onClick={() => bulkDeleteSubmissionsMutation.mutate(selectedSubmissionIds)}\n                          disabled={bulkDeleteSubmissionsMutation.isPending}\n                          data-testid=\"bulk-delete-submissions\"\n                        >\n                          <Trash2 className=\"w-4 h-4 mr-1\" />\n                          Delete ({selectedSubmissionIds.length})\n                        </Button>\n                      </>\n                    )}\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"bg-orange-500/20 text-orange-400 hover:bg-orange-500/30 border-orange-500/30\"\n                      onClick={() => cleanupBrokenSubmissionsMutation.mutate()}\n                      disabled={cleanupBrokenSubmissionsMutation.isPending}\n                      data-testid=\"cleanup-broken-submissions\"\n                    >\n                      {cleanupBrokenSubmissionsMutation.isPending ? (\n                        <Loader2 className=\"w-4 h-4 mr-1 animate-spin\" />\n                      ) : (\n                        <AlertTriangle className=\"w-4 h-4 mr-1\" />\n                      )}\n                      Cleanup Broken\n                    </Button>\n                    <Select value={submissionStatusFilter} onValueChange={setSubmissionStatusFilter} data-testid=\"submission-status-filter\">\n                      <SelectTrigger className=\"w-40\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Statuses</SelectItem>\n                        <SelectItem value=\"pending\">Pending</SelectItem>\n                        <SelectItem value=\"approved\">Approved</SelectItem>\n                        <SelectItem value=\"rejected\">Rejected</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <Select value={submissionContestFilter} onValueChange={setSubmissionContestFilter} data-testid=\"submission-contest-filter\">\n                      <SelectTrigger className=\"w-48\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Contests</SelectItem>\n                        {contests\n                          .filter((contest: any) => contest.status === \"active\")\n                          .map((contest: any) => (\n                            <SelectItem key={contest.id} value={contest.id}>\n                              {contest.title}\n                            </SelectItem>\n                          ))}\n                      </SelectContent>\n                    </Select>\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                      <Input\n                        placeholder=\"Search submissions...\"\n                        value={submissionSearchQuery}\n                        onChange={(e) => setSubmissionSearchQuery(e.target.value)}\n                        className=\"pl-10 w-64\"\n                        data-testid=\"submission-search\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {filteredSubmissions.map((submission: any) => (\n                    <Card key={submission.id} className=\"overflow-hidden\" data-testid={`pending-submission-${submission.id}`}>\n                      <div className=\"relative aspect-square\">\n                        <img\n                          src={submission.type === \"video\" ? submission.thumbnailUrl || submission.mediaUrl : submission.mediaUrl}\n                          alt={submission.title}\n                          className=\"w-full h-full object-cover\"\n                          onError={(e) => {\n                            const target = e.target as HTMLImageElement;\n                            target.src = 'data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"400\" height=\"400\"%3E%3Crect fill=\"%23334155\" width=\"400\" height=\"400\"/%3E%3Ctext fill=\"%239ca3af\" font-family=\"system-ui\" font-size=\"48\" x=\"50%25\" y=\"50%25\" text-anchor=\"middle\" dominant-baseline=\"middle\"%3E%3Ctspan x=\"50%25\" dy=\"-20\"%3E' + (submission.type === 'video' ? '🎬' : '🖼️') + '%3C/tspan%3E%3Ctspan x=\"50%25\" dy=\"60\" font-size=\"16\"%3EImage not available%3C/tspan%3E%3C/text%3E%3C/svg%3E';\n                            target.onerror = null;\n                          }}\n                        />\n                        <div className=\"absolute top-3 left-3 bg-background/80 backdrop-blur-sm rounded p-1\">\n                          <Checkbox\n                            checked={selectedSubmissionIds.includes(submission.id)}\n                            onCheckedChange={(checked) => handleSubmissionSelect(submission.id, checked as boolean)}\n                            data-testid={`select-submission-${submission.id}`}\n                          />\n                        </div>\n                        <div className=\"absolute top-3 right-3\">\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {submission.type === \"image\" ? (\n                              <><Eye className=\"w-3 h-3 mr-1\" />Image</>\n                            ) : (\n                              <><Eye className=\"w-3 h-3 mr-1\" />Video</>\n                            )}\n                          </Badge>\n                        </div>\n                      </div>\n                      <CardContent className=\"p-4\">\n                        <h4 className=\"font-bold mb-2\" data-testid={`submission-title-${submission.id}`}>\n                          {submission.title}\n                        </h4>\n                        {submission.description && (\n                          <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\" data-testid={`submission-description-${submission.id}`}>\n                            {submission.description}\n                          </p>\n                        )}\n                        <div className=\"flex items-center justify-between text-sm mb-3\">\n                          <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                            <span data-testid={`submission-author-${submission.id}`}>\n                              @{submission.user.username}\n                            </span>\n                          </div>\n                          <Badge className={getStatusColor(submission.status)} data-testid={`submission-status-${submission.id}`}>\n                            {getStatusIcon(submission.status)}\n                            <span className=\"ml-1\">{submission.status.charAt(0).toUpperCase() + submission.status.slice(1)}</span>\n                          </Badge>\n                        </div>\n                        <div className=\"text-xs text-muted-foreground mb-4\" data-testid={`submission-contest-${submission.id}`}>\n                          {submission.contest.title} • {submission.votesCount || 0} votes\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          {submission.status === \"pending\" && (\n                            <>\n                              <Button\n                                size=\"sm\"\n                                className=\"flex-1 bg-success/20 text-success hover:bg-success/30 border border-success/30\"\n                                onClick={() => updateSubmissionStatusMutation.mutate({ submissionId: submission.id, status: \"approved\" })}\n                                disabled={updateSubmissionStatusMutation.isPending}\n                                data-testid={`approve-submission-${submission.id}`}\n                              >\n                                <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                Approve\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                className=\"flex-1 bg-destructive/20 text-destructive hover:bg-destructive/30 border-destructive/30\"\n                                onClick={() => updateSubmissionStatusMutation.mutate({ submissionId: submission.id, status: \"rejected\" })}\n                                disabled={updateSubmissionStatusMutation.isPending}\n                                data-testid={`reject-submission-${submission.id}`}\n                              >\n                                <XCircle className=\"w-3 h-3 mr-1\" />\n                                Reject\n                              </Button>\n                            </>\n                          )}\n                          {submission.status === \"approved\" && (\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"flex-1 bg-destructive/20 text-destructive hover:bg-destructive/30 border-destructive/30\"\n                              onClick={() => updateSubmissionStatusMutation.mutate({ submissionId: submission.id, status: \"rejected\" })}\n                              disabled={updateSubmissionStatusMutation.isPending}\n                              data-testid={`reject-submission-${submission.id}`}\n                            >\n                              <XCircle className=\"w-3 h-3 mr-1\" />\n                              Reject\n                            </Button>\n                          )}\n                          {submission.status === \"rejected\" && (\n                            <Button\n                              size=\"sm\"\n                              className=\"flex-1 bg-success/20 text-success hover:bg-success/30 border border-success/30\"\n                              onClick={() => updateSubmissionStatusMutation.mutate({ submissionId: submission.id, status: \"approved\" })}\n                              disabled={updateSubmissionStatusMutation.isPending}\n                              data-testid={`approve-submission-${submission.id}`}\n                            >\n                              <CheckCircle className=\"w-3 h-3 mr-1\" />\n                              Approve\n                            </Button>\n                          )}\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"bg-destructive/10 text-destructive hover:bg-destructive/20 border-destructive/30\"\n                            onClick={() => {\n                              if (confirm('Are you sure you want to permanently delete this submission? This action cannot be undone.')) {\n                                deleteSubmissionMutation.mutate(submission.id);\n                              }\n                            }}\n                            disabled={deleteSubmissionMutation.isPending}\n                            data-testid={`delete-submission-${submission.id}`}\n                          >\n                            <Trash2 className=\"w-3 h-3\" />\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n                {filteredSubmissions.length === 0 && (\n                  <div className=\"text-center py-12\" data-testid=\"no-submissions-found\">\n                    <ImageIcon className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold mb-2\">No submissions found</h3>\n                    <p className=\"text-muted-foreground\">\n                      {submissionSearchQuery || submissionStatusFilter !== \"all\" \n                        ? \"Try adjusting your filters or search query.\"\n                        : \"No submissions have been uploaded yet.\"}\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Contests Tab */}\n          <TabsContent value=\"contests\" className=\"space-y-4\" data-testid=\"contests-tab\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>Contest Management</CardTitle>\n                  <div className=\"flex items-center gap-2\">\n                    {selectedContestIds.length > 0 && (\n                      <>\n                        <Button \n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"bg-success/20 text-success hover:bg-success/30 border-success/30\"\n                          onClick={handleBulkActivateContests}\n                          disabled={bulkActivateContestsMutation.isPending}\n                          data-testid=\"bulk-activate-contests\"\n                        >\n                          <Trophy className=\"w-4 h-4 mr-2\" />\n                          Activate Selected ({selectedContestIds.length})\n                        </Button>\n                        <Button \n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"gradient-glory\"\n                          onClick={handleBulkEndContests}\n                          disabled={bulkEndContestsMutation.isPending}\n                          data-testid=\"bulk-end-contests\"\n                        >\n                          <Trophy className=\"w-4 h-4 mr-2\" />\n                          End & Distribute Selected ({selectedContestIds.length})\n                        </Button>\n                        <Button \n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"bg-destructive/20 text-destructive hover:bg-destructive/30 border-destructive/30\"\n                          onClick={handleBulkDeleteContests}\n                          disabled={bulkDeleteContestsMutation.isPending}\n                          data-testid=\"bulk-delete-contests\"\n                        >\n                          <Trash2 className=\"w-4 h-4 mr-2\" />\n                          Delete Selected ({selectedContestIds.length})\n                        </Button>\n                      </>\n                    )}\n                    <Button \n                      className=\"gradient-glory\" \n                      data-testid=\"create-contest-button\"\n                      onClick={() => setIsCreateContestModalOpen(true)}\n                    >\n                      <Trophy className=\"w-4 h-4 mr-2\" />\n                      Create Contest\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {contests.length > 0 && (\n                  <div className=\"mb-4 flex items-center\">\n                    <Checkbox\n                      checked={isAllContestsSelected}\n                      onCheckedChange={handleSelectAllContests}\n                      data-testid=\"select-all-contests\"\n                      className={isSomeContestsSelected && !isAllContestsSelected ? \"data-[state=checked]:bg-primary/50\" : \"\"}\n                    />\n                    <label className=\"ml-2 text-sm font-medium text-muted-foreground\">\n                      Select All Contests\n                    </label>\n                  </div>\n                )}\n                <div className=\"space-y-4\">\n                  {contests.map((contest: any) => (\n                    <Card key={contest.id} className={contest.status === \"active\" ? \"border-primary/50\" : \"\"} data-testid={`contest-item-${contest.id}`}>\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex flex-col lg:flex-row lg:items-center justify-between gap-4\">\n                          <div className=\"flex items-start gap-4 flex-1\">\n                            <Checkbox\n                              checked={selectedContestIds.includes(contest.id)}\n                              onCheckedChange={(checked) => handleContestSelect(contest.id, checked as boolean)}\n                              data-testid={`select-contest-${contest.id}`}\n                              className=\"mt-1\"\n                            />\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center space-x-3 mb-2\">\n                                <h4 className=\"text-xl font-bold\" data-testid={`contest-title-${contest.id}`}>\n                                  {contest.title}\n                                </h4>\n                                <Badge className={getStatusColor(contest.status)} data-testid={`contest-status-${contest.id}`}>\n                                  {getStatusIcon(contest.status)}\n                                  <span className=\"ml-1\">{contest.status.charAt(0).toUpperCase() + contest.status.slice(1)}</span>\n                                </Badge>\n                              </div>\n                              <div className=\"grid sm:grid-cols-2 lg:grid-cols-4 gap-4 text-sm\">\n                                <div>\n                                  <span className=\"text-muted-foreground\">Prize Pool:</span>\n                                  <span className=\"font-semibold ml-2 text-primary\" data-testid={`contest-prize-${contest.id}`}>\n                                    {contest.prizeGlory.toLocaleString()} GLORY\n                                  </span>\n                                </div>\n                                <div>\n                                  <span className=\"text-muted-foreground\">Submissions:</span>\n                                  <span className=\"font-semibold ml-2\" data-testid={`contest-submissions-${contest.id}`}>\n                                    {contest.submissionCount || 0}\n                                  </span>\n                                </div>\n                                <div>\n                                  <span className=\"text-muted-foreground\">Participants:</span>\n                                  <span className=\"font-semibold ml-2\" data-testid={`contest-participants-${contest.id}`}>\n                                    {contest.participantCount || 0}\n                                  </span>\n                                </div>\n                                <div>\n                                  <span className=\"text-muted-foreground\">Total Votes:</span>\n                                  <span className=\"font-semibold ml-2\" data-testid={`contest-votes-${contest.id}`}>\n                                    {contest.totalVotes || 0}\n                                  </span>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\" \n                              onClick={() => setLocation(`/admin/contest/${contest.id}`)}\n                              data-testid={`view-contest-${contest.id}`}\n                            >\n                              <Eye className=\"w-4 h-4 mr-2\" />\n                              View\n                            </Button>\n                            {contest.status === \"draft\" && (\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                className=\"bg-primary/20 text-primary hover:bg-primary/30 border-primary/30\"\n                                onClick={() => activateContestMutation.mutate(contest.id)}\n                                disabled={activateContestMutation.isPending}\n                                data-testid={`activate-contest-${contest.id}`}\n                              >\n                                <Trophy className=\"w-4 h-4 mr-2\" />\n                                Activate\n                              </Button>\n                            )}\n                            {contest.status === \"active\" && (\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                className=\"gradient-glory\"\n                                onClick={() => endContestMutation.mutate(contest.id)}\n                                disabled={endContestMutation.isPending}\n                                data-testid={`end-contest-${contest.id}`}\n                              >\n                                <Trophy className=\"w-4 h-4 mr-2\" />\n                                End & Distribute\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n                {contests.length === 0 && (\n                  <div className=\"text-center py-12\" data-testid=\"no-contests\">\n                    <Trophy className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold mb-2\">No contests yet</h3>\n                    <p className=\"text-muted-foreground\">Create your first contest to get started.</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Cashouts Tab */}\n          <TabsContent value=\"cashouts\" className=\"space-y-4\" data-testid=\"cashouts-tab\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <CardTitle>Cashout Requests Management</CardTitle>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        const csvData = cashoutRequests.map((request: any) => ({\n                          ID: request.id,\n                          User: request.user.username,\n                          Email: request.user.email,\n                          Amount: request.amountGlory,\n                          Token: request.tokenType,\n                          'Token Amount': request.amountToken,\n                          'Withdrawal Address': request.withdrawalAddress,\n                          Status: request.status,\n                          'Created At': new Date(request.createdAt).toLocaleString(),\n                        }));\n                        \n                        const headers = Object.keys(csvData[0] || {});\n                        const csv = [\n                          headers.join(','),\n                          ...csvData.map((row: any) => headers.map(h => `\"${row[h]}\"`).join(','))\n                        ].join('\\n');\n                        \n                        const blob = new Blob([csv], { type: 'text/csv' });\n                        const url = window.URL.createObjectURL(blob);\n                        const a = document.createElement('a');\n                        a.href = url;\n                        a.download = `cashout-requests-${new Date().toISOString().split('T')[0]}.csv`;\n                        a.click();\n                        window.URL.revokeObjectURL(url);\n                        \n                        toast({\n                          title: \"CSV Downloaded\",\n                          description: `${cashoutRequests.length} cashout requests exported successfully`,\n                        });\n                      }}\n                      data-testid=\"export-cashouts-csv\"\n                    >\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Export CSV\n                    </Button>\n                  </div>\n                  {selectedCashoutIds.length > 0 && (\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-sm text-muted-foreground\">\n                        {selectedCashoutIds.length} selected\n                      </span>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        className=\"bg-success/20 text-success hover:bg-success/30 border-success/30\"\n                        onClick={() => bulkApproveCashoutsMutation.mutate(selectedCashoutIds)}\n                        disabled={bulkApproveCashoutsMutation.isPending}\n                        data-testid=\"bulk-approve-cashouts\"\n                      >\n                        <CheckCircle className=\"w-4 h-4 mr-2\" />\n                        Approve Selected\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        className=\"bg-destructive/20 text-destructive hover:bg-destructive/30 border-destructive/30\"\n                        onClick={() => bulkRejectCashoutsMutation.mutate(selectedCashoutIds)}\n                        disabled={bulkRejectCashoutsMutation.isPending}\n                        data-testid=\"bulk-reject-cashouts\"\n                      >\n                        <XCircle className=\"w-4 h-4 mr-2\" />\n                        Reject Selected\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                {/* Desktop Table View */}\n                <div className=\"overflow-x-auto hidden md:block\">\n                  <table className=\"w-full\" data-testid=\"cashouts-table\">\n                    <thead className=\"bg-muted\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left\">\n                          <input\n                            type=\"checkbox\"\n                            checked={\n                              cashoutRequests.filter((r: any) => r.status === \"pending\").length > 0 &&\n                              cashoutRequests\n                                .filter((r: any) => r.status === \"pending\")\n                                .every((r: any) => selectedCashoutIds.includes(r.id))\n                            }\n                            onChange={(e) => {\n                              const pendingRequests = cashoutRequests.filter((r: any) => r.status === \"pending\");\n                              if (e.target.checked) {\n                                setSelectedCashoutIds(pendingRequests.map((r: any) => r.id));\n                              } else {\n                                setSelectedCashoutIds([]);\n                              }\n                            }}\n                            className=\"rounded border-border\"\n                            data-testid=\"select-all-cashouts\"\n                          />\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          User\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          Amount\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          Wallet\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          Status\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          Date\n                        </th>\n                        <th className=\"px-6 py-3 text-right text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          Actions\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-border\">\n                      {cashoutRequests.map((request: any) => (\n                        <tr key={request.id} className=\"hover:bg-muted/30 transition-colors\" data-testid={`cashout-request-${request.id}`}>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            {request.status === \"pending\" && (\n                              <input\n                                type=\"checkbox\"\n                                checked={selectedCashoutIds.includes(request.id)}\n                                onChange={(e) => {\n                                  if (e.target.checked) {\n                                    setSelectedCashoutIds([...selectedCashoutIds, request.id]);\n                                  } else {\n                                    setSelectedCashoutIds(selectedCashoutIds.filter(id => id !== request.id));\n                                  }\n                                }}\n                                className=\"rounded border-border\"\n                                data-testid={`select-cashout-${request.id}`}\n                              />\n                            )}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"flex items-center space-x-3\">\n                              <Avatar>\n                                <AvatarFallback>\n                                  {getInitials(request.user.username)}\n                                </AvatarFallback>\n                              </Avatar>\n                              <div>\n                                <div className=\"font-semibold\" data-testid={`cashout-username-${request.id}`}>\n                                  {request.user.username}\n                                </div>\n                                <div className=\"text-sm text-muted-foreground\">\n                                  {request.user.email}\n                                </div>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"font-semibold font-mono\" data-testid={`cashout-amount-${request.id}`}>\n                              {request.amountGlory.toLocaleString()} GLORY\n                            </div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              → {request.amountToken} {request.tokenType}\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4\">\n                            <div className=\"flex items-center gap-2\">\n                              <div className=\"font-mono text-xs max-w-[200px] truncate\" data-testid={`cashout-wallet-${request.id}`}>\n                                {request.withdrawalAddress}\n                              </div>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                className=\"h-6 w-6\"\n                                onClick={() => {\n                                  navigator.clipboard.writeText(request.withdrawalAddress);\n                                  toast({\n                                    title: \"Address Copied\",\n                                    description: \"Withdrawal address copied to clipboard\",\n                                  });\n                                }}\n                                data-testid={`copy-address-${request.id}`}\n                              >\n                                <Copy className=\"h-3 w-3\" />\n                              </Button>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <Badge className={getStatusColor(request.status)} data-testid={`cashout-status-${request.id}`}>\n                              {getStatusIcon(request.status)}\n                              <span className=\"ml-1\">{request.status.charAt(0).toUpperCase() + request.status.slice(1)}</span>\n                            </Badge>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\">\n                            {new Date(request.createdAt).toLocaleDateString()}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-right\">\n                            <div className=\"flex items-center justify-end space-x-2\">\n                              {request.status === \"pending\" && (\n                                <>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    className=\"bg-success/20 text-success hover:bg-success/30 border-success/30\"\n                                    onClick={() => approveCashoutMutation.mutate(request.id)}\n                                    disabled={approveCashoutMutation.isPending}\n                                    data-testid={`approve-cashout-${request.id}`}\n                                  >\n                                    <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                    Approve\n                                  </Button>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    className=\"bg-destructive/20 text-destructive hover:bg-destructive/30 border-destructive/30\"\n                                    onClick={() => rejectCashoutMutation.mutate(request.id)}\n                                    disabled={rejectCashoutMutation.isPending}\n                                    data-testid={`reject-cashout-${request.id}`}\n                                  >\n                                    <XCircle className=\"w-3 h-3 mr-1\" />\n                                    Reject\n                                  </Button>\n                                </>\n                              )}\n                              {request.txHash && (\n                                <a\n                                  href={`https://solscan.io/tx/${request.txHash}?cluster=devnet`}\n                                  target=\"_blank\"\n                                  rel=\"noopener noreferrer\"\n                                  className=\"text-xs text-primary hover:underline\"\n                                  data-testid={`view-tx-${request.id}`}\n                                >\n                                  View TX\n                                </a>\n                              )}\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n\n                {/* Mobile Card View */}\n                <div className=\"md:hidden\">\n                  {/* Mobile Select All Header */}\n                  {cashoutRequests.filter((r: any) => r.status === \"pending\").length > 0 && (\n                    <div className=\"flex items-center gap-3 p-4 border-b border-border bg-muted/50\">\n                      <Checkbox\n                        checked={\n                          cashoutRequests.filter((r: any) => r.status === \"pending\").length > 0 &&\n                          cashoutRequests\n                            .filter((r: any) => r.status === \"pending\")\n                            .every((r: any) => selectedCashoutIds.includes(r.id))\n                        }\n                        onCheckedChange={(checked) => {\n                          const pendingRequests = cashoutRequests.filter((r: any) => r.status === \"pending\");\n                          if (checked) {\n                            setSelectedCashoutIds(pendingRequests.map((r: any) => r.id));\n                          } else {\n                            setSelectedCashoutIds([]);\n                          }\n                        }}\n                        data-testid=\"select-all-cashouts-mobile\"\n                      />\n                      <span className=\"text-sm font-medium\">\n                        {selectedCashoutIds.length > 0 \n                          ? `${selectedCashoutIds.length} selected` \n                          : 'Select all pending'}\n                      </span>\n                    </div>\n                  )}\n                  \n                  <div className=\"divide-y divide-border\">\n                    {cashoutRequests.map((request: any) => (\n                      <div key={request.id} className=\"p-4 hover:bg-muted/30 transition-colors\" data-testid={`cashout-card-${request.id}`}>\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div className=\"flex items-center space-x-3\">\n                            {request.status === \"pending\" && (\n                              <Checkbox\n                                checked={selectedCashoutIds.includes(request.id)}\n                                onCheckedChange={(checked) => {\n                                  if (checked) {\n                                    setSelectedCashoutIds([...selectedCashoutIds, request.id]);\n                                  } else {\n                                    setSelectedCashoutIds(selectedCashoutIds.filter(id => id !== request.id));\n                                  }\n                                }}\n                                data-testid={`select-cashout-mobile-${request.id}`}\n                              />\n                            )}\n                            <Avatar className=\"h-10 w-10\">\n                              <AvatarFallback>\n                                {getInitials(request.user.username)}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div className=\"flex-1 min-w-0\">\n                              <div className=\"font-semibold truncate\">\n                                {request.user.username}\n                              </div>\n                              <div className=\"text-sm text-muted-foreground truncate\">\n                                {request.user.email}\n                              </div>\n                            </div>\n                          </div>\n                          <Badge className={getStatusColor(request.status)}>\n                            {getStatusIcon(request.status)}\n                            <span className=\"ml-1\">{request.status.charAt(0).toUpperCase() + request.status.slice(1)}</span>\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"space-y-3 mb-3 text-sm\">\n                          <div>\n                            <div className=\"text-muted-foreground text-xs\">Amount</div>\n                            <div className=\"font-semibold font-mono mt-1\">\n                              {request.amountGlory.toLocaleString()} GLORY\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              → {request.amountToken} {request.tokenType}\n                            </div>\n                          </div>\n                          \n                          <div>\n                            <div className=\"text-muted-foreground text-xs\">Withdrawal Address</div>\n                            <div className=\"flex items-center gap-2 mt-1\">\n                              <div className=\"font-mono text-xs truncate flex-1\">\n                                {request.withdrawalAddress}\n                              </div>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                className=\"h-6 w-6 flex-shrink-0\"\n                                onClick={() => {\n                                  navigator.clipboard.writeText(request.withdrawalAddress);\n                                  toast({\n                                    title: \"Address Copied\",\n                                    description: \"Withdrawal address copied to clipboard\",\n                                  });\n                                }}\n                                data-testid={`copy-address-mobile-${request.id}`}\n                              >\n                                <Copy className=\"h-3 w-3\" />\n                              </Button>\n                            </div>\n                          </div>\n                          \n                          <div>\n                            <div className=\"text-muted-foreground text-xs\">Date</div>\n                            <div className=\"mt-1\">\n                              {new Date(request.createdAt).toLocaleDateString()}\n                            </div>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex gap-2 flex-wrap\">\n                          {request.status === \"pending\" && (\n                            <>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                className=\"flex-1 bg-success/20 text-success hover:bg-success/30 border-success/30\"\n                                onClick={() => approveCashoutMutation.mutate(request.id)}\n                                disabled={approveCashoutMutation.isPending}\n                                data-testid={`approve-cashout-mobile-${request.id}`}\n                              >\n                                <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                Approve\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                className=\"flex-1 bg-destructive/20 text-destructive hover:bg-destructive/30 border-destructive/30\"\n                                onClick={() => rejectCashoutMutation.mutate(request.id)}\n                                disabled={rejectCashoutMutation.isPending}\n                                data-testid={`reject-cashout-mobile-${request.id}`}\n                              >\n                                <XCircle className=\"w-3 h-3 mr-1\" />\n                                Reject\n                              </Button>\n                            </>\n                          )}\n                          {request.txHash && (\n                            <a\n                              href={`https://solscan.io/tx/${request.txHash}?cluster=devnet`}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              className=\"text-xs text-primary hover:underline flex items-center\"\n                              data-testid={`view-tx-mobile-${request.id}`}\n                            >\n                              View TX\n                            </a>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                {cashoutRequests.length === 0 && (\n                  <div className=\"text-center py-12\" data-testid=\"no-cashouts\">\n                    <DollarSign className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold mb-2\">No cashout requests</h3>\n                    <p className=\"text-muted-foreground\">Cashout requests will appear here when users request them.</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Audit Logs Tab */}\n          <TabsContent value=\"audit\" className=\"space-y-4\" data-testid=\"audit-tab\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>Audit Logs</CardTitle>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    className=\"bg-destructive/20 text-destructive hover:bg-destructive/30 border-destructive/30\"\n                    onClick={() => setClearLogsDialogOpen(true)}\n                    data-testid=\"button-clear-logs\"\n                  >\n                    <Trash2 className=\"w-4 h-4 mr-2\" />\n                    Clear All Logs\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                {/* Desktop Table View */}\n                <div className=\"overflow-x-auto hidden md:block\">\n                  <table className=\"w-full\" data-testid=\"audit-logs-table\">\n                    <thead className=\"bg-muted\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          Date\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          Admin\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          Action\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          Details\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-border\">\n                      {auditLogs.map((log: any, index: number) => (\n                        <tr key={log.id} className=\"hover:bg-muted/30 transition-colors\" data-testid={`audit-log-${index}`}>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\">\n                            {new Date(log.createdAt).toLocaleDateString()} {new Date(log.createdAt).toLocaleTimeString()}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\" data-testid={`log-admin-${index}`}>\n                            Admin #{log.actorUserId.substring(0, 8)}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\" data-testid={`log-action-${index}`}>\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {log.action.replace(/_/g, \" \").toLowerCase()}\n                            </Badge>\n                          </td>\n                          <td className=\"px-6 py-4 text-sm text-muted-foreground\" data-testid={`log-details-${index}`}>\n                            {log.meta ? JSON.stringify(log.meta).substring(0, 100) + \"...\" : \"No details\"}\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n\n                {/* Mobile Card View */}\n                <div className=\"md:hidden divide-y divide-border\">\n                  {auditLogs.map((log: any, index: number) => (\n                    <div key={log.id} className=\"p-4 hover:bg-muted/30 transition-colors\" data-testid={`audit-log-card-${index}`}>\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div className=\"flex-1\">\n                          <div className=\"text-xs text-muted-foreground mb-1\">\n                            {new Date(log.createdAt).toLocaleDateString()} {new Date(log.createdAt).toLocaleTimeString()}\n                          </div>\n                          <div className=\"font-medium text-sm\">\n                            Admin #{log.actorUserId.substring(0, 8)}\n                          </div>\n                        </div>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {log.action.replace(/_/g, \" \").toLowerCase()}\n                        </Badge>\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {log.meta ? JSON.stringify(log.meta).substring(0, 100) + \"...\" : \"No details\"}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                {auditLogs.length === 0 && (\n                  <div className=\"text-center py-12\" data-testid=\"no-audit-logs\">\n                    <BarChart3 className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold mb-2\">No audit logs</h3>\n                    <p className=\"text-muted-foreground\">Admin actions will appear here.</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      <CreateContestModal\n        isOpen={isCreateContestModalOpen}\n        onClose={() => setIsCreateContestModalOpen(false)}\n        onSubmit={(formData) => createContestMutation.mutate(formData)}\n      />\n\n      {/* Bulk Delete Confirmation Dialog */}\n      <Dialog open={bulkDeleteDialogOpen} onOpenChange={setBulkDeleteDialogOpen}>\n        <DialogContent data-testid=\"bulk-delete-dialog\">\n          <DialogHeader>\n            <DialogTitle className=\"text-destructive\">Delete Selected Users</DialogTitle>\n            <DialogDescription asChild>\n              <div className=\"space-y-3\">\n                <p>\n                  You are about to permanently delete <span className=\"font-semibold\">{selectedUserIds.length}</span> users.\n                </p>\n                <div>\n                  <p className=\"text-destructive font-medium mb-2\">\n                    This will also delete ALL associated data including:\n                  </p>\n                  <ul className=\"list-disc list-inside space-y-1 text-sm ml-4 text-muted-foreground\">\n                    <li>All submissions and media files</li>\n                    <li>All votes and interactions</li>\n                    <li>GLORY balance and transaction history</li>\n                    <li>Profile data and settings</li>\n                    <li>Cashout requests</li>\n                  </ul>\n                </div>\n                <p className=\"font-semibold text-destructive\">\n                  This action cannot be undone!\n                </p>\n              </div>\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirmDelete\">\n                Type <span className=\"font-mono font-bold\">DELETE</span> to confirm\n              </Label>\n              <Input\n                id=\"confirmDelete\"\n                placeholder=\"Type DELETE to confirm\"\n                value={deleteConfirmText}\n                onChange={(e) => setDeleteConfirmText(e.target.value)}\n                data-testid=\"confirm-delete-input\"\n              />\n            </div>\n            <div className=\"bg-muted p-3 rounded-md\">\n              <h4 className=\"font-semibold text-sm mb-2\">Selected users:</h4>\n              <div className=\"max-h-32 overflow-y-auto space-y-1\">\n                {selectedUserIds.map(userId => {\n                  const user = filteredUsers.find((u: any) => u.id === userId);\n                  return (\n                    <div key={userId} className=\"text-sm text-muted-foreground\">\n                      {user?.username} ({user?.email})\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setBulkDeleteDialogOpen(false);\n                setDeleteConfirmText(\"\");\n              }}\n              data-testid=\"cancel-bulk-delete\"\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={confirmBulkDelete}\n              disabled={bulkDeleteUsersMutation.isPending || deleteConfirmText !== \"DELETE\"}\n              data-testid=\"confirm-bulk-delete\"\n            >\n              {bulkDeleteUsersMutation.isPending ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Deleting...\n                </>\n              ) : (\n                <>\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Delete {selectedUserIds.length} Users\n                </>\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Bulk Delete Contests Confirmation Dialog */}\n      <Dialog open={bulkDeleteContestsDialogOpen} onOpenChange={setBulkDeleteContestsDialogOpen}>\n        <DialogContent data-testid=\"bulk-delete-contests-dialog\">\n          <DialogHeader>\n            <DialogTitle className=\"text-destructive\">Delete Selected Contests</DialogTitle>\n            <DialogDescription asChild>\n              <div className=\"space-y-3\">\n                <p>\n                  You are about to permanently delete <span className=\"font-semibold\">{selectedContestIds.length}</span> contests.\n                </p>\n                <div>\n                  <p className=\"text-destructive font-medium mb-2\">\n                    This will also delete ALL associated data including:\n                  </p>\n                  <ul className=\"list-disc list-inside space-y-1 text-sm ml-4 text-muted-foreground\">\n                    <li>All submissions in these contests</li>\n                    <li>All votes on these submissions</li>\n                    <li>All media files associated with submissions</li>\n                    <li>Prize pool and reward distribution data</li>\n                  </ul>\n                </div>\n                <p className=\"font-semibold text-destructive\">\n                  This action cannot be undone!\n                </p>\n              </div>\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirmDeleteContests\">\n                Type <span className=\"font-mono font-bold\">DELETE</span> to confirm\n              </Label>\n              <Input\n                id=\"confirmDeleteContests\"\n                placeholder=\"Type DELETE to confirm\"\n                value={deleteContestsConfirmText}\n                onChange={(e) => setDeleteContestsConfirmText(e.target.value)}\n                data-testid=\"confirm-delete-contests-input\"\n              />\n            </div>\n            <div className=\"bg-muted p-3 rounded-md\">\n              <h4 className=\"font-semibold text-sm mb-2\">Selected contests:</h4>\n              <div className=\"max-h-32 overflow-y-auto space-y-1\">\n                {selectedContestIds.map(contestId => {\n                  const contest = contests.find((c: any) => c.id === contestId);\n                  return (\n                    <div key={contestId} className=\"text-sm text-muted-foreground\">\n                      {contest?.title} ({contest?.status})\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setBulkDeleteContestsDialogOpen(false);\n                setDeleteContestsConfirmText(\"\");\n              }}\n              data-testid=\"cancel-bulk-delete-contests\"\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={confirmBulkDeleteContests}\n              disabled={bulkDeleteContestsMutation.isPending || deleteContestsConfirmText !== \"DELETE\"}\n              data-testid=\"confirm-bulk-delete-contests\"\n            >\n              {bulkDeleteContestsMutation.isPending ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Deleting...\n                </>\n              ) : (\n                <>\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Delete {selectedContestIds.length} Contests\n                </>\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Clear Audit Logs Confirmation Dialog */}\n      <Dialog open={clearLogsDialogOpen} onOpenChange={setClearLogsDialogOpen}>\n        <DialogContent data-testid=\"clear-logs-dialog\">\n          <DialogHeader>\n            <DialogTitle className=\"text-destructive\">Clear All Audit Logs</DialogTitle>\n            <DialogDescription asChild>\n              <div className=\"space-y-3\">\n                <p>\n                  You are about to permanently delete <span className=\"font-semibold\">all audit logs</span>.\n                </p>\n                <p className=\"text-destructive font-medium\">\n                  This will remove all historical records of admin actions and system events.\n                </p>\n                <p className=\"font-semibold text-destructive\">\n                  This action cannot be undone!\n                </p>\n              </div>\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirmClearLogs\">\n                Type <span className=\"font-mono font-bold\">CLEAR</span> to confirm\n              </Label>\n              <Input\n                id=\"confirmClearLogs\"\n                placeholder=\"Type CLEAR to confirm\"\n                value={clearLogsConfirmText}\n                onChange={(e) => setClearLogsConfirmText(e.target.value)}\n                data-testid=\"confirm-clear-logs-input\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setClearLogsDialogOpen(false);\n                setClearLogsConfirmText(\"\");\n              }}\n              data-testid=\"cancel-clear-logs\"\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={() => clearAuditLogsMutation.mutate()}\n              disabled={clearAuditLogsMutation.isPending || clearLogsConfirmText !== \"CLEAR\"}\n              data-testid=\"confirm-clear-logs\"\n            >\n              {clearAuditLogsMutation.isPending ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Clearing...\n                </>\n              ) : (\n                <>\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Clear All Logs\n                </>\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Balance Edit Dialog */}\n      <Dialog open={gloryEditDialogOpen} onOpenChange={(open) => {\n        setGloryEditDialogOpen(open);\n        if (!open) {\n          // Reset state when dialog closes\n          setGloryAmountInput(\"\");\n          setSelectedUserId(\"\");\n          setSelectedCurrency(\"GLORY\");\n        }\n      }}>\n        <DialogContent data-testid=\"balance-edit-dialog\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center\">\n              <Crown className=\"w-5 h-5 mr-2 text-primary\" />\n              Edit User Balance\n            </DialogTitle>\n            <DialogDescription asChild>\n              <div className=\"space-y-2\">\n                <p>\n                  Edit the balance for the selected user.\n                </p>\n                <div className=\"bg-muted p-3 rounded-md text-sm\">\n                  <p className=\"font-medium mb-2\">Supported formats:</p>\n                  <ul className=\"space-y-1 text-muted-foreground\">\n                    <li><code className=\"bg-background px-1 rounded\">300</code> - Set balance to exactly 300</li>\n                    <li><code className=\"bg-background px-1 rounded\">+50</code> - Add 50 to current balance</li>\n                    <li><code className=\"bg-background px-1 rounded\">-20</code> - Subtract 20 from current balance</li>\n                  </ul>\n                </div>\n              </div>\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"currency\">Currency</Label>\n              <Select value={selectedCurrency} onValueChange={(value) => setSelectedCurrency(value as \"GLORY\" | \"SOL\" | \"USDC\")}>\n                <SelectTrigger id=\"currency\" data-testid=\"select-balance-currency\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"GLORY\">GLORY</SelectItem>\n                  <SelectItem value=\"SOL\">SOL</SelectItem>\n                  <SelectItem value=\"USDC\">USDC</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            {selectedUserId && (\n              <div className=\"bg-muted p-3 rounded-md\">\n                <div className=\"text-sm\">\n                  <span className=\"text-muted-foreground\">Current {selectedCurrency} balance:</span>\n                  <span className=\"font-mono font-semibold ml-2\">\n                    {(() => {\n                      const userBalance = filteredUsers.find((u: any) => u.id === selectedUserId);\n                      const balance = selectedCurrency === 'SOL' ? userBalance?.solBalance : \n                                     selectedCurrency === 'USDC' ? userBalance?.usdcBalance : \n                                     userBalance?.gloryBalance;\n                      return (balance || 0).toLocaleString();\n                    })()} {selectedCurrency}\n                  </span>\n                </div>\n              </div>\n            )}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"gloryAmount\">New {selectedCurrency} Amount</Label>\n              <Input\n                id=\"gloryAmount\"\n                placeholder=\"e.g., 300, +50, -20\"\n                value={gloryAmountInput}\n                onChange={(e) => setGloryAmountInput(e.target.value)}\n                data-testid=\"glory-amount-input\"\n              />\n              <p className=\"text-xs text-muted-foreground\">\n                Enter a number to set exact balance, or use +/- to add/subtract\n              </p>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setGloryEditDialogOpen(false);\n                setGloryAmountInput(\"\");\n                setSelectedUserId(\"\");\n                setSelectedCurrency(\"GLORY\");\n              }}\n              data-testid=\"cancel-balance-edit\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleGloryBalanceUpdate}\n              disabled={updateGloryBalanceMutation.isPending || !gloryAmountInput.trim()}\n              data-testid=\"confirm-glory-edit\"\n              className=\"bg-primary/20 text-primary hover:bg-primary/30 border-primary/30\"\n            >\n              {updateGloryBalanceMutation.isPending ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Updating...\n                </>\n              ) : (\n                <>\n                  <Crown className=\"h-4 w-4 mr-2\" />\n                  Update Balance\n                </>\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":122027},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport cookieParser from \"cookie-parser\";\nimport * as ed25519 from \"@noble/ed25519\";\nimport { storage } from \"./storage\";\nimport { authenticateToken, requireAdmin, requireApproved, generateToken, type AuthRequest } from \"./middleware/auth\";\nimport { votingRateLimiter } from \"./services/rate-limiter\";\nimport { upload, uploadFile, deleteFile } from \"./services/file-upload\";\nimport { calculateRewardDistribution } from \"./services/reward-distribution\";\nimport { ContestScheduler } from \"./contest-scheduler\";\nimport { verifyTransaction, solanaConnection } from \"./solana\";\nimport { findReference } from \"@solana/pay\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { z } from \"zod\";\nimport { \n  loginSchema, \n  registerSchema, \n  voteSubmissionSchema,\n  updateUserStatusSchema,\n  updateSubmissionStatusSchema,\n  updateWithdrawalAddressSchema,\n  bulkSubmissionIdsSchema,\n  insertContestSchema,\n  insertSubmissionSchema,\n  connectWalletSchema,\n  createCashoutRequestSchema,\n  updateCashoutStatusSchema,\n  approveCashoutSchema,\n  rejectCashoutSchema,\n  bulkCashoutIdsSchema,\n  bulkRejectCashoutSchema,\n  insertSiteSettingsSchema\n} from \"@shared/schema\";\n\n// Create contest scheduler instance\nexport const contestScheduler = new ContestScheduler(storage);\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  app.use(cookieParser());\n  \n  // Initialize contest scheduler\n  contestScheduler.initialize().catch(err => {\n    console.error(\"Failed to initialize contest scheduler:\", err);\n  });\n  \n  // Track recent GLORY balance requests to prevent duplicates\n  const recentGloryRequests = new Map<string, number>();\n\n\n  \n  // Serve uploaded files from public/uploads directory\n  const express = await import(\"express\");\n  const path = await import(\"path\");\n  app.use(\"/uploads\", express.default.static(path.join(process.cwd(), \"public\", \"uploads\")));\n\n  // Auth routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const { username, email, password } = registerSchema.parse(req.body);\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ error: \"User with this email already exists\" });\n      }\n\n      const existingUsername = await storage.getUserByUsername(username);\n      if (existingUsername) {\n        return res.status(400).json({ error: \"Username already taken\" });\n      }\n\n      // Hash password\n      const passwordHash = await bcrypt.hash(password, 10);\n\n      // Create user\n      const user = await storage.createUser({\n        username,\n        email,\n        passwordHash,\n        role: \"user\",\n        status: \"pending\" // Requires admin approval\n      });\n\n      res.status(201).json({ \n        message: \"User created successfully. Please wait for admin approval.\",\n        user: { id: user.id, username: user.username, email: user.email, status: user.status }\n      });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid input\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      const validPassword = await bcrypt.compare(password, user.passwordHash);\n      if (!validPassword) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      if (user.status === \"banned\") {\n        return res.status(403).json({ error: \"Account is banned\" });\n      }\n\n      // Generate JWT token\n      const token = generateToken({\n        id: user.id,\n        email: user.email,\n        role: user.role,\n        status: user.status\n      });\n\n      // Set httpOnly cookie\n      res.cookie(\"authToken\", token, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === \"production\",\n        sameSite: \"lax\",\n        maxAge: 7 * 24 * 60 * 60 * 1000 // 7 days\n      });\n\n      res.json({ \n        user: { \n          id: user.id, \n          username: user.username, \n          email: user.email, \n          role: user.role, \n          status: user.status,\n          gloryBalance: user.gloryBalance\n        }\n      });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid input\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    res.clearCookie(\"authToken\");\n    res.json({ message: \"Logged out successfully\" });\n  });\n\n  app.get(\"/api/me\", authenticateToken, async (req: AuthRequest, res) => {\n    const user = await storage.getUser(req.user!.id);\n    if (!user) {\n      return res.status(404).json({ error: \"User not found\" });\n    }\n\n    res.json({\n      id: user.id,\n      username: user.username,\n      email: user.email,\n      role: user.role,\n      status: user.status,\n      gloryBalance: user.gloryBalance,\n      solBalance: user.solBalance,\n      usdcBalance: user.usdcBalance,\n      avatarUrl: user.avatarUrl,\n      withdrawalAddress: user.withdrawalAddress,\n      createdAt: user.createdAt\n    });\n  });\n\n  app.get(\"/api/me/submissions\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const { status } = req.query;\n      const filters: any = { userId: req.user!.id };\n      \n      if (status && status !== 'all') {\n        filters.status = status as string;\n      }\n      \n      const submissions = await storage.getSubmissions(filters);\n      res.json(submissions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch submissions\" });\n    }\n  });\n\n  // Update profile (username)\n  app.patch(\"/api/me\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const { username } = req.body;\n      const userId = req.user!.id;\n\n      if (!username || username.trim().length < 3) {\n        return res.status(400).json({ error: \"Username must be at least 3 characters\" });\n      }\n\n      // Check if username is already taken by another user\n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser && existingUser.id !== userId) {\n        return res.status(400).json({ error: \"Username already taken\" });\n      }\n\n      await storage.updateUser(userId, { username: username.trim() });\n      const updatedUser = await storage.getUser(userId);\n\n      res.json({\n        id: updatedUser!.id,\n        username: updatedUser!.username,\n        email: updatedUser!.email,\n        role: updatedUser!.role,\n        status: updatedUser!.status,\n        gloryBalance: updatedUser!.gloryBalance,\n        avatarUrl: updatedUser!.avatarUrl,\n        createdAt: updatedUser!.createdAt\n      });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Failed to update profile\" });\n    }\n  });\n\n  // Upload/update avatar\n  app.post(\"/api/me/avatar\", authenticateToken, upload.single(\"avatar\"), async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n\n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      const { url } = await uploadFile(req.file);\n\n      await storage.updateUser(userId, { avatarUrl: url });\n      const updatedUser = await storage.getUser(userId);\n\n      res.json({\n        id: updatedUser!.id,\n        username: updatedUser!.username,\n        email: updatedUser!.email,\n        role: updatedUser!.role,\n        status: updatedUser!.status,\n        gloryBalance: updatedUser!.gloryBalance,\n        avatarUrl: updatedUser!.avatarUrl,\n        createdAt: updatedUser!.createdAt\n      });\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to upload avatar\" });\n    }\n  });\n\n  // Delete profile\n  app.delete(\"/api/me\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      \n      // Delete user (cascade will handle related data)\n      await storage.deleteUser(userId);\n\n      // Clear auth cookie\n      res.clearCookie(\"authToken\");\n      \n      res.json({ message: \"Profile deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to delete profile\" });\n    }\n  });\n\n  // Update withdrawal address\n  app.patch(\"/api/users/withdrawal-address\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const { address } = updateWithdrawalAddressSchema.parse(req.body);\n      const userId = req.user!.id;\n\n      const updatedUser = await storage.updateWithdrawalAddress(userId, address);\n      \n      if (!updatedUser) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      res.json({ \n        success: true, \n        withdrawalAddress: updatedUser.withdrawalAddress \n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid withdrawal address format\" });\n      }\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to update withdrawal address\" });\n    }\n  });\n\n  // Wallet routes\n  app.post(\"/api/wallet/connect\", authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    try {\n      const { address, provider, signature, message } = connectWalletSchema.parse(req.body);\n      const userId = req.user!.id;\n\n      // Check if wallet is already connected to another user\n      const existingWallet = await storage.getUserWalletByAddress(address);\n      if (existingWallet && existingWallet.userId !== userId) {\n        return res.status(400).json({ error: \"This wallet is already connected to another account\" });\n      }\n\n      // Check if user already has a wallet\n      const userWallet = await storage.getUserWallet(userId);\n      if (userWallet) {\n        return res.status(400).json({ error: \"User already has a connected wallet\" });\n      }\n\n      // Verify signature\n      try {\n        const messageBytes = new TextEncoder().encode(message);\n        const signatureBytes = Buffer.from(signature, 'base64');\n        const publicKeyBytes = Buffer.from(address, 'base64');\n        \n        const isValid = await ed25519.verify(signatureBytes, messageBytes, publicKeyBytes);\n        \n        if (!isValid) {\n          return res.status(400).json({ error: \"Invalid signature\" });\n        }\n      } catch (error) {\n        return res.status(400).json({ error: \"Signature verification failed\" });\n      }\n\n      // Create wallet\n      const wallet = await storage.createUserWallet({\n        userId,\n        address,\n        provider,\n        status: \"active\",\n        verifiedAt: new Date()\n      });\n\n      res.json({ wallet });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Failed to connect wallet\" });\n    }\n  });\n\n  app.get(\"/api/wallet/me\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const wallet = await storage.getUserWallet(req.user!.id);\n      res.json({ wallet });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch wallet\" });\n    }\n  });\n\n  // Solana payment verification\n  const verifySolanaPaymentSchema = z.object({\n    signature: z.string(),\n    expectedAmount: z.number().positive(),\n    recipientAddress: z.string(),\n    contestId: z.string().uuid().optional(),\n    submissionId: z.string().uuid().optional(),\n  });\n\n  app.post(\"/api/payment/verify-solana\", authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    try {\n      const { signature, expectedAmount, recipientAddress, contestId, submissionId } = \n        verifySolanaPaymentSchema.parse(req.body);\n      \n      const userId = req.user!.id;\n\n      // Get user's connected wallet\n      const userWallet = await storage.getUserWallet(userId);\n      if (!userWallet) {\n        return res.status(400).json({ error: \"No wallet connected. Please connect your Solana wallet first.\" });\n      }\n\n      // Check if transaction already used (prevent replay attacks)\n      const existingTx = await storage.getGloryTransactionByHash(signature);\n      if (existingTx) {\n        return res.status(400).json({ error: \"Transaction already verified. Each transaction can only be used once.\" });\n      }\n\n      // Verify transaction on Solana blockchain\n      const txResult = await verifyTransaction(signature);\n\n      if (!txResult.confirmed) {\n        return res.status(400).json({ error: \"Transaction not found or not confirmed on Solana blockchain\" });\n      }\n\n      // Verify payer matches user's connected wallet\n      if (txResult.from !== userWallet.address) {\n        return res.status(400).json({ \n          error: `Transaction payer mismatch. Expected ${userWallet.address}, got ${txResult.from}` \n        });\n      }\n\n      // Verify transaction details\n      if (!txResult.amount || txResult.amount < expectedAmount) {\n        return res.status(400).json({ \n          error: `Insufficient payment amount. Expected ${expectedAmount} SOL, received ${txResult.amount || 0} SOL` \n        });\n      }\n\n      if (txResult.to !== recipientAddress) {\n        return res.status(400).json({ \n          error: \"Payment recipient address mismatch\" \n        });\n      }\n\n      // Record transaction in glory ledger\n      await storage.createGloryTransaction({\n        userId,\n        delta: 0, // Crypto payments don't affect GLORY balance\n        currency: \"SOL\",\n        reason: `Solana payment verified - ${expectedAmount} SOL`,\n        contestId: contestId || null,\n        submissionId: submissionId || null,\n        txHash: signature,\n        metadata: {\n          from: txResult.from,\n          to: txResult.to,\n          amount: txResult.amount,\n          verifiedAt: new Date().toISOString(),\n        }\n      });\n\n      res.json({ \n        success: true, \n        transaction: {\n          signature,\n          amount: txResult.amount,\n          from: txResult.from,\n          to: txResult.to,\n        }\n      });\n    } catch (error) {\n      console.error(\"Solana payment verification error:\", error);\n      res.status(400).json({ \n        error: error instanceof Error ? error.message : \"Failed to verify Solana payment\" \n      });\n    }\n  });\n\n  // Find payment by reference (Solana Pay reference tracking)\n  const findPaymentByReferenceSchema = z.object({\n    reference: z.string(), // Base58 public key\n    expectedAmount: z.number().positive(),\n    recipientAddress: z.string(),\n    contestId: z.string().uuid().optional(),\n    submissionId: z.string().uuid().optional(),\n  });\n\n  app.post(\"/api/payment/find-by-reference\", authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    try {\n      const { reference, expectedAmount, recipientAddress, contestId, submissionId } = \n        findPaymentByReferenceSchema.parse(req.body);\n      \n      const userId = req.user!.id;\n\n      // Get user's connected wallet\n      const userWallet = await storage.getUserWallet(userId);\n      if (!userWallet) {\n        return res.status(400).json({ error: \"No wallet connected. Please connect your Solana wallet first.\" });\n      }\n\n      // Convert reference string to PublicKey\n      const referenceKey = new PublicKey(reference);\n\n      // Find transaction using reference\n      const signatureInfo = await findReference(solanaConnection, referenceKey, { finality: 'confirmed' });\n      \n      if (!signatureInfo || !signatureInfo.signature) {\n        return res.json({ found: false, message: \"Payment not found yet. Please complete the transaction in your wallet.\" });\n      }\n\n      const signature = signatureInfo.signature;\n\n      // Check if transaction already processed\n      const existingTx = await storage.getGloryTransactionByHash(signature);\n      if (existingTx) {\n        return res.json({ \n          found: true, \n          alreadyProcessed: true,\n          txHash: signature,\n          message: \"Payment already verified\" \n        });\n      }\n\n      // Verify transaction details\n      const txResult = await verifyTransaction(signature);\n\n      if (!txResult.confirmed) {\n        return res.json({ found: false, message: \"Transaction found but not yet confirmed\" });\n      }\n\n      // Verify payer matches user's connected wallet\n      if (txResult.from !== userWallet.address) {\n        return res.status(400).json({ \n          error: `Transaction payer mismatch. Expected ${userWallet.address}, got ${txResult.from}` \n        });\n      }\n\n      // Verify transaction details\n      if (!txResult.amount || txResult.amount < expectedAmount) {\n        return res.status(400).json({ \n          error: `Insufficient payment amount. Expected ${expectedAmount} SOL, received ${txResult.amount || 0} SOL` \n        });\n      }\n\n      if (txResult.to !== recipientAddress) {\n        return res.status(400).json({ \n          error: \"Payment recipient address mismatch\" \n        });\n      }\n\n      // Record transaction in glory ledger\n      await storage.createGloryTransaction({\n        userId,\n        delta: 0, // Crypto payments don't affect GLORY balance\n        currency: \"SOL\",\n        reason: `Solana payment verified via reference - ${expectedAmount} SOL`,\n        contestId: contestId || null,\n        submissionId: submissionId || null,\n        txHash: signature,\n        metadata: {\n          reference,\n          from: txResult.from,\n          to: txResult.to,\n          amount: txResult.amount,\n          verifiedAt: new Date().toISOString(),\n        }\n      });\n\n      res.json({ \n        found: true,\n        alreadyProcessed: false,\n        success: true, \n        txHash: signature,\n        transaction: {\n          signature,\n          amount: txResult.amount,\n          from: txResult.from,\n          to: txResult.to,\n        }\n      });\n    } catch (error) {\n      console.error(\"Find payment by reference error:\", error);\n      \n      // Handle specific errors\n      if (error instanceof Error) {\n        if (error.message.includes(\"not found\")) {\n          return res.json({ found: false, message: \"Payment not found yet. Please complete the transaction.\" });\n        }\n      }\n      \n      res.status(400).json({ \n        error: error instanceof Error ? error.message : \"Failed to find payment\" \n      });\n    }\n  });\n\n  // Cashout routes\n  app.post(\"/api/cashout/request\", authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    try {\n      const { withdrawalAddress, amountGlory, tokenType } = createCashoutRequestSchema.parse(req.body);\n      const userId = req.user!.id;\n\n      // Check user balance\n      const user = await storage.getUser(userId);\n      if (!user || user.gloryBalance < amountGlory) {\n        return res.status(400).json({ error: \"Insufficient GLORY balance\" });\n      }\n\n      // Calculate token amount (for MVP, use 1:1 ratio or configure exchange rate)\n      const exchangeRate = 1; // 1 GLORY = 1 USDC (adjust as needed)\n      const amountToken = (amountGlory * exchangeRate).toString();\n\n      // Create cashout request\n      const request = await storage.createCashoutRequest({\n        userId,\n        withdrawalAddress,\n        amountGlory,\n        amountToken,\n        tokenType: tokenType || \"USDC\",\n        status: \"pending\"\n      });\n\n      // Create event log\n      await storage.createCashoutEvent({\n        cashoutRequestId: request.id,\n        fromStatus: \"created\",\n        toStatus: \"pending\",\n        actorUserId: userId,\n        notes: \"Cashout request created\"\n      });\n\n      res.json({ request });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Failed to create cashout request\" });\n    }\n  });\n\n  app.get(\"/api/cashout/requests\", authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    try {\n      const requests = await storage.getCashoutRequests({ userId: req.user!.id });\n      res.json({ requests });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch cashout requests\" });\n    }\n  });\n\n  app.get(\"/api/cashout/requests/:id\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const request = await storage.getCashoutRequest(req.params.id);\n      if (!request) {\n        return res.status(404).json({ error: \"Cashout request not found\" });\n      }\n\n      // Check if user owns the request or is admin\n      if (request.userId !== req.user!.id && req.user!.role !== \"admin\") {\n        return res.status(403).json({ error: \"Unauthorized\" });\n      }\n\n      const events = await storage.getCashoutEvents(request.id);\n      res.json({ request, events });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch cashout request\" });\n    }\n  });\n\n  // Contest routes\n  app.get(\"/api/contests\", async (req, res) => {\n    try {\n      const { status } = req.query;\n      const contests = await storage.getContests(status ? { status: status as string } : undefined);\n      \n      // Auto-end contests that have passed their endAt time\n      const now = new Date();\n      const updatedContests = await Promise.all(\n        contests.map(async (contest) => {\n          if (contest.status === \"active\" && new Date(contest.endAt) < now) {\n            const updated = await storage.updateContest(contest.id, { status: \"ended\" });\n            return updated || contest;\n          }\n          return contest;\n        })\n      );\n      \n      // Filter out contests that were auto-ended if user requested a specific status\n      const filteredContests = status \n        ? updatedContests.filter(contest => contest.status === status)\n        : updatedContests;\n      \n      // Flatten prizeDistribution from config for frontend\n      const contestsWithPrizes = filteredContests.map(contest => ({\n        ...contest,\n        prizeDistribution: (contest.config as any)?.prizeDistribution || []\n      }));\n      \n      res.json(contestsWithPrizes);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch contests\" });\n    }\n  });\n\n  app.get(\"/api/contests/:id\", async (req, res) => {\n    try {\n      let contest = await storage.getContest(req.params.id);\n      if (!contest) {\n        return res.status(404).json({ error: \"Contest not found\" });\n      }\n\n      // Auto-end contest if it has passed its endAt time\n      const now = new Date();\n      if (contest.status === \"active\" && new Date(contest.endAt) < now) {\n        const updated = await storage.updateContest(contest.id, { status: \"ended\" });\n        contest = updated || contest;\n      }\n\n      // Get top 10 submissions for this contest\n      const topSubmissions = await storage.getTopSubmissionsByContest(contest.id, 10);\n      \n      res.json({\n        ...contest,\n        prizeDistribution: (contest.config as any)?.prizeDistribution || [],\n        topSubmissions\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch contest\" });\n    }\n  });\n\n  app.post(\"/api/admin/contests\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const contestData = insertContestSchema.parse(req.body);\n      const contest = await storage.createContest(contestData);\n\n      // Log admin action\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"CREATE_CONTEST\",\n        meta: { contestId: contest.id, title: contest.title }\n      });\n\n      res.status(201).json(contest);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid input\" });\n    }\n  });\n\n  app.patch(\"/api/admin/contests/:id\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      let updateData = { ...req.body };\n      \n      // Convert date strings to Date objects for Drizzle\n      if (updateData.startAt) {\n        updateData.startAt = new Date(updateData.startAt);\n      }\n      if (updateData.endAt) {\n        updateData.endAt = new Date(updateData.endAt);\n      }\n      \n      // If no cover image is provided or it's explicitly set to null/empty, use top voted submission\n      if (!updateData.coverImageUrl || updateData.coverImageUrl === '') {\n        const topSubmissions = await storage.getTopSubmissionsByContest(req.params.id, 1);\n        if (topSubmissions.length > 0 && topSubmissions[0].type === 'image') {\n          updateData.coverImageUrl = topSubmissions[0].mediaUrl;\n        }\n      }\n      \n      const updatedContest = await storage.updateContest(req.params.id, updateData);\n      if (!updatedContest) {\n        return res.status(404).json({ error: \"Contest not found\" });\n      }\n\n      // Reschedule automatic end if endAt was updated and contest is active\n      if (updateData.endAt && updatedContest.status === \"active\") {\n        contestScheduler.rescheduleContest(updatedContest.id, updatedContest.endAt);\n      }\n\n      // Log admin action\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"UPDATE_CONTEST\",\n        meta: { contestId: updatedContest.id, updates: req.body }\n      });\n\n      res.json(updatedContest);\n    } catch (error) {\n      console.error(\"Error updating contest:\", error);\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid input\" });\n    }\n  });\n\n  app.patch(\"/api/admin/contests/:id/activate\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const contest = await storage.getContest(req.params.id);\n      if (!contest) {\n        return res.status(404).json({ error: \"Contest not found\" });\n      }\n\n      if (contest.status !== \"draft\") {\n        return res.status(400).json({ error: \"Only draft contests can be activated\" });\n      }\n\n      // Update contest status to active\n      const updatedContest = await storage.updateContest(contest.id, { status: \"active\" });\n\n      // Schedule automatic end for this contest\n      if (updatedContest && updatedContest.endAt) {\n        contestScheduler.scheduleContestEnd(updatedContest.id, updatedContest.endAt);\n      }\n\n      // Log admin action\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"ACTIVATE_CONTEST\",\n        meta: { contestId: contest.id, title: contest.title }\n      });\n\n      res.json({ message: \"Contest activated successfully\", contest: updatedContest });\n    } catch (error) {\n      console.error(\"Error activating contest:\", error);\n      res.status(500).json({ \n        error: \"Failed to activate contest\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  app.post(\"/api/admin/contests/:id/end\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const contest = await storage.getContest(req.params.id);\n      if (!contest) {\n        return res.status(404).json({ error: \"Contest not found\" });\n      }\n\n      if (contest.status !== \"active\") {\n        return res.status(400).json({ error: \"Contest is not active\" });\n      }\n\n      // Cancel any scheduled automatic distribution\n      contestScheduler.cancelJob(contest.id);\n\n      // Distribute rewards using transaction-like approach\n      await storage.distributeContestRewards(contest.id);\n\n      // Log admin action\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"END_CONTEST\",\n        meta: { contestId: contest.id, prizePool: contest.prizeGlory }\n      });\n\n      res.json({ message: \"Contest ended and rewards distributed successfully\" });\n    } catch (error) {\n      console.error(\"Error ending contest:\", error);\n      res.status(500).json({ \n        error: \"Failed to end contest and distribute rewards\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  app.delete(\"/api/admin/contests/:id\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const contest = await storage.getContest(req.params.id);\n      if (!contest) {\n        return res.status(404).json({ error: \"Contest not found\" });\n      }\n\n      await storage.deleteContest(req.params.id);\n\n      // Log admin action\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"DELETE_CONTEST\",\n        meta: { contestId: contest.id, title: contest.title }\n      });\n\n      res.json({ message: \"Contest deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting contest:\", error);\n      res.status(500).json({ \n        error: \"Failed to delete contest\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Bulk activate contests\n  app.patch(\"/api/admin/contests/bulk/activate\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { contestIds } = z.object({ contestIds: z.array(z.string()).min(1) }).parse(req.body);\n      \n      let updatedCount = 0;\n      const updatedContests = [];\n      \n      for (const contestId of contestIds) {\n        const contest = await storage.getContest(contestId);\n        if (contest && contest.status === \"draft\") {\n          const updated = await storage.updateContest(contestId, { status: \"active\" });\n          if (updated) {\n            updatedCount++;\n            updatedContests.push({ id: updated.id, title: updated.title });\n            // Schedule automatic end for each activated contest\n            if (updated.endAt) {\n              contestScheduler.scheduleContestEnd(updated.id, updated.endAt);\n            }\n          }\n        }\n      }\n\n      // Log admin action\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"BULK_ACTIVATE_CONTESTS\",\n        meta: { contestIds, updatedContests, updatedCount }\n      });\n\n      res.json({ success: true, updatedCount, message: `Successfully activated ${updatedCount} contests` });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid input\" });\n    }\n  });\n\n  // Bulk end and distribute contests\n  app.post(\"/api/admin/contests/bulk/end\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { contestIds } = z.object({ contestIds: z.array(z.string()).min(1) }).parse(req.body);\n      \n      let endedCount = 0;\n      const endedContests = [];\n      const errors = [];\n      \n      for (const contestId of contestIds) {\n        try {\n          const contest = await storage.getContest(contestId);\n          if (contest && contest.status === \"active\") {\n            // Cancel any scheduled automatic distribution\n            contestScheduler.cancelJob(contestId);\n            \n            await storage.distributeContestRewards(contestId);\n            endedCount++;\n            endedContests.push({ id: contest.id, title: contest.title, prizeGlory: contest.prizeGlory });\n          }\n        } catch (error) {\n          errors.push({ contestId, error: error instanceof Error ? error.message : \"Unknown error\" });\n        }\n      }\n\n      // Log admin action\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"BULK_END_CONTESTS\",\n        meta: { contestIds, endedContests, endedCount, errors }\n      });\n\n      res.json({ \n        success: true, \n        endedCount, \n        message: `Successfully ended ${endedCount} contests and distributed rewards`,\n        errors: errors.length > 0 ? errors : undefined\n      });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid input\" });\n    }\n  });\n\n  // Bulk delete contests\n  app.delete(\"/api/admin/contests/bulk\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { contestIds } = z.object({ contestIds: z.array(z.string()).min(1) }).parse(req.body);\n      \n      let deletedCount = 0;\n      const deletedContests = [];\n      \n      for (const contestId of contestIds) {\n        const contest = await storage.getContest(contestId);\n        if (contest) {\n          await storage.deleteContest(contestId);\n          deletedCount++;\n          deletedContests.push({ id: contest.id, title: contest.title });\n        }\n      }\n\n      // Log admin action\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"BULK_DELETE_CONTESTS\",\n        meta: { contestIds, deletedContests, deletedCount }\n      });\n\n      res.json({ success: true, deletedCount, message: `Successfully deleted ${deletedCount} contests` });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid input\" });\n    }\n  });\n\n  // Submission routes - optional auth (public can see approved, users can see approved + their own pending)\n  app.get(\"/api/submissions\", async (req: AuthRequest, res) => {\n    try {\n      // Try to authenticate but don't require it\n      const authToken = req.cookies.authToken;\n      let isUserAdmin = false;\n      let currentUserId: string | undefined;\n      \n      if (authToken) {\n        try {\n          const decoded = jwt.verify(authToken, process.env.SESSION_SECRET!) as any;\n          isUserAdmin = decoded.role === \"admin\";\n          currentUserId = decoded.userId;\n        } catch (error) {\n          // Token invalid, treat as unauthenticated\n        }\n      }\n      \n      const { contestId, userId, status, page, limit } = req.query;\n      \n      // Parse pagination parameters\n      const pageNum = page ? parseInt(page as string, 10) : 1;\n      const limitNum = limit ? parseInt(limit as string, 10) : 20;\n      \n      // Validate pagination parameters\n      const validPage = Math.max(1, pageNum);\n      const validLimit = Math.min(Math.max(1, limitNum), 100); // Max 100 items per page\n      \n      // Admins can see all submissions with any status filter\n      if (isUserAdmin) {\n        const submissions = await storage.getSubmissions({\n          contestId: contestId as string | undefined,\n          userId: userId as string | undefined,\n          status: status as string | undefined,\n          page: validPage,\n          limit: validLimit\n        });\n        return res.json(submissions);\n      }\n      \n      // Regular users see approved submissions + their own submissions (any status)\n      const approvedSubmissions = await storage.getSubmissions({\n        contestId: contestId as string | undefined,\n        userId: userId as string | undefined,\n        status: \"approved\",\n        page: validPage,\n        limit: validLimit\n      });\n      \n      // If user is authenticated, also get their own pending/rejected submissions\n      if (currentUserId) {\n        const ownSubmissions = await storage.getSubmissions({\n          contestId: contestId as string | undefined,\n          userId: currentUserId,\n          status: undefined, // Get all statuses for own submissions\n          page: 1,\n          limit: 1000 // Get all user's own submissions without limit\n        });\n        \n        // Merge and deduplicate (approved submissions might already be in the list)\n        const submissionMap = new Map();\n        [...approvedSubmissions, ...ownSubmissions].forEach(sub => {\n          submissionMap.set(sub.id, sub);\n        });\n        \n        // Return merged submissions without additional slicing\n        return res.json(Array.from(submissionMap.values()));\n      }\n      \n      // Unauthenticated users only see approved\n      res.json(approvedSubmissions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch submissions\" });\n    }\n  });\n\n  // Simple file upload endpoint for cover images, etc.\n  app.post(\"/api/upload\", authenticateToken, upload.single(\"file\"), async (req: AuthRequest, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"File is required\" });\n      }\n\n      // Upload file and return URL\n      const uploadResult = await uploadFile(req.file);\n      res.status(200).json({ \n        url: uploadResult.url,\n        thumbnailUrl: uploadResult.thumbnailUrl \n      });\n    } catch (error) {\n      console.error(\"File upload error:\", error);\n      res.status(500).json({ error: \"Failed to upload file\" });\n    }\n  });\n\n  app.post(\"/api/submissions\", authenticateToken, requireApproved, upload.single(\"file\"), async (req: AuthRequest, res) => {\n    try {\n      const { contestId, title, description, type, mediaUrl, thumbnailUrl } = req.body;\n      \n      // Check if either file or mediaUrl is provided (gallery selection)\n      if (!req.file && !mediaUrl) {\n        return res.status(400).json({ error: \"File or mediaUrl is required\" });\n      }\n\n      if (!title || !type) {\n        return res.status(400).json({ error: \"Title and type are required\" });\n      }\n\n      // Contest validation only if contestId is provided\n      let contest = null;\n      if (contestId) {\n        contest = await storage.getContest(contestId);\n        if (!contest) {\n          return res.status(404).json({ error: \"Contest not found\" });\n        }\n\n        if (contest.status !== \"active\") {\n          return res.status(400).json({ error: \"Contest is not accepting submissions\" });\n        }\n\n        // Check contest timing for submissions\n        const now = new Date();\n        if (now < contest.startAt) {\n          return res.status(400).json({ error: \"Contest has not started yet\" });\n        }\n        if (now > contest.endAt) {\n          return res.status(400).json({ error: \"Contest has ended\" });\n        }\n\n        // Check submission deadline from contest config\n        const config = contest.config as any;\n        if (config && config.submissionEndAt) {\n          if (now > new Date(config.submissionEndAt)) {\n            return res.status(400).json({ error: \"Submission deadline has passed\" });\n          }\n        }\n\n        // Validate contest type - check if submission type matches contest allowed type\n        if (config && config.contestType) {\n          const contestType = config.contestType.toLowerCase();\n          const submissionType = type.toLowerCase();\n          \n          if (contestType === 'image' && submissionType !== 'image') {\n            return res.status(400).json({ error: \"This contest only accepts image submissions\" });\n          }\n          if (contestType === 'video' && submissionType !== 'video') {\n            return res.status(400).json({ error: \"This contest only accepts video submissions\" });\n          }\n        }\n\n        // Validate max submissions per user\n        if (config && config.maxSubmissions) {\n          const userSubmissionsCount = await storage.getUserSubmissionsInContest(req.user!.id, contestId);\n          if (userSubmissionsCount >= config.maxSubmissions) {\n            return res.status(400).json({ \n              error: `You have reached the maximum of ${config.maxSubmissions} submission(s) for this contest` \n            });\n          }\n        }\n\n        // Validate file size limit (if uploading new file)\n        if (req.file && config && config.fileSizeLimit) {\n          const fileSizeMB = req.file.size / (1024 * 1024);\n          if (fileSizeMB > config.fileSizeLimit) {\n            return res.status(400).json({ \n              error: `File size exceeds the limit of ${config.fileSizeLimit}MB for this contest` \n            });\n          }\n        }\n\n        // Check if user has sufficient balance for entry fee (but don't deduct yet)\n        if (config && config.entryFee && config.entryFeeAmount) {\n          const user = await storage.getUser(req.user!.id);\n          if (!user) {\n            return res.status(404).json({ error: \"User not found\" });\n          }\n\n          const currency = config.entryFeeCurrency || \"GLORY\";\n          let balance = user.gloryBalance;\n          if (currency === \"SOL\") balance = user.solBalance;\n          else if (currency === \"USDC\") balance = user.usdcBalance;\n\n          if (balance < config.entryFeeAmount) {\n            return res.status(400).json({ \n              error: `Insufficient ${currency} balance. Entry fee is ${config.entryFeeAmount} ${currency}, you have ${balance} ${currency}` \n            });\n          }\n        }\n      }\n\n      let finalMediaUrl: string;\n      let finalThumbnailUrl: string | null = null;\n      let cloudinaryPublicId: string | null = null;\n      let cloudinaryResourceType: string | null = null;\n      let isGalleryReuse = false;\n\n      // Upload new file or use existing mediaUrl from gallery\n      if (req.file) {\n        const uploadResult = await uploadFile(req.file);\n        finalMediaUrl = uploadResult.url;\n        finalThumbnailUrl = uploadResult.thumbnailUrl || null;\n        cloudinaryPublicId = uploadResult.cloudinaryPublicId || null;\n        cloudinaryResourceType = uploadResult.cloudinaryResourceType || null;\n      } else {\n        // Using existing image from gallery - don't delete shared asset\n        finalMediaUrl = mediaUrl;\n        finalThumbnailUrl = thumbnailUrl || null;\n        isGalleryReuse = true;\n        // Note: cloudinaryPublicId stays null to prevent deletion of shared asset\n      }\n\n      // Create submission\n      const submission = await storage.createSubmission({\n        userId: req.user!.id,\n        contestId: contestId || null,\n        contestName: contest ? contest.title : null, // Preserve contest name for historical reference\n        type,\n        title,\n        description: description || \"\",\n        mediaUrl: finalMediaUrl,\n        thumbnailUrl: finalThumbnailUrl,\n        cloudinaryPublicId,\n        cloudinaryResourceType,\n        status: \"pending\" // Requires admin approval\n      });\n\n      // Deduct entry fee AFTER submission is successfully created\n      if (contest && (contest.config as any)?.entryFee && (contest.config as any)?.entryFeeAmount) {\n        const config = contest.config as any;\n        const currency = config.entryFeeCurrency || \"GLORY\";\n        \n        await storage.updateUserBalance(req.user!.id, -config.entryFeeAmount, currency);\n        \n        await storage.createGloryTransaction({\n          userId: req.user!.id,\n          delta: -config.entryFeeAmount,\n          currency,\n          reason: `Entry fee for contest: ${contest.title}`,\n          contestId: contestId || null,\n          submissionId: submission.id\n        });\n      }\n\n      res.status(201).json(submission);\n    } catch (error) {\n      console.error(\"Submission creation error:\", error);\n      res.status(500).json({ error: \"Failed to create submission\" });\n    }\n  });\n\n  // Get single submission by ID (public with optional auth)\n  app.get(\"/api/submissions/:id\", async (req: AuthRequest, res) => {\n    try {\n      // Try to authenticate but don't require it\n      const authToken = req.cookies.authToken;\n      let isUserAdmin = false;\n      let currentUserId: string | undefined;\n      \n      if (authToken) {\n        try {\n          const decoded = jwt.verify(authToken, process.env.SESSION_SECRET!) as any;\n          isUserAdmin = decoded.role === \"admin\";\n          currentUserId = decoded.userId;\n        } catch (error) {\n          // Token invalid, treat as unauthenticated\n        }\n      }\n\n      const submission = await storage.getSubmission(req.params.id);\n      \n      if (!submission) {\n        return res.status(404).json({ error: \"Submission not found\" });\n      }\n\n      // Check access permissions\n      const isOwnSubmission = currentUserId === submission.userId;\n      const isApproved = submission.status === \"approved\";\n\n      // Allow access if: admin, own submission, or approved submission\n      if (!isUserAdmin && !isOwnSubmission && !isApproved) {\n        return res.status(404).json({ error: \"Submission not found\" });\n      }\n\n      // Get user votes if authenticated\n      let hasVoted = false;\n      if (currentUserId) {\n        const vote = await storage.getVote(currentUserId, submission.id);\n        hasVoted = !!vote;\n      }\n\n      // Get user and contest info\n      const user = await storage.getUser(submission.userId);\n      let contest = null;\n      if (submission.contestId) {\n        contest = await storage.getContest(submission.contestId);\n      }\n\n      const enrichedSubmission = {\n        ...submission,\n        hasVoted,\n        voteCount: submission.votesCount,\n        user: user ? {\n          id: user.id,\n          username: user.username\n        } : null,\n        contest: contest ? {\n          id: contest.id,\n          title: contest.title,\n          slug: contest.slug\n        } : null\n      };\n\n      res.json(enrichedSubmission);\n    } catch (error) {\n      console.error(\"Error fetching submission:\", error);\n      res.status(500).json({ error: \"Failed to fetch submission\" });\n    }\n  });\n\n  // User update own submission\n  app.patch(\"/api/submissions/:id\", authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    try {\n      const submission = await storage.getSubmission(req.params.id);\n      if (!submission) {\n        return res.status(404).json({ error: \"Submission not found\" });\n      }\n\n      // Check if user owns the submission\n      if (submission.userId !== req.user!.id) {\n        return res.status(403).json({ error: \"Not authorized to update this submission\" });\n      }\n\n      // Validate update data\n      const updateSchema = z.object({\n        title: z.string().min(1).max(255).optional(),\n        description: z.string().max(5000).optional(),\n        tags: z.array(z.string()).optional(),\n      });\n\n      const validatedData = updateSchema.parse(req.body);\n      const updatedSubmission = await storage.updateSubmission(req.params.id, validatedData);\n      res.json(updatedSubmission);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid input\", details: error.errors });\n      }\n      console.error(\"Error updating submission:\", error);\n      res.status(500).json({ error: \"Failed to update submission\" });\n    }\n  });\n\n  // User delete own submission\n  app.delete(\"/api/submissions/:id\", authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    try {\n      const submission = await storage.getSubmission(req.params.id);\n      if (!submission) {\n        return res.status(404).json({ error: \"Submission not found\" });\n      }\n\n      // Check if user owns the submission\n      if (submission.userId !== req.user!.id) {\n        return res.status(403).json({ error: \"Not authorized to delete this submission\" });\n      }\n\n      // Delete the submission media files if they exist\n      if (submission.mediaUrl) {\n        // Check if legacy submission (Cloudinary URL but no stored publicId)\n        const isLegacy = submission.mediaUrl.includes('cloudinary.com') && !submission.cloudinaryPublicId;\n        \n        await deleteFile(\n          submission.mediaUrl, \n          submission.cloudinaryPublicId || undefined,\n          submission.cloudinaryResourceType || undefined,\n          isLegacy\n        ).catch(err => console.error(\"Failed to delete media:\", err));\n      }\n\n      await storage.deleteSubmission(req.params.id);\n      res.json({ message: \"Submission deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting submission:\", error);\n      res.status(500).json({ error: \"Failed to delete submission\" });\n    }\n  });\n\n  // Admin get all submissions\n  app.get(\"/api/admin/submissions\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { contestId, userId, status, page, limit } = req.query;\n      \n      const filters: any = {};\n      if (contestId) filters.contestId = contestId as string;\n      if (userId) filters.userId = userId as string;\n      if (status && status !== 'all') filters.status = status as string;\n      if (page) filters.page = parseInt(page as string, 10);\n      if (limit) filters.limit = parseInt(limit as string, 10);\n      \n      const submissions = await storage.getSubmissions(filters);\n      res.json(submissions);\n    } catch (error) {\n      console.error(\"Error fetching admin submissions:\", error);\n      res.status(500).json({ error: \"Failed to fetch submissions\" });\n    }\n  });\n\n  app.patch(\"/api/admin/submissions/:id\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { status } = updateSubmissionStatusSchema.parse(req.body);\n      const updatedSubmission = await storage.updateSubmission(req.params.id, { status });\n      \n      if (!updatedSubmission) {\n        return res.status(404).json({ error: \"Submission not found\" });\n      }\n\n      // Log admin action\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"UPDATE_SUBMISSION_STATUS\",\n        meta: { submissionId: updatedSubmission.id, status, userId: updatedSubmission.userId }\n      });\n\n      res.json(updatedSubmission);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid input\" });\n    }\n  });\n\n  app.delete(\"/api/admin/submissions/:id\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const submission = await storage.getSubmission(req.params.id);\n      if (!submission) {\n        return res.status(404).json({ error: \"Submission not found\" });\n      }\n\n      // Delete the file from storage (Cloudinary or local)\n      const isLegacy = submission.mediaUrl.includes('cloudinary.com') && !submission.cloudinaryPublicId;\n      \n      await deleteFile(\n        submission.mediaUrl,\n        submission.cloudinaryPublicId || undefined,\n        submission.cloudinaryResourceType || undefined,\n        isLegacy\n      );\n\n      // Delete from database\n      await storage.deleteSubmission(req.params.id);\n\n      // Log admin action\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"DELETE_SUBMISSION\",\n        meta: { submissionId: submission.id, userId: submission.userId }\n      });\n\n      res.json({ message: \"Submission deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting submission:\", error);\n      res.status(500).json({ \n        error: \"Failed to delete submission\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Bulk approve submissions\n  app.patch(\"/api/admin/submissions/bulk/approve\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { submissionIds } = bulkSubmissionIdsSchema.parse(req.body);\n      \n      let count = 0;\n      for (const id of submissionIds) {\n        const updated = await storage.updateSubmission(id, { status: \"approved\" });\n        if (updated) {\n          count++;\n          await storage.createAuditLog({\n            actorUserId: req.user!.id,\n            action: \"UPDATE_SUBMISSION_STATUS\",\n            meta: { submissionId: id, status: \"approved\", userId: updated.userId }\n          });\n        }\n      }\n      \n      res.json({ count, message: `${count} submission(s) approved` });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid input\" });\n    }\n  });\n\n  // Bulk reject submissions\n  app.patch(\"/api/admin/submissions/bulk/reject\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { submissionIds } = bulkSubmissionIdsSchema.parse(req.body);\n      \n      let count = 0;\n      for (const id of submissionIds) {\n        const updated = await storage.updateSubmission(id, { status: \"rejected\" });\n        if (updated) {\n          count++;\n          await storage.createAuditLog({\n            actorUserId: req.user!.id,\n            action: \"UPDATE_SUBMISSION_STATUS\",\n            meta: { submissionId: id, status: \"rejected\", userId: updated.userId }\n          });\n        }\n      }\n      \n      res.json({ count, message: `${count} submission(s) rejected` });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid input\" });\n    }\n  });\n\n  // Bulk delete submissions\n  app.delete(\"/api/admin/submissions/bulk\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { submissionIds } = bulkSubmissionIdsSchema.parse(req.body);\n      \n      let count = 0;\n      for (const id of submissionIds) {\n        const submission = await storage.getSubmission(id);\n        if (submission) {\n          // Delete files from storage (Cloudinary or local)\n          const isLegacy = submission.mediaUrl.includes('cloudinary.com') && !submission.cloudinaryPublicId;\n          \n          await deleteFile(\n            submission.mediaUrl,\n            submission.cloudinaryPublicId || undefined,\n            submission.cloudinaryResourceType || undefined,\n            isLegacy\n          );\n          \n          // Delete from database\n          await storage.deleteSubmission(id);\n          \n          // Log admin action\n          await storage.createAuditLog({\n            actorUserId: req.user!.id,\n            action: \"DELETE_SUBMISSION\",\n            meta: { submissionId: id, userId: submission.userId }\n          });\n          \n          count++;\n        }\n      }\n      \n      res.json({ count, message: `${count} submission(s) deleted` });\n    } catch (error) {\n      console.error(\"Error deleting submissions:\", error);\n      res.status(500).json({ \n        error: \"Failed to delete submissions\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Admin cleanup broken submissions\n  app.post(\"/api/admin/cleanup-broken-submissions\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const allSubmissions = await storage.getSubmissions({ status: \"approved\" });\n      const brokenSubmissions: string[] = [];\n      \n      // Check each submission's media URL\n      for (const submission of allSubmissions) {\n        try {\n          // Try to fetch the URL to see if it exists\n          const response = await fetch(submission.mediaUrl, { method: 'HEAD' });\n          if (!response.ok) {\n            brokenSubmissions.push(submission.id);\n          }\n        } catch (error) {\n          // URL is broken or unreachable\n          brokenSubmissions.push(submission.id);\n        }\n      }\n      \n      // Delete broken submissions\n      let deletedCount = 0;\n      for (const id of brokenSubmissions) {\n        const submission = await storage.getSubmission(id);\n        if (submission) {\n          await storage.deleteSubmission(id);\n          await storage.createAuditLog({\n            actorUserId: req.user!.id,\n            action: \"DELETE_SUBMISSION\",\n            meta: { submissionId: id, userId: submission.userId, reason: \"broken_media_url\" }\n          });\n          deletedCount++;\n        }\n      }\n      \n      res.json({ \n        message: `Cleanup completed: ${deletedCount} broken submission(s) removed`,\n        deletedCount,\n        brokenSubmissionIds: brokenSubmissions\n      });\n    } catch (error) {\n      console.error(\"Error during cleanup:\", error);\n      res.status(500).json({ \n        error: \"Failed to cleanup broken submissions\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // User delete their own submission\n  app.delete(\"/api/submissions/:id\", authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    try {\n      const submission = await storage.getSubmission(req.params.id);\n      if (!submission) {\n        return res.status(404).json({ error: \"Submission not found\" });\n      }\n\n      // Check if user owns this submission\n      if (submission.userId !== req.user!.id) {\n        return res.status(403).json({ error: \"You can only delete your own submissions\" });\n      }\n\n      // Delete the file from storage (Cloudinary or local)\n      const isLegacy = submission.mediaUrl.includes('cloudinary.com') && !submission.cloudinaryPublicId;\n      \n      await deleteFile(\n        submission.mediaUrl,\n        submission.cloudinaryPublicId || undefined,\n        submission.cloudinaryResourceType || undefined,\n        isLegacy\n      );\n\n      // Delete from database\n      await storage.deleteSubmission(req.params.id);\n\n      res.json({ message: \"Submission deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting submission:\", error);\n      res.status(500).json({ \n        error: \"Failed to delete submission\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Voting routes\n  app.post(\"/api/votes\", authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    try {\n      const { submissionId } = voteSubmissionSchema.parse(req.body);\n      const userId = req.user!.id;\n\n      // Check if submission exists\n      const submission = await storage.getSubmission(submissionId);\n      if (!submission) {\n        return res.status(404).json({ error: \"Submission not found\" });\n      }\n\n      if (submission.status !== \"approved\") {\n        return res.status(400).json({ error: \"Cannot vote on unapproved submission\" });\n      }\n\n      // Check if user is voting for their own submission\n      if (submission.userId === userId) {\n        return res.status(400).json({ error: \"Cannot vote for your own submission\" });\n      }\n\n      // Get contest to check voting rules and timing\n      let contest = null;\n      if (submission.contestId) {\n        contest = await storage.getContest(submission.contestId);\n        if (!contest) {\n          return res.status(404).json({ error: \"Contest not found\" });\n        }\n\n        // Check if contest is active\n        if (contest.status !== \"active\") {\n          return res.status(400).json({ error: \"Contest is not active\" });\n        }\n\n        // Check contest timing\n        const now = new Date();\n        if (now < contest.startAt) {\n          return res.status(400).json({ error: \"Contest has not started yet\" });\n        }\n        if (now > contest.endAt) {\n          return res.status(400).json({ error: \"Contest has ended\" });\n        }\n\n        // Check voting timing from contest config\n        const config = contest.config as any;\n        if (config) {\n          if (config.votingStartAt && now < new Date(config.votingStartAt)) {\n            return res.status(400).json({ error: \"Voting has not started yet\" });\n          }\n          if (config.votingEndAt && now > new Date(config.votingEndAt)) {\n            return res.status(400).json({ error: \"Voting period has ended\" });\n          }\n          if (config.submissionEndAt && config.submissionEndAt !== config.votingEndAt && now > new Date(config.submissionEndAt)) {\n            // Allow voting even after submission deadline if voting end is different\n          }\n\n          // Check jury voting restrictions (only if jury is the ONLY voting method)\n          if (config.votingMethods && config.votingMethods.length === 1 && config.votingMethods.includes('jury')) {\n            // If ONLY jury voting is enabled, check if user is in jury list\n            if (config.juryMembers && Array.isArray(config.juryMembers)) {\n              if (!config.juryMembers.includes(userId)) {\n                return res.status(403).json({ \n                  error: \"Only jury members can vote in this contest\" \n                });\n              }\n            }\n          }\n        }\n\n        // Check contest-specific voting frequency rules\n        if (config && config.votesPerUserPerPeriod && config.periodDurationHours) {\n          const periodStart = new Date(now.getTime() - (config.periodDurationHours * 60 * 60 * 1000));\n          const votesInPeriod = await storage.getVoteCountForSubmissionInPeriod(userId, submissionId, periodStart);\n          \n          if (votesInPeriod >= config.votesPerUserPerPeriod) {\n            return res.status(400).json({ \n              error: `You can only vote ${config.votesPerUserPerPeriod} time(s) per submission every ${config.periodDurationHours} hours`,\n              nextVoteAllowed: new Date(now.getTime() + (config.periodDurationHours * 60 * 60 * 1000))\n            });\n          }\n        }\n\n        // Check total votes limit for contest\n        if (config && config.totalVotesPerUser && config.totalVotesPerUser > 0) {\n          const totalVotesInContest = await storage.getUserTotalVotesInContest(userId, submission.contestId!);\n          \n          if (totalVotesInContest >= config.totalVotesPerUser) {\n            return res.status(400).json({ \n              error: `You have reached the maximum of ${config.totalVotesPerUser} votes for this contest`\n            });\n          }\n        }\n      }\n\n      // Note: Multiple votes per submission are now allowed based on contest votesPerUserPerPeriod config\n      // The period-based check above enforces the voting frequency rules\n\n      // Check general rate limit (30 votes per hour per user) - keeping as backup\n      const rateLimitKey = `vote:${userId}`;\n      if (!votingRateLimiter.isAllowed(rateLimitKey)) {\n        return res.status(429).json({ \n          error: \"Rate limit exceeded. Maximum 30 votes per hour.\",\n          resetTime: votingRateLimiter.getResetTime(rateLimitKey)\n        });\n      }\n\n      // Create vote\n      const vote = await storage.createVote({ userId, submissionId });\n\n      // Calculate remaining information for response\n      let remainingInfo: any = {\n        remainingVotes: votingRateLimiter.getRemainingRequests(rateLimitKey)\n      };\n\n      if (contest && submission.contestId) {\n        const config = contest.config as any;\n        if (config && config.totalVotesPerUser && config.totalVotesPerUser > 0) {\n          const totalVotesInContest = await storage.getUserTotalVotesInContest(userId, submission.contestId);\n          remainingInfo.remainingContestVotes = config.totalVotesPerUser - totalVotesInContest;\n        }\n      }\n\n      res.status(201).json({ \n        message: \"Vote recorded successfully\",\n        ...remainingInfo\n      });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid input\" });\n    }\n  });\n\n  // Get voting status for a user and submission/contest\n  app.get(\"/api/votes/status\", authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    try {\n      const { submissionId, contestId } = req.query;\n      const userId = req.user!.id;\n\n      if (!submissionId && !contestId) {\n        return res.status(400).json({ error: \"Either submissionId or contestId is required\" });\n      }\n\n      let contest = null;\n      let submission = null;\n\n      if (submissionId) {\n        submission = await storage.getSubmission(submissionId as string);\n        if (!submission) {\n          return res.status(404).json({ error: \"Submission not found\" });\n        }\n        if (submission.contestId) {\n          contest = await storage.getContest(submission.contestId);\n        }\n      } else if (contestId) {\n        contest = await storage.getContest(contestId as string);\n        if (!contest) {\n          return res.status(404).json({ error: \"Contest not found\" });\n        }\n      }\n\n      const now = new Date();\n      const response: any = {\n        canVote: true,\n        reasons: [],\n        votingStatus: {\n          generalRateLimit: votingRateLimiter.getRemainingRequests(`vote:${userId}`)\n        }\n      };\n\n      // Check general conditions\n      if (submission && submission.userId === userId) {\n        response.canVote = false;\n        response.reasons.push(\"Cannot vote for your own submission\");\n      }\n\n      if (submission && submission.status !== \"approved\") {\n        response.canVote = false;\n        response.reasons.push(\"Submission is not approved for voting\");\n      }\n\n      // Check contest-specific conditions\n      if (contest) {\n        if (contest.status !== \"active\") {\n          response.canVote = false;\n          response.reasons.push(\"Contest is not active\");\n        }\n\n        if (now < contest.startAt) {\n          response.canVote = false;\n          response.reasons.push(\"Contest has not started yet\");\n        }\n\n        if (now > contest.endAt) {\n          response.canVote = false;\n          response.reasons.push(\"Contest has ended\");\n        }\n\n        const config = contest.config as any;\n        if (config) {\n          // Check voting period\n          if (config.votingStartAt && now < new Date(config.votingStartAt)) {\n            response.canVote = false;\n            response.reasons.push(\"Voting has not started yet\");\n            response.votingStartsAt = config.votingStartAt;\n          }\n\n          if (config.votingEndAt && now > new Date(config.votingEndAt)) {\n            response.canVote = false;\n            response.reasons.push(\"Voting period has ended\");\n          }\n\n          // Check voting frequency limits\n          if (submissionId && config.votesPerUserPerPeriod && config.periodDurationHours) {\n            const periodStart = new Date(now.getTime() - (config.periodDurationHours * 60 * 60 * 1000));\n            const votesInPeriod = await storage.getVoteCountForSubmissionInPeriod(userId, submissionId as string, periodStart);\n            \n            response.votingStatus.periodInfo = {\n              votesInPeriod,\n              maxVotesPerPeriod: config.votesPerUserPerPeriod,\n              periodDurationHours: config.periodDurationHours,\n              canVoteInPeriod: votesInPeriod < config.votesPerUserPerPeriod\n            };\n\n            if (votesInPeriod >= config.votesPerUserPerPeriod) {\n              response.canVote = false;\n              response.reasons.push(`Maximum ${config.votesPerUserPerPeriod} votes per ${config.periodDurationHours} hours reached for this submission`);\n              response.nextVoteAllowed = new Date(now.getTime() + (config.periodDurationHours * 60 * 60 * 1000));\n            }\n          }\n\n          // Check total votes limit\n          if (config.totalVotesPerUser && config.totalVotesPerUser > 0) {\n            const totalVotesInContest = await storage.getUserTotalVotesInContest(userId, contest.id);\n            \n            response.votingStatus.contestInfo = {\n              totalVotesInContest,\n              maxTotalVotes: config.totalVotesPerUser,\n              remainingVotes: Math.max(0, config.totalVotesPerUser - totalVotesInContest)\n            };\n\n            if (totalVotesInContest >= config.totalVotesPerUser) {\n              response.canVote = false;\n              response.reasons.push(`Maximum ${config.totalVotesPerUser} total votes reached for this contest`);\n            }\n          }\n        }\n      }\n\n      // Check if already voted for this specific submission\n      if (submissionId) {\n        const existingVote = await storage.getVote(userId, submissionId as string);\n        if (existingVote) {\n          response.canVote = false;\n          response.reasons.push(\"Already voted for this submission\");\n          response.votedAt = existingVote.createdAt;\n        }\n      }\n\n      res.json(response);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to get voting status\" });\n    }\n  });\n\n  // User management routes\n  app.get(\"/api/admin/users\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { status, role } = req.query;\n      const users = await storage.getUsersWithFilters({\n        status: status as string,\n        role: role as string\n      });\n\n      res.json(users);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch users\" });\n    }\n  });\n\n  app.patch(\"/api/admin/users/:id\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { status } = updateUserStatusSchema.parse(req.body);\n      const updatedUser = await storage.updateUser(req.params.id, { status });\n      \n      if (!updatedUser) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      // Log admin action\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"UPDATE_USER_STATUS\",\n        meta: { targetUserId: updatedUser.id, status, username: updatedUser.username }\n      });\n\n      res.json(updatedUser);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid input\" });\n    }\n  });\n\n  // Bulk approve users route\n  app.patch(\"/api/admin/users/bulk/approve\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { userIds } = z.object({ userIds: z.array(z.string()).min(1) }).parse(req.body);\n      \n      let updatedCount = 0;\n      const updatedUsers = [];\n      \n      for (const userId of userIds) {\n        const user = await storage.updateUser(userId, { status: \"approved\" });\n        if (user) {\n          updatedCount++;\n          updatedUsers.push({ id: user.id, username: user.username, email: user.email });\n        }\n      }\n\n      // Log admin action\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"BULK_APPROVE_USERS\",\n        meta: { userIds, updatedUsers, updatedCount }\n      });\n\n      res.json({ success: true, updatedCount, message: `Successfully approved ${updatedCount} users` });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid input\" });\n    }\n  });\n\n  // Bulk delete users route\n  app.delete(\"/api/admin/users/bulk\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n\n    \n    try {\n      // Ensure we always send JSON responses\n      res.setHeader('Content-Type', 'application/json');\n      \n      const { userIds } = req.body;\n      \n      if (!Array.isArray(userIds) || userIds.length === 0) {\n        return res.status(400).json({ error: \"User IDs array is required\" });\n      }\n\n      // Check if storage methods exist\n      if (typeof storage.getUsersByIds !== 'function') {\n        console.error(\"ERROR: storage.getUsersByIds is not a function\");\n        return res.status(500).json({ error: \"Storage method getUsersByIds not implemented\" });\n      }\n\n      if (typeof storage.bulkDeleteUsers !== 'function') {\n        console.error(\"ERROR: storage.bulkDeleteUsers is not a function\");\n        return res.status(500).json({ error: \"Storage method bulkDeleteUsers not implemented\" });\n      }\n\n      // Get user details before deletion for audit logging\n      const usersToDelete = await storage.getUsersByIds(userIds);\n      \n      if (usersToDelete.length === 0) {\n        return res.status(404).json({ error: \"No users found to delete\" });\n      }\n\n      // Delete users and all associated data\n      const deletedCount = await storage.bulkDeleteUsers(userIds);\n\n      // Log the bulk deletion\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"BULK_DELETE_USERS\",\n        meta: {\n          deletedUserIds: userIds,\n          deletedUsers: usersToDelete.map(u => ({\n            id: u.id,\n            username: u.username,\n            email: u.email\n          })),\n          deletedCount\n        }\n      });\n\n\n      \n      res.json({ \n        success: true, \n        deletedCount,\n        message: `Successfully deleted ${deletedCount} users and all associated data`\n      });\n\n    } catch (error) {\n      \n      // Ensure we send JSON error response\n      res.setHeader('Content-Type', 'application/json');\n      res.status(500).json({ error: \"Failed to delete users\", details: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // Update user balance route (supports GLORY, SOL, USDC)\n  app.patch(\"/api/admin/users/:id/balance\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { amount, operation, currency = \"GLORY\" } = req.body;\n      const userId = req.params.id;\n      \n      // Generate unique request ID to track duplicates\n      const requestId = `${Date.now()}-${Math.random()}`;\n      \n\n      \n      // Additional protection: Global rate limit per admin user (max 1 balance operation per 3 seconds)\n      const adminRateLimitKey = `admin-balance:${req.user!.id}`;\n      const lastAdminRequest = recentGloryRequests.get(adminRateLimitKey);\n      if (lastAdminRequest && (Date.now() - lastAdminRequest) < 3000) {\n        return res.status(429).json({ error: \"Please wait before making another balance change.\" });\n      }\n      \n      // Create request signature to detect duplicates\n      const requestSignature = `${userId}-${amount}-${operation}-${currency}`;\n      const now = Date.now();\n      const lastRequest = recentGloryRequests.get(requestSignature);\n      \n      // If same request within 5 seconds, reject as duplicate (increased from 2 seconds)\n      if (lastRequest && (now - lastRequest) < 5000) {\n        return res.status(429).json({ error: \"Duplicate request detected. Please wait before trying again.\" });\n      }\n      \n      // Store this request and admin rate limit\n      recentGloryRequests.set(requestSignature, now);\n      recentGloryRequests.set(adminRateLimitKey, now);\n      \n      // Clean up old entries (older than 10 seconds)\n      const keysToDelete: string[] = [];\n      recentGloryRequests.forEach((timestamp, key) => {\n        if (now - timestamp > 10000) {\n          keysToDelete.push(key);\n        }\n      });\n      keysToDelete.forEach(key => recentGloryRequests.delete(key));\n      \n\n      \n      if (typeof amount !== 'number' || amount < 0 || isNaN(amount)) {\n        return res.status(400).json({ error: \"Valid amount (including 0) is required\" });\n      }\n      \n      if (!['set', 'add', 'subtract'].includes(operation)) {\n        return res.status(400).json({ error: \"Invalid operation. Must be 'set', 'add', or 'subtract'\" });\n      }\n\n      // Get current user\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n\n\n      let newBalance: number;\n      let delta: number;\n      let reason: string;\n      let currentBalance = user.gloryBalance;\n      \n      if (currency === \"SOL\") currentBalance = user.solBalance;\n      else if (currency === \"USDC\") currentBalance = user.usdcBalance;\n\n      switch (operation) {\n        case 'set':\n          newBalance = amount;\n          delta = amount - currentBalance;\n          reason = `Admin set balance to ${amount} ${currency}`;\n\n          break;\n        case 'add':\n          newBalance = currentBalance + amount;\n          delta = amount;\n          reason = `Admin added ${amount} ${currency}`;\n\n          break;\n        case 'subtract':\n          newBalance = Math.max(0, currentBalance - amount);\n          delta = -(Math.min(amount, currentBalance));\n          reason = `Admin subtracted ${Math.min(amount, currentBalance)} ${currency}`;\n\n          break;\n        default:\n          return res.status(400).json({ error: \"Invalid operation\" });\n      }\n\n      // Create transaction record which will also update user balance\n      if (delta !== 0) {\n        await storage.createGloryTransaction({\n          userId,\n          delta,\n          currency,\n          reason,\n          contestId: null,\n          submissionId: null\n        });\n      }\n\n      // Get updated user to return latest balance\n      const updatedUser = await storage.getUser(userId);\n      if (!updatedUser) {\n        return res.status(500).json({ error: \"Failed to get updated user balance\" });\n      }\n\n      // Get final balance based on currency\n      let finalBalance = updatedUser.gloryBalance;\n      if (currency === \"SOL\") finalBalance = updatedUser.solBalance;\n      else if (currency === \"USDC\") finalBalance = updatedUser.usdcBalance;\n\n      // Log admin action\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"UPDATE_USER_BALANCE\",\n        meta: { \n          targetUserId: userId, \n          operation,\n          amount,\n          currency,\n          oldBalance: currentBalance,\n          newBalance: finalBalance,\n          delta\n        }\n      });\n\n\n\n      res.json({ \n        success: true,\n        newBalance: finalBalance,\n        delta,\n        operation,\n        currency,\n        message: `${currency} balance ${operation === 'set' ? 'set to' : operation === 'add' ? 'increased by' : 'decreased by'} ${amount}`,\n        userData: {\n          id: updatedUser.id,\n          username: updatedUser.username,\n          gloryBalance: updatedUser.gloryBalance,\n          solBalance: updatedUser.solBalance,\n          usdcBalance: updatedUser.usdcBalance\n        }\n      });\n    } catch (error) {\n      console.error(\"Error updating GLORY balance:\", error);\n      res.status(500).json({ error: \"Failed to update GLORY balance\" });\n    }\n  });\n\n\n\n\n\n  // Admin cashout management routes\n  app.get(\"/api/admin/cashout/requests\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { status } = req.query;\n      const requests = await storage.getCashoutRequests(\n        status ? { status: status as string } : undefined\n      );\n      res.json({ requests });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch cashout requests\" });\n    }\n  });\n\n  app.patch(\"/api/admin/cashout/requests/:id\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { status, rejectionReason, txHash } = updateCashoutStatusSchema.parse(req.body);\n      const requestId = req.params.id;\n      const adminId = req.user!.id;\n\n      // Get the current request\n      const request = await storage.getCashoutRequest(requestId);\n      if (!request) {\n        return res.status(404).json({ error: \"Cashout request not found\" });\n      }\n\n      const oldStatus = request.status;\n\n      // Validate txHash is required for \"sent\" and \"confirmed\" statuses\n      if ((status === \"sent\" || status === \"confirmed\") && !txHash) {\n        return res.status(400).json({ error: `Transaction hash is required for status: ${status}` });\n      }\n\n      // Update the request\n      const updatedRequest = await storage.updateCashoutRequest(requestId, {\n        status,\n        adminId,\n        rejectionReason: status === \"rejected\" ? rejectionReason : undefined,\n        txHash: status === \"sent\" || status === \"confirmed\" ? txHash : undefined\n      });\n\n      if (!updatedRequest) {\n        return res.status(404).json({ error: \"Cashout request not found\" });\n      }\n\n      // Create event log\n      await storage.createCashoutEvent({\n        cashoutRequestId: requestId,\n        fromStatus: oldStatus,\n        toStatus: status,\n        actorUserId: adminId,\n        notes: rejectionReason || txHash || `Status updated to ${status}`\n      });\n\n      // Handle GLORY balance changes\n      if (status === \"approved\" && oldStatus === \"pending\") {\n        // Deduct GLORY when approving pending request\n        await storage.createGloryTransaction({\n          userId: request.userId,\n          delta: -request.amountGlory,\n          reason: `Cashout request approved`,\n          contestId: null,\n          submissionId: null\n        });\n      } else if ((status === \"rejected\" || status === \"failed\") && (oldStatus === \"approved\" || oldStatus === \"processing\" || oldStatus === \"sent\")) {\n        // Refund GLORY if an approved/processing/sent request is rejected or failed\n        await storage.createGloryTransaction({\n          userId: request.userId,\n          delta: request.amountGlory,\n          reason: `Cashout request ${status} - GLORY refunded`,\n          contestId: null,\n          submissionId: null\n        });\n      }\n\n      // Log admin action\n      await storage.createAuditLog({\n        actorUserId: adminId,\n        action: \"UPDATE_CASHOUT_STATUS\",\n        meta: { \n          cashoutRequestId: requestId, \n          oldStatus, \n          newStatus: status,\n          userId: request.userId,\n          amountGlory: request.amountGlory,\n          txHash: txHash || null\n        }\n      });\n\n      res.json({ request: updatedRequest });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Failed to update cashout request\" });\n    }\n  });\n\n  app.post(\"/api/admin/cashout/approve\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { requestId } = approveCashoutSchema.parse(req.body);\n      const adminId = req.user!.id;\n\n      const request = await storage.getCashoutRequest(requestId);\n      if (!request) {\n        return res.status(404).json({ error: \"Cashout request not found\" });\n      }\n\n      if (request.status !== \"pending\") {\n        return res.status(400).json({ error: \"Only pending requests can be approved\" });\n      }\n\n      const updatedRequest = await storage.updateCashoutRequest(requestId, {\n        status: \"approved\",\n        adminId\n      });\n\n      await storage.createCashoutEvent({\n        cashoutRequestId: requestId,\n        fromStatus: \"pending\",\n        toStatus: \"approved\",\n        actorUserId: adminId,\n        notes: \"Request approved by admin\"\n      });\n\n      await storage.createGloryTransaction({\n        userId: request.userId,\n        delta: -request.amountGlory,\n        reason: `Cashout request approved`,\n        contestId: null,\n        submissionId: null\n      });\n\n      await storage.createAuditLog({\n        actorUserId: adminId,\n        action: \"APPROVE_CASHOUT\",\n        meta: { \n          cashoutRequestId: requestId,\n          userId: request.userId,\n          amountGlory: request.amountGlory\n        }\n      });\n\n      res.json({ request: updatedRequest });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Failed to approve cashout request\" });\n    }\n  });\n\n  app.post(\"/api/admin/cashout/reject\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { requestId, rejectionReason } = rejectCashoutSchema.parse(req.body);\n      const adminId = req.user!.id;\n\n      const request = await storage.getCashoutRequest(requestId);\n      if (!request) {\n        return res.status(404).json({ error: \"Cashout request not found\" });\n      }\n\n      if (request.status !== \"pending\") {\n        return res.status(400).json({ error: \"Only pending requests can be rejected\" });\n      }\n\n      const updatedRequest = await storage.updateCashoutRequest(requestId, {\n        status: \"rejected\",\n        adminId,\n        rejectionReason\n      });\n\n      await storage.createCashoutEvent({\n        cashoutRequestId: requestId,\n        fromStatus: \"pending\",\n        toStatus: \"rejected\",\n        actorUserId: adminId,\n        notes: rejectionReason || \"Request rejected by admin\"\n      });\n\n      await storage.createAuditLog({\n        actorUserId: adminId,\n        action: \"REJECT_CASHOUT\",\n        meta: { \n          cashoutRequestId: requestId,\n          userId: request.userId,\n          amountGlory: request.amountGlory,\n          reason: rejectionReason\n        }\n      });\n\n      res.json({ request: updatedRequest });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Failed to reject cashout request\" });\n    }\n  });\n\n  app.post(\"/api/admin/cashout/bulk-approve\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { requestIds } = bulkCashoutIdsSchema.parse(req.body);\n      const adminId = req.user!.id;\n\n      let approvedCount = 0;\n      const errors: string[] = [];\n\n      for (const requestId of requestIds) {\n        try {\n          const request = await storage.getCashoutRequest(requestId);\n          if (!request) {\n            errors.push(`Request ${requestId} not found`);\n            continue;\n          }\n\n          if (request.status !== \"pending\") {\n            errors.push(`Request ${requestId} is not pending`);\n            continue;\n          }\n\n          await storage.updateCashoutRequest(requestId, {\n            status: \"approved\",\n            adminId\n          });\n\n          await storage.createCashoutEvent({\n            cashoutRequestId: requestId,\n            fromStatus: \"pending\",\n            toStatus: \"approved\",\n            actorUserId: adminId,\n            notes: \"Request approved by admin (bulk operation)\"\n          });\n\n          await storage.createGloryTransaction({\n            userId: request.userId,\n            delta: -request.amountGlory,\n            reason: `Cashout request approved`,\n            contestId: null,\n            submissionId: null\n          });\n\n          await storage.createAuditLog({\n            actorUserId: adminId,\n            action: \"APPROVE_CASHOUT\",\n            meta: { \n              cashoutRequestId: requestId,\n              userId: request.userId,\n              amountGlory: request.amountGlory,\n              bulkOperation: true\n            }\n          });\n\n          approvedCount++;\n        } catch (error) {\n          errors.push(`Failed to approve request ${requestId}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n      }\n\n      res.json({ \n        approvedCount,\n        totalRequested: requestIds.length,\n        errors: errors.length > 0 ? errors : undefined\n      });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Failed to bulk approve cashout requests\" });\n    }\n  });\n\n  app.post(\"/api/admin/cashout/bulk-reject\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { requestIds, rejectionReason } = bulkRejectCashoutSchema.parse(req.body);\n      const adminId = req.user!.id;\n\n      let rejectedCount = 0;\n      const errors: string[] = [];\n\n      for (const requestId of requestIds) {\n        try {\n          const request = await storage.getCashoutRequest(requestId);\n          if (!request) {\n            errors.push(`Request ${requestId} not found`);\n            continue;\n          }\n\n          if (request.status !== \"pending\") {\n            errors.push(`Request ${requestId} is not pending`);\n            continue;\n          }\n\n          await storage.updateCashoutRequest(requestId, {\n            status: \"rejected\",\n            adminId,\n            rejectionReason\n          });\n\n          await storage.createCashoutEvent({\n            cashoutRequestId: requestId,\n            fromStatus: \"pending\",\n            toStatus: \"rejected\",\n            actorUserId: adminId,\n            notes: rejectionReason || \"Request rejected by admin (bulk operation)\"\n          });\n\n          await storage.createAuditLog({\n            actorUserId: adminId,\n            action: \"REJECT_CASHOUT\",\n            meta: { \n              cashoutRequestId: requestId,\n              userId: request.userId,\n              amountGlory: request.amountGlory,\n              reason: rejectionReason,\n              bulkOperation: true\n            }\n          });\n\n          rejectedCount++;\n        } catch (error) {\n          errors.push(`Failed to reject request ${requestId}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n      }\n\n      res.json({ \n        rejectedCount,\n        totalRequested: requestIds.length,\n        errors: errors.length > 0 ? errors : undefined\n      });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Failed to bulk reject cashout requests\" });\n    }\n  });\n\n  // Transaction history route (supports currency filter)\n  app.get(\"/api/glory-ledger\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const { currency } = req.query;\n      const transactions = await storage.getGloryTransactions(\n        req.user!.id, \n        currency as string | undefined\n      );\n      res.json(transactions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch transactions\" });\n    }\n  });\n\n  app.delete(\"/api/glory-ledger\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      // Clear all glory transactions for the user without affecting balance\n      await storage.clearGloryTransactions(req.user!.id);\n\n      res.json({ message: \"All GLORY history cleared successfully\" });\n    } catch (error) {\n      console.error(\"Error clearing glory history:\", error);\n      res.status(500).json({ error: \"Failed to clear GLORY history\" });\n    }\n  });\n\n  // Audit logs route\n  app.get(\"/api/admin/audit-logs\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { limit } = req.query;\n      const logs = await storage.getAuditLogs(limit ? parseInt(limit as string) : undefined);\n      res.json(logs);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch audit logs\" });\n    }\n  });\n\n  app.delete(\"/api/admin/audit-logs\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      await storage.clearAuditLogs();\n      \n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"CLEAR_AUDIT_LOGS\",\n        meta: { clearedAt: new Date().toISOString() }\n      });\n      \n      res.json({ message: \"All audit logs cleared successfully\" });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to clear audit logs\" });\n    }\n  });\n\n  // Site Settings routes (Admin only)\n  app.get(\"/api/admin/settings\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const settings = await storage.getSiteSettings();\n      res.json(settings);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch site settings\" });\n    }\n  });\n\n  app.patch(\"/api/admin/settings\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      // Validate the request body using partial schema for updates\n      const updateSchema = insertSiteSettingsSchema.partial();\n      const updates = updateSchema.parse(req.body);\n      \n      const settings = await storage.updateSiteSettings(updates);\n      \n      // Log the change in audit log\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"UPDATE_SITE_SETTINGS\",\n        meta: { updates }\n      });\n      \n      res.json(settings);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid request data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update site settings\" });\n    }\n  });\n\n  // Public endpoint to check if site is in private mode (no auth required)\n  app.get(\"/api/settings/private-mode\", async (req, res) => {\n    try {\n      const settings = await storage.getSiteSettings();\n      res.json({ privateMode: settings.privateMode });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch private mode status\" });\n    }\n  });\n\n  // Placeholder for video thumbnails in local mode\n  app.get(\"/api/placeholder/video-thumbnail\", (req, res) => {\n    // Return a simple SVG placeholder for video thumbnails\n    const svg = `\n      <svg width=\"400\" height=\"400\" xmlns=\"http://www.w3.org/2000/svg\">\n        <rect width=\"100%\" height=\"100%\" fill=\"#1a1a1a\"/>\n        <circle cx=\"200\" cy=\"200\" r=\"60\" fill=\"#7C3CEC\" opacity=\"0.8\"/>\n        <polygon points=\"180,170 180,230 230,200\" fill=\"white\"/>\n        <text x=\"200\" y=\"280\" text-anchor=\"middle\" fill=\"#666\" font-family=\"Arial\" font-size=\"16\">Video Thumbnail</text>\n      </svg>\n    `;\n    \n    res.setHeader('Content-Type', 'image/svg+xml');\n    res.send(svg);\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":91351},"client/src/pages/contest-detail.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useRoute, Link } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Search, FileText, Upload, Heart, Trophy, ChevronDown, ArrowLeft, Expand, Share2, X } from \"lucide-react\";\nimport { GlassButton } from \"@/components/GlassButton\";\nimport { ContestLightboxModal } from \"@/components/ContestLightboxModal\";\nimport { ContestRulesCard } from \"@/components/ContestRulesCard\";\nimport { UploadWizardModal } from \"@/components/UploadWizardModal\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function ContestDetailPage() {\n  const [match, params] = useRoute(\"/contest/:slug\");\n  const slug = params?.slug || \"\";\n  const { data: user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [selectedSubmission, setSelectedSubmission] = useState<any>(null);\n  const [isLightboxOpen, setIsLightboxOpen] = useState(false);\n  const [showRules, setShowRules] = useState(false);\n  const [showUploadWizard, setShowUploadWizard] = useState(false);\n  const [showAllPrizesModal, setShowAllPrizesModal] = useState(false);\n  const [sortBy, setSortBy] = useState(\"votes\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [activeCardId, setActiveCardId] = useState<string | null>(null);\n  const [isToolbarSticky, setIsToolbarSticky] = useState(false);\n  const toolbarRef = React.useRef<HTMLDivElement>(null);\n\n  // Fetch contest by slug\n  const { data: contests = [], isLoading: contestsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/contests\"]\n  });\n\n  const contest = contests.find((c: any) => c.slug === slug);\n\n  // Fetch submissions for this contest\n  const { data: submissions = [], isLoading: submissionsLoading } = useQuery({\n    queryKey: [\"/api/submissions\", contest?.id],\n    enabled: !!contest?.id,\n    queryFn: async () => {\n      if (!contest?.id) {\n        throw new Error(\"Contest ID is not available\");\n      }\n      const response = await fetch(`/api/submissions?contestId=${contest.id}`, {\n        credentials: \"include\"\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch submissions\");\n      return response.json();\n    }\n  });\n\n  // Fetch user's votes\n  const { data: userVotes = [] } = useQuery({\n    queryKey: [\"/api/votes/user\"],\n    enabled: !!user,\n    queryFn: async () => {\n      const response = await fetch(\"/api/votes/user\", { credentials: \"include\" });\n      if (!response.ok) return [];\n      return response.json();\n    }\n  });\n\n  // Vote mutation\n  const voteMutation = useMutation({\n    mutationFn: async (submissionId: string) => {\n      const response = await apiRequest(\"POST\", \"/api/votes\", { submissionId });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\", contest?.id] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/votes/user\"] });\n      toast({\n        title: \"Vote recorded!\",\n        description: \"Your vote has been counted\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Vote failed\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Share functionality\n  const handleShare = (submission: any) => {\n    const shareUrl = `${window.location.origin}/submission/${submission.id}`;\n    \n    if (navigator.share) {\n      navigator.share({\n        title: submission.title,\n        text: `Check out this amazing submission: ${submission.title}`,\n        url: shareUrl,\n      }).catch((error) => {\n        console.log('Error sharing:', error);\n        fallbackShare(shareUrl);\n      });\n    } else {\n      fallbackShare(shareUrl);\n    }\n  };\n\n  const fallbackShare = (url: string) => {\n    navigator.clipboard.writeText(url).then(() => {\n      toast({\n        title: \"Link copied!\",\n        description: \"Submission link has been copied to clipboard.\",\n      });\n    }).catch(() => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy link to clipboard.\",\n        variant: \"destructive\",\n      });\n    });\n  };\n\n  const handleCardClick = (e: React.MouseEvent, submissionId: string) => {\n    // Only toggle on mobile (below lg breakpoint)\n    if (window.innerWidth < 1024) {\n      e.stopPropagation();\n      setActiveCardId(activeCardId === submissionId ? null : submissionId);\n    }\n  };\n\n  // Handle browser back button for All Prizes Modal (Dialog handles Escape automatically)\n  useEffect(() => {\n    if (!showAllPrizesModal) return;\n\n    const modalId = Date.now();\n\n    // Push unique history state when modal opens\n    window.history.pushState({ modal: 'allPrizes', modalId }, '');\n\n    // Handle browser back button\n    const handlePopState = () => {\n      // Close modal when going back in history\n      if (window.history.state?.modalId !== modalId) {\n        setShowAllPrizesModal(false);\n      }\n    };\n\n    window.addEventListener('popstate', handlePopState);\n\n    return () => {\n      window.removeEventListener('popstate', handlePopState);\n    };\n  }, [showAllPrizesModal]);\n\n  // Countdown timer\n  const [timeLeft, setTimeLeft] = useState({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n\n  useEffect(() => {\n    if (!contest?.endAt) return;\n\n    const calculateTimeLeft = () => {\n      if (contest.status === \"ended\") {\n        return { days: 0, hours: 0, minutes: 0, seconds: 0 };\n      }\n\n      const difference = new Date(contest.endAt).getTime() - Date.now();\n      if (difference <= 0) {\n        return { days: 0, hours: 0, minutes: 0, seconds: 0 };\n      }\n\n      return {\n        days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n        hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\n        minutes: Math.floor((difference / 1000 / 60) % 60),\n        seconds: Math.floor((difference / 1000) % 60)\n      };\n    };\n\n    setTimeLeft(calculateTimeLeft());\n    const timer = setInterval(() => setTimeLeft(calculateTimeLeft()), 1000);\n\n    return () => clearInterval(timer);\n  }, [contest]);\n\n  // Scroll to top on mount\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  // Sticky toolbar on scroll\n  useEffect(() => {\n    const handleScroll = () => {\n      if (!toolbarRef.current) return;\n      \n      const toolbarTop = toolbarRef.current.getBoundingClientRect().top;\n      const navbarHeight = 100; // navbar height\n      \n      // When toolbar reaches the top (navbar bottom), make it sticky\n      if (toolbarTop <= navbarHeight) {\n        setIsToolbarSticky(true);\n      } else {\n        setIsToolbarSticky(false);\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  // Show loading state while contests are being fetched\n  if (contestsLoading) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center min-h-[60vh]\">\n        <div className=\"text-center\">\n          <div className=\"text-2xl font-bold text-white mb-2\">Loading contest...</div>\n          <div className=\"text-gray-400\">Please wait</div>\n        </div>\n      </div>\n    );\n  }\n\n  // Show not found if contests loaded but slug doesn't match\n  if (!contest) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center min-h-[60vh]\">\n        <div className=\"text-center\">\n          <div className=\"text-2xl font-bold text-white mb-2\">Contest not found</div>\n          <div className=\"text-gray-400 mb-6\">The contest you're looking for doesn't exist or has been removed.</div>\n          <Link href=\"/contests\">\n            <GlassButton variant=\"primary\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Contests\n            </GlassButton>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  // Process submissions with vote data\n  const submissionsWithVotes = submissions.map((sub: any) => ({\n    ...sub,\n    voteCount: sub.votesCount || 0,\n    hasVoted: userVotes.some((v: any) => v.submissionId === sub.id)\n  }));\n\n  // Top 5 submissions always sorted by votes (not affected by filters)\n  const topSubmissions = [...submissionsWithVotes]\n    .sort((a: any, b: any) => b.voteCount - a.voteCount)\n    .slice(0, 5);\n\n  // Other submissions (excluding top 5)\n  const topSubmissionIds = new Set(topSubmissions.map(s => s.id));\n  let otherSubmissions = submissionsWithVotes.filter((sub: any) => !topSubmissionIds.has(sub.id));\n\n  // Filter other submissions (search applies only to non-top-5)\n  if (searchTerm) {\n    otherSubmissions = otherSubmissions.filter((sub: any) =>\n      sub.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      sub.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      sub.tags?.some((tag: string) => tag.toLowerCase().includes(searchTerm.toLowerCase()))\n    );\n  }\n\n  // Sort other submissions based on selected sort option\n  const allSubmissions = [...otherSubmissions].sort((a: any, b: any) => {\n    if (sortBy === \"votes\") return b.voteCount - a.voteCount;\n    if (sortBy === \"recent\") return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n    if (sortBy === \"oldest\") return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();\n    return 0;\n  });\n\n  // Combined filtered submissions for \"no results\" check\n  const filteredSubmissions = [...topSubmissions, ...allSubmissions];\n\n  const handleVote = (submissionId: string) => {\n    if (!user) {\n      toast({\n        title: \"Login required\",\n        description: \"Please login to vote\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    voteMutation.mutate(submissionId);\n  };\n\n  const handleShowUpload = () => {\n    if (!user) {\n      toast({\n        title: \"Login required\",\n        description: \"Please login to submit\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    setShowUploadWizard(true);\n  };\n\n  return (\n    <>\n      <div className=\"flex-1 px-4 py-6 pb-32 md:pb-6 sm:px-6 md:px-10 lg:px-20\">\n        <div className=\"mx-auto max-w-screen-xl\">\n          {/* Back Button */}\n          <Link href=\"/contests\" className=\"inline-flex items-center text-gray-400 hover:text-white mb-6 md:mb-8 transition-colors\" data-testid=\"link-back-contests\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Contests\n          </Link>\n\n          {/* Header Controls - Contest Type Selector, Timer, Prize Pool */}\n          <div className=\"mb-8 md:mb-12 flex flex-col items-center justify-between gap-6 md:gap-8\">\n            {/* Contest Type Selector and Upload Button */}\n            <div className=\"flex flex-col sm:flex-row items-center justify-center gap-3 md:gap-4 w-full\">\n              <div className=\"w-full max-w-sm text-center\">\n                <h1 className=\"text-xl sm:text-2xl font-bold text-white mb-2\" data-testid=\"text-contest-title\">\n                  {contest.title}\n                </h1>\n              </div>\n              <div className=\"flex flex-col sm:flex-row gap-3 md:gap-4 w-full sm:w-auto\">\n                <GlassButton\n                  onClick={handleShowUpload}\n                  className=\"flex flex-shrink-0 items-center justify-center gap-2 px-6 py-3 text-base font-bold w-full sm:w-auto\"\n                  data-testid=\"button-upload\"\n                >\n                  <Upload className=\"h-5 w-5\" />\n                  Upload\n                </GlassButton>\n                <GlassButton\n                  onClick={() => setShowRules(true)}\n                  variant=\"primary\"\n                  className=\"flex flex-shrink-0 items-center justify-center gap-2 px-6 py-3 text-base font-bold w-full sm:w-auto\"\n                  data-testid=\"button-show-rules\"\n                >\n                  <FileText className=\"h-5 w-5\" />\n                  Contest Rules\n                </GlassButton>\n              </div>\n            </div>\n\n            <div className=\"flex flex-col lg:flex-row w-full items-center justify-center gap-8\">\n              {/* Contest Timer */}\n              <div className=\"w-full max-w-lg rounded-xl bg-gradient-to-br from-primary/20 to-purple-600/20 p-3 sm:p-4 text-center border border-primary/30 backdrop-blur-sm\">\n                <p className=\"text-sm font-medium text-primary text-glow mb-3\">Contest Ends In:</p>\n                <div className=\"flex items-center justify-center gap-2 sm:gap-3\">\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"bg-black/30 rounded-lg px-2 py-1 min-w-[40px] backdrop-blur-sm border border-primary/20\">\n                      <span className=\"text-lg sm:text-xl font-bold text-white text-glow\">{String(timeLeft.days).padStart(2, '0')}</span>\n                    </div>\n                    <span className=\"text-xs text-gray-300 mt-1 font-medium\">Days</span>\n                  </div>\n                  <span className=\"text-lg sm:text-xl font-bold text-primary text-glow animate-pulse\">:</span>\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"bg-black/30 rounded-lg px-2 py-1 min-w-[40px] backdrop-blur-sm border border-primary/20\">\n                      <span className=\"text-lg sm:text-xl font-bold text-white text-glow\">{String(timeLeft.hours).padStart(2, '0')}</span>\n                    </div>\n                    <span className=\"text-xs text-gray-300 mt-1 font-medium\">Hours</span>\n                  </div>\n                  <span className=\"text-lg sm:text-xl font-bold text-primary text-glow animate-pulse\">:</span>\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"bg-black/30 rounded-lg px-2 py-1 min-w-[40px] backdrop-blur-sm border border-primary/20\">\n                      <span className=\"text-lg sm:text-xl font-bold text-white text-glow\">{String(timeLeft.minutes).padStart(2, '0')}</span>\n                    </div>\n                    <span className=\"text-xs text-gray-300 mt-1 font-medium\">Minutes</span>\n                  </div>\n                  <span className=\"text-lg sm:text-xl font-bold text-primary text-glow animate-pulse\">:</span>\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"bg-black/30 rounded-lg px-2 py-1 min-w-[40px] backdrop-blur-sm border border-primary/20\">\n                      <span className=\"text-lg sm:text-xl font-bold text-white text-glow\">{String(timeLeft.seconds).padStart(2, '0')}</span>\n                    </div>\n                    <span className=\"text-xs text-gray-300 mt-1 font-medium\">Seconds</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Prize Pool Section */}\n              <div className=\"w-full max-w-lg rounded-xl border-2 border-primary/30 bg-gradient-to-br from-primary/10 to-purple-600/10 p-3 sm:p-4 glow-border backdrop-blur-sm\">\n                <h3 className=\"mb-4 text-center text-xl sm:text-2xl font-bold text-white text-glow\">\n                  {contest.prizeGlory.toLocaleString()} GLORY\n                </h3>\n                \n                {/* Dynamic Prize Distribution */}\n                {contest.prizeDistribution && contest.prizeDistribution.length > 0 ? (\n                  <>\n                    <div className={`grid gap-2 sm:gap-3 text-center ${\n                      contest.prizeDistribution.length <= 3 ? 'grid-cols-3' :\n                      contest.prizeDistribution.length === 4 ? 'grid-cols-4' :\n                      'grid-cols-5'\n                    }`}>\n                      {/* Show first 4 places if more than 5, otherwise show all up to 5 */}\n                      {contest.prizeDistribution.slice(0, contest.prizeDistribution.length > 5 ? 4 : 5).map((prize: any, index: number) => {\n                        const placeNumber = index + 1;\n                        const badgeColor = \n                          placeNumber === 1 ? 'from-yellow-400 to-yellow-600' :\n                          placeNumber === 2 ? 'from-gray-300 to-gray-500' :\n                          placeNumber === 3 ? 'from-orange-400 to-orange-600' :\n                          'from-blue-400 to-blue-600';\n                        \n                        return (\n                          <div \n                            key={index}\n                            className=\"flex flex-col items-center justify-center rounded-lg bg-primary/10 p-2 transition-all hover:bg-primary/20 hover:scale-105\"\n                          >\n                            <div className={`w-6 h-6 rounded-full bg-gradient-to-r ${badgeColor} flex items-center justify-center mb-1`}>\n                              <span className=\"text-xs font-bold text-black\">\n                                {placeNumber === 1 ? '1st' :\n                                 placeNumber === 2 ? '2nd' :\n                                 placeNumber === 3 ? '3rd' :\n                                 `${placeNumber}th`}\n                              </span>\n                            </div>\n                            <p className=\"text-xs font-bold text-white mb-1\">\n                              {typeof prize.value === 'number' \n                                ? prize.value.toLocaleString()\n                                : Math.floor(contest.prizeGlory * (prize.percentage / 100)).toLocaleString()\n                              }\n                            </p>\n                            <p className=\"text-xs text-primary font-medium\">{((contest as any).config?.currency) || 'GLORY'}</p>\n                          </div>\n                        );\n                      })}\n                      \n                      {/* Show \"+\" indicator if more than 5 places */}\n                      {contest.prizeDistribution.length > 5 && (\n                        <button\n                          onClick={() => setShowAllPrizesModal(true)}\n                          className=\"flex flex-col items-center justify-center rounded-lg bg-primary/10 p-2 transition-all hover:bg-primary/20 hover:scale-105 cursor-pointer\"\n                          data-testid=\"button-view-all-prizes\"\n                        >\n                          <div className=\"w-6 h-6 rounded-full bg-gradient-to-r from-purple-400 to-purple-600 flex items-center justify-center mb-1\">\n                            <span className=\"text-xs font-bold text-white\">+</span>\n                          </div>\n                          <p className=\"text-xs font-bold text-white mb-1\">\n                            {contest.prizeDistribution.length - 4}\n                          </p>\n                          <p className=\"text-xs text-primary font-medium\">More</p>\n                        </button>\n                      )}\n                    </div>\n                  </>\n                ) : (\n                  /* Fallback to default 3-place distribution */\n                  <div className=\"grid grid-cols-3 gap-2 sm:gap-3 text-center\">\n                    {/* 1st Place - 50% */}\n                    <div className=\"flex flex-col items-center justify-center rounded-lg bg-primary/10 p-2 transition-all hover:bg-primary/20 hover:scale-105\">\n                      <div className=\"w-6 h-6 rounded-full bg-gradient-to-r from-yellow-400 to-yellow-600 flex items-center justify-center mb-1\">\n                        <span className=\"text-xs font-bold text-black\">1st</span>\n                      </div>\n                      <p className=\"text-xs sm:text-sm font-bold text-white mb-1\">\n                        {Math.floor(contest.prizeGlory * 0.5).toLocaleString()}\n                      </p>\n                      <p className=\"text-xs text-primary font-medium\">GLORY</p>\n                    </div>\n                    \n                    {/* 2nd Place - 30% */}\n                    <div className=\"flex flex-col items-center justify-center rounded-lg bg-primary/10 p-2 transition-all hover:bg-primary/20 hover:scale-105\">\n                      <div className=\"w-6 h-6 rounded-full bg-gradient-to-r from-gray-300 to-gray-500 flex items-center justify-center mb-1\">\n                        <span className=\"text-xs font-bold text-black\">2nd</span>\n                      </div>\n                      <p className=\"text-xs sm:text-sm font-bold text-white mb-1\">\n                        {Math.floor(contest.prizeGlory * 0.3).toLocaleString()}\n                      </p>\n                      <p className=\"text-xs text-primary font-medium\">GLORY</p>\n                    </div>\n                    \n                    {/* 3rd Place - 20% */}\n                    <div className=\"flex flex-col items-center justify-center rounded-lg bg-primary/10 p-2 transition-all hover:bg-primary/20 hover:scale-105\">\n                      <div className=\"w-6 h-6 rounded-full bg-gradient-to-r from-orange-400 to-orange-600 flex items-center justify-center mb-1\">\n                        <span className=\"text-xs font-bold text-black\">3rd</span>\n                      </div>\n                      <p className=\"text-xs sm:text-sm font-bold text-white mb-1\">\n                        {Math.floor(contest.prizeGlory * 0.2).toLocaleString()}\n                      </p>\n                      <p className=\"text-xs text-primary font-medium\">GLORY</p>\n                    </div>\n                  </div>\n                )}\n                \n                {/* Prize Distribution Summary */}\n                <div className=\"mt-3 pt-3 border-t border-primary/20\">\n                  <p className=\"text-xs text-center text-gray-300\">\n                    {contest.prizeDistribution ? contest.prizeDistribution.length : 3} Winners • Total Pool: {contest.prizeGlory.toLocaleString()} GLORY\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {submissionsLoading ? (\n            <div className=\"text-center text-white py-12\">Loading submissions...</div>\n          ) : submissionsWithVotes.length === 0 ? (\n            <div className=\"text-center text-gray-400 py-12 mt-12\">\n              <p>No submissions yet. Be the first to enter!</p>\n            </div>\n          ) : filteredSubmissions.length === 0 ? (\n            <div className=\"text-center text-gray-400 py-12 mt-8\">\n              <p>No results found for \"{searchTerm}\"</p>\n              <p className=\"text-sm mt-2\">Try a different search term</p>\n            </div>\n          ) : (\n            <>\n              {/* Top 5 Most Liked - Expanded Layout */}\n              {topSubmissions.length > 0 && (\n                <div className=\"mt-12\">\n                  <h3 className=\"mb-8 text-center text-3xl font-bold text-white text-glow\">\n                    <Trophy className=\"inline-block h-8 w-8 text-yellow-400 mr-2\" />\n                    Top 5 Most Liked\n                  </h3>\n                  \n                  {/* Expanded Layout */}\n                  <div className=\"flex flex-col items-center gap-6\">\n                    {/* First Place - Top position */}\n                    {topSubmissions[0] && (\n                      <div className=\"w-full max-w-sm\">\n                        <div className=\"relative group\" data-testid={`card-top-submission-${topSubmissions[0].id}`}>\n                          {/* Rank Badge */}\n                          <div className=\"absolute -top-3 -left-3 z-10 h-12 w-12 rounded-full bg-gradient-to-br from-yellow-400 to-orange-500 border-4 border-gray-900 flex items-center justify-center text-lg font-bold text-gray-900 glow\">\n                            1\n                          </div>\n\n                          <div className=\"rounded-xl overflow-hidden shadow-lg transition-all duration-300 hover:shadow-primary/20 hover:-translate-y-1\">\n                            <div className=\"relative overflow-hidden aspect-square\" onClick={(e) => handleCardClick(e, topSubmissions[0].id)}>\n                              <img\n                                src={topSubmissions[0].mediaUrl}\n                                alt={topSubmissions[0].title}\n                                className=\"w-full h-full object-cover transition-transform duration-500 group-hover:scale-110\"\n                                loading=\"lazy\"\n                              />\n                              \n                              {/* Dark Overlay */}\n                              <div className=\"absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-all duration-300\">\n                                {/* Action Buttons - Top Right */}\n                                <div className={`absolute top-2 sm:top-3 right-2 sm:right-3 flex flex-col items-center gap-1 sm:gap-2 ${activeCardId === topSubmissions[0].id ? 'opacity-100 lg:opacity-0' : 'opacity-0'} lg:group-hover:opacity-100 transition-opacity duration-300`}>\n                                  {/* Vote Button */}\n                                  <button\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      handleVote(topSubmissions[0].id);\n                                    }}\n                                    className={`p-2 rounded-full backdrop-blur-sm transition-all duration-300 ${\n                                      topSubmissions[0].hasVoted \n                                        ? 'bg-primary/90 text-white' \n                                        : 'bg-black/50 text-white hover:bg-primary/90'\n                                    }`}\n                                    data-testid={`button-vote-${topSubmissions[0].id}`}\n                                  >\n                                    <Heart className={`h-3 w-3 sm:h-4 sm:w-4 ${topSubmissions[0].hasVoted ? 'fill-current' : ''}`} />\n                                  </button>\n\n                                  {/* Share Button */}\n                                  <button\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      handleShare(topSubmissions[0]);\n                                    }}\n                                    className=\"p-2 rounded-full bg-black/50 text-white hover:bg-primary/90 backdrop-blur-sm transition-all duration-300\"\n                                    data-testid={`button-share-${topSubmissions[0].id}`}\n                                  >\n                                    <Share2 className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                                  </button>\n\n                                  {/* Expand Button */}\n                                  <button\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      setSelectedSubmission(topSubmissions[0]);\n                                      setIsLightboxOpen(true);\n                                    }}\n                                    className=\"p-2 rounded-full bg-black/50 text-white hover:bg-primary/90 backdrop-blur-sm transition-all duration-300\"\n                                    data-testid={`button-expand-${topSubmissions[0].id}`}\n                                  >\n                                    <Expand className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                                  </button>\n                                </div>\n                              </div>\n                              \n                              {/* Bottom Info Overlay */}\n                              <div className={`absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 via-black/60 to-transparent p-3 sm:p-4 ${activeCardId === topSubmissions[0].id ? 'opacity-100 lg:opacity-0' : 'opacity-0'} lg:group-hover:opacity-100 transition-all duration-300 transform translate-y-0 lg:translate-y-2 lg:group-hover:translate-y-0`}>\n                                <h3 className=\"text-base sm:text-lg font-bold text-white mb-1\">\n                                  {topSubmissions[0].title}\n                                </h3>\n                                <p className=\"text-xs sm:text-sm text-white/80 mb-2\">\n                                  by {topSubmissions[0].user?.username || 'Unknown'}\n                                </p>\n                                \n                                <div className=\"flex items-center gap-1 text-white/80\">\n                                  <Heart className={`h-3 w-3 ${topSubmissions[0].hasVoted ? 'fill-primary text-primary' : ''}`} />\n                                  <span className=\"text-sm\">{topSubmissions[0].voteCount} votes</span>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                    \n                    {/* Places 2-5 - Bottom row */}\n                    {topSubmissions.length > 1 && (\n                      <div className=\"w-full max-w-5xl\">\n                        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 justify-center\">\n                          {topSubmissions.slice(1, 5).map((submission: any, index: number) => {\n                            const placeNumber = index + 2;\n                            const badgeColor = \n                              placeNumber === 2 ? 'from-gray-300 to-gray-500' :\n                              placeNumber === 3 ? 'from-orange-400 to-orange-600' :\n                              'from-blue-400 to-blue-600';\n\n                            return (\n                              <div key={submission.id} className=\"w-full\">\n                                <div className=\"relative group\" data-testid={`card-top-submission-${submission.id}`}>\n                                  {/* Rank Badge */}\n                                  <div className=\"absolute -top-3 -left-3 z-10 h-10 w-10 rounded-full bg-gradient-to-br from-yellow-400 to-orange-500 border-3 border-gray-900 flex items-center justify-center text-sm font-bold text-gray-900 glow\">\n                                    {placeNumber}\n                                  </div>\n\n                                  <div className=\"rounded-xl overflow-hidden shadow-lg transition-all duration-300 hover:shadow-primary/20 hover:-translate-y-1\">\n                                    <div className=\"relative overflow-hidden aspect-square\" onClick={(e) => handleCardClick(e, submission.id)}>\n                                      <img\n                                        src={submission.mediaUrl}\n                                        alt={submission.title}\n                                        className=\"w-full h-full object-cover transition-transform duration-500 group-hover:scale-110\"\n                                        loading=\"lazy\"\n                                      />\n                                      \n                                      {/* Dark Overlay */}\n                                      <div className=\"absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-all duration-300\">\n                                        {/* Action Buttons - Top Right */}\n                                        <div className={`absolute top-2 right-2 flex flex-col items-center gap-1 ${activeCardId === submission.id ? 'opacity-100 lg:opacity-0' : 'opacity-0'} lg:group-hover:opacity-100 transition-opacity duration-300`}>\n                                          {/* Vote Button */}\n                                          <button\n                                            onClick={(e) => {\n                                              e.stopPropagation();\n                                              handleVote(submission.id);\n                                            }}\n                                            className={`p-1.5 rounded-full backdrop-blur-sm transition-all duration-300 ${\n                                              submission.hasVoted \n                                                ? 'bg-primary/90 text-white' \n                                                : 'bg-black/50 text-white hover:bg-primary/90'\n                                            }`}\n                                            data-testid={`button-vote-${submission.id}`}\n                                          >\n                                            <Heart className={`h-3 w-3 ${submission.hasVoted ? 'fill-current' : ''}`} />\n                                          </button>\n\n                                          {/* Share Button */}\n                                          <button\n                                            onClick={(e) => {\n                                              e.stopPropagation();\n                                              handleShare(submission);\n                                            }}\n                                            className=\"p-1.5 rounded-full bg-black/50 text-white hover:bg-primary/90 backdrop-blur-sm transition-all duration-300\"\n                                            data-testid={`button-share-${submission.id}`}\n                                          >\n                                            <Share2 className=\"h-3 w-3\" />\n                                          </button>\n\n                                          {/* Expand Button */}\n                                          <button\n                                            onClick={(e) => {\n                                              e.stopPropagation();\n                                              setSelectedSubmission(submission);\n                                              setIsLightboxOpen(true);\n                                            }}\n                                            className=\"p-1.5 rounded-full bg-black/50 text-white hover:bg-primary/90 backdrop-blur-sm transition-all duration-300\"\n                                            data-testid={`button-expand-${submission.id}`}\n                                          >\n                                            <Expand className=\"h-3 w-3\" />\n                                          </button>\n                                        </div>\n                                      </div>\n                                      \n                                      {/* Bottom Info Overlay */}\n                                      <div className={`absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 via-black/60 to-transparent p-2 sm:p-3 ${activeCardId === submission.id ? 'opacity-100 lg:opacity-0' : 'opacity-0'} lg:group-hover:opacity-100 transition-all duration-300 transform translate-y-0 lg:translate-y-2 lg:group-hover:translate-y-0`}>\n                                        <h3 className=\"text-sm font-bold text-white mb-1 truncate\">\n                                          {submission.title}\n                                        </h3>\n                                        <p className=\"text-xs text-white/80 mb-1 truncate\">\n                                          by {submission.user?.username || 'Unknown'}\n                                        </p>\n                                        \n                                        <div className=\"flex items-center gap-1 text-white/80\">\n                                          <Heart className={`h-2.5 w-2.5 ${submission.hasVoted ? 'fill-primary text-primary' : ''}`} />\n                                          <span className=\"text-xs\">{submission.voteCount} votes</span>\n                                        </div>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                            );\n                          })}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {/* Filter Toolbar - Applies only to All Submissions */}\n              {!submissionsLoading && allSubmissions.length > 0 && (\n                <div \n                  ref={toolbarRef}\n                  className={`mt-8 rounded-lg bg-background-dark/80 px-4 py-4 backdrop-blur-sm glow-border transition-all duration-200 ${\n                    isToolbarSticky ? 'sticky top-[100px] z-40' : ''\n                  }`}\n                >\n                  <div className=\"flex flex-wrap items-center justify-between gap-4\">\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"relative w-full sm:w-auto\">\n                        <select \n                          value={\n                            sortBy === \"votes\" ? \"Most Voted\" : \n                            sortBy === \"recent\" ? \"Newest\" : \n                            sortBy === \"oldest\" ? \"Oldest\" : \"Most Voted\"\n                          }\n                          onChange={(e) => {\n                            const value = e.target.value;\n                            if (value === \"Most Voted\") setSortBy(\"votes\");\n                            else if (value === \"Newest\") setSortBy(\"recent\");\n                            else if (value === \"Oldest\") setSortBy(\"oldest\");\n                          }}\n                          className=\"w-full appearance-none rounded-lg border-white/30 py-2 pl-3 pr-8 text-sm text-white placeholder-white/60 transition-all focus:border-white focus:ring-1 focus:ring-white sm:w-auto\"\n                          style={{ backgroundColor: '#171121' }}\n                        >\n                          <option style={{ backgroundColor: '#171121', color: 'white' }}>Most Voted</option>\n                          <option style={{ backgroundColor: '#171121', color: 'white' }}>Newest</option>\n                          <option style={{ backgroundColor: '#171121', color: 'white' }}>Oldest</option>\n                        </select>\n                        <span className=\"pointer-events-none absolute right-3 top-1/2 -translate-y-1/2 text-white/60\">\n                          <ChevronDown className=\"h-4 w-4\" />\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"flex w-full items-center gap-4 sm:w-auto\">\n                      <div className=\"relative w-full flex-1 max-w-xs sm:w-auto\">\n                        <span className=\"pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 text-white/60\">\n                          <Search className=\"h-5 w-5\" />\n                        </span>\n                        <input \n                          value={searchTerm}\n                          onChange={(e) => setSearchTerm(e.target.value)}\n                          className=\"w-full rounded-lg border-white/30 py-2 pl-10 pr-4 text-sm text-white placeholder-white/60 transition-all focus:border-white focus:ring-1 focus:ring-white\" \n                          placeholder=\"Search entries...\" \n                          type=\"search\"\n                          data-testid=\"input-search\"\n                          style={{ backgroundColor: '#171121' }}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* All Submissions */}\n              {allSubmissions.length > 0 && (\n                <div className=\"mt-8\">\n                  <h3 className=\"mb-6 text-2xl font-bold text-white\">All Submissions</h3>\n                  <div className=\"columns-1 sm:columns-2 md:columns-3 lg:columns-4 gap-6 space-y-6\">\n                    {allSubmissions.map((submission: any) => (\n                      <div\n                        key={submission.id}\n                        className=\"group break-inside-avoid mb-6\"\n                        data-testid={`card-submission-${submission.id}`}\n                      >\n                        <div className=\"rounded-xl overflow-hidden shadow-lg transition-all duration-300 hover:shadow-primary/20 hover:-translate-y-1\">\n                          <div className=\"relative overflow-hidden min-h-[240px]\" onClick={(e) => handleCardClick(e, submission.id)}>\n                            <img\n                              src={submission.mediaUrl}\n                              alt={submission.title}\n                              className=\"w-full h-auto min-h-[240px] object-cover transition-transform duration-500 group-hover:scale-110\"\n                              loading=\"lazy\"\n                            />\n                            \n                            {/* Hover Overlay */}\n                            <div className=\"absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-all duration-300\">\n                              {/* Action Buttons */}\n                              <div className={`absolute top-2 sm:top-3 right-2 sm:right-3 flex flex-col items-center gap-1 sm:gap-2 ${activeCardId === submission.id ? 'opacity-100 lg:opacity-0' : 'opacity-0'} lg:group-hover:opacity-100 transition-opacity duration-300`}>\n                                {/* Vote Button */}\n                                <button\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleVote(submission.id);\n                                  }}\n                                  className={`p-2 rounded-full transition-all duration-300 ${\n                                    submission.hasVoted \n                                      ? 'bg-primary text-white shadow-lg' \n                                      : 'bg-black/50 text-white hover:bg-primary/90 backdrop-blur-sm'\n                                  }`}\n                                  data-testid={`button-vote-${submission.id}`}\n                                >\n                                  <Heart className={`h-3 w-3 sm:h-4 sm:w-4 ${submission.hasVoted ? 'fill-current' : ''}`} />\n                                </button>\n                                \n                                {/* Share Button */}\n                                <button\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleShare(submission);\n                                  }}\n                                  className=\"p-2 rounded-full bg-black/50 text-white hover:bg-primary/90 backdrop-blur-sm transition-all duration-300\"\n                                  data-testid={`button-share-${submission.id}`}\n                                >\n                                  <Share2 className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                                </button>\n                                \n                                {/* Expand Button */}\n                                <button\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    setSelectedSubmission(submission);\n                                    setIsLightboxOpen(true);\n                                  }}\n                                  className=\"p-2 rounded-full bg-black/50 text-white hover:bg-primary/90 backdrop-blur-sm transition-all duration-300\"\n                                  data-testid={`button-expand-${submission.id}`}\n                                >\n                                  <Expand className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                                </button>\n                              </div>\n                            </div>\n                            \n                            {/* Bottom Info Overlay */}\n                            <div className={`absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 via-black/60 to-transparent p-3 sm:p-4 ${activeCardId === submission.id ? 'opacity-100 lg:opacity-0' : 'opacity-0'} lg:group-hover:opacity-100 transition-all duration-300 transform translate-y-0 lg:translate-y-2 lg:group-hover:translate-y-0`}>\n                              <h3 className=\"text-base font-semibold text-white mb-1\">\n                                {submission.title}\n                              </h3>\n                              <p className=\"text-xs sm:text-sm text-white/80 mb-2\">\n                                by {submission.user?.username || 'Unknown'}\n                              </p>\n                              \n                              <div className=\"flex items-center gap-1 text-white/80\">\n                                <Heart className={`h-3 w-3 ${submission.hasVoted ? 'fill-primary text-primary' : ''}`} />\n                                <span className=\"text-sm\">{submission.voteCount} votes</span>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n\n      {/* Modals */}\n      <ContestLightboxModal\n        isOpen={isLightboxOpen}\n        onClose={() => setIsLightboxOpen(false)}\n        submission={selectedSubmission}\n        onVote={(submissionId: string) => handleVote(submissionId)}\n        onShare={() => selectedSubmission && handleShare(selectedSubmission)}\n      />\n\n      <ContestRulesCard\n        isOpen={showRules}\n        contest={contest}\n        onClose={() => setShowRules(false)}\n      />\n\n      <UploadWizardModal\n        isOpen={showUploadWizard}\n        onClose={() => setShowUploadWizard(false)}\n        preselectedContestId={contest.id}\n      />\n\n      {/* Prize Distribution Modal */}\n      <Dialog open={showAllPrizesModal} onOpenChange={setShowAllPrizesModal}>\n        <DialogContent className=\"bg-gradient-to-br from-slate-900/95 to-purple-900/95 border-primary/30 text-white max-w-md max-h-[80vh] overflow-hidden backdrop-blur-xl\">\n          <DialogHeader>\n            <DialogTitle className=\"text-2xl font-bold text-center text-white flex items-center justify-center gap-2\">\n              <Trophy className=\"h-6 w-6 text-yellow-400\" />\n              Prize Distribution\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"overflow-y-auto max-h-[60vh] pr-2 space-y-2\">\n            {contest?.prizeDistribution?.map((prize: any, index: number) => {\n              const placeNumber = index + 1;\n              const badgeColor = \n                placeNumber === 1 ? 'from-yellow-400 to-yellow-600' :\n                placeNumber === 2 ? 'from-gray-300 to-gray-500' :\n                placeNumber === 3 ? 'from-orange-400 to-orange-600' :\n                placeNumber === 4 ? 'from-blue-400 to-blue-600' :\n                placeNumber === 5 ? 'from-green-400 to-green-600' :\n                'from-purple-400 to-purple-600';\n\n              return (\n                <div \n                  key={index}\n                  className=\"flex items-center justify-between p-3 rounded-lg bg-primary/10 hover:bg-primary/20 transition-all\"\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <div className={`w-10 h-10 rounded-full bg-gradient-to-r ${badgeColor} flex items-center justify-center`}>\n                      <span className=\"text-sm font-bold text-black\">\n                        {placeNumber === 1 ? '1st' :\n                         placeNumber === 2 ? '2nd' :\n                         placeNumber === 3 ? '3rd' :\n                         `${placeNumber}th`}\n                      </span>\n                    </div>\n                    <span className=\"text-sm font-medium text-white/80\">Place</span>\n                  </div>\n                  \n                  <div className=\"text-right\">\n                    <p className=\"text-lg font-bold text-white\">\n                      {typeof prize.value === 'number' \n                        ? prize.value.toLocaleString()\n                        : Math.floor(contest.prizeGlory * (prize.percentage / 100)).toLocaleString()\n                      }\n                    </p>\n                    <p className=\"text-xs text-primary font-medium\">{((contest as any).config?.currency) || 'GLORY'}</p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n\n          <div className=\"pt-3 border-t border-primary/20 text-center\">\n            <p className=\"text-sm text-gray-300\">\n              Total Pool: <span className=\"font-bold text-white\">{contest?.prizeGlory?.toLocaleString()}</span> {((contest as any).config?.currency) || 'GLORY'}\n            </p>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n\n","size_bytes":48784},"client/src/pages/contests.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { ContestCard } from \"@/components/contest-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Trophy, Search, Filter, Calendar, Users } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function Contests() {\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: contests = [], isLoading } = useQuery({\n    queryKey: [\"/api/contests\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/contests\");\n      if (!response.ok) throw new Error(\"Failed to fetch contests\");\n      return response.json();\n    },\n  });\n\n  const filteredContests = contests.filter((contest: any) => {\n    const matchesStatus = statusFilter === \"all\" || contest.status === statusFilter;\n    const matchesSearch = contest.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         contest.description.toLowerCase().includes(searchQuery.toLowerCase());\n    return matchesStatus && matchesSearch;\n  });\n\n  const getStatusCounts = () => {\n    return {\n      all: contests.length,\n      active: contests.filter((c: any) => c.status === \"active\").length,\n      draft: contests.filter((c: any) => c.status === \"draft\").length,\n      ended: contests.filter((c: any) => c.status === \"ended\").length,\n    };\n  };\n\n  const statusCounts = getStatusCounts();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen py-16\" data-testid=\"contests-loading\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-muted rounded w-1/3 mb-4\"></div>\n            <div className=\"h-4 bg-muted rounded w-2/3 mb-8\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"h-64 bg-muted rounded-lg\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen py-8 pb-32 md:py-16 md:pb-16\" data-testid=\"contests-page\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"text-center mb-8 md:mb-12\">\n          <h2 className=\"text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white tracking-tight\" data-testid=\"contests-title\">\n            AI Art Contests\n          </h2>\n          <p className=\"mt-3 md:mt-4 text-sm sm:text-base md:text-lg text-gray-600 dark:text-gray-400 max-w-2xl mx-auto px-4\">\n            Participate in exciting AI art contests and showcase your creativity to win amazing prizes.\n          </p>\n        </div>\n\n        {/* Filters and Search */}\n        <div className=\"flex flex-col md:flex-row gap-3 md:gap-4 mb-6 md:mb-8\">\n          <div className=\"flex items-center gap-2 flex-wrap\">\n            <Button\n              variant={statusFilter === \"all\" ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setStatusFilter(\"all\")}\n              className={statusFilter === \"all\" ? \"gradient-glory\" : \"\"}\n              data-testid=\"filter-all\"\n            >\n              All ({statusCounts.all})\n            </Button>\n            <Button\n              variant={statusFilter === \"active\" ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setStatusFilter(\"active\")}\n              className={statusFilter === \"active\" ? \"bg-success text-success-foreground hover:bg-success/90\" : \"\"}\n              data-testid=\"filter-active\"\n            >\n              Active ({statusCounts.active})\n            </Button>\n            <Button\n              variant={statusFilter === \"draft\" ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setStatusFilter(\"draft\")}\n              className={statusFilter === \"draft\" ? \"bg-muted text-muted-foreground\" : \"\"}\n              data-testid=\"filter-draft\"\n            >\n              Draft ({statusCounts.draft})\n            </Button>\n            <Button\n              variant={statusFilter === \"ended\" ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setStatusFilter(\"ended\")}\n              className={statusFilter === \"ended\" ? \"bg-destructive text-destructive-foreground hover:bg-destructive/90\" : \"\"}\n              data-testid=\"filter-ended\"\n            >\n              Ended ({statusCounts.ended})\n            </Button>\n          </div>\n\n          <div className=\"relative flex-1 max-w-md\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search contests...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"search-contests\"\n            />\n          </div>\n        </div>\n\n        {/* Contests Grid */}\n        {filteredContests.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" data-testid=\"contests-grid\">\n            {filteredContests.map((contest: any) => (\n              <ContestCard key={contest.id} contest={contest} />\n            ))}\n          </div>\n        ) : contests.length === 0 ? (\n          <div className=\"text-center py-12\" data-testid=\"contests-empty\">\n            <div className=\"w-24 h-24 mx-auto mb-6 rounded-full bg-muted flex items-center justify-center\">\n              <Trophy className=\"w-12 h-12 text-muted-foreground\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2\">No contests yet</h3>\n            <p className=\"text-muted-foreground\">\n              Check back soon for exciting creative competitions!\n            </p>\n          </div>\n        ) : (\n          <div className=\"text-center py-12\" data-testid=\"contests-no-results\">\n            <div className=\"w-24 h-24 mx-auto mb-6 rounded-full bg-muted flex items-center justify-center\">\n              <Filter className=\"w-12 h-12 text-muted-foreground\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2\">No contests match your filters</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Try adjusting your search or filter criteria\n            </p>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setStatusFilter(\"all\");\n                setSearchQuery(\"\");\n              }}\n              data-testid=\"clear-filters\"\n            >\n              Clear Filters\n            </Button>\n          </div>\n        )}\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 md:gap-6 mt-8 md:mt-12\">\n          <div className=\"bg-background-light dark:bg-gray-900/40 rounded-xl p-6 text-center border border-gray-200 dark:border-gray-800\" data-testid=\"stat-total-prizes\">\n            <Trophy className=\"text-primary mx-auto mb-3\" size={32} />\n            <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n              {contests.reduce((total: number, contest: any) => total + (Number(contest.prizeGlory) || 0), 0).toLocaleString()}\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-400\">$GLORY in Prizes</p>\n          </div>\n          <div className=\"bg-background-light dark:bg-gray-900/40 rounded-xl p-6 text-center border border-gray-200 dark:border-gray-800\" data-testid=\"stat-active-contests\">\n            <Calendar className=\"text-primary mx-auto mb-3\" size={32} />\n            <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n              {statusCounts.active}\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-400\">Active Contests</p>\n          </div>\n          <div className=\"bg-background-light dark:bg-gray-900/40 rounded-xl p-6 text-center border border-gray-200 dark:border-gray-800\" data-testid=\"stat-total-participants\">\n            <Users className=\"text-primary mx-auto mb-3\" size={32} />\n            <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n              {contests.reduce((total: number, contest: any) => total + (Number((contest as any).submissionCount) || 0), 0).toLocaleString()}\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-400\">Total Participants</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8561},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/UploadSelectionModal.tsx":{"content":"import { X, Upload, Image as ImageIcon } from \"lucide-react\";\nimport { GlassButton } from \"./GlassButton\";\n\ninterface UploadSelectionModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSelectExisting: () => void;\n  onUploadNew: () => void;\n}\n\nexport function UploadSelectionModal({\n  isOpen,\n  onClose,\n  onSelectExisting,\n  onUploadNew\n}: UploadSelectionModalProps) {\n  if (!isOpen) return null;\n\n  return (\n    <div \n      className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/80 backdrop-blur-sm p-4\"\n      onClick={onClose}\n      data-testid=\"upload-selection-overlay\"\n    >\n      <div \n        className=\"relative max-w-md w-full bg-slate-900/90 backdrop-blur-xl rounded-2xl border border-white/10 shadow-2xl shadow-violet-600/20 p-6\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-2xl font-bold text-white\">Submit Entry</h2>\n          <button\n            onClick={onClose}\n            className=\"p-2 hover:bg-white/10 rounded-lg transition-colors\"\n            data-testid=\"button-close-upload-selection\"\n          >\n            <X className=\"h-6 w-6 text-slate-400\" />\n          </button>\n        </div>\n\n        {/* Options */}\n        <div className=\"space-y-4\">\n          <button\n            onClick={onUploadNew}\n            className=\"w-full p-6 bg-white/5 hover:bg-white/10 backdrop-blur-sm rounded-xl border border-white/10 hover:border-violet-500/50 transition-all group\"\n            data-testid=\"button-upload-new\"\n          >\n            <div className=\"flex flex-col items-center gap-3\">\n              <div className=\"p-4 rounded-full bg-violet-600/20 border border-violet-500/30 group-hover:bg-violet-600/30 transition-colors\">\n                <Upload className=\"h-8 w-8 text-violet-400\" />\n              </div>\n              <div>\n                <h3 className=\"text-lg font-bold text-white mb-1\">Upload New Artwork</h3>\n                <p className=\"text-sm text-slate-400\">Create a new submission for this contest</p>\n              </div>\n            </div>\n          </button>\n\n          <button\n            onClick={onSelectExisting}\n            className=\"w-full p-6 bg-white/5 hover:bg-white/10 backdrop-blur-sm rounded-xl border border-white/10 hover:border-violet-500/50 transition-all group\"\n            data-testid=\"button-select-existing\"\n          >\n            <div className=\"flex flex-col items-center gap-3\">\n              <div className=\"p-4 rounded-full bg-violet-600/20 border border-violet-500/30 group-hover:bg-violet-600/30 transition-colors\">\n                <ImageIcon className=\"h-8 w-8 text-violet-400\" />\n              </div>\n              <div>\n                <h3 className=\"text-lg font-bold text-white mb-1\">Select from Gallery</h3>\n                <p className=\"text-sm text-slate-400\">Choose from your existing artworks</p>\n              </div>\n            </div>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3031},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/wallet/CashoutRequest.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { GlassButton } from \"@/components/GlassButton\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { DollarSign, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nexport function CashoutRequest() {\n  const { toast } = useToast();\n  const [amount, setAmount] = useState(\"\");\n  const [currency, setCurrency] = useState<\"GLORY\" | \"SOL\" | \"USDC\">(\"GLORY\");\n  const [tokenType, setTokenType] = useState(\"USDC\");\n\n  const { data: userData } = useQuery<any>({ queryKey: [\"/api/me\"] });\n\n  const createRequestMutation = useMutation({\n    mutationFn: async () => {\n      if (!userData?.withdrawalAddress) {\n        throw new Error(\"Please set your withdrawal address in your profile first\");\n      }\n\n      const amountNum = parseFloat(amount);\n      if (isNaN(amountNum) || amountNum < 1000) {\n        throw new Error(`Minimum cashout amount is 1000 ${currency}`);\n      }\n\n      // apiRequest expects (method, url, data)\n      return apiRequest(\"POST\", \"/api/cashout/request\", {\n        withdrawalAddress: userData.withdrawalAddress,\n        amountGlory: currency === \"GLORY\" ? amountNum : 0,\n        tokenType,\n        currency,\n        amount: amountNum,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cashout/requests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n      setAmount(\"\");\n      toast({\n        title: \"Cashout Requested\",\n        description: \"Your cashout request has been submitted for admin approval.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Request Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createRequestMutation.mutate();\n  };\n\n  const gloryBalance = userData?.gloryBalance || 0;\n  const solBalance = userData?.solBalance || 0;\n  const usdcBalance = userData?.usdcBalance || 0;\n  const hasWithdrawalAddress = !!userData?.withdrawalAddress;\n\n  const getCurrentBalance = () => {\n    switch (currency) {\n      case \"SOL\":\n        return solBalance;\n      case \"USDC\":\n        return usdcBalance;\n      default:\n        return gloryBalance;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card data-testid=\"cashout-request-card\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <DollarSign className=\"h-5 w-5\" />\n            Withdraw\n          </CardTitle>\n          <CardDescription>\n            Request to withdraw your funds (minimum 1000)\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {!hasWithdrawalAddress ? (\n            <div className=\"p-4 rounded-lg bg-muted/50 text-center\">\n              <p className=\"text-sm text-muted-foreground\">\n                Please set your withdrawal address in your profile first to enable withdrawals\n              </p>\n            </div>\n          ) : (\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"currency\">Currency</Label>\n                <Select value={currency} onValueChange={(value) => setCurrency(value as \"GLORY\" | \"SOL\" | \"USDC\")}>\n                  <SelectTrigger id=\"currency\" data-testid=\"select-withdraw-currency\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"GLORY\">GLORY</SelectItem>\n                    <SelectItem value=\"SOL\">SOL</SelectItem>\n                    <SelectItem value=\"USDC\">USDC</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"amount\">Amount ({currency})</Label>\n                <div className=\"flex items-center gap-2\">\n                  <Input\n                    id=\"amount\"\n                    type=\"number\"\n                    placeholder=\"1000\"\n                    value={amount}\n                    onChange={(e) => setAmount(e.target.value)}\n                    min=\"1000\"\n                    step=\"0.01\"\n                    required\n                    data-testid=\"input-cashout-amount\"\n                  />\n                  <p className=\"text-sm text-muted-foreground whitespace-nowrap\">\n                    of {getCurrentBalance().toLocaleString()}\n                  </p>\n                </div>\n              </div>\n\n              <GlassButton\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={createRequestMutation.isPending || !hasWithdrawalAddress}\n                data-testid=\"button-submit-cashout\"\n              >\n                {createRequestMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Submitting...\n                  </>\n                ) : (\n                  \"Request Withdrawal\"\n                )}\n              </GlassButton>\n            </form>\n          )}\n        </CardContent>\n      </Card>\n\n    </div>\n  );\n}\n","size_bytes":5607},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/wallet/WalletConnect.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useWallet } from \"@/lib/wallet-provider\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Wallet, CheckCircle, XCircle, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface WalletData {\n  wallet?: {\n    id: string;\n    userId: string;\n    address: string;\n    provider: string;\n    status: string;\n    createdAt: string;\n  };\n}\n\nexport function WalletConnect() {\n  const { connected, connecting, publicKey, connect, disconnect, signMessage } = useWallet();\n  const { toast } = useToast();\n  const [isConnecting, setIsConnecting] = useState(false);\n  const shouldVerify = useRef(false);\n\n  const { data: walletData, isFetched } = useQuery<WalletData>({\n    queryKey: [\"/api/wallet/me\"],\n    enabled: !!publicKey,\n  });\n\n  const connectWalletMutation = useMutation({\n    mutationFn: async () => {\n      if (!connected || !publicKey) {\n        throw new Error(\"Wallet not connected\");\n      }\n\n      const message = `Sign this message to verify your wallet ownership.\\nWallet: ${publicKey}\\nTimestamp: ${Date.now()}`;\n      const signature = await signMessage(message);\n\n      const response = await apiRequest(\"POST\", \"/api/wallet/connect\", {\n        address: publicKey,\n        provider: \"phantom\",\n        signature,\n        message,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wallet/me\"] });\n      toast({\n        title: \"Wallet Connected\",\n        description: \"Your Solana wallet has been successfully verified and connected.\",\n      });\n      shouldVerify.current = false;\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Connection Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      shouldVerify.current = false;\n    },\n  });\n\n  useEffect(() => {\n    if (connected && publicKey && shouldVerify.current && isFetched && !walletData?.wallet) {\n      connectWalletMutation.mutate();\n    }\n  }, [connected, publicKey, walletData, isFetched, connectWalletMutation]);\n\n  const handleConnect = async () => {\n    try {\n      setIsConnecting(true);\n      shouldVerify.current = true;\n      await connect();\n    } catch (error: any) {\n      console.error(\"Error connecting wallet:\", error);\n      shouldVerify.current = false;\n      \n      // Don't show error toast if user rejected the connection\n      if (error?.code !== 4001) {\n        toast({\n          title: \"Connection Error\",\n          description: error?.message || \"Failed to connect wallet. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  const handleDisconnect = async () => {\n    await disconnect();\n    queryClient.invalidateQueries({ queryKey: [\"/api/wallet/me\"] });\n    toast({\n      title: \"Wallet Disconnected\",\n      description: \"Your wallet has been disconnected.\",\n    });\n  };\n\n  const isVerified = walletData?.wallet?.status === \"active\";\n\n  return (\n    <Card data-testid=\"wallet-connect-card\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Wallet className=\"h-5 w-5\" />\n              Solana Wallet\n            </CardTitle>\n            <CardDescription>\n              Connect your Solana wallet to cash out GLORY rewards\n            </CardDescription>\n          </div>\n          {connected && isVerified && (\n            <Badge variant=\"default\" className=\"bg-green-500/10 text-green-500 border-green-500/20\" data-testid=\"wallet-verified-badge\">\n              <CheckCircle className=\"h-3 w-3 mr-1\" />\n              Verified\n            </Badge>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {!connected ? (\n          <div className=\"space-y-4\">\n            <p className=\"text-sm text-muted-foreground\">\n              Connect your Phantom wallet to enable cashouts. Make sure you have the Phantom browser extension installed.\n            </p>\n            <Button\n              onClick={handleConnect}\n              disabled={isConnecting || connecting}\n              className=\"w-full\"\n              data-testid=\"button-connect-wallet\"\n            >\n              {isConnecting || connecting ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Connecting...\n                </>\n              ) : (\n                <>\n                  <Wallet className=\"h-4 w-4 mr-2\" />\n                  Connect Phantom Wallet\n                </>\n              )}\n            </Button>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            <div className=\"p-4 rounded-lg bg-muted/50\" data-testid=\"wallet-address\">\n              <p className=\"text-xs text-muted-foreground mb-1\">Connected Wallet</p>\n              <p className=\"font-mono text-sm break-all\">{publicKey}</p>\n            </div>\n\n            {isVerified ? (\n              <div className=\"flex items-center gap-2 text-sm text-green-500\">\n                <CheckCircle className=\"h-4 w-4\" />\n                <span>Wallet verified and ready for cashouts</span>\n              </div>\n            ) : connectWalletMutation.isPending ? (\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\n                <span>Verifying wallet...</span>\n              </div>\n            ) : (\n              <div className=\"flex items-center gap-2 text-sm text-yellow-500\">\n                <XCircle className=\"h-4 w-4\" />\n                <span>Wallet not verified</span>\n              </div>\n            )}\n\n            <Button\n              variant=\"outline\"\n              onClick={handleDisconnect}\n              className=\"w-full\"\n              data-testid=\"button-disconnect-wallet\"\n            >\n              Disconnect Wallet\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6377},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"server/utils/rewards.test.ts":{"content":"import { describe, it, expect } from \"vitest\";\nimport { calculateRewards, distributeRewards, getRankSuffix } from \"./rewards\";\n\ndescribe(\"Rewards Distribution\", () => {\n  it(\"should calculate correct percentages for 1000 GLORY\", () => {\n    const rewards = calculateRewards(1000);\n    \n    expect(rewards).toHaveLength(5);\n    expect(rewards[0].amount).toBe(400); // 40%\n    expect(rewards[1].amount).toBe(250); // 25%\n    expect(rewards[2].amount).toBe(150); // 15%\n    expect(rewards[3].amount).toBe(100); // 10%\n    expect(rewards[4].amount).toBe(100); // 10%\n  });\n\n  it(\"should handle rounding correctly\", () => {\n    const rewards = distributeRewards(1001);\n    const total = rewards.reduce((sum, reward) => sum + reward.amount, 0);\n    \n    expect(total).toBe(1001);\n    expect(rewards[0].amount).toBe(401); // First place gets remainder\n  });\n\n  it(\"should generate correct rank suffixes\", () => {\n    expect(getRankSuffix(1)).toBe(\"st\");\n    expect(getRankSuffix(2)).toBe(\"nd\");\n    expect(getRankSuffix(3)).toBe(\"rd\");\n    expect(getRankSuffix(4)).toBe(\"th\");\n    expect(getRankSuffix(11)).toBe(\"th\");\n    expect(getRankSuffix(21)).toBe(\"st\");\n  });\n\n  it(\"should maintain percentage accuracy\", () => {\n    const totalPrize = 2500;\n    const rewards = calculateRewards(totalPrize);\n    \n    expect(rewards[0].percentage).toBe(0.4);\n    expect(rewards[1].percentage).toBe(0.25);\n    expect(rewards[2].percentage).toBe(0.15);\n    expect(rewards[3].percentage).toBe(0.1);\n    expect(rewards[4].percentage).toBe(0.1);\n  });\n});\n","size_bytes":1534},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"server/utils/rewards.ts":{"content":"/**\n * Calculate and distribute GLORY rewards for contest winners\n * Distribution: 1st=40%, 2nd=25%, 3rd=15%, 4th=10%, 5th=10%\n */\n\ninterface RewardDistribution {\n  rank: number;\n  percentage: number;\n  amount: number;\n}\n\nexport function calculateRewards(totalPrize: number): RewardDistribution[] {\n  const percentages = [0.4, 0.25, 0.15, 0.1, 0.1]; // Top 5 distribution\n  \n  return percentages.map((percentage, index) => ({\n    rank: index + 1,\n    percentage,\n    amount: Math.floor(totalPrize * percentage),\n  }));\n}\n\nexport function distributeRewards(totalPrize: number): RewardDistribution[] {\n  const rewards = calculateRewards(totalPrize);\n  \n  // Ensure all prizes are distributed (handle rounding)\n  const totalDistributed = rewards.reduce((sum, reward) => sum + reward.amount, 0);\n  const remainder = totalPrize - totalDistributed;\n  \n  if (remainder > 0) {\n    // Add remainder to first place\n    rewards[0].amount += remainder;\n  }\n  \n  return rewards;\n}\n\nexport function getRankSuffix(rank: number): string {\n  const suffixes = [\"th\", \"st\", \"nd\", \"rd\"];\n  const remainder = rank % 100;\n  \n  return suffixes[(remainder - 20) % 10] || suffixes[remainder] || suffixes[0];\n}\n","size_bytes":1185},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/GlassButton.tsx":{"content":"import React from 'react';\n\ninterface GlassButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  children: React.ReactNode;\n  variant?: 'primary' | 'secondary';\n}\n\nexport function GlassButton({ \n  children, \n  className = '', \n  variant = 'primary',\n  ...props \n}: GlassButtonProps) {\n  const baseClasses = `\n    rounded-lg \n    bg-background-dark/80 \n    backdrop-blur-sm \n    border \n    border-primary/30 \n    text-white \n    font-bold \n    transition-all \n    duration-300 \n    focus-ring \n    hover:border-primary/70\n    glow-border \n    px-6 \n    py-3 \n    text-base\n    shadow-lg \n    shadow-primary/20\n    hover:shadow-xl \n    hover:shadow-primary/60\n    hover:scale-105\n    hover:bg-primary/20\n    active:scale-95\n    transform\n    relative\n    overflow-hidden\n    group\n    hover:shadow-[0_0_20px_rgba(124,60,236,0.6)]\n  `;\n\n  const variantClasses = {\n    primary: 'hover:bg-primary/20',\n    secondary: 'bg-background-dark/60 hover:bg-background-dark/80'\n  };\n\n  return (\n    <button\n      className={`${baseClasses} ${variantClasses[variant]} ${className}`.trim()}\n      {...props}\n    >\n      {/* Enhanced glow border overlay on hover */}\n      <div className=\"absolute inset-0 rounded-lg border border-transparent group-hover:border-primary/80 group-hover:shadow-[0_0_15px_rgba(124,60,236,0.8),inset_0_0_15px_rgba(124,60,236,0.2)] transition-all duration-300\" />\n      \n      {/* Shimmer effect overlay */}\n      <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-700 ease-out\" />\n      \n      {/* Button content */}\n      <span className=\"relative z-10 flex items-center justify-center gap-2\">\n        {children}\n      </span>\n    </button>\n  );\n}","size_bytes":1798},"client/src/pages/upload.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { UploadWizardModal } from \"@/components/UploadWizardModal\";\nimport { useAuth } from \"@/lib/auth\";\n\nexport default function Upload() {\n  const [, setLocation] = useLocation();\n  const { data: user } = useAuth();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [preselectedContestId, setPreselectedContestId] = useState<string | undefined>();\n\n  // Redirect if not authenticated\n  if (!user) {\n    setLocation(\"/login\");\n    return null;\n  }\n\n  // Get contest ID from URL and open modal\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const contestId = urlParams.get('contestId');\n    setPreselectedContestId(contestId || undefined);\n    setIsModalOpen(true);\n  }, []);\n\n  // Handle modal close - redirect back to contests\n  const handleClose = () => {\n    setIsModalOpen(false);\n    setLocation(\"/contests\");\n  };\n\n  return (\n    <div className=\"min-h-screen pb-32 md:pb-0\">\n      <UploadWizardModal\n        isOpen={isModalOpen}\n        onClose={handleClose}\n        preselectedContestId={preselectedContestId}\n      />\n    </div>\n  );\n}\n","size_bytes":1188},"server/index.ts":{"content":"import dotenv from \"dotenv\";\ndotenv.config();\n\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { ContestScheduler } from \"./contest-scheduler\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2292},"client/src/components/layout/navbar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth, useLogout, isAuthenticated, isAdmin } from \"@/lib/auth\";\nimport { useUserBalance } from \"@/hooks/useUserBalance\";\nimport { Button } from \"@/components/ui/button\";\nimport { GlassButton } from \"@/components/GlassButton\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Trophy, Upload, LogOut, User, Shield, Image, ChevronDown, Wallet } from \"lucide-react\";\nimport { WalletMultiButton } from '@solana/wallet-adapter-react-ui';\n\nexport function Navbar() {\n  const { data: user } = useAuth();\n  useUserBalance(); // Keep for auto-refresh functionality\n  const logout = useLogout();\n  const [, setLocation] = useLocation();\n\n  const handleLogout = () => {\n    logout.mutate();\n    setLocation(\"/\");\n  };\n\n  const getInitials = (username: string) => {\n    return username.substring(0, 2).toUpperCase();\n  };\n\n  return (\n    <nav className=\"sticky top-0 z-50 glass-effect border-b border-border\" data-testid=\"navbar\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo */}\n          <Link href=\"/\" className=\"flex items-center space-x-3\" data-testid=\"link-logo\">\n            <img \n              src=\"/logo.png\" \n              alt=\"5BEST.ai Logo\" \n              className=\"w-10 h-10 object-contain\"\n            />\n            <span className=\"text-2xl font-bold tracking-tight gradient-text\">5BEST.ai</span>\n          </Link>\n\n          {/* Center Navigation - Desktop */}\n          <div className=\"hidden md:flex items-center space-x-3 absolute left-1/2 transform -translate-x-1/2\">\n            <Link href=\"/contests\" data-testid=\"link-contests\">\n              <Button variant=\"ghost\" className=\"px-4 py-2\">Contests</Button>\n            </Link>\n            {isAuthenticated(user) && (\n              <Link href=\"/upload\" data-testid=\"link-upload\">\n                <GlassButton className=\"px-4 py-2\">\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Upload\n                </GlassButton>\n              </Link>\n            )}\n          </div>\n\n          {/* Upload Button - Mobile Only */}\n          {isAuthenticated(user) && (\n            <Link href=\"/upload\" data-testid=\"link-upload-mobile\" className=\"ml-auto mr-3 md:hidden\">\n              <GlassButton className=\"px-4 py-2\">\n                <Upload className=\"w-4 h-4\" />\n              </GlassButton>\n            </Link>\n          )}\n\n          {/* User Actions - Desktop Only */}\n          <div className=\"hidden md:flex items-center space-x-3\">\n            {isAuthenticated(user) && (\n              <>\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"px-3 py-1.5 h-auto rounded-full bg-muted hover:bg-muted/80\" data-testid=\"balance-dropdown\">\n                      <Trophy className=\"text-primary w-4 h-4 mr-2\" />\n                      <span className=\"text-sm font-semibold\">{(user?.gloryBalance || 0).toLocaleString()} GLORY</span>\n                      <ChevronDown className=\"w-4 h-4 ml-1 text-muted-foreground\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"w-48\">\n                    <div className=\"px-3 py-2 space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-xs font-medium text-muted-foreground\">GLORY</span>\n                        <span className=\"text-sm font-semibold\" data-testid=\"balance-glory\">\n                          {(user?.gloryBalance || 0).toLocaleString()}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-xs font-medium text-muted-foreground\">SOL</span>\n                        <span className=\"text-sm font-semibold\" data-testid=\"balance-sol\">\n                          {(user?.solBalance || 0).toLocaleString()}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-xs font-medium text-muted-foreground\">USDC</span>\n                        <span className=\"text-sm font-semibold\" data-testid=\"balance-usdc\">\n                          {(user?.usdcBalance || 0).toLocaleString()}\n                        </span>\n                      </div>\n                    </div>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n                <div className=\"wallet-adapter-button-trigger\" data-testid=\"wallet-button\">\n                  <WalletMultiButton />\n                </div>\n              </>\n            )}\n\n            {isAuthenticated(user) ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"w-10 h-10 rounded-full p-0\" data-testid=\"user-menu\">\n                    <Avatar className=\"w-10 h-10\">\n                      <AvatarFallback className=\"gradient-glory text-white font-bold\">\n                        {getInitials(user.username)}\n                      </AvatarFallback>\n                    </Avatar>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-56\">\n                  <div className=\"px-3 py-2\">\n                    <p className=\"text-sm font-medium\">{user.username}</p>\n                    <p className=\"text-xs text-muted-foreground\">{user.email}</p>\n                    <div className=\"flex items-center gap-2 mt-1\">\n                      <Badge \n                        variant={user.status === \"approved\" ? \"default\" : user.status === \"pending\" ? \"secondary\" : \"destructive\"}\n                        className=\"text-xs\"\n                        data-testid={`status-${user.status}`}\n                      >\n                        {user.status}\n                      </Badge>\n                      {isAdmin(user) && (\n                        <Badge variant=\"outline\" className=\"text-xs\" data-testid=\"admin-badge\">\n                          <Shield className=\"w-3 h-3 mr-1\" />\n                          Admin\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                  <DropdownMenuSeparator />\n                  <Link href=\"/profile\" data-testid=\"link-profile\">\n                    <DropdownMenuItem>\n                      <User className=\"w-4 h-4 mr-2\" />\n                      Profile\n                    </DropdownMenuItem>\n                  </Link>\n                  <Link href=\"/my-submissions\" data-testid=\"link-my-submissions\">\n                    <DropdownMenuItem>\n                      <Image className=\"w-4 h-4 mr-2\" />\n                      My Gallery\n                    </DropdownMenuItem>\n                  </Link>\n                  {isAdmin(user) && (\n                    <Link href=\"/admin\" data-testid=\"link-admin\">\n                      <DropdownMenuItem>\n                        <Shield className=\"w-4 h-4 mr-2\" />\n                        Admin Dashboard\n                      </DropdownMenuItem>\n                    </Link>\n                  )}\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={handleLogout} data-testid=\"button-logout\">\n                    <LogOut className=\"w-4 h-4 mr-2\" />\n                    Logout\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <div className=\"flex items-center space-x-2\">\n                <Link href=\"/login\" data-testid=\"link-login\">\n                  <Button variant=\"ghost\">Login</Button>\n                </Link>\n                <Link href=\"/register\" data-testid=\"link-register\">\n                  <GlassButton>Sign Up</GlassButton>\n                </Link>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":8305},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 min-h-[44px] md:min-h-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1925},"client/src/pages/admin/contest-detail.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useParams, useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { ArrowLeft, Edit, Trash2, Ban, Image as ImageIcon, Video, Crown, Calendar, Trophy, Users, CheckCircle, XCircle, AlertTriangle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth, isAdmin } from \"@/lib/auth\";\nimport { EditContestModal } from \"@/components/EditContestModal\";\n\nexport default function AdminContestDetail() {\n  const { id } = useParams();\n  const { data: user, isLoading: authLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [isDeleteConfirmOpen, setIsDeleteConfirmOpen] = useState(false);\n  const [itemToDelete, setItemToDelete] = useState<{ type: 'contest' | 'submission'; id: string } | null>(null);\n  const [userToSuspend, setUserToSuspend] = useState<string | null>(null);\n\n  // All hooks must be called before any conditional returns\n  const { data: contest, isLoading: contestLoading } = useQuery({\n    queryKey: [\"/api/contests\", id],\n    queryFn: async () => {\n      const response = await fetch(`/api/contests/${id}`, { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch contest\");\n      return response.json();\n    },\n    enabled: !!user && isAdmin(user) && !authLoading, // Only fetch when authorized\n  });\n\n  const { data: submissions = [], isLoading: submissionsLoading } = useQuery({\n    queryKey: [\"/api/submissions\", { contestId: id }],\n    queryFn: async () => {\n      const response = await fetch(`/api/submissions?contestId=${id}`, { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch submissions\");\n      return response.json();\n    },\n    enabled: !!user && isAdmin(user) && !authLoading, // Only fetch when authorized\n  });\n\n  const updateContestMutation = useMutation({\n    mutationFn: async (formData: any) => {\n      // The EditContestModal already sends data in the correct format\n      // with startAt, endAt as ISO strings and config object containing all settings\n      const updateData: any = {\n        title: formData.title,\n        slug: formData.slug,\n        description: formData.description,\n        rules: formData.rules || formData.description,\n        prizeGlory: formData.prizeGlory,\n        startAt: formData.startAt,\n        endAt: formData.endAt,\n        status: formData.status,\n        config: formData.config,\n        coverImageUrl: formData.coverImageUrl || ''\n      };\n\n      const response = await apiRequest(\"PATCH\", `/api/admin/contests/${id}`, updateData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contests\"] });\n      toast({\n        title: \"Contest updated\",\n        description: \"The contest has been successfully updated.\",\n      });\n      setIsEditModalOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update contest.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteContestMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"DELETE\", `/api/admin/contests/${id}`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contests\"] });\n      toast({\n        title: \"Contest deleted\",\n        description: \"The contest has been successfully deleted.\",\n      });\n      setLocation(\"/admin\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete contest.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteSubmissionMutation = useMutation({\n    mutationFn: async (submissionId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/admin/submissions/${submissionId}`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      toast({\n        title: \"Submission deleted\",\n        description: \"The submission has been successfully deleted.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete submission.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const suspendUserMutation = useMutation({\n    mutationFn: async ({ userId, suspendAssets }: { userId: string; suspendAssets: boolean }) => {\n      const response = await apiRequest(\"PATCH\", `/api/admin/users/${userId}`, { status: \"banned\" });\n      \n      if (suspendAssets) {\n        const userSubmissions = submissions.filter((s: any) => s.user.id === userId);\n        await Promise.all(\n          userSubmissions.map((s: any) =>\n            apiRequest(\"PATCH\", `/api/admin/submissions/${s.id}`, { status: \"rejected\" })\n          )\n        );\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"User suspended\",\n        description: \"The user has been suspended.\",\n      });\n      setUserToSuspend(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to suspend user.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // All hooks defined - now safe to do conditional returns\n  if (authLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user || !isAdmin(user)) {\n    setLocation(\"/admin\");\n    return null;\n  }\n\n  const handleEditContest = () => {\n    setIsEditModalOpen(true);\n  };\n\n  const handleSaveContest = (formData: any) => {\n    updateContestMutation.mutate(formData);\n  };\n\n  const handleDeleteItem = () => {\n    if (!itemToDelete) return;\n    \n    if (itemToDelete.type === 'contest') {\n      deleteContestMutation.mutate();\n    } else {\n      deleteSubmissionMutation.mutate(itemToDelete.id);\n    }\n    \n    setItemToDelete(null);\n  };\n\n  if (contestLoading || submissionsLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!contest) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <p className=\"text-muted-foreground\">Contest not found</p>\n          <Button onClick={() => setLocation(\"/admin\")} className=\"mt-4\" data-testid=\"button-back-to-admin\">\n            Back to Admin\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const getStatusBadge = (status: string) => {\n    const colors: Record<string, string> = {\n      active: \"bg-green-500/20 text-green-400 border-green-500/30\",\n      draft: \"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\",\n      ended: \"bg-gray-500/20 text-gray-400 border-gray-500/30\",\n      pending: \"bg-yellow-500/20 text-yellow-400\",\n      approved: \"bg-green-500/20 text-green-400\",\n      rejected: \"bg-red-500/20 text-red-400\"\n    };\n    \n    return (\n      <Badge className={colors[status] || \"bg-gray-500/20 text-gray-400\"}>\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  const participantMap = new Map();\n  submissions.forEach((submission: any) => {\n    if (!participantMap.has(submission.user.id)) {\n      participantMap.set(submission.user.id, {\n        id: submission.user.id,\n        username: submission.user.username,\n        submissions: []\n      });\n    }\n    participantMap.get(submission.user.id).submissions.push(submission);\n  });\n\n  const participants = Array.from(participantMap.values());\n\n  return (\n    <div className=\"container mx-auto py-8 px-4\">\n      <div className=\"mb-6\">\n        <Button\n          variant=\"ghost\"\n          onClick={() => setLocation(\"/admin\")}\n          className=\"mb-4\"\n          data-testid=\"button-back-to-admin-dashboard\"\n        >\n          <ArrowLeft className=\"mr-2 h-4 w-4\" />\n          Back to Dashboard\n        </Button>\n\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center gap-3 mb-2\">\n              <h1 className=\"text-3xl font-bold text-white\">{contest.title}</h1>\n              {getStatusBadge(contest.status)}\n            </div>\n            <p className=\"text-muted-foreground mb-4\">{contest.description}</p>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n              <Card className=\"glassmorphism border border-white/10\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center gap-2 text-yellow-400\">\n                    <Trophy className=\"h-5 w-5\" />\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Prize Pool</p>\n                      <p className=\"text-xl font-bold\">{contest.prizeGlory.toLocaleString()}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"glassmorphism border border-white/10\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center gap-2 text-primary\">\n                    <Users className=\"h-5 w-5\" />\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Participants</p>\n                      <p className=\"text-xl font-bold\">{participants.length}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"glassmorphism border border-white/10\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center gap-2 text-blue-400\">\n                    <ImageIcon className=\"h-5 w-5\" />\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Submissions</p>\n                      <p className=\"text-xl font-bold\">{submissions.length}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"glassmorphism border border-white/10\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center gap-2 text-green-400\">\n                    <CheckCircle className=\"h-5 w-5\" />\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Approved</p>\n                      <p className=\"text-xl font-bold\">\n                        {submissions.filter((s: any) => s.status === 'approved').length}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n          \n          <div className=\"flex gap-2 ml-4\">\n            <Button onClick={handleEditContest} data-testid=\"button-edit-contest\">\n              <Edit className=\"mr-2 h-4 w-4\" />\n              Edit Contest\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={() => setItemToDelete({ type: 'contest', id: contest.id })}\n              data-testid=\"button-delete-contest\"\n            >\n              <Trash2 className=\"mr-2 h-4 w-4\" />\n              Delete Contest\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <Card className=\"glassmorphism border border-white/10\">\n        <CardHeader>\n          <CardTitle className=\"text-white\">Participants & Submissions</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {participants.length === 0 ? (\n            <p className=\"text-center text-muted-foreground py-8\">No participants yet</p>\n          ) : (\n            <div className=\"space-y-6\">\n              {participants.map((participant: any) => (\n                <div key={participant.id} className=\"border border-white/10 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"h-10 w-10 rounded-full bg-primary/20 flex items-center justify-center\">\n                        <span className=\"text-primary font-bold\">\n                          {participant.username.charAt(0).toUpperCase()}\n                        </span>\n                      </div>\n                      <div>\n                        <h3 className=\"font-semibold text-white\">{participant.username}</h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {participant.submissions.length} submission{participant.submissions.length !== 1 ? 's' : ''}\n                        </p>\n                      </div>\n                    </div>\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => setUserToSuspend(participant.id)}\n                      data-testid={`button-suspend-user-${participant.id}`}\n                    >\n                      <Ban className=\"mr-2 h-4 w-4\" />\n                      Suspend User\n                    </Button>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {participant.submissions.map((submission: any) => (\n                      <Card key={submission.id} className=\"bg-background-light/50 border-white/5\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"relative aspect-video mb-3 rounded-lg overflow-hidden bg-black/50\">\n                            {submission.type === 'image' ? (\n                              <img\n                                src={submission.mediaUrl}\n                                alt={submission.title}\n                                className=\"w-full h-full object-cover\"\n                              />\n                            ) : (\n                              <div className=\"flex items-center justify-center h-full\">\n                                <Video className=\"h-12 w-12 text-muted-foreground\" />\n                              </div>\n                            )}\n                          </div>\n                          \n                          <div className=\"flex items-start justify-between mb-2\">\n                            <div className=\"flex-1 min-w-0\">\n                              <h4 className=\"font-medium text-white truncate\">{submission.title}</h4>\n                              <p className=\"text-sm text-muted-foreground\">\n                                Votes: {submission.votesCount}\n                              </p>\n                            </div>\n                            {getStatusBadge(submission.status)}\n                          </div>\n                          \n                          {submission.description && (\n                            <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\">\n                              {submission.description}\n                            </p>\n                          )}\n                          \n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            className=\"w-full\"\n                            onClick={() => setItemToDelete({ type: 'submission', id: submission.id })}\n                            data-testid={`button-delete-submission-${submission.id}`}\n                          >\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            Delete Submission\n                          </Button>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <EditContestModal\n        isOpen={isEditModalOpen}\n        onClose={() => setIsEditModalOpen(false)}\n        onSubmit={handleSaveContest}\n        contest={contest}\n      />\n\n      <AlertDialog open={!!itemToDelete} onOpenChange={(open) => !open && setItemToDelete(null)}>\n        <AlertDialogContent className=\"glassmorphism border-white/10\">\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"text-white\">Are you sure?</AlertDialogTitle>\n            <AlertDialogDescription className=\"text-muted-foreground\">\n              {itemToDelete?.type === 'contest' \n                ? \"This will permanently delete the contest and all its data. This action cannot be undone.\"\n                : \"This will permanently delete this submission. This action cannot be undone.\"}\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleDeleteItem}\n              className=\"bg-destructive hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      <AlertDialog open={!!userToSuspend} onOpenChange={(open) => !open && setUserToSuspend(null)}>\n        <AlertDialogContent className=\"glassmorphism border-white/10\">\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"text-white\">Suspend User</AlertDialogTitle>\n            <AlertDialogDescription className=\"text-muted-foreground\">\n              Do you want to suspend this user and reject all their submissions?\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-suspend\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => userToSuspend && suspendUserMutation.mutate({ userId: userToSuspend, suspendAssets: false })}\n              data-testid=\"button-suspend-only\"\n            >\n              Suspend Only\n            </AlertDialogAction>\n            <AlertDialogAction\n              onClick={() => userToSuspend && suspendUserMutation.mutate({ userId: userToSuspend, suspendAssets: true })}\n              className=\"bg-destructive hover:bg-destructive/90\"\n              data-testid=\"button-suspend-and-reject\"\n            >\n              Suspend & Reject Assets\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":19806},"client/src/components/ui/glass-button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst glassButtonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-lg text-sm font-bold transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        primary: \"bg-primary text-white btn-primary shadow-lg shadow-primary/30\",\n        secondary: \"glass text-white btn-secondary\",\n        ghost: \"glass hover:bg-white/20\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 px-3\",\n        lg: \"h-11 px-6\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"primary\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface GlassButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof glassButtonVariants> {\n  asChild?: boolean\n}\n\nconst GlassButton = React.forwardRef<HTMLButtonElement, GlassButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(glassButtonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nGlassButton.displayName = \"GlassButton\"\n\nexport { GlassButton, glassButtonVariants }\n","size_bytes":1575},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/pages/auth/register.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { GlassButton } from \"@/components/GlassButton\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { registerSchema } from \"@shared/schema\";\nimport { useAuth } from \"@/lib/auth\";\nimport { Link } from \"wouter\";\nimport { Eye, EyeOff, UserPlus, Trophy, Check } from \"lucide-react\";\nimport type { z } from \"zod\";\n\ntype RegisterFormData = z.infer<typeof registerSchema>;\n\nexport default function Register() {\n  const [, setLocation] = useLocation();\n  const { refetch } = useAuth();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const form = useForm<RegisterFormData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      refetch();\n      setLocation(\"/\");\n    },\n  });\n\n  const onSubmit = (data: RegisterFormData) => {\n    registerMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-background px-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        <div className=\"text-center\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <div className=\"w-12 h-12 rounded-lg gradient-glory flex items-center justify-center\">\n              <Trophy className=\"text-white text-xl\" />\n            </div>\n            <span className=\"text-3xl font-bold tracking-tight\">5best</span>\n          </div>\n          <h1 className=\"text-2xl font-bold\">Join the community</h1>\n          <p className=\"text-muted-foreground\">Create your account and start competing</p>\n        </div>\n\n        <Card className=\"glass-effect border-border\">\n          <CardHeader className=\"space-y-1 pb-4\">\n            <CardTitle className=\"text-xl font-semibold\">Create Account</CardTitle>\n            <CardDescription>\n              Join thousands of creators competing for GLORY\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input\n                          data-testid=\"input-username\"\n                          {...field}\n                          placeholder=\"creator123\"\n                          className=\"bg-muted border-border focus:border-primary\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input\n                          data-testid=\"input-email\"\n                          {...field}\n                          type=\"email\"\n                          placeholder=\"your@email.com\"\n                          className=\"bg-muted border-border focus:border-primary\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            data-testid=\"input-password\"\n                            {...field}\n                            type={showPassword ? \"text\" : \"password\"}\n                            placeholder=\"Create a strong password\"\n                            className=\"bg-muted border-border focus:border-primary pr-10\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowPassword(!showPassword)}\n                          >\n                            {showPassword ? (\n                              <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {registerMutation.error && (\n                  <Alert variant=\"destructive\">\n                    <AlertDescription data-testid=\"error-message\">\n                      {registerMutation.error instanceof Error ? registerMutation.error.message : \"Registration failed\"}\n                    </AlertDescription>\n                  </Alert>\n                )}\n\n                <div className=\"bg-muted/50 rounded-lg p-4 space-y-2\">\n                  <div className=\"flex items-center space-x-2 text-sm\">\n                    <Check className=\"w-4 h-4 text-success\" />\n                    <span className=\"text-muted-foreground\">Account will be pending approval</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 text-sm\">\n                    <Check className=\"w-4 h-4 text-success\" />\n                    <span className=\"text-muted-foreground\">Start with 0 GLORY balance</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 text-sm\">\n                    <Check className=\"w-4 h-4 text-success\" />\n                    <span className=\"text-muted-foreground\">Upload submissions after approval</span>\n                  </div>\n                </div>\n\n                <GlassButton\n                  data-testid=\"button-submit\"\n                  type=\"submit\"\n                  className=\"w-full font-semibold\"\n                  disabled={registerMutation.isPending}\n                >\n                  {registerMutation.isPending ? (\n                    \"Creating account...\"\n                  ) : (\n                    <>\n                      <UserPlus className=\"w-4 h-4 mr-2\" />\n                      Create Account\n                    </>\n                  )}\n                </GlassButton>\n              </form>\n            </Form>\n\n            <div className=\"mt-6 text-center text-sm\">\n              <span className=\"text-muted-foreground\">Already have an account? </span>\n              <Link href=\"/login\">\n                <Button variant=\"link\" className=\"p-0 h-auto text-primary font-semibold\" data-testid=\"link-login\">\n                  Sign in\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8133},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"design_guidelines.md":{"content":"# Creative Contest Platform Design Guidelines\n\n## Design Approach\n\n**Reference-Based**: Drawing inspiration from **Dribbble** (masonry grids, creator focus) and **Behance** (immersive project showcases) with custom dark theme and glass morphism aesthetic.\n\n**Core Principles**: Bold visual hierarchy, content-first layouts, satisfying micro-interactions, celebration of creativity.\n\n---\n\n## Color System\n\n### Dark Mode Palette (Primary)\n- **Background Base**: 15 8% 12% (deep charcoal)\n- **Background Elevated**: 15 8% 16% (cards/modals)\n- **Background Subtle**: 15 8% 10% (page background)\n- **Primary Purple**: 265 78% 58% (vibrant purple - #7C3CEC)\n- **Purple Hover**: 265 78% 65%\n- **Text Primary**: 0 0% 98%\n- **Text Secondary**: 0 0% 70%\n- **Text Muted**: 0 0% 50%\n- **Border Subtle**: 0 0% 25%\n- **Success Green**: 142 76% 45% (voting confirmation)\n- **Warning Orange**: 25 95% 60% (contest deadlines)\n\n### Accent Application\nUse purple sparingly for maximum impact: CTAs, active votes, contest badges, live indicators, and winner highlights.\n\n---\n\n## Typography\n\n**Fonts**: \n- **Display/Headings**: 'Inter' (700, 800 weights) - sharp, modern\n- **Body/UI**: 'Inter' (400, 500, 600) - clean readability\n\n**Scale**:\n- Hero Headline: 4xl/5xl (bold 800)\n- Section Titles: 2xl/3xl (bold 700)\n- Card Titles: lg/xl (semibold 600)\n- Body Text: base (regular 400)\n- Captions/Meta: sm (medium 500)\n\n---\n\n## Layout System\n\n**Spacing Primitives**: Use Tailwind units of **4, 6, 8, 12, 16, 24** for consistency.\n\n**Container Strategy**:\n- Max-width: 7xl (1280px) for main content\n- Full-width for hero and featured contest banners\n- Grid gaps: 6-8 units for gallery layouts\n\n---\n\n## Glass Morphism Implementation\n\n**Recipe**:\n- Background: backdrop-blur-xl with bg-white/5 (dark mode)\n- Border: 1px solid white/10\n- Subtle shadow: shadow-2xl with purple glow (0 8px 32px rgba(124, 60, 236, 0.15))\n- Apply to: Navigation, modal overlays, voting cards, submission forms\n\n**Usage Context**: Overlay elements over images/gradients, contest cards, floating UI components.\n\n---\n\n## Core Components\n\n### Navigation\nTop navbar with glass effect, logo left, search center, user profile/upload right. Sticky on scroll with subtle blur increase.\n\n### Hero Section\nFull-bleed featured contest showcase: Large background image (winning submission or contest theme), glass morphism title card overlaying bottom-left, live contest countdown, primary CTA (\"Submit Entry\" button with purple gradient), secondary stats (entries count, time remaining).\n\n### Contest Grid\nMasonry layout (3-4 columns desktop, 2 tablet, 1 mobile): Each card shows thumbnail, title, entry count badge, voting heart icon, creator avatar. Hover: gentle scale (1.02) + purple glow border.\n\n### Submission Cards\nLarge image/video preview, glass morphism overlay footer with: creator info, vote count with animated heart button, view count, timestamp. Active voted state: filled purple heart with sparkle animation.\n\n### Voting Interface\nProminent heart button (lg size), vote count displayed adjacent, one-click voting with haptic-feel scale animation, voted state persists with color fill.\n\n### Contest Details Page\nHero contest banner, tabbed sections (Entries, Rules, Prizes, Timeline), entry submission grid below, filtering/sorting toolbar with glass effect.\n\n### Submission Form\nMulti-step modal with glass background: Upload area (drag-drop), title/description fields, tags/category selection, preview panel, submit button with loading state.\n\n### User Profiles\nCover image header, avatar with glass border, stats row (submissions, votes received, wins), grid of user submissions, follow button.\n\n### Leaderboard Component\nRanked list with: position badges (1st gold, 2nd silver, 3rd bronze), entry thumbnails, vote counts, creator names. Top 3 have elevated glass cards.\n\n---\n\n## Animations\n\n**Micro-interactions Only**:\n- Vote button: Scale pulse on click + heart fill animation\n- Card hover: Lift with subtle purple glow\n- Contest countdown: Number flip animation\n- Loading states: Skeleton screens with shimmer\n\n**Performance**: Use CSS transforms and opacity only. No complex scroll animations.\n\n---\n\n## Images Section\n\n### Hero Image\n**Placement**: Full-width hero section (80vh height)\n**Description**: Award-winning creative submission (photography/digital art) with vibrant colors and strong composition. Apply subtle gradient overlay (bottom to top, from background color to transparent) to ensure text readability.\n\n### Contest Thumbnails\n**Placement**: Throughout grid layouts and cards\n**Description**: User-submitted images/videos (16:9 or 4:5 ratios). Ensure proper lazy loading and thumbnail optimization.\n\n### Category Icons\n**Placement**: Contest category filters, submission type selectors\n**Description**: Photography camera, video play icon, digital art palette, design tools. Use heroicons library (outline variant, stroke-2).\n\n### Background Textures\n**Placement**: Subtle noise texture on body background\n**Description**: Fine grain overlay at 3% opacity for depth without distraction.\n\n### Profile Avatars\n**Placement**: Creator attributions, comments, leaderboards\n**Description**: Circular cropped user photos with purple ring border for winners/featured creators.\n\n---\n\n## Responsive Behavior\n\n- **Desktop (lg+)**: Multi-column grids (3-4), sidebar filters, expanded navigation\n- **Tablet (md)**: 2-column grids, collapsed sidebar to modal, maintained glass effects\n- **Mobile (base)**: Single column, bottom sheet modals, simplified navigation drawer, touch-optimized voting buttons (min 44px tap target)","size_bytes":5591},"server/db.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL is not set\");\n}\n\nconst sql = neon(process.env.DATABASE_URL);\nexport const db = drizzle(sql, { schema });\n","size_bytes":311},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/lib/theme.tsx":{"content":"import { createContext, useContext, useEffect } from \"react\";\n\ntype Theme = \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const theme: Theme = \"dark\";\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\");\n    root.classList.add(\"dark\");\n  }, []);\n\n  return (\n    <ThemeContext.Provider value={{ theme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":757},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/hooks/useUserBalance.ts":{"content":"import { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useEffect } from \"react\";\n\nexport function useUserBalance() {\n  const { data: user } = useAuth();\n  const queryClient = useQueryClient();\n\n  // Listen for focus events to refresh data when user switches back to tab\n  useEffect(() => {\n    const handleFocus = () => {\n      if (user) {\n        queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n      }\n    };\n\n    const handleVisibilityChange = () => {\n      if (!document.hidden && user) {\n        queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n      }\n    };\n\n    window.addEventListener('focus', handleFocus);\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    \n    return () => {\n      window.removeEventListener('focus', handleFocus);\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [user, queryClient]);\n\n  return {\n    balance: user?.gloryBalance || 0,\n    user\n  };\n}","size_bytes":1028},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --pg-primary: #7c3cec;\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(240, 10%, 3.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(240, 10%, 3.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(240, 10%, 3.9%);\n  --primary: hsl(270, 80%, 58%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(240, 4.8%, 95.9%);\n  --secondary-foreground: hsl(240, 5.9%, 10%);\n  --muted: hsl(240, 4.8%, 95.9%);\n  --muted-foreground: hsl(240, 3.8%, 46.1%);\n  --accent: hsl(270, 80%, 58%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --success: hsl(142, 76%, 36%);\n  --success-foreground: hsl(0, 0%, 100%);\n  --border: hsl(240, 5.9%, 90%);\n  --input: hsl(240, 5.9%, 90%);\n  --ring: hsl(270, 80%, 58%);\n  --radius: 0.5rem;\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', monospace;\n}\n\n.dark {\n  --background: 268 43% 10%;\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 4%, 9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(240, 4%, 9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(270, 80%, 58%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(240, 5%, 26%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 5%, 16%);\n  --muted-foreground: hsl(240, 5%, 64%);\n  --accent: hsl(270, 80%, 58%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --success: hsl(142, 76%, 36%);\n  --success-foreground: hsl(0, 0%, 100%);\n  --border: hsl(240, 5%, 26%);\n  --input: hsl(240, 5%, 26%);\n  --ring: hsl(270, 80%, 58%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply text-foreground antialiased;\n    background-color: #171121;\n    font-family: var(--font-sans);\n  }\n\n  html {\n    background-color: #171121;\n  }\n\n  #root {\n    background-color: #171121;\n    min-height: 100vh;\n  }\n}\n\n@layer utilities {\n  /* Background utilities for the new color */\n  .bg-app {\n    background-color: #171121;\n  }\n\n  .bg-app-light {\n    background-color: rgba(23, 17, 33, 0.8);\n  }\n\n  .bg-app-lighter {\n    background-color: rgba(23, 17, 33, 0.5);\n  }\n\n  /* Glow Effects */\n  .glow {\n    box-shadow:\n      0 0 6px var(--pg-primary),\n      0 0 14px var(--pg-primary),\n      0 0 26px var(--pg-primary),\n      0 0 46px var(--pg-primary);\n  }\n\n  .glow-border {\n    box-shadow: 0 0 5px var(--pg-primary),\n      0 0 10px var(--pg-primary),\n      0 0 15px var(--pg-primary);\n  }\n\n  .text-glow {\n    text-shadow: 0 0 5px var(--pg-primary),\n      0 0 10px var(--pg-primary);\n  }\n\n  .hover\\:glow:hover {\n    box-shadow:\n      0 0 10px var(--pg-primary),\n      0 0 20px rgba(124, 60, 236, 0.5),\n      0 0 30px rgba(124, 60, 236, 0.2);\n  }\n\n  /* Glass Effects - Updated for new background */\n  .glass {\n    background: rgba(23, 17, 33, 0.6);\n    -webkit-backdrop-filter: blur(8px);\n    backdrop-filter: blur(8px);\n    border: 1px solid rgba(124, 60, 236, 0.25);\n  }\n\n  .glass-effect {\n    background: rgba(23, 17, 33, 0.5);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n\n  .glassmorphism {\n    background: rgba(23, 17, 33, 0.6);\n    backdrop-filter: blur(10px);\n    -webkit-backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.18);\n  }\n\n  /* Focus Ring */\n  .focus-ring:focus {\n    outline: none !important;\n    box-shadow:\n      0 0 0 2px rgba(255,255,255,0.2),\n      0 0 0 6px rgba(124,60,236,0.5);\n  }\n\n  /* Animations */\n  @keyframes fadeInUp {\n    from {\n      opacity: 0;\n      transform: translateY(30px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  @keyframes fadeInScale {\n    from {\n      opacity: 0;\n      transform: scale(0.95);\n    }\n    to {\n      opacity: 1;\n      transform: scale(1);\n    }\n  }\n\n  @keyframes pulse {\n    0%, 100% { transform: scale(1); }\n    50% { transform: scale(1.1); }\n  }\n\n  @keyframes boltPulse {\n    0%, 100% {\n      transform: scale(1);\n    }\n    50% {\n      transform: scale(1.05);\n    }\n  }\n\n  @keyframes shimmer {\n    0% {\n      background-position: -200% 0;\n    }\n    100% {\n      background-position: 200% 0;\n    }\n  }\n\n  @keyframes gradientShift {\n    0%, 100% {\n      background-position: 0% 50%;\n    }\n    50% {\n      background-position: 100% 50%;\n    }\n  }\n\n  .animate-fade-in-up {\n    animation: fadeInUp 0.8s ease-out forwards;\n  }\n\n  .animate-fade-in-scale {\n    animation: fadeInScale 0.6s ease-out forwards;\n  }\n\n  .animate-pulse-slow {\n    animation: boltPulse 3s ease-in-out infinite;\n  }\n\n  .shimmer-effect {\n    background: linear-gradient(\n      90deg,\n      transparent,\n      rgba(255, 255, 255, 0.1),\n      transparent\n    );\n    background-size: 200% 100%;\n    animation: shimmer 2s infinite;\n  }\n\n  /* Button Effects */\n  .btn-primary {\n    position: relative;\n    overflow: hidden;\n    transform: translateY(0);\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .btn-primary:hover {\n    transform: translateY(-2px);\n    box-shadow:\n      0 10px 25px rgba(124, 60, 236, 0.4),\n      0 0 20px rgba(124, 60, 236, 0.3);\n  }\n\n  .btn-primary::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(\n      90deg,\n      transparent,\n      rgba(255, 255, 255, 0.2),\n      transparent\n    );\n    transition: left 0.5s;\n  }\n\n  .btn-primary:hover::before {\n    left: 100%;\n  }\n\n  .btn-secondary {\n    position: relative;\n    overflow: hidden;\n    transform: translateY(0);\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    border: 1px solid rgba(124, 60, 236, 0.3);\n  }\n\n  .btn-secondary:hover {\n    transform: translateY(-2px);\n    border-color: rgba(124, 60, 236, 0.6);\n    box-shadow:\n      0 8px 20px rgba(124, 60, 236, 0.2),\n      inset 0 0 20px rgba(124, 60, 236, 0.1);\n  }\n\n  /* Group Hover Effects */\n  .group .group-hover\\:scale-110 {\n    transform: scale(1);\n    transition: transform 0.3s ease;\n  }\n  .group:hover .group-hover\\:scale-110 {\n    transform: scale(1.1);\n  }\n\n  .group .group-hover\\:opacity-100 {\n    opacity: 0;\n    transition: opacity 0.25s ease;\n  }\n  .group:hover .group-hover\\:opacity-100 {\n    opacity: 1;\n  }\n\n  .group .group-hover\\:opacity-0 {\n    opacity: 1;\n    transition: opacity 0.25s ease;\n  }\n  .group:hover .group-hover\\:opacity-0 {\n    opacity: 0;\n  }\n\n  /* Prompt Bar Animation */\n  .prompt-bar {\n    position: relative;\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .prompt-bar:focus-within {\n    transform: scale(1.02);\n    box-shadow:\n      0 0 0 1px rgba(124, 60, 236, 0.5),\n      0 10px 30px rgba(124, 60, 236, 0.2);\n  }\n\n  .prompt-bar::after {\n    content: '';\n    position: absolute;\n    bottom: 0;\n    left: 50%;\n    width: 0;\n    height: 2px;\n    background: linear-gradient(90deg, #7c3cec, #00f6ff);\n    transition: all 0.3s ease;\n    transform: translateX(-50%);\n  }\n\n  .prompt-bar:focus-within::after {\n    width: 100%;\n  }\n\n  /* Text Gradient */\n  .gradient-text {\n    background: linear-gradient(\n      45deg,\n      #ffffff,\n      #7c3cec,\n      #00f6ff,\n      #ffffff\n    );\n    background-size: 300% 300%;\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    animation: gradientShift 4s ease-in-out infinite;\n  }\n\n  .gradient-glory {\n    background: linear-gradient(135deg, hsl(270, 80%, 58%) 0%, hsl(280, 70%, 48%) 100%);\n  }\n\n  /* Line Clamp */\n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n  line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n\n  /* Animation Delays */\n  .delay-100 { animation-delay: 0.1s; }\n  .delay-200 { animation-delay: 0.2s; }\n  .delay-300 { animation-delay: 0.3s; }\n  .delay-400 { animation-delay: 0.4s; }\n  .delay-500 { animation-delay: 0.5s; }\n\n  /* Podium Styles */\n  .podium-1 {\n    height: 200px;\n    background: linear-gradient(135deg, hsl(45, 100%, 50%) 0%, hsl(45, 100%, 40%) 100%);\n  }\n\n  .podium-2 {\n    height: 160px;\n    background: linear-gradient(135deg, hsl(0, 0%, 75%) 0%, hsl(0, 0%, 65%) 100%);\n  }\n\n  .podium-3 {\n    height: 120px;\n    background: linear-gradient(135deg, hsl(28, 80%, 52%) 0%, hsl(28, 70%, 42%) 100%);\n  }\n\n  .vote-pulse {\n    animation: pulse 1s ease-in-out;\n  }\n\n  /* Pinterest-style Masonry Grid */\n  .masonry-grid {\n    columns: 1;\n    column-gap: 1rem;\n    padding: 0.5rem;\n  }\n\n  @media (min-width: 640px) {\n    .masonry-grid {\n      columns: 2;\n      column-gap: 1.25rem;\n      padding: 0.75rem;\n    }\n  }\n\n  @media (min-width: 1024px) {\n    .masonry-grid {\n      columns: 3;\n      column-gap: 1.5rem;\n      padding: 1rem;\n    }\n  }\n\n  @media (min-width: 1280px) {\n    .masonry-grid {\n      columns: 4;\n      column-gap: 1.5rem;\n    }\n  }\n\n  @media (min-width: 1536px) {\n    .masonry-grid {\n      columns: 5;\n      column-gap: 1.75rem;\n    }\n  }\n\n  .masonry-grid > * {\n    break-inside: avoid;\n    margin-bottom: 1rem;\n    width: 100%;\n    display: inline-block;\n    transition: transform 0.2s ease, opacity 0.3s ease;\n  }\n\n  .masonry-grid > *:hover {\n    transform: translateY(-2px);\n  }\n\n  /* Pinterest-style loading animation */\n  @keyframes pinterest-fade-in {\n    from {\n      opacity: 0;\n      transform: translateY(20px) scale(0.95);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0) scale(1);\n    }\n  }\n\n  .masonry-grid > * {\n    animation: pinterest-fade-in 0.6s ease-out forwards;\n  }\n\n  /* Stagger animation for items */\n  .masonry-grid > *:nth-child(1) { animation-delay: 0.1s; }\n  .masonry-grid > *:nth-child(2) { animation-delay: 0.2s; }\n  .masonry-grid > *:nth-child(3) { animation-delay: 0.3s; }\n  .masonry-grid > *:nth-child(4) { animation-delay: 0.4s; }\n  .masonry-grid > *:nth-child(5) { animation-delay: 0.5s; }\n  .masonry-grid > *:nth-child(6) { animation-delay: 0.6s; }\n  .masonry-grid > *:nth-child(7) { animation-delay: 0.7s; }\n  .masonry-grid > *:nth-child(8) { animation-delay: 0.8s; }\n}\n","size_bytes":10177},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"server/middleware/auth.ts":{"content":"import jwt from \"jsonwebtoken\";\nimport { Request, Response, NextFunction } from \"express\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || process.env.SESSION_SECRET || \"fallback_secret_key\";\n\nexport interface AuthRequest extends Request {\n  user?: {\n    id: string;\n    email: string;\n    role: string;\n    status: string;\n  };\n}\n\nexport function authenticateToken(req: AuthRequest, res: Response, next: NextFunction) {\n  const token = req.cookies?.authToken;\n\n  if (!token) {\n    return res.status(401).json({ error: \"Access token required\" });\n  }\n\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as any;\n    req.user = decoded;\n    next();\n  } catch (error) {\n    return res.status(403).json({ error: \"Invalid or expired token\" });\n  }\n}\n\nexport function requireAdmin(req: AuthRequest, res: Response, next: NextFunction) {\n  if (!req.user) {\n    return res.status(401).json({ error: \"Authentication required\" });\n  }\n\n  if (req.user.role !== \"admin\") {\n    return res.status(403).json({ error: \"Admin access required\" });\n  }\n\n  next();\n}\n\nexport function requireApproved(req: AuthRequest, res: Response, next: NextFunction) {\n  if (!req.user) {\n    return res.status(401).json({ error: \"Authentication required\" });\n  }\n\n  if (req.user.status !== \"approved\") {\n    return res.status(403).json({ error: \"Account must be approved to perform this action\" });\n  }\n\n  next();\n}\n\nexport function generateToken(user: { id: string; email: string; role: string; status: string }) {\n  return jwt.sign(user, JWT_SECRET, { expiresIn: \"7d\" });\n}\n","size_bytes":1546},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 min-h-[44px] md:min-h-0 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":815},"client/src/components/EditContestModal.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { X, Upload, Plus, Minus, Calendar, Trophy, Users, Settings, Eye, FileText, Image as ImageIcon } from 'lucide-react';\n\ninterface EditContestModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (contestData: any) => void;\n  contest: any;\n}\n\nexport function EditContestModal({ isOpen, onClose, onSubmit, contest }: EditContestModalProps) {\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    contestType: 'Image',\n    category: '',\n    coverImage: null as File | string | null,\n    entryFee: false,\n    entryFeeAmount: undefined as number | undefined,\n    entryFeeCurrency: 'GLORY' as 'GLORY' | 'SOL' | 'USDC',\n    startDateOption: 'later' as 'now' | 'later',\n    startDate: '',\n    startTime: '',\n    endDate: '',\n    endTime: '',\n    submissionDeadline: '',\n    submissionDeadlineTime: '',\n    enableSubmissionDeadline: false,\n    votingStartOption: 'later' as 'now' | 'later',\n    votingStartDate: '',\n    votingEndDate: '',\n    votingEndTime: '',\n    prizePool: '',\n    currency: 'GLORY',\n    prizeDistribution: [\n      { place: 1, value: 0 },\n      { place: 2, value: 0 },\n      { place: 3, value: 0 }\n    ],\n    additionalRewards: [],\n    eligibility: 'all_users',\n    maxSubmissions: 3,\n    allowedMediaTypes: ['Images'],\n    fileSizeLimit: 50,\n    nsfwAllowed: false,\n    agreeToRules: true,\n    votingMethods: ['public'],\n    juryMembers: [] as string[],\n    votesPerUserPerPeriod: 1,\n    periodDurationHours: 24,\n    totalVotesPerUser: 0,\n    status: 'draft',\n    featured: false\n  });\n\n  const [errors, setErrors] = useState<string[]>([]);\n  const [coverImagePreview, setCoverImagePreview] = useState<string>('');\n  const [showImageSelector, setShowImageSelector] = useState(false);\n\n  // Fetch approved users for jury selection\n  const { data: approvedUsers = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/users', { status: 'approved' }]\n  });\n\n  const { data: submissions = [] } = useQuery({\n    queryKey: ['/api/submissions', { forGallery: true }],\n    queryFn: async () => {\n      const response = await fetch('/api/submissions', { credentials: 'include' });\n      if (!response.ok) return [];\n      return response.json();\n    },\n    enabled: showImageSelector\n  });\n\n  useEffect(() => {\n    if (contest && isOpen) {\n      const config = contest.config || {};\n      \n      // Safely parse dates with validation\n      const startDate = contest.startAt ? new Date(contest.startAt) : new Date();\n      const endDate = contest.endAt ? new Date(contest.endAt) : new Date();\n      \n      // Validate dates - check if they're valid\n      const isValidStartDate = startDate instanceof Date && !isNaN(startDate.getTime());\n      const isValidEndDate = endDate instanceof Date && !isNaN(endDate.getTime());\n      \n      // Parse submission deadline from config\n      const submissionEndAt = config.submissionEndAt ? new Date(config.submissionEndAt) : null;\n      const isValidSubmissionEndAt = submissionEndAt && !isNaN(submissionEndAt.getTime());\n      \n      const votingStartAt = config.votingStartAt ? new Date(config.votingStartAt) : null;\n      const isValidVotingStartAt = votingStartAt && !isNaN(votingStartAt.getTime());\n      \n      setFormData({\n        title: contest.title || '',\n        description: contest.description || '',\n        contestType: config.contestType || 'Image',\n        category: config.category || '',\n        coverImage: contest.coverImageUrl || null,\n        entryFee: config.entryFee || false,\n        entryFeeAmount: config.entryFeeAmount,\n        entryFeeCurrency: config.entryFeeCurrency || 'GLORY',\n        startDateOption: 'later',\n        startDate: isValidStartDate ? startDate.toISOString().split('T')[0] : '',\n        startTime: isValidStartDate ? startDate.toTimeString().slice(0, 5) : '',\n        endDate: isValidEndDate ? endDate.toISOString().split('T')[0] : '',\n        endTime: isValidEndDate ? endDate.toTimeString().slice(0, 5) : '',\n        submissionDeadline: isValidSubmissionEndAt ? submissionEndAt!.toISOString().split('T')[0] : '',\n        submissionDeadlineTime: isValidSubmissionEndAt ? submissionEndAt!.toTimeString().slice(0, 5) : '',\n        enableSubmissionDeadline: !!(isValidSubmissionEndAt && isValidEndDate && submissionEndAt!.getTime() !== endDate.getTime()),\n        votingStartOption: 'later',\n        votingStartDate: isValidVotingStartAt ? votingStartAt!.toISOString().split('T')[0] : '',\n        votingEndDate: isValidEndDate ? endDate.toISOString().split('T')[0] : '',\n        votingEndTime: isValidEndDate ? endDate.toTimeString().slice(0, 5) : '',\n        prizePool: String(contest.prizeGlory || 0),\n        currency: config.currency || 'GLORY',\n        prizeDistribution: config.prizeDistribution || [\n          { place: 1, value: 0 },\n          { place: 2, value: 0 },\n          { place: 3, value: 0 }\n        ],\n        additionalRewards: config.additionalRewards || [],\n        eligibility: config.eligibility || 'all_users',\n        maxSubmissions: config.maxSubmissions || 3,\n        allowedMediaTypes: config.allowedMediaTypes || ['Images'],\n        fileSizeLimit: config.fileSizeLimit || 50,\n        nsfwAllowed: config.nsfwAllowed || false,\n        agreeToRules: config.agreeToRules !== false,\n        votingMethods: config.votingMethods || ['public'],\n        juryMembers: config.juryMembers || [],\n        votesPerUserPerPeriod: config.votesPerUserPerPeriod || 1,\n        periodDurationHours: config.periodDurationHours || 24,\n        totalVotesPerUser: config.totalVotesPerUser || 0,\n        status: contest.status || 'draft',\n        featured: config.featured || false\n      });\n      \n      if (contest.coverImageUrl) {\n        setCoverImagePreview(contest.coverImageUrl);\n      }\n    }\n  }, [contest, isOpen]);\n\n  if (!isOpen) return null;\n\n  const handleInputChange = (field: string, value: any) => {\n    setFormData(prev => {\n      const updates: any = { [field]: value };\n      \n      // Sync contest end time with voting end time\n      if (field === 'endTime') {\n        updates.votingEndTime = value;\n      }\n      if (field === 'endDate') {\n        updates.votingEndDate = value;\n      }\n      \n      return { ...prev, ...updates };\n    });\n  };\n\n  const handleCoverImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      handleInputChange('coverImage', file);\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setCoverImagePreview(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleArrayToggle = (field: 'allowedMediaTypes' | 'votingMethods', value: string) => {\n    setFormData(prev => {\n      const currentValue = prev[field];\n      return {\n        ...prev,\n        [field]: currentValue.includes(value)\n          ? currentValue.filter(item => item !== value)\n          : [...currentValue, value]\n      };\n    });\n  };\n\n  const addPrizePlace = () => {\n    setFormData(prev => ({\n      ...prev,\n      prizeDistribution: [\n        ...prev.prizeDistribution,\n        { place: prev.prizeDistribution.length + 1, value: 0 }\n      ]\n    }));\n  };\n\n  const removePrizePlace = (index: number) => {\n    if (formData.prizeDistribution.length > 1) {\n      setFormData(prev => ({\n        ...prev,\n        prizeDistribution: prev.prizeDistribution.filter((_, i) => i !== index)\n      }));\n    }\n  };\n\n  const updatePrizeValue = (index: number, value: number) => {\n    setFormData(prev => ({\n      ...prev,\n      prizeDistribution: prev.prizeDistribution.map((prize, i) =>\n        i === index ? { ...prize, value } : prize\n      )\n    }));\n  };\n\n  // Unified validation function for all form fields\n  const validateFormData = (dataToValidate: typeof formData): string[] => {\n    const validationErrors: string[] = [];\n    \n    // Validate basic fields\n    if (!dataToValidate.title.trim()) {\n      validationErrors.push('Contest title is required');\n    }\n    if (!dataToValidate.description.trim()) {\n      validationErrors.push('Description is required');\n    }\n    \n    // Validate start date (if not \"now\")\n    if (dataToValidate.startDateOption !== 'now' && !dataToValidate.startDate) {\n      validationErrors.push('Start date is required');\n    }\n    \n    // Validate end date (always required)\n    if (!dataToValidate.votingEndDate) {\n      validationErrors.push('Contest end date is required');\n    }\n    \n    // Validate submission deadline (only if enabled)\n    if (dataToValidate.enableSubmissionDeadline && !dataToValidate.submissionDeadline) {\n      validationErrors.push('Submission deadline is required when enabled');\n    }\n    \n    // Validate voting start date (if not \"now\")\n    if (dataToValidate.votingStartOption !== 'now' && !dataToValidate.votingStartDate) {\n      validationErrors.push('Voting start date is required');\n    }\n    \n    // Chronological validation - only if all required dates are present\n    if (validationErrors.length === 0) {\n      // Build date objects for comparison\n      const startAt = dataToValidate.startDateOption === 'now' \n        ? new Date() \n        : new Date(`${dataToValidate.startDate}T${dataToValidate.startTime || '00:00'}`);\n      \n      const votingEndAt = new Date(\n        `${dataToValidate.votingEndDate}T${dataToValidate.votingEndTime || '23:59'}`\n      );\n      \n      const votingStartAt = dataToValidate.votingStartOption === 'now'\n        ? new Date()\n        : new Date(`${dataToValidate.votingStartDate}T00:00`);\n      \n      // Check: Contest start must be before voting end\n      if (startAt >= votingEndAt) {\n        validationErrors.push('Contest start time must be before voting end time');\n      }\n      \n      // Check: Voting start must be after or equal to contest start\n      if (votingStartAt < startAt) {\n        validationErrors.push('Voting cannot start before the contest starts');\n      }\n      \n      // Check: Voting start must be before voting end\n      if (votingStartAt >= votingEndAt) {\n        validationErrors.push('Voting start time must be before voting end time');\n      }\n      \n      // Check submission deadline if enabled\n      if (dataToValidate.enableSubmissionDeadline && dataToValidate.submissionDeadline) {\n        const submissionEndAt = new Date(\n          `${dataToValidate.submissionDeadline}T${dataToValidate.submissionDeadlineTime || '23:59'}`\n        );\n        \n        // Submission deadline must be after contest start\n        if (submissionEndAt <= startAt) {\n          validationErrors.push('Submission deadline must be after contest start time');\n        }\n        \n        // Submission deadline must be before or equal to voting end\n        if (submissionEndAt > votingEndAt) {\n          validationErrors.push('Submission deadline cannot be after voting end time');\n        }\n      }\n    }\n    \n    return validationErrors;\n  };\n\n  const handleSubmitWithData = async (dataToSubmit: typeof formData) => {\n    // Calculate total prize from distribution\n    const totalPrize = dataToSubmit.prizeDistribution.reduce((sum, prize) => sum + prize.value, 0);\n    \n    // Set contest start time with validation\n    let startAt: string;\n    if (dataToSubmit.startDateOption === 'now') {\n      startAt = new Date().toISOString();\n    } else {\n      const startDateObj = new Date(\n        `${dataToSubmit.startDate}T${dataToSubmit.startTime || '00:00'}`\n      );\n      if (isNaN(startDateObj.getTime())) {\n        setErrors(['Invalid start date']);\n        return;\n      }\n      startAt = startDateObj.toISOString();\n    }\n    \n    // Set contest end time with validation\n    const endDateStr = dataToSubmit.votingEndDate || dataToSubmit.endDate;\n    const endTimeStr = dataToSubmit.votingEndTime || dataToSubmit.endTime || '23:59';\n    const endDateObj = new Date(`${endDateStr}T${endTimeStr}`);\n    \n    if (isNaN(endDateObj.getTime())) {\n      setErrors(['Invalid end date']);\n      return;\n    }\n    const endAt = endDateObj.toISOString();\n    \n    // Process submission deadline logic\n    let submissionEndAt: string;\n    if (dataToSubmit.enableSubmissionDeadline && dataToSubmit.submissionDeadline) {\n      const submissionDeadlineObj = new Date(\n        `${dataToSubmit.submissionDeadline}T${dataToSubmit.submissionDeadlineTime || '23:59'}`\n      );\n      if (isNaN(submissionDeadlineObj.getTime())) {\n        setErrors(['Invalid submission deadline']);\n        return;\n      }\n      submissionEndAt = submissionDeadlineObj.toISOString();\n    } else {\n      submissionEndAt = endAt;\n    }\n    \n    // Set voting start time with validation\n    let votingStartAt: string;\n    if (dataToSubmit.votingStartOption === 'now') {\n      votingStartAt = new Date().toISOString();\n    } else if (dataToSubmit.votingStartDate) {\n      const votingStartObj = new Date(`${dataToSubmit.votingStartDate}T00:00`);\n      if (isNaN(votingStartObj.getTime())) {\n        setErrors(['Invalid voting start date']);\n        return;\n      }\n      votingStartAt = votingStartObj.toISOString();\n    } else {\n      votingStartAt = startAt; // Default to contest start\n    }\n    \n    // Create comprehensive contest config object with ALL settings\n    const contestConfig: any = {\n      // Voting rules\n      votesPerUserPerPeriod: dataToSubmit.votesPerUserPerPeriod,\n      periodDurationHours: dataToSubmit.periodDurationHours,\n      totalVotesPerUser: dataToSubmit.totalVotesPerUser,\n      votingMethods: dataToSubmit.votingMethods,\n      juryMembers: dataToSubmit.juryMembers || [],\n      \n      // Time settings\n      submissionEndAt,\n      votingStartAt,\n      votingEndAt: endAt,\n      \n      // Prize distribution\n      prizeDistribution: dataToSubmit.prizeDistribution,\n      additionalRewards: dataToSubmit.additionalRewards,\n      currency: dataToSubmit.currency,\n      \n      // Participation rules\n      eligibility: dataToSubmit.eligibility,\n      maxSubmissions: dataToSubmit.maxSubmissions,\n      allowedMediaTypes: dataToSubmit.allowedMediaTypes,\n      fileSizeLimit: dataToSubmit.fileSizeLimit,\n      nsfwAllowed: dataToSubmit.nsfwAllowed,\n      \n      // Entry fee\n      entryFee: dataToSubmit.entryFee,\n      entryFeeAmount: dataToSubmit.entryFeeAmount,\n      entryFeeCurrency: dataToSubmit.entryFeeCurrency || 'GLORY',\n      \n      // Contest metadata\n      contestType: dataToSubmit.contestType,\n      category: dataToSubmit.category,\n      featured: dataToSubmit.featured\n    };\n    \n    // Create clean form data object for submission\n    const finalFormData: any = {\n      title: dataToSubmit.title,\n      slug: contest.slug,\n      description: dataToSubmit.description,\n      rules: dataToSubmit.description || 'Standard contest rules apply.',\n      status: dataToSubmit.status,\n      prizeGlory: totalPrize,\n      startAt,\n      endAt,\n      config: contestConfig,\n      coverImageUrl: typeof dataToSubmit.coverImage === 'string' ? dataToSubmit.coverImage : ''\n    };\n    \n    // If coverImage is a File, upload it first\n    if (dataToSubmit.coverImage && dataToSubmit.coverImage instanceof File) {\n      const uploadFormData = new FormData();\n      uploadFormData.append('file', dataToSubmit.coverImage);\n      \n      try {\n        const response = await fetch('/api/upload', {\n          method: 'POST',\n          credentials: 'include',\n          body: uploadFormData\n        });\n        \n        if (!response.ok) {\n          setErrors(['Failed to upload cover image. Please try again.']);\n          return;\n        }\n        \n        const result = await response.json();\n        finalFormData.coverImageUrl = result.url;\n      } catch (error) {\n        console.error('Failed to upload cover image:', error);\n        setErrors(['Failed to upload cover image. Please check your connection and try again.']);\n        return;\n      }\n    }\n    \n    onSubmit(finalFormData);\n    onClose();\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4 overflow-y-auto\">\n      <div className=\"bg-white dark:bg-slate-900 rounded-2xl max-w-4xl w-full max-h-[95vh] my-4 shadow-2xl flex flex-col\">\n        <div className=\"flex items-center justify-between p-6 border-b border-slate-200 dark:border-slate-800\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 rounded-lg bg-violet-600/10 text-violet-700 dark:text-violet-300 border border-violet-300/40 dark:border-violet-700/40\">\n              <Trophy className=\"h-6 w-6\" />\n            </div>\n            <h1 className=\"text-2xl font-bold text-slate-900 dark:text-slate-100\">Edit Contest</h1>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"p-2 rounded-full hover:bg-slate-200 dark:hover:bg-slate-800 transition-colors\"\n            data-testid=\"button-close-edit-modal\"\n          >\n            <X size={20} />\n          </button>\n        </div>\n\n        <div className=\"flex-1 overflow-y-auto p-6\">\n          {errors.length > 0 && (\n            <div className=\"mb-6 rounded-xl border border-red-300/50 dark:border-red-600/50 bg-red-50 dark:bg-red-950/30 p-4 text-sm text-red-800 dark:text-red-200\">\n              <ul className=\"list-disc ps-5 space-y-1\">\n                {errors.map((error, i) => (\n                  <li key={i}>{error}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n\n          <div className=\"space-y-8\">\n            {/* Basic Information */}\n            <section>\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center gap-2\">\n                <FileText className=\"h-5 w-5 text-violet-600\" />\n                Basic Information\n              </h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"md:col-span-2\">\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Contest Title *\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.title}\n                    onChange={(e) => handleInputChange('title', e.target.value)}\n                    placeholder=\"e.g. Weekly Cyberpunk Challenge\"\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    data-testid=\"input-contest-title\"\n                  />\n                </div>\n\n                <div className=\"md:col-span-2\">\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Description *\n                  </label>\n                  <textarea\n                    value={formData.description}\n                    onChange={(e) => handleInputChange('description', e.target.value)}\n                    rows={4}\n                    placeholder=\"Contest rules, requirements, theme details...\"\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    data-testid=\"input-contest-description\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Contest Type\n                  </label>\n                  <select\n                    value={formData.contestType}\n                    onChange={(e) => handleInputChange('contestType', e.target.value)}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    data-testid=\"select-contest-type\"\n                  >\n                    <option value=\"Image\">Image Contest</option>\n                    <option value=\"Video\">Video Contest</option>\n                    <option value=\"GIF\">GIF Contest</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Category / Theme\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.category}\n                    onChange={(e) => handleInputChange('category', e.target.value)}\n                    placeholder=\"e.g. Most Beautiful, Cyberpunk City\"\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    data-testid=\"input-category-theme\"\n                  />\n                </div>\n\n                <div className=\"md:col-span-2\">\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Cover Image\n                  </label>\n                  \n                  {coverImagePreview ? (\n                    <div className=\"relative group\">\n                      <img \n                        src={coverImagePreview} \n                        alt=\"Cover preview\" \n                        className=\"w-full h-48 object-cover rounded-xl\"\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => {\n                          setCoverImagePreview('');\n                          handleInputChange('coverImage', null);\n                        }}\n                        className=\"absolute top-2 right-2 p-2 bg-red-600 text-white rounded-lg opacity-0 group-hover:opacity-100 transition-opacity\"\n                        data-testid=\"button-remove-cover-image\"\n                      >\n                        Remove\n                      </button>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-2\">\n                      <label className=\"block\">\n                        <input\n                          type=\"file\"\n                          accept=\"image/*\"\n                          onChange={handleCoverImageUpload}\n                          className=\"hidden\"\n                          id=\"cover-image-upload-edit\"\n                          data-testid=\"input-cover-image-upload\"\n                        />\n                        <div className=\"border-2 border-dashed border-slate-300 dark:border-slate-700 rounded-xl p-4 text-center hover:border-violet-500 transition-colors cursor-pointer\">\n                          <Upload className=\"h-8 w-8 text-slate-400 mx-auto mb-2\" />\n                          <p className=\"text-sm text-slate-600 dark:text-slate-400\">Click to upload cover image</p>\n                          <p className=\"text-xs text-slate-500 mt-1\">Or choose from options below</p>\n                        </div>\n                      </label>\n                      \n                      <div className=\"grid grid-cols-2 gap-2\">\n                        <button\n                          type=\"button\"\n                          onClick={() => setShowImageSelector(true)}\n                          className=\"px-3 py-2 text-sm rounded-lg border border-slate-300 dark:border-slate-700 hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors\"\n                          data-testid=\"button-choose-from-gallery\"\n                        >\n                          Choose from Gallery\n                        </button>\n                        <button\n                          type=\"button\"\n                          onClick={async () => {\n                            const response = await fetch(`/api/submissions?contestId=${contest.id}`, { credentials: 'include' });\n                            if (response.ok) {\n                              const contestSubmissions = await response.json();\n                              const topVoted = contestSubmissions\n                                .filter((sub: any) => sub.status === 'approved' && sub.type === 'image')\n                                .sort((a: any, b: any) => b.votesCount - a.votesCount)[0];\n                              \n                              if (topVoted) {\n                                setCoverImagePreview(topVoted.mediaUrl);\n                                handleInputChange('coverImage', topVoted.mediaUrl);\n                              }\n                            }\n                          }}\n                          className=\"px-3 py-2 text-sm rounded-lg border border-slate-300 dark:border-slate-700 hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors\"\n                          data-testid=\"button-use-top-voted-image\"\n                        >\n                          Use Top Voted Image\n                        </button>\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"flex items-center\">\n                  <label className=\"flex items-center gap-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.entryFee}\n                      onChange={(e) => handleInputChange('entryFee', e.target.checked)}\n                      className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                      data-testid=\"checkbox-entry-fee\"\n                    />\n                    <span className=\"text-sm text-slate-800 dark:text-slate-200\">Entry Fee Required</span>\n                  </label>\n                </div>\n\n                {formData.entryFee && (\n                  <div className=\"space-y-3\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                        Entry Fee Currency\n                      </label>\n                      <select\n                        value={formData.entryFeeCurrency}\n                        onChange={(e) => handleInputChange('entryFeeCurrency', e.target.value as 'GLORY' | 'SOL' | 'USDC')}\n                        className=\"w-full px-3 py-2 bg-white dark:bg-slate-800 border border-slate-300 dark:border-slate-700 rounded-lg text-sm text-slate-900 dark:text-slate-100\"\n                        data-testid=\"select-entry-fee-currency\"\n                      >\n                        <option value=\"GLORY\">GLORY</option>\n                        <option value=\"SOL\">SOL</option>\n                        <option value=\"USDC\">USDC</option>\n                      </select>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                        Entry Fee Amount *\n                      </label>\n                      <input\n                        type=\"number\"\n                        min=\"0\"\n                        step=\"0.01\"\n                        value={formData.entryFeeAmount ?? \"\"}\n                        onChange={(e) => handleInputChange('entryFeeAmount', e.target.value ? Number(e.target.value) : undefined)}\n                        placeholder=\"e.g. 5.00\"\n                        className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                        data-testid=\"input-entry-fee-amount\"\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n            </section>\n\n            {/* Time Settings */}\n            <section>\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center gap-2\">\n                <Calendar className=\"h-5 w-5 text-violet-600\" />\n                Time Settings\n              </h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Contest Start Date *\n                  </label>\n                  <input\n                    type=\"date\"\n                    value={formData.startDate}\n                    onChange={(e) => handleInputChange('startDate', e.target.value)}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    data-testid=\"input-start-date\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Contest Start Time\n                  </label>\n                  <input\n                    type=\"time\"\n                    value={formData.startTime}\n                    onChange={(e) => handleInputChange('startTime', e.target.value)}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    data-testid=\"input-start-time\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Contest End Date *\n                  </label>\n                  <input\n                    type=\"date\"\n                    value={formData.endDate}\n                    onChange={(e) => handleInputChange('endDate', e.target.value)}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    data-testid=\"input-end-date\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Contest End Time\n                  </label>\n                  <input\n                    type=\"time\"\n                    value={formData.endTime}\n                    onChange={(e) => handleInputChange('endTime', e.target.value)}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    data-testid=\"input-end-time\"\n                  />\n                </div>\n              </div>\n            </section>\n\n            {/* Prizes */}\n            <section>\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center gap-2\">\n                <Trophy className=\"h-5 w-5 text-violet-600\" />\n                Prizes\n              </h3>\n\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                      Prize Pool *\n                    </label>\n                    <input\n                      type=\"number\"\n                      value={formData.prizePool}\n                      onChange={(e) => handleInputChange('prizePool', e.target.value)}\n                      placeholder=\"10000\"\n                      className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                      data-testid=\"input-prize-pool\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                      Currency\n                    </label>\n                    <select\n                      value={formData.currency}\n                      onChange={(e) => handleInputChange('currency', e.target.value)}\n                      className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                      data-testid=\"select-currency\"\n                    >\n                      <option value=\"GLORY\">$GLORY</option>\n                      <option value=\"USD\">USD</option>\n                      <option value=\"ETH\">ETH</option>\n                    </select>\n                  </div>\n                </div>\n\n                <div>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <label className=\"text-sm font-medium text-slate-800 dark:text-slate-200\">\n                      Prize Distribution\n                    </label>\n                    <button\n                      type=\"button\"\n                      onClick={addPrizePlace}\n                      className=\"flex items-center gap-1 text-xs px-2 py-1 rounded-lg bg-violet-600/10 text-violet-700 hover:bg-violet-600/20\"\n                      data-testid=\"button-add-prize-place\"\n                    >\n                      <Plus className=\"h-3 w-3\" />\n                      Add Place\n                    </button>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    {formData.prizeDistribution.map((prize, index) => (\n                      <div key={index} className=\"flex items-center gap-2\">\n                        <span className=\"text-sm font-medium text-slate-700 dark:text-slate-200 w-16\">\n                          {prize.place}. place\n                        </span>\n                        <input\n                          type=\"number\"\n                          value={prize.value}\n                          onChange={(e) => updatePrizeValue(index, parseInt(e.target.value) || 0)}\n                          className=\"flex-1 rounded-lg border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-1 text-sm outline-none focus:ring-2 focus:ring-violet-500\"\n                          min=\"0\"\n                          data-testid={`input-prize-place-${index}`}\n                        />\n                        <span className=\"text-sm text-slate-500\">\n                          {formData.currency}\n                        </span>\n                        {formData.prizeDistribution.length > 1 && (\n                          <button\n                            type=\"button\"\n                            onClick={() => removePrizePlace(index)}\n                            className=\"p-1 rounded text-red-600 hover:bg-red-50 dark:hover:bg-red-950/30\"\n                            data-testid={`button-remove-prize-${index}`}\n                          >\n                            <Minus className=\"h-4 w-4\" />\n                          </button>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n\n                  <div className=\"text-xs text-slate-500 mt-1\">\n                    Total: {formData.prizeDistribution.reduce((sum, prize) => sum + prize.value, 0)}\n                    {` ${formData.currency}`}\n                  </div>\n                </div>\n              </div>\n            </section>\n\n            {/* Participation Rules */}\n            <section>\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center gap-2\">\n                <Users className=\"h-5 w-5 text-violet-600\" />\n                Participation Rules\n              </h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Eligibility\n                  </label>\n                  <select\n                    value={formData.eligibility}\n                    onChange={(e) => handleInputChange('eligibility', e.target.value)}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    data-testid=\"select-eligibility\"\n                  >\n                    <option value=\"all_users\">All Users</option>\n                    <option value=\"token_holders\">Token Holders Only</option>\n                    <option value=\"verified_users\">Verified Users Only</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Max Submissions per User\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={formData.maxSubmissions}\n                    onChange={(e) => handleInputChange('maxSubmissions', parseInt(e.target.value) || 1)}\n                    min=\"1\"\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    data-testid=\"input-max-submissions\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    File Size Limit (MB)\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={formData.fileSizeLimit}\n                    onChange={(e) => handleInputChange('fileSizeLimit', parseInt(e.target.value) || 50)}\n                    min=\"1\"\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    data-testid=\"input-file-size-limit\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200\">\n                    Allowed Media Types\n                  </label>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {['Images', 'Videos', 'GIFs'].map((type) => (\n                      <label key={type} className=\"flex items-center gap-2\">\n                        <input\n                          type=\"checkbox\"\n                          checked={formData.allowedMediaTypes.includes(type)}\n                          onChange={() => handleArrayToggle('allowedMediaTypes', type)}\n                          className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                          data-testid={`checkbox-media-type-${type.toLowerCase()}`}\n                        />\n                        <span className=\"text-sm text-slate-800 dark:text-slate-200\">{type}</span>\n                      </label>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"md:col-span-2 space-y-2\">\n                  <label className=\"flex items-center gap-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.nsfwAllowed}\n                      onChange={(e) => handleInputChange('nsfwAllowed', e.target.checked)}\n                      className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                      data-testid=\"checkbox-nsfw-allowed\"\n                    />\n                    <span className=\"text-sm text-slate-800 dark:text-slate-200\">NSFW Content Allowed</span>\n                  </label>\n                </div>\n              </div>\n            </section>\n\n            {/* Voting Settings */}\n            <section>\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center gap-2\">\n                <Eye className=\"h-5 w-5 text-violet-600\" />\n                Voting Settings\n              </h3>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Voting Methods\n                  </label>\n                  <div className=\"space-y-2\">\n                    {[\n                      { value: 'public', label: 'Public Voting' },\n                      { value: 'logged_users', label: 'Logged Users Only' },\n                      { value: 'jury', label: 'Jury Voting' }\n                    ].map((method) => (\n                      <label key={method.value} className=\"flex items-center gap-2\">\n                        <input\n                          type=\"checkbox\"\n                          checked={formData.votingMethods.includes(method.value)}\n                          onChange={() => handleArrayToggle('votingMethods', method.value)}\n                          className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                          data-testid={`checkbox-voting-method-${method.value}`}\n                        />\n                        <span className=\"text-sm text-slate-800 dark:text-slate-200\">{method.label}</span>\n                      </label>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Jury Members Selection - shown only when jury voting is enabled */}\n                {formData.votingMethods.includes('jury') && (\n                  <div className=\"border-t border-slate-200 dark:border-slate-800 pt-4\">\n                    <h4 className=\"text-md font-medium text-slate-800 dark:text-slate-200 mb-2\">\n                      Jury Members\n                    </h4>\n                    <p className=\"text-xs text-slate-500 mb-3\">\n                      Select users who can vote as jury members. {formData.votingMethods.length === 1 ? 'Only jury members can vote.' : 'Jury members can vote alongside public voters.'}\n                    </p>\n                    \n                    {approvedUsers.length === 0 ? (\n                      <p className=\"text-sm text-slate-500 italic\">No approved users available for jury selection.</p>\n                    ) : (\n                      <div className=\"max-h-48 overflow-y-auto border border-slate-300/60 dark:border-slate-700/60 rounded-xl p-3 space-y-2\">\n                        {approvedUsers.map((user: any) => (\n                          <label key={user.id} className=\"flex items-center gap-2 hover:bg-slate-100 dark:hover:bg-slate-800 p-2 rounded-lg cursor-pointer\">\n                            <input\n                              type=\"checkbox\"\n                              checked={formData.juryMembers.includes(user.id)}\n                              onChange={(e) => {\n                                if (e.target.checked) {\n                                  handleInputChange('juryMembers', [...formData.juryMembers, user.id]);\n                                } else {\n                                  handleInputChange('juryMembers', formData.juryMembers.filter(id => id !== user.id));\n                                }\n                              }}\n                              className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                              data-testid={`checkbox-jury-${user.id}`}\n                            />\n                            <span className=\"text-sm text-slate-800 dark:text-slate-200\">{user.username}</span>\n                            <span className=\"text-xs text-slate-500\">({user.email})</span>\n                          </label>\n                        ))}\n                      </div>\n                    )}\n                    \n                    {formData.juryMembers.length > 0 && (\n                      <p className=\"text-xs text-slate-600 dark:text-slate-400 mt-2\">\n                        Selected: {formData.juryMembers.length} jury member(s)\n                      </p>\n                    )}\n                  </div>\n                )}\n\n                <div className=\"border-t border-slate-200 dark:border-slate-800 pt-4\">\n                  <h4 className=\"text-md font-medium text-slate-800 dark:text-slate-200 mb-3\">Voting Frequency</h4>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                        Votes per user per period\n                      </label>\n                      <input\n                        type=\"number\"\n                        value={formData.votesPerUserPerPeriod}\n                        onChange={(e) => handleInputChange('votesPerUserPerPeriod', parseInt(e.target.value) || 1)}\n                        min=\"1\"\n                        className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                        data-testid=\"input-vote-limit-per-period\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                        Period duration (hours)\n                      </label>\n                      <input\n                        type=\"number\"\n                        value={formData.periodDurationHours}\n                        onChange={(e) => handleInputChange('periodDurationHours', parseInt(e.target.value) || 12)}\n                        min=\"1\"\n                        max=\"168\"\n                        className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                        data-testid=\"input-vote-period-hours\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                        Total votes per user\n                      </label>\n                      <input\n                        type=\"number\"\n                        value={formData.totalVotesPerUser}\n                        onChange={(e) => handleInputChange('totalVotesPerUser', parseInt(e.target.value) || 0)}\n                        min=\"0\"\n                        className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                        data-testid=\"input-total-vote-limit\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </section>\n\n            {/* Admin Settings */}\n            <section>\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center gap-2\">\n                <Settings className=\"h-5 w-5 text-violet-600\" />\n                Admin Settings\n              </h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Contest Status\n                  </label>\n                  <select\n                    value={\n                      formData.status === 'active' ? 'publish' : \n                      formData.status === 'archived' ? 'archive' : \n                      formData.status === 'ended' ? 'ended' : \n                      'draft'\n                    }\n                    onChange={(e) => {\n                      const statusMap: Record<string, string> = {\n                        'draft': 'draft',\n                        'publish': 'active',\n                        'ended': 'ended',\n                        'archive': 'archived'\n                      };\n                      handleInputChange('status', statusMap[e.target.value]);\n                    }}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    data-testid=\"select-status\"\n                  >\n                    <option value=\"draft\">Draft (requires admin approval)</option>\n                    <option value=\"publish\">Publish (live immediately)</option>\n                    <option value=\"ended\">Ended</option>\n                    <option value=\"archive\">Archive</option>\n                  </select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label className=\"flex items-center gap-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.featured}\n                      onChange={(e) => handleInputChange('featured', e.target.checked)}\n                      className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                      data-testid=\"checkbox-featured\"\n                    />\n                    <span className=\"text-sm text-slate-800 dark:text-slate-200\">Featured Contest</span>\n                  </label>\n                </div>\n              </div>\n            </section>\n          </div>\n        </div>\n\n        <div className=\"flex items-center justify-between gap-3 p-6 border-t border-slate-200 dark:border-slate-800\">\n          <button\n            onClick={onClose}\n            className=\"px-6 py-2 rounded-xl border border-slate-300/60 dark:border-slate-700/60 text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors\"\n            data-testid=\"button-cancel-edit\"\n          >\n            Cancel\n          </button>\n\n          <button\n            onClick={async () => {\n              // Use unified validation function\n              const validationErrors = validateFormData(formData);\n              \n              setErrors(validationErrors);\n              \n              if (validationErrors.length === 0) {\n                await handleSubmitWithData(formData);\n              }\n            }}\n            className=\"px-6 py-2 rounded-xl bg-violet-600 text-white hover:bg-violet-700 transition-colors font-semibold\"\n            data-testid=\"button-save-contest\"\n          >\n            Save Changes\n          </button>\n        </div>\n      </div>\n\n      {/* Image Gallery Selector Modal */}\n      {showImageSelector && (\n        <div className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-[60] flex items-center justify-center p-4\">\n          <div className=\"bg-white dark:bg-slate-900 rounded-2xl max-w-6xl w-full max-h-[80vh] shadow-2xl flex flex-col\">\n            <div className=\"flex items-center justify-between p-6 border-b border-slate-200 dark:border-slate-800\">\n              <div className=\"flex items-center gap-3\">\n                <ImageIcon className=\"h-6 w-6 text-violet-600\" />\n                <h2 className=\"text-xl font-bold text-slate-900 dark:text-slate-100\">Select Cover Image</h2>\n              </div>\n              <button\n                onClick={() => setShowImageSelector(false)}\n                className=\"p-2 rounded-full hover:bg-slate-200 dark:hover:bg-slate-800 transition-colors\"\n                data-testid=\"button-close-gallery-modal\"\n              >\n                <X size={20} />\n              </button>\n            </div>\n\n            <div className=\"flex-1 overflow-y-auto p-6\">\n              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n                {submissions\n                  .filter((sub: any) => sub.status === 'approved' && sub.type === 'image')\n                  .map((submission: any) => (\n                    <button\n                      key={submission.id}\n                      type=\"button\"\n                      onClick={() => {\n                        setCoverImagePreview(submission.mediaUrl);\n                        handleInputChange('coverImage', submission.mediaUrl);\n                        setShowImageSelector(false);\n                      }}\n                      className=\"group relative aspect-square rounded-xl overflow-hidden border-2 border-transparent hover:border-violet-500 transition-all\"\n                      data-testid={`button-gallery-image-${submission.id}`}\n                    >\n                      <img\n                        src={submission.mediaUrl}\n                        alt={submission.title}\n                        className=\"w-full h-full object-cover\"\n                      />\n                      <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\">\n                        <div className=\"absolute bottom-0 left-0 right-0 p-3\">\n                          <p className=\"text-white text-sm font-medium truncate\">{submission.title}</p>\n                          <p className=\"text-white/80 text-xs\">{submission.votesCount} votes</p>\n                        </div>\n                      </div>\n                    </button>\n                  ))}\n              </div>\n\n              {submissions.filter((sub: any) => sub.status === 'approved' && sub.type === 'image').length === 0 && (\n                <div className=\"text-center py-12\">\n                  <ImageIcon className=\"h-16 w-16 text-slate-400 mx-auto mb-4\" />\n                  <p className=\"text-slate-600 dark:text-slate-400\">No approved images available</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":54023},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/submission-card.tsx":{"content":"import { Heart, User, Trophy, Play, Share2, Expand } from \"lucide-react\";\nimport { Card, CardContent } from \"./ui/card\";\nimport { Badge } from \"./ui/badge\";\nimport { Button } from \"./ui/button\";\nimport { GlassButton } from \"./ui/glass-button\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"../lib/queryClient\";\nimport { useAuth, isAuthenticated, isApproved } from \"../lib/auth\";\nimport { useToast } from \"../hooks/use-toast\";\nimport { useState } from \"react\";\nimport { cloudinaryPresets } from \"../lib/cloudinary\";\n\ninterface SubmissionCardProps {\n  submission: {\n    id: string;\n    title: string;\n    type: \"image\" | \"video\";\n    mediaUrl: string;\n    thumbnailUrl?: string;\n    votesCount: number;\n    user: {\n      id: string;\n      username: string;\n    };\n    contest: {\n      id: string;\n      title: string;\n    };\n  };\n  showVoting?: boolean;\n  rank?: number;\n  className?: string;\n  onExpand?: () => void;\n}\n\nexport function SubmissionCard({\n  submission,\n  showVoting = true,\n  rank,\n  className = \"\",\n  onExpand,\n}: SubmissionCardProps) {\n  const { data: user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [hasVoted, setHasVoted] = useState(false);\n  const [showActionsMobile, setShowActionsMobile] = useState(false);\n\n  // Pinterest-style height variations based on submission ID\n  const getCardHeight = () => {\n    const variations = ['h-60', 'h-72', 'h-80', 'h-64', 'h-96', 'h-56'];\n    const index = parseInt(submission.id.slice(-1), 16) % variations.length;\n    return variations[index];\n  };\n\n  const voteMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/votes\", {\n        submissionId: submission.id,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      setHasVoted(true);\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      toast({\n        title: \"Vote recorded!\",\n        description: \"Your vote has been counted successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to vote. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleVote = () => {\n    if (!isAuthenticated(user)) {\n      toast({\n        title: \"Authentication required\",\n        description: \"Please log in to vote on submissions.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!isApproved(user)) {\n      toast({\n        title: \"Account approval required\",\n        description: \"Your account must be approved to vote.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (user.id === submission.user.id) {\n      toast({\n        title: \"Cannot vote\",\n        description: \"You cannot vote on your own submission.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    voteMutation.mutate();\n  };\n\n  const handleShare = () => {\n    const shareUrl = `${window.location.origin}/submission/${submission.id}`;\n    \n    if (navigator.share) {\n      navigator.share({\n        title: submission.title,\n        text: `Check out this amazing submission: ${submission.title}`,\n        url: shareUrl,\n      }).catch(() => {\n        fallbackShare(shareUrl);\n      });\n    } else {\n      fallbackShare(shareUrl);\n    }\n  };\n\n  const fallbackShare = (url: string) => {\n    navigator.clipboard.writeText(url).then(() => {\n      toast({\n        title: \"Link copied!\",\n        description: \"Submission link has been copied to clipboard.\",\n      });\n    }).catch(() => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy link to clipboard.\",\n        variant: \"destructive\",\n      });\n    });\n  };\n\n  const handleCardClick = (e: React.MouseEvent) => {\n    // Only toggle on mobile (below lg breakpoint)\n    if (window.innerWidth < 1024) {\n      e.stopPropagation();\n      setShowActionsMobile(!showActionsMobile);\n    }\n  };\n\n  // Apply Cloudinary transformations for responsive images\n  let displayUrl = submission.type === \"video\"\n    ? submission.thumbnailUrl || submission.mediaUrl\n    : submission.mediaUrl;\n  \n  // Only apply thumbnail preset for images or video thumbnails (not raw video URLs)\n  const isImage = submission.type === \"image\" || \n    (submission.type === \"video\" && submission.thumbnailUrl);\n  \n  if (isImage) {\n    displayUrl = cloudinaryPresets.thumbnail(displayUrl);\n  }\n\n  return (\n    <Card\n      className={`group relative overflow-hidden hover:border-primary/50 transition-all duration-300 rounded-2xl shadow-lg hover:shadow-xl ${className}`}\n      data-testid={`submission-card-${submission.id}`}\n    >\n      <div className={`relative overflow-hidden rounded-t-2xl ${getCardHeight()}`} onClick={handleCardClick}>\n        <img\n          src={displayUrl}\n          alt={submission.title}\n          className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n          loading=\"lazy\"\n        />\n\n        {/* Hover Overlay */}\n        <div className=\"absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-all duration-300\">\n          <div className={`absolute top-2 sm:top-3 right-2 sm:right-3 flex flex-row items-center gap-1 sm:gap-2 ${showActionsMobile ? 'opacity-100 lg:opacity-0' : 'opacity-0'} lg:group-hover:opacity-100 transition-opacity duration-300`}>\n            <GlassButton \n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"h-8 w-8 sm:h-10 sm:w-10 rounded-full\"\n              onClick={(e) => {\n                e.stopPropagation();\n                handleVote();\n              }}\n              disabled={voteMutation.isPending || hasVoted}\n              data-testid={`button-vote-${submission.id}`}\n            >\n              <Heart className={`h-3 w-3 sm:h-4 sm:w-4 ${hasVoted ? \"fill-current\" : \"\"}`} />\n            </GlassButton>\n            <GlassButton \n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"h-8 w-8 sm:h-10 sm:w-10 rounded-full\"\n              onClick={(e) => {\n                e.stopPropagation();\n                handleShare();\n              }}\n              data-testid={`button-share-${submission.id}`}\n            >\n              <Share2 className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n            </GlassButton>\n            <GlassButton \n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"h-8 w-8 sm:h-10 sm:w-10 rounded-full\"\n              onClick={(e) => {\n                e.stopPropagation();\n                if (onExpand) onExpand();\n              }}\n              data-testid={`button-expand-${submission.id}`}\n            >\n              <Expand className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n            </GlassButton>\n          </div>\n        </div>\n\n        {/* Rank badge */}\n        {rank && (\n          <div className=\"absolute top-3 left-3 z-10\">\n            <Badge\n              className=\"gradient-glory text-xs font-bold text-white\"\n              data-testid={`rank-badge-${rank}`}\n            >\n              #{rank}\n            </Badge>\n          </div>\n        )}\n\n        {/* Video play overlay */}\n        {submission.type === \"video\" && (\n          <div className=\"absolute inset-0 flex items-center justify-center bg-black/20\">\n            <div className=\"w-16 h-16 rounded-full bg-primary/90 flex items-center justify-center\">\n              <Play className=\"w-6 h-6 text-white ml-1\" />\n            </div>\n          </div>\n        )}\n      </div>\n\n      <CardContent className={`absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/90 via-black/70 to-transparent ${showActionsMobile ? 'opacity-100 lg:opacity-0' : 'opacity-0'} lg:group-hover:opacity-100 transition-opacity duration-300 rounded-b-2xl`}>\n        <h3\n          className=\"font-semibold text-lg mb-2 line-clamp-1 text-white drop-shadow-lg\"\n          data-testid={`submission-title-${submission.id}`}\n        >\n          {submission.title}\n        </h3>\n\n        <div className=\"flex items-center justify-between text-sm mb-3\">\n          <div className=\"flex items-center space-x-2 text-gray-200\">\n            <User className=\"w-3 h-3\" />\n            <span data-testid={`submission-author-${submission.id}`}>\n              @{submission.user.username}\n            </span>\n          </div>\n        </div>\n\n        {showVoting && (\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2 text-gray-200 text-xs\">\n              <Trophy className=\"w-3 h-3\" />\n              <span className=\"truncate max-w-24\">{submission.contest.title}</span>\n            </div>\n\n            <div className=\"flex items-center space-x-2 text-gray-200 text-xs bg-black/30 rounded-full px-2 py-1\">\n              <Heart className=\"w-3 h-3\" />\n              <span\n                className=\"font-semibold\"\n                data-testid={`votes-count-${submission.id}`}\n              >\n                {submission.votesCount}\n              </span>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9127},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 min-h-[44px] md:min-h-0 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5766},"client/src/components/UploadWizardModal.tsx":{"content":"import { useCallback, useMemo, useRef, useState, useEffect } from \"react\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  UploadCloud,\n  Image as ImageIcon,\n  Tag,\n  X,\n  ChevronRight,\n  ChevronLeft,\n  Trophy,\n  Info,\n  CheckCircle2,\n  Search,\n} from \"lucide-react\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst CATEGORIES = [\n  \"Art\",\n  \"Portrait\",\n  \"Landscape\",\n  \"Sci-Fi\",\n  \"Fantasy\",\n  \"Abstract\",\n  \"Realistic\",\n  \"Funny\",\n  \"Surreal\",\n  \"Other\",\n];\n\ninterface UploadWizardModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  preselectedContestId?: string;\n}\n\nexport function UploadWizardModal({ isOpen, onClose, preselectedContestId }: UploadWizardModalProps) {\n  const { data: user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Form state\n  const [file, setFile] = useState<File | null>(null);\n  const [selectedGalleryImage, setSelectedGalleryImage] = useState<{url: string, type: string, thumbnailUrl?: string} | null>(null);\n  const [uploadMode, setUploadMode] = useState<'new' | 'gallery'>('new');\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [category, setCategory] = useState(CATEGORIES[0]);\n  const [tags, setTags] = useState<string[]>([]);\n  const [tagInput, setTagInput] = useState(\"\");\n  const [selectedContest, setSelectedContest] = useState<string>(\"\");\n  const [agreedToRules, setAgreedToRules] = useState(false);\n  const [agreedToTerms, setAgreedToTerms] = useState(false);\n\n  // Wizard\n  const [step, setStep] = useState<1 | 2 | 3>(1);\n  const [submitting, setSubmitting] = useState(false);\n  const [errors, setErrors] = useState<string[]>([]);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const isVideo = useMemo(\n    () => (file ? file.type.startsWith(\"video/\") : false),\n    [file]\n  );\n  const previewURL = useMemo(\n    () => (file ? URL.createObjectURL(file) : null),\n    [file]\n  );\n\n  // Fetch active contests\n  const { data: contests = [] } = useQuery<any[]>({\n    queryKey: [\"/api/contests\"],\n  });\n\n  const activeContests = contests.filter((c: any) => c.status === \"active\");\n\n  // Fetch user's submissions for gallery\n  const { data: allSubmissions = [] } = useQuery<any[]>({\n    queryKey: [\"/api/submissions\"],\n    enabled: !!user?.id,\n  });\n\n  // Filter to only show current user's approved submissions\n  const userSubmissions = allSubmissions.filter((sub: any) => sub.userId === user?.id && sub.status === \"approved\");\n\n  // Refresh submissions when modal opens to ensure fresh data\n  useEffect(() => {\n    if (isOpen) {\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n    }\n  }, [isOpen, queryClient]);\n\n  // Pre-select contest if provided\n  useEffect(() => {\n    if (preselectedContestId && activeContests.some((c: any) => c.id === preselectedContestId)) {\n      setSelectedContest(preselectedContestId);\n    }\n  }, [preselectedContestId, activeContests]);\n\n  // Reset form when modal closes\n  useEffect(() => {\n    if (!isOpen) {\n      setFile(null);\n      setSelectedGalleryImage(null);\n      setUploadMode('new');\n      setTitle(\"\");\n      setDescription(\"\");\n      setCategory(CATEGORIES[0]);\n      setTags([]);\n      setTagInput(\"\");\n      setSelectedContest(preselectedContestId || \"\");\n      setAgreedToRules(false);\n      setAgreedToTerms(false);\n      setStep(1);\n      setErrors([]);\n    }\n  }, [isOpen, preselectedContestId]);\n\n  // Handle browser back button and Escape key\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const modalId = Date.now();\n\n    // Push unique history state when modal opens\n    window.history.pushState({ modal: 'upload', modalId }, '');\n\n    // Handle Escape key\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        onClose();\n      }\n    };\n\n    // Handle browser back button\n    const handlePopState = () => {\n      // Only close if the current state matches our modal\n      if (window.history.state?.modalId !== modalId) {\n        onClose();\n      }\n    };\n\n    window.addEventListener('keydown', handleEscape);\n    window.addEventListener('popstate', handlePopState);\n\n    return () => {\n      window.removeEventListener('keydown', handleEscape);\n      window.removeEventListener('popstate', handlePopState);\n    };\n  }, [isOpen, onClose]);\n\n  const onDropFiles = useCallback((dropped: FileList | null) => {\n    if (!dropped || dropped.length === 0) return;\n    const f = dropped[0];\n    if (\n      f.type.startsWith(\"image/\") ||\n      f.type.startsWith(\"video/\") ||\n      /\\.(jpg|jpeg|png|webp|gif|mp4|mov|webm)$/i.test(f.name)\n    ) {\n      setFile(f);\n    } else {\n      setErrors([\"Unsupported file type. Use image or video formats.\"]);\n    }\n  }, []);\n\n  const resetErrors = () => setErrors([]);\n\n  const validateStep = (s: 1 | 2 | 3) => {\n    const newErrors: string[] = [];\n    if (s === 1) {\n      if (uploadMode === 'new' && !file) newErrors.push(\"Please select a file to upload.\");\n      if (uploadMode === 'gallery' && !selectedGalleryImage) newErrors.push(\"Please select an image from your gallery.\");\n    }\n    if (s === 2) {\n      if (!title.trim()) newErrors.push(\"Title is required.\");\n      if (!description.trim()) newErrors.push(\"Description is required.\");\n    }\n    if (s === 3) {\n      if (!selectedContest) newErrors.push(\"Please select a destination.\");\n      // Contest rules only required if submitting to a contest (not My Gallery)\n      if (selectedContest && selectedContest !== \"my-gallery\" && !agreedToRules) {\n        newErrors.push(\"You must agree to contest rules.\");\n      }\n      if (!agreedToTerms) newErrors.push(\"You must agree to the terms and conditions.\");\n    }\n    setErrors(newErrors);\n    return newErrors.length === 0;\n  };\n\n  const goNext = () => {\n    resetErrors();\n    if (validateStep(step)) {\n      if (step < 3) setStep((p) => (p + 1) as 1 | 2 | 3);\n    }\n  };\n\n  const goPrev = () => {\n    resetErrors();\n    if (step > 1) setStep((p) => (p - 1) as 1 | 2 | 3);\n  };\n\n  const handleTagAdd = (value: string) => {\n    const t = value.trim();\n    if (!t) return;\n    if (tags.includes(t)) return;\n    if (tags.length >= 10) return;\n    setTags((prev) => [...prev, t]);\n    setTagInput(\"\");\n  };\n\n  const removeTag = (t: string) => {\n    setTags((prev) => prev.filter((x) => x !== t));\n  };\n\n  const handleSubmit = async () => {\n    resetErrors();\n    const allGood = validateStep(1) && validateStep(2) && validateStep(3);\n    if (!allGood) return;\n\n    if (uploadMode === 'new' && !file) return;\n    if (uploadMode === 'gallery' && !selectedGalleryImage) return;\n\n    setSubmitting(true);\n    try {\n      if (uploadMode === 'new' && file) {\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        // Only add contestId if not uploading to My Gallery\n        if (selectedContest !== \"my-gallery\") {\n          formData.append(\"contestId\", selectedContest);\n        }\n        formData.append(\"title\", title);\n        formData.append(\"description\", description);\n        formData.append(\"type\", file.type.startsWith(\"video/\") ? \"video\" : \"image\");\n\n        const response = await fetch(\"/api/submissions\", {\n          method: \"POST\",\n          credentials: \"include\",\n          body: formData,\n        });\n\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.error || \"Failed to submit\");\n        }\n      } else if (uploadMode === 'gallery' && selectedGalleryImage) {\n        const submissionData: any = {\n          title,\n          description,\n          type: selectedGalleryImage.type,\n          mediaUrl: selectedGalleryImage.url,\n          thumbnailUrl: selectedGalleryImage.thumbnailUrl,\n          status: \"pending\",\n        };\n        \n        // Only add contestId if not uploading to My Gallery\n        if (selectedContest !== \"my-gallery\") {\n          submissionData.contestId = selectedContest;\n        }\n\n        const response = await fetch(\"/api/submissions\", {\n          method: \"POST\",\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(submissionData),\n        });\n\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.error || \"Failed to submit\");\n        }\n      }\n\n      toast({\n        title: \"Success!\",\n        description: \"Your submission has been uploaded and is pending approval\",\n      });\n\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Upload Failed\",\n        description: error instanceof Error ? error.message : \"Please try again\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return (\n    <div \n      className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/80 backdrop-blur-sm p-4\"\n      onClick={onClose}\n    >\n      <div \n        className=\"relative w-full mx-auto max-w-5xl max-h-[90vh] overflow-y-auto pb-24 md:pb-0\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        <div className=\"rounded-2xl border border-violet-200/40 dark:border-violet-800/40 shadow-xl overflow-hidden bg-white/70 dark:bg-slate-900/60 backdrop-blur\">\n          {/* Header */}\n          <div className=\"relative p-6 sm:p-8\">\n            <div className=\"pointer-events-none absolute inset-0 bg-gradient-to-br from-indigo-50 via-violet-50 to-slate-50 dark:from-indigo-950/20 dark:via-violet-950/20 dark:to-slate-950\" />\n            <div className=\"relative flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3\">\n              <div>\n                <h2 className=\"text-2xl sm:text-3xl font-semibold tracking-tight text-slate-900 dark:text-slate-100\">\n                  Submit Your Work\n                </h2>\n                <p className=\"text-sm text-slate-600 dark:text-slate-300 mt-1\">\n                  Upload your creative work and compete for GLORY rewards\n                </p>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                <WizardSteps step={step} />\n                <button\n                  onClick={onClose}\n                  className=\"p-2 hover:bg-white/10 rounded-lg transition-colors\"\n                  data-testid=\"button-close-wizard\"\n                >\n                  <X className=\"h-6 w-6 text-slate-400\" />\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* Body */}\n          <div className=\"p-6 pt-0 sm:p-8 sm:pt-0\">\n            {errors.length > 0 && (\n              <div className=\"mb-6 rounded-xl border border-red-300/50 dark:border-red-600/50 bg-red-50 dark:bg-red-950/30 p-4 text-sm text-red-800 dark:text-red-200\">\n                <ul className=\"list-disc ps-5 space-y-1\">\n                  {errors.map((e, i) => (\n                    <li key={i}>{e}</li>\n                  ))}\n                </ul>\n              </div>\n            )}\n\n            {step === 1 && (\n              <div>\n                <div className=\"flex gap-2 mb-6\">\n                  <button\n                    onClick={() => {\n                      setUploadMode('new');\n                      setSelectedGalleryImage(null);\n                    }}\n                    className={`flex-1 px-4 py-3 rounded-xl font-medium transition-colors ${\n                      uploadMode === 'new'\n                        ? 'bg-violet-600 text-white'\n                        : 'bg-slate-100 dark:bg-slate-800 text-slate-700 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700'\n                    }`}\n                    data-testid=\"button-upload-new\"\n                  >\n                    <UploadCloud className=\"h-4 w-4 inline mr-2\" />\n                    Upload New\n                  </button>\n                  <button\n                    onClick={() => {\n                      setUploadMode('gallery');\n                      setFile(null);\n                    }}\n                    className={`flex-1 px-4 py-3 rounded-xl font-medium transition-colors ${\n                      uploadMode === 'gallery'\n                        ? 'bg-violet-600 text-white'\n                        : 'bg-slate-100 dark:bg-slate-800 text-slate-700 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700'\n                    }`}\n                    data-testid=\"button-from-gallery\"\n                  >\n                    <ImageIcon className=\"h-4 w-4 inline mr-2\" />\n                    From Gallery\n                  </button>\n                </div>\n\n                {uploadMode === 'new' ? (\n                  <StepUpload\n                    file={file}\n                    isVideo={isVideo}\n                    previewURL={previewURL}\n                    onPickFile={() => fileInputRef.current?.click()}\n                    onDropFiles={onDropFiles}\n                    fileInputRef={fileInputRef}\n                    setFile={setFile}\n                  />\n                ) : (\n                  <GallerySelector\n                    userSubmissions={userSubmissions}\n                    selectedImage={selectedGalleryImage}\n                    onSelectImage={setSelectedGalleryImage}\n                  />\n                )}\n              </div>\n            )}\n\n            {step === 2 && (\n              <StepDetails\n                title={title}\n                setTitle={setTitle}\n                description={description}\n                setDescription={setDescription}\n                category={category}\n                setCategory={setCategory}\n                tags={tags}\n                tagInput={tagInput}\n                setTagInput={setTagInput}\n                onAddTag={handleTagAdd}\n                onRemoveTag={removeTag}\n              />\n            )}\n\n            {step === 3 && (\n              <StepContest\n                contests={activeContests}\n                selectedContest={selectedContest}\n                setSelectedContest={setSelectedContest}\n                agreedToRules={agreedToRules}\n                setAgreedToRules={setAgreedToRules}\n                agreedToTerms={agreedToTerms}\n                setAgreedToTerms={setAgreedToTerms}\n                user={user}\n              />\n            )}\n          </div>\n\n          {/* Footer / Nav */}\n          <div className=\"flex items-center justify-between gap-3 p-6 sm:p-8 border-t border-slate-200/60 dark:border-slate-800/60 bg-white/60 dark:bg-slate-900/60\">\n            <button\n              onClick={goPrev}\n              disabled={step === 1}\n              className=\"inline-flex items-center gap-2 rounded-xl px-4 py-2 border border-slate-300/60 dark:border-slate-700/60 text-slate-700 dark:text-slate-200 hover:bg-slate-50 dark:hover:bg-slate-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n              data-testid=\"button-back\"\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n              Back\n            </button>\n\n            {step < 3 ? (\n              <button\n                onClick={goNext}\n                className=\"inline-flex items-center gap-2 rounded-xl px-5 py-2.5 bg-violet-600 hover:bg-violet-700 text-white shadow-md shadow-violet-600/20\"\n                data-testid=\"button-next\"\n              >\n                Next\n                <ChevronRight className=\"h-4 w-4\" />\n              </button>\n            ) : (\n              <button\n                onClick={handleSubmit}\n                disabled={submitting}\n                className=\"inline-flex items-center gap-2 rounded-xl px-5 py-2.5 bg-indigo-600 hover:bg-indigo-700 text-white shadow-md shadow-indigo-600/20 disabled:opacity-60\"\n                data-testid=\"button-submit\"\n              >\n                {submitting ? \"Submitting...\" : \"Submit\"}\n                <CheckCircle2 className=\"h-4 w-4\" />\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Subcomponents\n\nfunction WizardSteps({ step }: { step: 1 | 2 | 3 }) {\n  const steps = [\n    { id: 1, label: \"Upload\" },\n    { id: 2, label: \"Details\" },\n    { id: 3, label: \"Contest\" },\n  ];\n  return (\n    <div className=\"flex items-center gap-2\">\n      {steps.map((s) => {\n        const active = step === (s.id as 1 | 2 | 3);\n        return (\n          <div\n            key={s.id}\n            className={[\n              \"px-3 py-1.5 rounded-full text-xs font-medium border\",\n              active\n                ? \"bg-violet-600 text-white border-violet-600\"\n                : \"bg-white/70 dark:bg-slate-900/70 text-slate-700 dark:text-slate-200 border-slate-300/60 dark:border-slate-700/60\",\n            ].join(\" \")}\n          >\n            {s.label}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nfunction StepUpload({\n  file,\n  isVideo,\n  previewURL,\n  onPickFile,\n  onDropFiles,\n  fileInputRef,\n  setFile,\n}: {\n  file: File | null;\n  isVideo: boolean;\n  previewURL: string | null;\n  onPickFile: () => void;\n  onDropFiles: (files: FileList | null) => void;\n  fileInputRef: React.RefObject<HTMLInputElement>;\n  setFile: (f: File | null) => void;\n}) {\n  const [dragOver, setDragOver] = useState(false);\n\n  return (\n    <div>\n      <div\n        onDragOver={(e) => {\n          e.preventDefault();\n          setDragOver(true);\n        }}\n        onDragLeave={() => setDragOver(false)}\n        onDrop={(e) => {\n          e.preventDefault();\n          setDragOver(false);\n          onDropFiles(e.dataTransfer.files);\n        }}\n        className={[\n          \"relative w-full border-2 border-dashed rounded-2xl overflow-hidden cursor-pointer\",\n          dragOver\n            ? \"border-violet-500 bg-violet-50/60 dark:bg-violet-950/20\"\n            : \"border-slate-300/60 dark:border-slate-700/60 bg-white/60 dark:bg-slate-900/60\",\n        ].join(\" \")}\n        onClick={onPickFile}\n        data-testid=\"upload-drop-zone\"\n      >\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          className=\"hidden\"\n          accept=\"image/*,video/*\"\n          onChange={(e) => onDropFiles(e.target.files)}\n          data-testid=\"input-file\"\n        />\n\n        {!file ? (\n          <div className=\"flex flex-col items-center justify-center py-14 text-center\">\n            <UploadCloud className=\"h-10 w-10 text-violet-600 mb-3\" />\n            <h3 className=\"text-lg font-medium text-slate-900 dark:text-slate-100\">\n              Drag & drop your image or video\n            </h3>\n            <p className=\"text-sm text-slate-600 dark:text-slate-300 mt-1\">\n              JPG, PNG, WEBP, GIF, MP4 (max 100MB)\n            </p>\n            <div className=\"mt-4 inline-flex items-center gap-2 rounded-xl px-4 py-2 bg-violet-600 text-white hover:bg-violet-700\">\n              <ImageIcon className=\"h-4 w-4\" />\n              <span>Browse files</span>\n            </div>\n          </div>\n        ) : (\n          <div className=\"relative\">\n            <div className=\"aspect-video w-full bg-slate-100 dark:bg-slate-800\">\n              {isVideo ? (\n                <video\n                  src={previewURL ?? undefined}\n                  className=\"h-full w-full object-contain\"\n                  controls\n                />\n              ) : (\n                <img\n                  src={previewURL ?? \"\"}\n                  alt=\"preview\"\n                  className=\"h-full w-full object-contain\"\n                />\n              )}\n            </div>\n\n            <div className=\"absolute top-3 right-3 flex gap-2\">\n              <button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onPickFile();\n                }}\n                className=\"rounded-xl px-3 py-1.5 text-xs bg-white/90 dark:bg-slate-900/90 border border-slate-300/60 dark:border-slate-700/60 text-slate-700 dark:text-slate-200 hover:bg-slate-50 dark:hover:bg-slate-800\"\n                data-testid=\"button-change-file\"\n              >\n                Change\n              </button>\n              <button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  setFile(null);\n                }}\n                className=\"rounded-xl p-1.5 bg-white/90 dark:bg-slate-900/90 border border-slate-300/60 dark:border-slate-700/60 hover:bg-slate-50 dark:hover:bg-slate-800\"\n                data-testid=\"button-remove-file\"\n              >\n                <X className=\"h-4 w-4\" />\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"mt-4 flex items-center gap-3 text-xs text-slate-600 dark:text-slate-300\">\n        <Info className=\"h-4 w-4\" />\n        <span>\n          Tip: Use high-resolution assets. For videos, keep under 60 seconds for best performance.\n        </span>\n      </div>\n    </div>\n  );\n}\n\nfunction StepDetails({\n  title,\n  setTitle,\n  description,\n  setDescription,\n  category,\n  setCategory,\n  tags,\n  tagInput,\n  setTagInput,\n  onAddTag,\n  onRemoveTag,\n}: {\n  title: string;\n  setTitle: (v: string) => void;\n  description: string;\n  setDescription: (v: string) => void;\n  category: string;\n  setCategory: (v: string) => void;\n  tags: string[];\n  tagInput: string;\n  setTagInput: (v: string) => void;\n  onAddTag: (v: string) => void;\n  onRemoveTag: (t: string) => void;\n}) {\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-5 gap-6\">\n      <div className=\"lg:col-span-3\">\n        <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n          Title *\n        </label>\n        <input\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          placeholder=\"Name your masterpiece\"\n          className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n          data-testid=\"input-title\"\n        />\n\n        <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mt-4 mb-1\">\n          Description *\n        </label>\n        <textarea\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n          rows={6}\n          placeholder=\"Tell the story, technique, settings...\"\n          className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n          data-testid=\"input-description\"\n        />\n      </div>\n\n      <div className=\"lg:col-span-2\">\n        <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n          Category *\n        </label>\n        <select\n          value={category}\n          onChange={(e) => setCategory(e.target.value)}\n          className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n          data-testid=\"select-category\"\n        >\n          {CATEGORIES.map((c) => (\n            <option key={c} value={c}>\n              {c}\n            </option>\n          ))}\n        </select>\n\n        <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mt-4 mb-1\">\n          Tags (up to 10)\n        </label>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"relative flex-1\">\n            <Tag className=\"h-4 w-4 absolute left-3 top-1/2 -translate-y-1/2 text-slate-500\" />\n            <input\n              value={tagInput}\n              onChange={(e) => setTagInput(e.target.value)}\n              onKeyDown={(e) => {\n                if (e.key === \"Enter\") {\n                  e.preventDefault();\n                  onAddTag(tagInput);\n                }\n              }}\n              placeholder=\"Press Enter to add\"\n              className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 ps-9 pe-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n              data-testid=\"input-tag\"\n            />\n          </div>\n          <button\n            onClick={() => onAddTag(tagInput)}\n            className=\"rounded-xl px-3 py-2 bg-violet-600 text-white hover:bg-violet-700\"\n            data-testid=\"button-add-tag\"\n          >\n            Add\n          </button>\n        </div>\n\n        {tags.length > 0 && (\n          <div className=\"mt-2 flex flex-wrap gap-2\">\n            {tags.map((t) => (\n              <span\n                key={t}\n                className=\"inline-flex items-center gap-1 rounded-full border border-violet-300/60 dark:border-violet-700/60 bg-violet-50/70 dark:bg-violet-950/20 px-3 py-1 text-xs text-violet-800 dark:text-violet-200\"\n              >\n                {t}\n                <button\n                  onClick={() => onRemoveTag(t)}\n                  className=\"p-0.5 hover:text-violet-600 dark:hover:text-violet-300\"\n                  data-testid={`button-remove-tag-${t}`}\n                >\n                  <X className=\"h-3 w-3\" />\n                </button>\n              </span>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction StepContest({\n  contests,\n  selectedContest,\n  setSelectedContest,\n  agreedToRules,\n  setAgreedToRules,\n  agreedToTerms,\n  setAgreedToTerms,\n  user,\n}: {\n  contests: any[];\n  selectedContest: string;\n  setSelectedContest: (v: string) => void;\n  agreedToRules: boolean;\n  setAgreedToRules: (b: boolean) => void;\n  agreedToTerms: boolean;\n  setAgreedToTerms: (b: boolean) => void;\n  user: any;\n}) {\n  const selectedContestData = contests.find((c) => c.id === selectedContest);\n  const contestConfig = selectedContestData?.config || {};\n  const hasEntryFee = contestConfig.entryFee && contestConfig.entryFeeAmount;\n  const entryFeeCurrency = contestConfig.entryFeeCurrency || 'GLORY';\n  const entryFeeAmount = contestConfig.entryFeeAmount || 0;\n  \n  // Get user's balance for the entry fee currency\n  const getUserBalance = () => {\n    if (!user) return 0;\n    switch (entryFeeCurrency) {\n      case 'SOL':\n        return user.solBalance || 0;\n      case 'USDC':\n        return user.usdcBalance || 0;\n      case 'GLORY':\n      default:\n        return user.gloryBalance || 0;\n    }\n  };\n  \n  const userBalance = getUserBalance();\n  const hasInsufficientBalance = hasEntryFee && userBalance < entryFeeAmount;\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-3 rounded-xl border border-violet-300/60 dark:border-violet-700/60 bg-violet-50/70 dark:bg-violet-950/20 p-4\">\n        <Trophy className=\"h-6 w-6 text-violet-600 dark:text-violet-400\" />\n        <div>\n          <h3 className=\"text-sm font-medium text-violet-900 dark:text-violet-100\">\n            Contest Submission\n          </h3>\n          <p className=\"text-xs text-violet-700 dark:text-violet-300 mt-0.5\">\n            Submit your work to compete for GLORY rewards\n          </p>\n        </div>\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n          Destination *\n        </label>\n        <select\n          value={selectedContest}\n          onChange={(e) => setSelectedContest(e.target.value)}\n          className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n          data-testid=\"select-contest\"\n        >\n          <option value=\"\">Choose destination</option>\n          <option value=\"my-gallery\">Only in My Gallery</option>\n          {contests.map((c) => (\n            <option key={c.id} value={c.id}>\n              {c.title} - {c.prizeGlory.toLocaleString()} GLORY\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {hasEntryFee && selectedContest && selectedContest !== \"my-gallery\" && (\n        <div className={`flex items-start gap-3 rounded-xl border p-4 ${\n          hasInsufficientBalance\n            ? 'border-red-300/60 dark:border-red-700/60 bg-red-50/70 dark:bg-red-950/20'\n            : 'border-blue-300/60 dark:border-blue-700/60 bg-blue-50/70 dark:bg-blue-950/20'\n        }`}>\n          <Info className={`h-5 w-5 flex-shrink-0 mt-0.5 ${\n            hasInsufficientBalance\n              ? 'text-red-600 dark:text-red-400'\n              : 'text-blue-600 dark:text-blue-400'\n          }`} />\n          <div className=\"flex-1\">\n            <h4 className={`text-sm font-medium ${\n              hasInsufficientBalance\n                ? 'text-red-900 dark:text-red-100'\n                : 'text-blue-900 dark:text-blue-100'\n            }`}>\n              {hasInsufficientBalance ? 'Insufficient Balance' : 'Entry Fee Required'}\n            </h4>\n            <p className={`text-xs mt-1 ${\n              hasInsufficientBalance\n                ? 'text-red-700 dark:text-red-300'\n                : 'text-blue-700 dark:text-blue-300'\n            }`}>\n              {hasInsufficientBalance\n                ? `You need ${entryFeeAmount.toLocaleString()} ${entryFeeCurrency} to enter this contest. Your balance: ${userBalance.toLocaleString()} ${entryFeeCurrency}`\n                : `${entryFeeAmount.toLocaleString()} ${entryFeeCurrency} will be deducted from your balance upon submission.`\n              }\n            </p>\n          </div>\n        </div>\n      )}\n\n      <div className=\"space-y-4 pt-4 border-t border-slate-300/60 dark:border-slate-700/60\">\n        <h3 className=\"text-sm font-medium text-slate-800 dark:text-slate-200\">\n          Agreements\n        </h3>\n\n        {selectedContest && selectedContest !== \"my-gallery\" && (\n          <label className=\"flex items-start gap-3\">\n            <input\n              type=\"checkbox\"\n              checked={agreedToRules}\n              onChange={(e) => setAgreedToRules(e.target.checked)}\n              className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500 mt-0.5\"\n              data-testid=\"checkbox-rules\"\n            />\n            <div className=\"text-sm\">\n              <span className=\"text-slate-800 dark:text-slate-200\">\n                I agree to the contest rules and confirm I own the rights to this content *\n              </span>\n              <p className=\"text-xs text-slate-600 dark:text-slate-300 mt-1\">\n                Top submissions receive GLORY rewards based on contest prize distribution\n              </p>\n            </div>\n          </label>\n        )}\n\n        <label className=\"flex items-start gap-3\">\n          <input\n            type=\"checkbox\"\n            checked={agreedToTerms}\n            onChange={(e) => setAgreedToTerms(e.target.checked)}\n            className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500 mt-0.5\"\n            data-testid=\"checkbox-terms\"\n          />\n          <div className=\"text-sm\">\n            <span className=\"text-slate-800 dark:text-slate-200\">\n              I agree to the{\" \"}\n              <a href=\"/terms\" className=\"text-violet-600 hover:text-violet-700 underline\">\n                Terms of Service\n              </a>{\" \"}\n              and{\" \"}\n              <a href=\"/privacy\" className=\"text-violet-600 hover:text-violet-700 underline\">\n                Privacy Policy\n              </a>\n              {\" \"}*\n            </span>\n          </div>\n        </label>\n      </div>\n    </div>\n  );\n}\n\nfunction GallerySelector({\n  userSubmissions,\n  selectedImage,\n  onSelectImage,\n}: {\n  userSubmissions: any[];\n  selectedImage: {url: string, type: string, thumbnailUrl?: string} | null;\n  onSelectImage: (img: {url: string, type: string, thumbnailUrl?: string} | null) => void;\n}) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  if (userSubmissions.length === 0) {\n    return (\n      <div className=\"text-center py-12 bg-white/60 dark:bg-slate-900/60 rounded-xl border border-slate-300/60 dark:border-slate-700/60\">\n        <ImageIcon className=\"h-12 w-12 mx-auto text-slate-400 mb-3\" />\n        <p className=\"text-sm text-slate-600 dark:text-slate-300\">\n          No approved submissions in your gallery yet.\n        </p>\n        <p className=\"text-xs text-slate-500 dark:text-slate-400 mt-1\">\n          Upload new artwork to build your gallery.\n        </p>\n      </div>\n    );\n  }\n\n  // Filter submissions by search term (title and tags)\n  const filteredSubmissions = userSubmissions.filter((sub: any) => {\n    if (!searchTerm) return true;\n    const searchLower = searchTerm.toLowerCase();\n    const matchesTitle = sub.title?.toLowerCase().includes(searchLower);\n    const matchesTags = sub.tags?.some((tag: string) => tag.toLowerCase().includes(searchLower));\n    return matchesTitle || matchesTags;\n  });\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Search Bar */}\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-slate-400\" />\n        <input\n          type=\"text\"\n          placeholder=\"Search by title or tags...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          className=\"w-full pl-10 pr-4 py-2 rounded-lg border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-800 text-slate-900 dark:text-slate-100 placeholder-slate-400 focus:ring-2 focus:ring-violet-500 focus:border-violet-500 transition-colors\"\n          data-testid=\"input-gallery-search\"\n        />\n      </div>\n\n      {/* Gallery Grid */}\n      {filteredSubmissions.length === 0 ? (\n        <div className=\"text-center py-8 text-slate-500 dark:text-slate-400\">\n          No submissions match your search.\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4\">\n          {filteredSubmissions.map((sub: any) => (\n            <div\n              key={sub.id}\n              onClick={() => onSelectImage({\n                url: sub.mediaUrl,\n                type: sub.type,\n                thumbnailUrl: sub.thumbnailUrl\n              })}\n              className={[\n                \"relative aspect-square rounded-xl overflow-hidden cursor-pointer transition-all\",\n                selectedImage?.url === sub.mediaUrl\n                  ? \"ring-4 ring-violet-500 scale-105\"\n                  : \"hover:scale-105 border-2 border-slate-300/60 dark:border-slate-700/60\"\n              ].join(\" \")}\n              data-testid={`gallery-image-${sub.id}`}\n            >\n              <img\n                src={sub.thumbnailUrl || sub.mediaUrl}\n                alt={sub.title}\n                className=\"w-full h-full object-cover\"\n                loading=\"lazy\"\n              />\n              {selectedImage?.url === sub.mediaUrl && (\n                <div className=\"absolute inset-0 bg-violet-600/20 flex items-center justify-center\">\n                  <CheckCircle2 className=\"h-8 w-8 text-white\" />\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":34961},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/pages/profile.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { GlassButton } from \"@/components/GlassButton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Trophy, User, Calendar, Eye, EyeOff, Upload, Settings, Clock, CheckCircle, XCircle, Edit2, Share2, Trash2, Medal, DollarSign, Copy, Camera, Save, X as XIcon, Search } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth, isAuthenticated } from \"@/lib/auth\";\nimport { useUserBalance } from \"@/hooks/useUserBalance\";\nimport { CashoutRequest } from \"@/components/wallet/CashoutRequest\";\nimport { WalletConnect } from \"@/components/wallet/WalletConnect\";\nimport { EditSubmissionModal } from \"@/components/EditSubmissionModal\";\nimport { UploadWizardModal } from \"@/components/UploadWizardModal\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState, useEffect } from \"react\";\n\nexport default function Profile() {\n  const { data: user } = useAuth();\n  const { balance } = useUserBalance();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [editModalOpen, setEditModalOpen] = useState(false);\n  const [selectedSubmission, setSelectedSubmission] = useState<any>(null);\n  const [withdrawModalOpen, setWithdrawModalOpen] = useState(false);\n  const [uploadModalOpen, setUploadModalOpen] = useState(false);\n  const [editingUsername, setEditingUsername] = useState(false);\n  const [newUsername, setNewUsername] = useState(\"\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [currencyFilter, setCurrencyFilter] = useState<\"all\" | \"GLORY\" | \"SOL\" | \"USDC\">(\"all\");\n  const [withdrawalAddress, setWithdrawalAddress] = useState(user?.withdrawalAddress || \"\");\n  const [editingWithdrawalAddress, setEditingWithdrawalAddress] = useState(false);\n\n  // Sync withdrawal address state with user data\n  useEffect(() => {\n    if (user?.withdrawalAddress !== undefined) {\n      setWithdrawalAddress(user.withdrawalAddress || \"\");\n    }\n  }, [user?.withdrawalAddress]);\n\n  // Redirect if not authenticated\n  if (!isAuthenticated(user)) {\n    setLocation(\"/login\");\n    return null;\n  }\n\n  // Fetch user's submissions using dedicated endpoint\n  const { data: submissions = [] } = useQuery({\n    queryKey: [\"/api/me/submissions\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/me/submissions`);\n      if (!response.ok) throw new Error(\"Failed to fetch submissions\");\n      return response.json();\n    },\n  });\n\n  // Fetch active contests to filter submissions\n  const { data: activeContests = [] } = useQuery({\n    queryKey: [\"/api/contests\", { status: \"active\" }],\n    queryFn: async () => {\n      const response = await fetch(\"/api/contests?status=active\");\n      if (!response.ok) throw new Error(\"Failed to fetch contests\");\n      return response.json();\n    },\n  });\n\n  // Filter submissions to only those in active contests\n  const activeContestSubmissions = submissions.filter((sub: any) => \n    sub.contestId && activeContests.some((c: any) => c.id === sub.contestId)\n  );\n\n  // Fetch all approved submissions for ranking calculation\n  const { data: allApprovedSubmissions = [] } = useQuery({\n    queryKey: [\"/api/submissions\", { status: \"approved\" }],\n    queryFn: async () => {\n      const response = await fetch(\"/api/submissions?status=approved\");\n      if (!response.ok) throw new Error(\"Failed to fetch approved submissions\");\n      return response.json();\n    },\n  });\n\n  // Calculate rank for each submission in its contest (using all contest submissions)\n  const submissionsWithRank = activeContestSubmissions.map((submission: any) => {\n    if (submission.status !== \"approved\") {\n      return { ...submission, rank: null };\n    }\n\n    // Get all approved submissions for this contest, not just user's\n    const contestSubmissions = allApprovedSubmissions\n      .filter((s: any) => s.contestId === submission.contestId)\n      .sort((a: any, b: any) => b.votesCount - a.votesCount);\n    \n    const rank = contestSubmissions.findIndex((s: any) => s.id === submission.id) + 1;\n    return { ...submission, rank: rank > 0 ? rank : null };\n  });\n\n  const { data: gloryHistory = [] } = useQuery({\n    queryKey: [\"/api/glory-ledger\", currencyFilter],\n    queryFn: async () => {\n      const url = currencyFilter === \"all\" \n        ? \"/api/glory-ledger\" \n        : `/api/glory-ledger?currency=${currencyFilter}`;\n      const response = await fetch(url, { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch transaction history\");\n      return response.json();\n    },\n  });\n\n  const getInitials = (username: string) => {\n    return username.substring(0, 2).toUpperCase();\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return \"bg-success/20 text-success border-success/30\";\n      case \"pending\":\n        return \"bg-muted text-muted-foreground border-border\";\n      case \"rejected\":\n        return \"bg-destructive/20 text-destructive border-destructive/30\";\n      default:\n        return \"bg-muted text-muted-foreground border-border\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case \"pending\":\n        return <Clock className=\"w-4 h-4\" />;\n      case \"rejected\":\n        return <XCircle className=\"w-4 h-4\" />;\n      default:\n        return <Clock className=\"w-4 h-4\" />;\n    }\n  };\n\n  const approvedSubmissions = submissions.filter((s: any) => s.status === \"approved\");\n  const totalVotes = approvedSubmissions.reduce((sum: number, s: any) => sum + s.votesCount, 0);\n\n  // Update submission mutation\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return await apiRequest(\"PATCH\", `/api/submissions/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      toast({ title: \"Success\", description: \"Submission updated successfully\" });\n      setEditModalOpen(false);\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update submission\", variant: \"destructive\" });\n    },\n  });\n\n  // Delete submission mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/submissions/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      toast({ title: \"Success\", description: \"Submission deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete submission\", variant: \"destructive\" });\n    },\n  });\n\n  // Clear all glory history mutation\n  const clearGloryHistoryMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"DELETE\", `/api/glory-ledger`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/glory-ledger\"] });\n      toast({ title: \"Success\", description: \"All GLORY history cleared successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to clear GLORY history\", variant: \"destructive\" });\n    },\n  });\n\n  // Handle edit submission\n  const handleEdit = (submission: any) => {\n    setSelectedSubmission(submission);\n    setEditModalOpen(true);\n  };\n\n  // Handle save from edit modal\n  const handleSaveEdit = (data: { title: string; description: string; tags: string[] }) => {\n    if (selectedSubmission) {\n      updateMutation.mutate({ id: selectedSubmission.id, data });\n    }\n  };\n\n  // Handle delete with confirmation\n  const handleDelete = (submissionId: string) => {\n    if (confirm(\"Are you sure you want to delete this submission? This action cannot be undone.\")) {\n      deleteMutation.mutate(submissionId);\n    }\n  };\n\n  // Handle share\n  const handleShare = (submission: any) => {\n    const shareUrl = `${window.location.origin}/submission/${submission.id}`;\n    \n    if (navigator.share) {\n      navigator.share({\n        title: submission.title,\n        text: `Check out my submission: ${submission.title}`,\n        url: shareUrl,\n      }).catch(() => {\n        fallbackShare(shareUrl);\n      });\n    } else {\n      fallbackShare(shareUrl);\n    }\n  };\n\n  // Fallback share (copy to clipboard)\n  const fallbackShare = (url: string) => {\n    navigator.clipboard.writeText(url).then(() => {\n      toast({ title: \"Link copied!\", description: \"Submission link copied to clipboard\" });\n    }).catch(() => {\n      toast({ title: \"Error\", description: \"Failed to copy link\", variant: \"destructive\" });\n    });\n  };\n\n  // Handle clear all glory history with confirmation\n  const handleClearGloryHistory = () => {\n    if (confirm(\"Are you sure you want to clear all GLORY history? Your current balance will remain unchanged.\")) {\n      clearGloryHistoryMutation.mutate();\n    }\n  };\n\n  // Update username mutation\n  const updateUsernameMutation = useMutation({\n    mutationFn: async (username: string) => {\n      return await apiRequest(\"PATCH\", \"/api/me\", { username });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n      setEditingUsername(false);\n      toast({ title: \"Success\", description: \"Username updated successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to update username\", variant: \"destructive\" });\n    },\n  });\n\n  // Upload avatar mutation\n  const uploadAvatarMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append(\"avatar\", file);\n      const response = await fetch(\"/api/me/avatar\", {\n        method: \"POST\",\n        body: formData,\n      });\n      if (!response.ok) throw new Error(\"Failed to upload avatar\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n      toast({ title: \"Success\", description: \"Avatar updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to upload avatar\", variant: \"destructive\" });\n    },\n  });\n\n  // Delete profile mutation\n  const deleteProfileMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"DELETE\", \"/api/me\");\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Profile deleted successfully\" });\n      setLocation(\"/login\");\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete profile\", variant: \"destructive\" });\n    },\n  });\n\n  // Update withdrawal address mutation\n  const updateWithdrawalAddressMutation = useMutation({\n    mutationFn: async (address: string) => {\n      return await apiRequest(\"PATCH\", \"/api/users/withdrawal-address\", { address });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n      setEditingWithdrawalAddress(false);\n      toast({ title: \"Success\", description: \"Withdrawal address saved successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to save withdrawal address\", variant: \"destructive\" });\n    },\n  });\n\n  // Handle username save\n  const handleSaveUsername = () => {\n    if (!newUsername.trim() || newUsername.trim().length < 3) {\n      toast({ title: \"Error\", description: \"Username must be at least 3 characters\", variant: \"destructive\" });\n      return;\n    }\n    updateUsernameMutation.mutate(newUsername);\n  };\n\n  // Handle withdrawal address save\n  const handleSaveWithdrawalAddress = () => {\n    if (!withdrawalAddress.trim()) {\n      toast({ title: \"Error\", description: \"Please enter a withdrawal address\", variant: \"destructive\" });\n      return;\n    }\n    if (withdrawalAddress.trim().length < 32 || withdrawalAddress.trim().length > 44) {\n      toast({ title: \"Error\", description: \"Invalid Solana address (must be 32-44 characters)\", variant: \"destructive\" });\n      return;\n    }\n    updateWithdrawalAddressMutation.mutate(withdrawalAddress.trim());\n  };\n\n  // Handle avatar upload\n  const handleAvatarUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      if (!file.type.startsWith(\"image/\")) {\n        toast({ title: \"Error\", description: \"Please select an image file\", variant: \"destructive\" });\n        return;\n      }\n      uploadAvatarMutation.mutate(file);\n    }\n  };\n\n  // Handle delete profile\n  const handleDeleteProfile = () => {\n    if (confirm(\"Are you sure you want to delete your profile? This action cannot be undone and will delete all your data including submissions, votes, and GLORY balance.\")) {\n      deleteProfileMutation.mutate();\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen py-16 pb-32 md:pb-16\" data-testid=\"profile-page\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          \n          {/* Profile Sidebar */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"sticky top-20\" data-testid=\"profile-sidebar\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-center mb-6\">\n                  <div className=\"relative inline-block group mb-4\">\n                    <Avatar className=\"w-24 h-24\">\n                      {user.avatarUrl ? (\n                        <img src={user.avatarUrl} alt={user.username} className=\"w-full h-full object-cover\" />\n                      ) : (\n                        <AvatarFallback className=\"gradient-glory text-white text-4xl font-bold\">\n                          {getInitials(user.username)}\n                        </AvatarFallback>\n                      )}\n                    </Avatar>\n                    <label className=\"absolute inset-0 flex items-center justify-center bg-black/50 rounded-full opacity-0 group-hover:opacity-100 transition-opacity cursor-pointer\">\n                      <Camera className=\"w-6 h-6 text-white\" />\n                      <input\n                        type=\"file\"\n                        accept=\"image/*\"\n                        className=\"hidden\"\n                        onChange={handleAvatarUpload}\n                        disabled={uploadAvatarMutation.isPending}\n                        data-testid=\"input-avatar-upload\"\n                      />\n                    </label>\n                  </div>\n                  <h2 className=\"text-2xl font-bold mb-1\" data-testid=\"profile-username\">\n                    {user.username}\n                  </h2>\n                  <p className=\"text-muted-foreground text-sm mb-4\" data-testid=\"profile-email\">\n                    {user.email}\n                  </p>\n                  <Badge className={getStatusColor(user.status)} data-testid=\"profile-status\">\n                    {getStatusIcon(user.status)}\n                    <span className=\"ml-1\">{user.status.charAt(0).toUpperCase() + user.status.slice(1)}</span>\n                  </Badge>\n                </div>\n\n                {/* Balance Display */}\n                <div className=\"gradient-glory rounded-xl p-6 mb-6\" data-testid=\"balance-display\">\n                  <div className=\"text-white/80 text-sm mb-3 text-center\">Your Balances</div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-white/80 text-sm\">GLORY</span>\n                      <span className=\"text-white text-xl font-bold\" data-testid=\"balance-glory-profile\">\n                        {user.gloryBalance.toLocaleString()}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-white/80 text-sm\">SOL</span>\n                      <span className=\"text-white text-xl font-bold\" data-testid=\"balance-sol-profile\">\n                        {(user.solBalance || 0).toLocaleString()}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-white/80 text-sm\">USDC</span>\n                      <span className=\"text-white text-xl font-bold\" data-testid=\"balance-usdc-profile\">\n                        {(user.usdcBalance || 0).toLocaleString()}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Quick Stats */}\n                <div className=\"space-y-3 mb-6\">\n                  <div className=\"flex items-center justify-between py-2 border-b border-border\">\n                    <span className=\"text-muted-foreground text-sm\">Total Submissions</span>\n                    <span className=\"font-semibold\" data-testid=\"total-submissions\">\n                      {submissions.length}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between py-2 border-b border-border\">\n                    <span className=\"text-muted-foreground text-sm\">Votes Received</span>\n                    <span className=\"font-semibold\" data-testid=\"total-votes\">\n                      {totalVotes}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between py-2\">\n                    <span className=\"text-muted-foreground text-sm\">Member Since</span>\n                    <span className=\"font-semibold text-sm\" data-testid=\"member-since\">\n                      {new Date(user.createdAt).toLocaleDateString()}\n                    </span>\n                  </div>\n                </div>\n\n                {/* Actions */}\n                <div className=\"space-y-2\">\n                  <Button \n                    className=\"w-full gradient-glory hover:opacity-90 transition-opacity\"\n                    onClick={() => setUploadModalOpen(true)}\n                    data-testid=\"upload-button\"\n                  >\n                    <Upload className=\"w-4 h-4 mr-2\" />\n                    Upload New Entry\n                  </Button>\n                  <GlassButton\n                    className=\"w-full\"\n                    onClick={() => setWithdrawModalOpen(true)}\n                    data-testid=\"button-withdraw\"\n                  >\n                    <DollarSign className=\"w-4 h-4 mr-2\" />\n                    Withdraw\n                  </GlassButton>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Profile Content */}\n          <div className=\"lg:col-span-2\">\n            <Tabs defaultValue=\"submissions\" className=\"space-y-4\" data-testid=\"profile-tabs\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"submissions\" className=\"gap-2\" data-testid=\"tab-submissions\">\n                  <Upload className=\"w-4 h-4\" />\n                  <span className=\"hidden md:inline\">My Submissions</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"glory\" className=\"gap-2\" data-testid=\"tab-transactions\">\n                  <Medal className=\"w-4 h-4\" />\n                  <span className=\"hidden md:inline\">Transaction History</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"settings\" className=\"gap-2\" data-testid=\"tab-settings\">\n                  <Settings className=\"w-4 h-4\" />\n                  <span className=\"hidden md:inline\">Settings</span>\n                </TabsTrigger>\n              </TabsList>\n\n              {/* Submissions Tab */}\n              <TabsContent value=\"submissions\" className=\"space-y-4\" data-testid=\"submissions-tab\">\n                {/* Search Bar */}\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Search by title or tags...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-search-submissions\"\n                  />\n                </div>\n                \n\n                {submissionsWithRank.filter((sub: any) => {\n                  if (!searchQuery.trim()) return true;\n                  const query = searchQuery.toLowerCase();\n                  return (\n                    sub.title?.toLowerCase().includes(query) ||\n                    sub.tags?.some((tag: string) => tag.toLowerCase().includes(query))\n                  );\n                }).length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {submissionsWithRank.filter((sub: any) => {\n                      if (!searchQuery.trim()) return true;\n                      const query = searchQuery.toLowerCase();\n                      return (\n                        sub.title?.toLowerCase().includes(query) ||\n                        sub.tags?.some((tag: string) => tag.toLowerCase().includes(query))\n                      );\n                    }).map((submission: any) => (\n                      <Card key={submission.id} className={`hover:border-primary/50 transition-colors ${submission.status === \"rejected\" ? \"opacity-75\" : \"\"}`} data-testid={`submission-item-${submission.id}`}>\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex flex-col sm:flex-row gap-4\">\n                            <div className=\"sm:w-48 aspect-square flex-shrink-0 rounded-lg overflow-hidden bg-muted\">\n                              <img \n                                src={submission.type === \"video\" ? submission.thumbnailUrl || submission.mediaUrl : submission.mediaUrl}\n                                alt={submission.title}\n                                className=\"w-full h-full object-cover\"\n                                onError={(e) => {\n                                  const target = e.target as HTMLImageElement;\n                                  target.src = 'data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"400\" height=\"400\"%3E%3Crect fill=\"%23334155\" width=\"400\" height=\"400\"/%3E%3Ctext fill=\"%239ca3af\" font-family=\"system-ui\" font-size=\"48\" x=\"50%25\" y=\"50%25\" text-anchor=\"middle\" dominant-baseline=\"middle\"%3E%3Ctspan x=\"50%25\" dy=\"-20\"%3E' + (submission.type === 'video' ? '🎬' : '🖼️') + '%3C/tspan%3E%3Ctspan x=\"50%25\" dy=\"60\" font-size=\"16\"%3EImage not available%3C/tspan%3E%3C/text%3E%3C/svg%3E';\n                                  target.onerror = null;\n                                }}\n                              />\n                            </div>\n                            <div className=\"flex-1 flex flex-col justify-between\">\n                              <div>\n                                <div className=\"flex items-start justify-between mb-2\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <h3 className=\"font-bold text-lg\" data-testid={`submission-title-${submission.id}`}>\n                                      {submission.title}\n                                    </h3>\n                                    {submission.rank && submission.rank <= 5 && submission.status === \"approved\" && (\n                                      <Badge className=\"gradient-glory text-white\" data-testid={`rank-badge-${submission.id}`}>\n                                        <Medal className=\"w-3 h-3 mr-1\" />\n                                        #{submission.rank}\n                                      </Badge>\n                                    )}\n                                  </div>\n                                  <Badge className={getStatusColor(submission.status)} data-testid={`submission-status-${submission.id}`}>\n                                    {getStatusIcon(submission.status)}\n                                    <span className=\"ml-1\">{submission.status.charAt(0).toUpperCase() + submission.status.slice(1)}</span>\n                                  </Badge>\n                                </div>\n                                {submission.description && (\n                                  <p className=\"text-muted-foreground text-sm mb-3 line-clamp-2\" data-testid={`submission-description-${submission.id}`}>\n                                    {submission.description}\n                                  </p>\n                                )}\n                                {submission.tags && submission.tags.length > 0 && (\n                                  <div className=\"flex flex-wrap gap-1 mb-3\">\n                                    {submission.tags.map((tag: string, idx: number) => (\n                                      <Badge key={idx} variant=\"outline\" className=\"text-xs\">\n                                        {tag}\n                                      </Badge>\n                                    ))}\n                                  </div>\n                                )}\n                              </div>\n                              <div className=\"flex items-center justify-between\">\n                                <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                                  <div className=\"flex items-center space-x-1\">\n                                    <Trophy className=\"w-4 h-4\" />\n                                    <span data-testid={`submission-contest-${submission.id}`}>\n                                      {submission.contest.title}\n                                    </span>\n                                  </div>\n                                  {submission.status === \"approved\" && (\n                                    <div className=\"flex items-center space-x-1 font-semibold text-primary\">\n                                      <Trophy className=\"w-4 h-4\" />\n                                      <span data-testid={`submission-votes-${submission.id}`}>\n                                        {submission.votesCount} votes\n                                      </span>\n                                    </div>\n                                  )}\n                                </div>\n                                <div className=\"flex items-center gap-2\">\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => handleEdit(submission)}\n                                    data-testid={`button-edit-${submission.id}`}\n                                  >\n                                    <Edit2 className=\"w-4 h-4\" />\n                                  </Button>\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => handleShare(submission)}\n                                    data-testid={`button-share-${submission.id}`}\n                                  >\n                                    <Share2 className=\"w-4 h-4\" />\n                                  </Button>\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => handleDelete(submission.id)}\n                                    data-testid={`button-delete-${submission.id}`}\n                                  >\n                                    <Trash2 className=\"w-4 h-4 text-destructive\" />\n                                  </Button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"no-submissions\">\n                    <div className=\"w-24 h-24 mx-auto mb-6 rounded-full bg-muted flex items-center justify-center\">\n                      {searchQuery ? (\n                        <Search className=\"w-12 h-12 text-muted-foreground\" />\n                      ) : (\n                        <Trophy className=\"w-12 h-12 text-muted-foreground\" />\n                      )}\n                    </div>\n                    <h3 className=\"text-xl font-semibold mb-2\">\n                      {searchQuery ? \"No results found\" : \"No active contest submissions\"}\n                    </h3>\n                    <p className=\"text-muted-foreground mb-6\">\n                      {searchQuery \n                        ? `No submissions match \"${searchQuery}\". Try a different search term.`\n                        : \"You don't have any submissions in active contests. Start competing!\"\n                      }\n                    </p>\n                    {!searchQuery && (\n                      <Link href=\"/contests\" data-testid=\"browse-contests-button\">\n                        <GlassButton>\n                          Browse Active Contests\n                          <Trophy className=\"w-4 h-4 ml-2\" />\n                        </GlassButton>\n                      </Link>\n                    )}\n                  </div>\n                )}\n              </TabsContent>\n\n              {/* Transaction History Tab */}\n              <TabsContent value=\"glory\" className=\"space-y-4\" data-testid=\"transactions-tab\">\n                {/* Always show filter */}\n                <div className=\"flex justify-between items-center gap-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <label htmlFor=\"currency-filter\" className=\"text-sm font-medium text-muted-foreground\">Currency:</label>\n                    <Select value={currencyFilter} onValueChange={(value) => setCurrencyFilter(value as \"all\" | \"GLORY\" | \"SOL\" | \"USDC\")}>\n                      <SelectTrigger id=\"currency-filter\" className=\"w-[180px]\" data-testid=\"select-currency-filter\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Currencies</SelectItem>\n                        <SelectItem value=\"GLORY\">GLORY</SelectItem>\n                        <SelectItem value=\"SOL\">SOL</SelectItem>\n                        <SelectItem value=\"USDC\">USDC</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  {gloryHistory.length > 0 && (\n                    <Button\n                      variant=\"destructive\"\n                      onClick={handleClearGloryHistory}\n                      disabled={clearGloryHistoryMutation.isPending}\n                      data-testid=\"button-clear-history\"\n                    >\n                      <Trash2 className=\"w-4 h-4 mr-2\" />\n                      Clear All History\n                    </Button>\n                  )}\n                </div>\n                \n                {gloryHistory.length > 0 ? (\n                  <Card>\n                      <CardContent className=\"p-0\">\n                        {/* Desktop Table View */}\n                        <div className=\"overflow-x-auto hidden md:block\">\n                          <table className=\"w-full\" data-testid=\"glory-history-table\">\n                            <thead className=\"bg-muted\">\n                              <tr>\n                                <th className=\"px-2 md:px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                                  Date\n                                </th>\n                                <th className=\"px-2 md:px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                                  Transaction\n                                </th>\n                                <th className=\"px-2 md:px-6 py-3 text-right text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                                  Amount\n                                </th>\n                              </tr>\n                            </thead>\n                            <tbody className=\"divide-y divide-border\">\n                              {gloryHistory.map((transaction: any, index: number) => {\n                                const date = new Date(transaction.createdAt);\n                                const shortDate = `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear().toString().slice(-2)}`;\n                                \n                                return (\n                                  <tr key={transaction.id} data-testid={`glory-transaction-${index}`}>\n                                    <td className=\"px-2 md:px-6 py-3 whitespace-nowrap text-xs md:text-sm text-muted-foreground\">\n                                      {shortDate}\n                                    </td>\n                                    <td className=\"px-2 md:px-6 py-3\">\n                                      <div className=\"font-medium text-sm md:text-base\" data-testid={`transaction-reason-${index}`}>\n                                        {transaction.reason}\n                                      </div>\n                                      {transaction.contestId && (\n                                        <div className=\"text-muted-foreground text-xs\">\n                                          Contest reward\n                                        </div>\n                                      )}\n                                    </td>\n                                    <td className=\"px-2 md:px-6 py-3 whitespace-nowrap text-right\">\n                                      <span \n                                        className={`font-semibold font-mono text-xs md:text-sm ${transaction.delta > 0 ? \"text-success\" : \"text-destructive\"}`}\n                                        data-testid={`transaction-amount-${index}`}\n                                      >\n                                        {transaction.delta > 0 ? \"+\" : \"\"}{transaction.delta.toLocaleString()} {transaction.currency || \"GLORY\"}\n                                      </span>\n                                    </td>\n                                  </tr>\n                                );\n                              })}\n                            </tbody>\n                          </table>\n                        </div>\n\n                        {/* Mobile Card View */}\n                        <div className=\"md:hidden divide-y divide-border\">\n                          {gloryHistory.map((transaction: any, index: number) => {\n                            const date = new Date(transaction.createdAt);\n                            const shortDate = `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear().toString().slice(-2)}`;\n                            \n                            return (\n                              <div key={transaction.id} className=\"p-4 hover:bg-muted/30 transition-colors\" data-testid={`glory-transaction-card-${index}`}>\n                                <div className=\"flex items-start justify-between mb-2\">\n                                  <div className=\"flex-1\">\n                                    <div className=\"font-medium text-sm mb-1\">\n                                      {transaction.reason}\n                                    </div>\n                                    {transaction.contestId && (\n                                      <div className=\"text-muted-foreground text-xs\">\n                                        Contest reward\n                                      </div>\n                                    )}\n                                  </div>\n                                  <span \n                                    className={`font-semibold font-mono text-sm ${transaction.delta > 0 ? \"text-success\" : \"text-destructive\"}`}\n                                  >\n                                    {transaction.delta > 0 ? \"+\" : \"\"}{transaction.delta.toLocaleString()} {transaction.currency || \"GLORY\"}\n                                  </span>\n                                </div>\n                                <div className=\"text-xs text-muted-foreground\">\n                                  {shortDate}\n                                </div>\n                              </div>\n                            );\n                          })}\n                        </div>\n                      </CardContent>\n                    </Card>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"no-transactions\">\n                    <div className=\"w-24 h-24 mx-auto mb-6 rounded-full bg-muted flex items-center justify-center\">\n                      <Trophy className=\"w-12 h-12 text-muted-foreground\" />\n                    </div>\n                    <h3 className=\"text-xl font-semibold mb-2\">\n                      {currencyFilter === \"all\" ? \"No transactions yet\" : `No ${currencyFilter} transactions yet`}\n                    </h3>\n                    <p className=\"text-muted-foreground\">\n                      Start participating in contests to earn rewards!\n                    </p>\n                  </div>\n                )}\n              </TabsContent>\n\n              {/* Settings Tab */}\n              <TabsContent value=\"settings\" className=\"space-y-6\" data-testid=\"settings-tab\">\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-lg font-semibold mb-4\">Account Information</h3>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <label className=\"text-sm font-medium\">Username</label>\n                        {editingUsername ? (\n                          <div className=\"flex gap-2 mt-2\">\n                            <Input\n                              value={newUsername}\n                              onChange={(e) => setNewUsername(e.target.value)}\n                              placeholder=\"Enter new username\"\n                              data-testid=\"input-new-username\"\n                            />\n                            <Button\n                              size=\"sm\"\n                              onClick={handleSaveUsername}\n                              disabled={updateUsernameMutation.isPending}\n                              data-testid=\"button-save-username\"\n                            >\n                              <Save className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => {\n                                setEditingUsername(false);\n                                setNewUsername(\"\");\n                              }}\n                              data-testid=\"button-cancel-username\"\n                            >\n                              <XIcon className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        ) : (\n                          <div className=\"flex items-center gap-2 mt-2\">\n                            <p className=\"text-muted-foreground\">{user.username}</p>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => {\n                                setEditingUsername(true);\n                                setNewUsername(user.username);\n                              }}\n                              data-testid=\"button-edit-username\"\n                            >\n                              <Edit2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        )}\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium\">Email</label>\n                        <p className=\"text-muted-foreground\">{user.email}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium\">Account Status</label>\n                        <div className=\"mt-1\">\n                          <Badge className={getStatusColor(user.status)}>\n                            {getStatusIcon(user.status)}\n                            <span className=\"ml-1\">{user.status.charAt(0).toUpperCase() + user.status.slice(1)}</span>\n                          </Badge>\n                        </div>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium\">Role</label>\n                        <p className=\"text-muted-foreground capitalize\">{user.role}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium\">Member Since</label>\n                        <p className=\"text-muted-foreground\">{new Date(user.createdAt).toLocaleDateString()}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Wallet Connection */}\n                <WalletConnect />\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-lg font-semibold mb-4\">Withdrawal Address</h3>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      Enter your Solana wallet address where you want to receive withdrawals\n                    </p>\n                    {editingWithdrawalAddress ? (\n                      <div className=\"space-y-4\">\n                        <Input\n                          placeholder=\"Enter Solana wallet address (32-44 characters)\"\n                          value={withdrawalAddress}\n                          onChange={(e) => setWithdrawalAddress(e.target.value)}\n                          data-testid=\"input-withdrawal-address\"\n                        />\n                        <div className=\"flex gap-2\">\n                          <Button\n                            onClick={handleSaveWithdrawalAddress}\n                            disabled={updateWithdrawalAddressMutation.isPending}\n                            data-testid=\"button-save-withdrawal-address\"\n                          >\n                            <Save className=\"w-4 h-4 mr-2\" />\n                            Save Address\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            onClick={() => {\n                              setEditingWithdrawalAddress(false);\n                              setWithdrawalAddress(user?.withdrawalAddress || \"\");\n                            }}\n                            data-testid=\"button-cancel-withdrawal-address\"\n                          >\n                            <XIcon className=\"w-4 h-4 mr-2\" />\n                            Cancel\n                          </Button>\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"flex items-center gap-2\">\n                        {user?.withdrawalAddress ? (\n                          <p className=\"text-muted-foreground font-mono text-sm truncate flex-1\">\n                            {user.withdrawalAddress}\n                          </p>\n                        ) : (\n                          <p className=\"text-muted-foreground italic\">No withdrawal address set</p>\n                        )}\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={() => {\n                            setEditingWithdrawalAddress(true);\n                            setWithdrawalAddress(user?.withdrawalAddress || \"\");\n                          }}\n                          data-testid=\"button-edit-withdrawal-address\"\n                        >\n                          <Edit2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-destructive\">\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-lg font-semibold mb-2 text-destructive\">Danger Zone</h3>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      Once you delete your profile, there is no going back. This will permanently delete your account, submissions, votes, and GLORY balance.\n                    </p>\n                    <Button\n                      variant=\"destructive\"\n                      onClick={handleDeleteProfile}\n                      disabled={deleteProfileMutation.isPending}\n                      data-testid=\"button-delete-profile\"\n                    >\n                      <Trash2 className=\"w-4 h-4 mr-2\" />\n                      Delete Profile\n                    </Button>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </div>\n      </div>\n\n      {/* Edit Submission Modal */}\n      <EditSubmissionModal\n        isOpen={editModalOpen}\n        onClose={() => setEditModalOpen(false)}\n        onSubmit={handleSaveEdit}\n        submission={selectedSubmission || { id: '', title: '', description: '', tags: [] }}\n      />\n\n      {/* Upload Wizard Modal */}\n      <UploadWizardModal\n        isOpen={uploadModalOpen}\n        onClose={() => {\n          setUploadModalOpen(false);\n          queryClient.invalidateQueries({ queryKey: ['/api/me/submissions'] });\n        }}\n      />\n\n      {/* Withdraw Glory Modal */}\n      <Dialog open={withdrawModalOpen} onOpenChange={setWithdrawModalOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <DollarSign className=\"h-5 w-5\" />\n              Cash Out GLORY\n            </DialogTitle>\n            <DialogDescription>\n              Convert your GLORY points to USDC on Solana\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-6 mt-4\">\n            <CashoutRequest />\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":47292},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer min-h-[44px] min-w-[44px] md:min-h-[16px] md:min-w-[16px] h-11 w-11 md:h-4 md:w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-5 w-5 md:h-4 md:w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1144},"client/src/components/CreateContestModal.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { X, Upload, Plus, Minus, Calendar, Trophy, Users, Settings, Eye, FileText, Image as ImageIcon } from 'lucide-react';\n\ninterface CreateContestModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (contestData: any) => void;\n}\n\nexport function CreateContestModal({ isOpen, onClose, onSubmit }: CreateContestModalProps) {\n  const [formData, setFormData] = useState({\n    // Basic fields\n    title: '',\n    description: '',\n    contestType: 'Image',\n    category: '',\n    coverImage: null as File | null,\n    entryFee: false,\n    entryFeeAmount: undefined as number | undefined,\n    entryFeeCurrency: 'GLORY' as 'GLORY' | 'SOL' | 'USDC',\n\n    // Time settings\n    startDateOption: 'later' as 'now' | 'later',\n    startDate: '',\n    startTime: '',\n    endDate: '',\n    endTime: '',\n    \n    // NEW: Submission deadline (optional)\n    submissionDeadline: '',\n    submissionDeadlineTime: '',\n    enableSubmissionDeadline: false,\n    \n    votingStartOption: 'later' as 'now' | 'later',\n    votingStartDate: '',\n    votingEndDate: '',\n    votingEndTime: '',\n\n    // Prizes\n    prizePool: '',\n    currency: 'GLORY',\n    prizeDistribution: [\n      { place: 1, value: 0 },\n      { place: 2, value: 0 },\n      { place: 3, value: 0 }\n    ],\n    additionalRewards: [],\n\n    // Participation rules\n    eligibility: 'all_users',\n    maxSubmissions: 3,\n    allowedMediaTypes: ['Images'],\n    fileSizeLimit: 50,\n    nsfwAllowed: false,\n    agreeToRules: true,\n\n    // Voting\n    votingMethods: ['public'],\n    juryMembers: [] as string[],\n\n    // Voting frequency\n    votesPerUserPerPeriod: 1,\n    periodDurationHours: 24,\n    totalVotesPerUser: 0,\n\n    // Admin settings\n    status: 'draft',\n    featured: false\n  });\n\n  const [errors, setErrors] = useState<string[]>([]);\n  const [coverImagePreview, setCoverImagePreview] = useState<string>('');\n  const [showImageSelector, setShowImageSelector] = useState(false);\n\n  // Fetch approved users for jury selection\n  const { data: approvedUsers = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/users', { status: 'approved' }]\n  });\n\n  const { data: submissions = [] } = useQuery({\n    queryKey: ['/api/submissions', { forGallery: true }],\n    queryFn: async () => {\n      const response = await fetch('/api/submissions', { credentials: 'include' });\n      if (!response.ok) return [];\n      return response.json();\n    },\n    enabled: showImageSelector\n  });\n\n  // Reset form when modal opens\n  useEffect(() => {\n    if (isOpen) {\n      setFormData({\n        title: '',\n        description: '',\n        contestType: 'Image',\n        category: '',\n        coverImage: null,\n        entryFee: false,\n        entryFeeAmount: undefined,\n        entryFeeCurrency: 'GLORY',\n        startDateOption: 'later',\n        startDate: '',\n        startTime: '',\n        endDate: '',\n        endTime: '',\n        submissionDeadline: '',\n        submissionDeadlineTime: '',\n        enableSubmissionDeadline: false,\n        votingStartOption: 'later',\n        votingStartDate: '',\n        votingEndDate: '',\n        votingEndTime: '',\n        prizePool: '',\n        currency: 'GLORY',\n        prizeDistribution: [\n          { place: 1, value: 0 },\n          { place: 2, value: 0 },\n          { place: 3, value: 0 }\n        ],\n        additionalRewards: [],\n        eligibility: 'all_users',\n        maxSubmissions: 3,\n        allowedMediaTypes: ['Images'],\n        fileSizeLimit: 50,\n        nsfwAllowed: false,\n        agreeToRules: true,\n        votingMethods: ['public'],\n        juryMembers: [] as string[],\n        votesPerUserPerPeriod: 1,\n        periodDurationHours: 24,\n        totalVotesPerUser: 0,\n        status: 'draft',\n        featured: false\n      });\n      setCoverImagePreview('');\n      setErrors([]);\n    }\n  }, [isOpen]);\n\n  if (!isOpen) return null;\n\n  const handleInputChange = (field: string, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleCoverImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      handleInputChange('coverImage', file);\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setCoverImagePreview(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleArrayToggle = (field: 'allowedMediaTypes' | 'votingMethods', value: string) => {\n    setFormData(prev => {\n      const currentValue = prev[field];\n      return {\n        ...prev,\n        [field]: currentValue.includes(value)\n          ? currentValue.filter(item => item !== value)\n          : [...currentValue, value]\n      };\n    });\n  };\n\n  const addPrizePlace = () => {\n    setFormData(prev => {\n      const currentDistribution = prev.prizeDistribution || [];\n      return {\n        ...prev,\n        prizeDistribution: [\n          ...currentDistribution,\n          { place: currentDistribution.length + 1, value: 0 }\n        ]\n      };\n    });\n  };\n\n  const removePrizePlace = (index: number) => {\n    const currentDistribution = formData.prizeDistribution || [];\n    if (currentDistribution.length > 1) {\n      setFormData(prev => ({\n        ...prev,\n        prizeDistribution: (prev.prizeDistribution || []).filter((_, i) => i !== index)\n      }));\n    }\n  };\n\n  const updatePrizeValue = (index: number, value: number) => {\n    setFormData(prev => ({\n      ...prev,\n      prizeDistribution: (prev.prizeDistribution || []).map((prize, i) =>\n        i === index ? { ...prize, value } : prize\n      )\n    }));\n  };\n\n  // Unified validation function for all form fields\n  const validateFormData = (dataToValidate: typeof formData): string[] => {\n    const validationErrors: string[] = [];\n    \n    // Validate basic fields\n    if (!dataToValidate.title.trim()) {\n      validationErrors.push('Contest title is required');\n    }\n    if (!dataToValidate.description.trim()) {\n      validationErrors.push('Description is required');\n    }\n    \n    // Validate start date (if not \"now\")\n    if (dataToValidate.startDateOption !== 'now' && !dataToValidate.startDate) {\n      validationErrors.push('Start date is required');\n    }\n    \n    // Validate end date (always required)\n    if (!dataToValidate.votingEndDate) {\n      validationErrors.push('Contest end date is required');\n    }\n    \n    // Validate submission deadline (only if enabled)\n    if (dataToValidate.enableSubmissionDeadline && !dataToValidate.submissionDeadline) {\n      validationErrors.push('Submission deadline is required when enabled');\n    }\n    \n    // Validate voting start date (if not \"now\")\n    if (dataToValidate.votingStartOption !== 'now' && !dataToValidate.votingStartDate) {\n      validationErrors.push('Voting start date is required');\n    }\n    \n    // Chronological validation - only if all required dates are present\n    if (validationErrors.length === 0) {\n      // Build date objects for comparison\n      const startAt = dataToValidate.startDateOption === 'now' \n        ? new Date() \n        : new Date(`${dataToValidate.startDate}T${dataToValidate.startTime || '00:00'}`);\n      \n      const votingEndAt = new Date(\n        `${dataToValidate.votingEndDate}T${dataToValidate.votingEndTime || '23:59'}`\n      );\n      \n      const votingStartAt = dataToValidate.votingStartOption === 'now'\n        ? new Date()\n        : new Date(`${dataToValidate.votingStartDate}T00:00`);\n      \n      // Check: Contest start must be before voting end\n      if (startAt >= votingEndAt) {\n        validationErrors.push('Contest start time must be before voting end time');\n      }\n      \n      // Check: Voting start must be after or equal to contest start\n      if (votingStartAt < startAt) {\n        validationErrors.push('Voting cannot start before the contest starts');\n      }\n      \n      // Check: Voting start must be before voting end\n      if (votingStartAt >= votingEndAt) {\n        validationErrors.push('Voting start time must be before voting end time');\n      }\n      \n      // Check submission deadline if enabled\n      if (dataToValidate.enableSubmissionDeadline && dataToValidate.submissionDeadline) {\n        const submissionEndAt = new Date(\n          `${dataToValidate.submissionDeadline}T${dataToValidate.submissionDeadlineTime || '23:59'}`\n        );\n        \n        // Submission deadline must be after contest start\n        if (submissionEndAt <= startAt) {\n          validationErrors.push('Submission deadline must be after contest start time');\n        }\n        \n        // Submission deadline must be before or equal to voting end\n        if (submissionEndAt > votingEndAt) {\n          validationErrors.push('Submission deadline cannot be after voting end time');\n        }\n      }\n    }\n    \n    return validationErrors;\n  };\n\n  const handleSubmitWithData = async (dataToSubmit: typeof formData) => {\n    \n    // Generate unique slug from title\n    const baseSlug = dataToSubmit.title\n      .toLowerCase()\n      .trim()\n      .replace(/[^a-z0-9]+/g, '-')\n      .replace(/(^-|-$)/g, '');\n    const timestamp = Date.now().toString(36);\n    const slug = `${baseSlug}-${timestamp}`;\n    \n    // Calculate total prize from distribution (with safety check)\n    const totalPrize = (dataToSubmit.prizeDistribution || []).reduce((sum, prize) => sum + prize.value, 0);\n    \n    // Set contest start time\n    let startAt: string;\n    if (dataToSubmit.startDateOption === 'now') {\n      startAt = new Date().toISOString();\n    } else {\n      startAt = new Date(\n        `${dataToSubmit.startDate}T${dataToSubmit.startTime || '00:00'}`\n      ).toISOString();\n    }\n    \n    // Set contest end time (this is also voting end time)\n    const endAt = new Date(\n      `${dataToSubmit.votingEndDate}T${dataToSubmit.votingEndTime || '23:59'}`\n    ).toISOString();\n    \n    // Process submission deadline logic\n    let submissionEndAt: string;\n    if (dataToSubmit.enableSubmissionDeadline && dataToSubmit.submissionDeadline) {\n      // Use custom submission deadline\n      submissionEndAt = new Date(\n        `${dataToSubmit.submissionDeadline}T${dataToSubmit.submissionDeadlineTime || '23:59'}`\n      ).toISOString();\n    } else {\n      // Use contest end date as submission deadline\n      submissionEndAt = endAt;\n    }\n    \n    // Set voting start time\n    let votingStartAt: string;\n    if (dataToSubmit.votingStartOption === 'now') {\n      votingStartAt = new Date().toISOString();\n    } else {\n      votingStartAt = new Date(\n        `${dataToSubmit.votingStartDate}T00:00`\n      ).toISOString();\n    }\n    \n    // Create comprehensive contest config object with ALL settings\n    const contestConfig: any = {\n      // Voting rules\n      votesPerUserPerPeriod: dataToSubmit.votesPerUserPerPeriod,\n      periodDurationHours: dataToSubmit.periodDurationHours,\n      totalVotesPerUser: dataToSubmit.totalVotesPerUser,\n      votingMethods: dataToSubmit.votingMethods,\n      juryMembers: dataToSubmit.juryMembers || [],\n      \n      // Time settings\n      submissionEndAt,\n      votingStartAt,\n      votingEndAt: endAt,\n      \n      // Prize distribution (with safety checks)\n      prizeDistribution: dataToSubmit.prizeDistribution || [],\n      additionalRewards: dataToSubmit.additionalRewards || [],\n      currency: dataToSubmit.currency,\n      \n      // Participation rules\n      eligibility: dataToSubmit.eligibility,\n      maxSubmissions: dataToSubmit.maxSubmissions,\n      allowedMediaTypes: dataToSubmit.allowedMediaTypes,\n      fileSizeLimit: dataToSubmit.fileSizeLimit,\n      nsfwAllowed: dataToSubmit.nsfwAllowed,\n      \n      // Entry fee\n      entryFee: dataToSubmit.entryFee,\n      entryFeeAmount: dataToSubmit.entryFeeAmount,\n      entryFeeCurrency: dataToSubmit.entryFeeCurrency || 'GLORY',\n      \n      // Contest metadata\n      contestType: dataToSubmit.contestType,\n      category: dataToSubmit.category,\n      featured: dataToSubmit.featured\n    };\n    \n    // Create clean form data object for submission\n    const finalFormData = {\n      title: dataToSubmit.title,\n      slug,\n      description: dataToSubmit.description,\n      rules: dataToSubmit.description || 'Standard contest rules apply.',\n      status: dataToSubmit.status,\n      prizeGlory: totalPrize,\n      startAt,\n      endAt,\n      config: contestConfig,\n      coverImageUrl: '' // Will be set after image upload if needed\n    };\n    \n    // If coverImage is a File, upload it first\n    if (dataToSubmit.coverImage && dataToSubmit.coverImage instanceof File) {\n      const uploadFormData = new FormData();\n      uploadFormData.append('file', dataToSubmit.coverImage);\n      \n      try {\n        const response = await fetch('/api/upload', {\n          method: 'POST',\n          credentials: 'include',\n          body: uploadFormData\n        });\n        \n        if (!response.ok) {\n          setErrors(['Failed to upload cover image. Please try again.']);\n          return;\n        }\n        \n        const result = await response.json();\n        finalFormData.coverImageUrl = result.url;\n      } catch (error) {\n        console.error('Failed to upload cover image:', error);\n        setErrors(['Failed to upload cover image. Please check your connection and try again.']);\n        return;\n      }\n    }\n    \n    \n    onSubmit(finalFormData);\n    onClose();\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4 overflow-y-auto\">\n      <div className=\"bg-white dark:bg-slate-900 rounded-2xl max-w-4xl w-full max-h-[95vh] my-4 shadow-2xl flex flex-col\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-slate-200 dark:border-slate-800\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 rounded-lg bg-violet-600/10 text-violet-700 dark:text-violet-300 border border-violet-300/40 dark:border-violet-700/40\">\n              <Trophy className=\"h-6 w-6\" />\n            </div>\n            <h1 className=\"text-2xl font-bold text-slate-900 dark:text-slate-100\">Create New Contest</h1>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"p-2 rounded-full hover:bg-slate-200 dark:hover:bg-slate-800 transition-colors\"\n          >\n            <X size={20} />\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1 overflow-y-auto p-6\">\n          {/* Errors */}\n          {errors.length > 0 && (\n            <div className=\"mb-6 rounded-xl border border-red-300/50 dark:border-red-600/50 bg-red-50 dark:bg-red-950/30 p-4 text-sm text-red-800 dark:text-red-200\">\n              <ul className=\"list-disc ps-5 space-y-1\">\n                {errors.map((error, i) => (\n                  <li key={i}>{error}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n\n          <div className=\"space-y-8\">\n            {/* Basic Information */}\n            <section>\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center gap-2\">\n                <FileText className=\"h-5 w-5 text-violet-600\" />\n                Basic Information\n              </h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"md:col-span-2\">\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Contest Title *\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.title}\n                    onChange={(e) => handleInputChange('title', e.target.value)}\n                    placeholder=\"e.g. Weekly Cyberpunk Challenge\"\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                  />\n                </div>\n\n                <div className=\"md:col-span-2\">\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Description *\n                  </label>\n                  <textarea\n                    value={formData.description}\n                    onChange={(e) => handleInputChange('description', e.target.value)}\n                    rows={4}\n                    placeholder=\"Contest rules, requirements, theme details...\"\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Contest Type\n                  </label>\n                  <select\n                    value={formData.contestType}\n                    onChange={(e) => handleInputChange('contestType', e.target.value)}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                  >\n                    <option value=\"Image\">Image Contest</option>\n                    <option value=\"Video\">Video Contest</option>\n                    <option value=\"GIF\">GIF Contest</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Category / Theme\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.category}\n                    onChange={(e) => handleInputChange('category', e.target.value)}\n                    placeholder=\"e.g. Most Beautiful, Cyberpunk City\"\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                  />\n                </div>\n\n                <div className=\"md:col-span-2\">\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Cover Image\n                  </label>\n                  \n                  {coverImagePreview ? (\n                    <div className=\"relative group\">\n                      <img \n                        src={coverImagePreview} \n                        alt=\"Cover preview\" \n                        className=\"w-full h-48 object-cover rounded-xl\"\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => {\n                          setCoverImagePreview('');\n                          handleInputChange('coverImage', null);\n                        }}\n                        className=\"absolute top-2 right-2 p-2 bg-red-600 text-white rounded-lg opacity-0 group-hover:opacity-100 transition-opacity\"\n                        data-testid=\"button-remove-cover-image\"\n                      >\n                        Remove\n                      </button>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-2\">\n                      <label className=\"block\">\n                        <input\n                          type=\"file\"\n                          accept=\"image/*\"\n                          onChange={handleCoverImageUpload}\n                          className=\"hidden\"\n                          id=\"cover-image-upload\"\n                          data-testid=\"input-cover-image-upload\"\n                        />\n                        <div className=\"border-2 border-dashed border-slate-300 dark:border-slate-700 rounded-xl p-4 text-center hover:border-violet-500 transition-colors cursor-pointer\">\n                          <Upload className=\"h-8 w-8 text-slate-400 mx-auto mb-2\" />\n                          <p className=\"text-sm text-slate-600 dark:text-slate-400\">Click to upload cover image</p>\n                          <p className=\"text-xs text-slate-500 mt-1\">Or choose from options below</p>\n                        </div>\n                      </label>\n                      \n                      <div className=\"grid grid-cols-2 gap-2\">\n                        <button\n                          type=\"button\"\n                          onClick={() => setShowImageSelector(true)}\n                          className=\"px-3 py-2 text-sm rounded-lg border border-slate-300 dark:border-slate-700 hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors\"\n                          data-testid=\"button-choose-from-gallery\"\n                        >\n                          Choose from Gallery\n                        </button>\n                        <button\n                          type=\"button\"\n                          onClick={async () => {\n                            const response = await fetch('/api/submissions', { credentials: 'include' });\n                            if (response.ok) {\n                              const allSubmissions = await response.json();\n                              const topVoted = allSubmissions\n                                .filter((sub: any) => sub.status === 'approved' && sub.type === 'image')\n                                .sort((a: any, b: any) => b.votesCount - a.votesCount)[0];\n                              \n                              if (topVoted) {\n                                setCoverImagePreview(topVoted.mediaUrl);\n                                handleInputChange('coverImage', topVoted.mediaUrl);\n                              }\n                            }\n                          }}\n                          className=\"px-3 py-2 text-sm rounded-lg border border-slate-300 dark:border-slate-700 hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors\"\n                          data-testid=\"button-use-top-voted-image\"\n                        >\n                          Use Top Voted Image\n                        </button>\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"flex items-center\">\n                  <label className=\"flex items-center gap-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.entryFee}\n                      onChange={(e) => handleInputChange('entryFee', e.target.checked)}\n                      className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                    />\n                    <span className=\"text-sm text-slate-800 dark:text-slate-200\">Entry Fee Required</span>\n                  </label>\n                </div>\n\n                {formData.entryFee && (\n                  <div className=\"space-y-3\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                        Entry Fee Currency\n                      </label>\n                      <select\n                        value={formData.entryFeeCurrency}\n                        onChange={(e) => handleInputChange('entryFeeCurrency', e.target.value as 'GLORY' | 'SOL' | 'USDC')}\n                        className=\"w-full px-3 py-2 bg-white dark:bg-slate-800 border border-slate-300 dark:border-slate-700 rounded-lg text-sm text-slate-900 dark:text-slate-100\"\n                        data-testid=\"select-entry-fee-currency\"\n                      >\n                        <option value=\"GLORY\">GLORY</option>\n                        <option value=\"SOL\">SOL</option>\n                        <option value=\"USDC\">USDC</option>\n                      </select>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                        Entry Fee Amount *\n                      </label>\n                      <input\n                        type=\"number\"\n                        min=\"0\"\n                        step=\"0.01\"\n                        value={formData.entryFeeAmount ?? \"\"}\n                        onChange={(e) => handleInputChange('entryFeeAmount', e.target.value ? Number(e.target.value) : undefined)}\n                        placeholder=\"e.g. 5.00\"\n                        className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n            </section>\n\n            {/* Time Settings */}\n            <section>\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center gap-2\">\n                <Calendar className=\"h-5 w-5 text-violet-600\" />\n                Time Settings\n              </h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Contest Start Date *\n                  </label>\n                  <div className=\"mb-2\">\n                    <label className=\"flex items-center gap-2\">\n                      <input\n                        type=\"radio\"\n                        name=\"startDateOption\"\n                        value=\"now\"\n                        checked={formData.startDateOption === 'now'}\n                        onChange={(e) => handleInputChange('startDateOption', e.target.value)}\n                        className=\"h-4 w-4 text-violet-600 focus:ring-violet-500\"\n                      />\n                      <span className=\"text-sm text-slate-800 dark:text-slate-200\">Start Now</span>\n                    </label>\n                  </div>\n                  <div className=\"mb-2\">\n                    <label className=\"flex items-center gap-2\">\n                      <input\n                        type=\"radio\"\n                        name=\"startDateOption\"\n                        value=\"later\"\n                        checked={formData.startDateOption === 'later'}\n                        onChange={(e) => handleInputChange('startDateOption', e.target.value)}\n                        className=\"h-4 w-4 text-violet-600 focus:ring-violet-500\"\n                      />\n                      <span className=\"text-sm text-slate-800 dark:text-slate-200\">Start Later</span>\n                    </label>\n                  </div>\n                  <input\n                    type=\"date\"\n                    value={formData.startDate}\n                    onChange={(e) => handleInputChange('startDate', e.target.value)}\n                    disabled={formData.startDateOption === 'now'}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Contest Start Time\n                  </label>\n                  <input\n                    type=\"time\"\n                    value={formData.startTime}\n                    onChange={(e) => handleInputChange('startTime', e.target.value)}\n                    disabled={formData.startDateOption === 'now'}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Contest End Date *\n                  </label>\n                  <input\n                    type=\"date\"\n                    value={formData.votingEndDate}\n                    onChange={(e) => handleInputChange('votingEndDate', e.target.value)}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                  />\n                  <p className=\"text-xs text-slate-500 mt-1\">This is when both submissions and voting end</p>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Contest End Time\n                  </label>\n                  <input\n                    type=\"time\"\n                    value={formData.votingEndTime}\n                    onChange={(e) => handleInputChange('votingEndTime', e.target.value)}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                  />\n                </div>\n\n                {/* NEW: Submission Deadline Section */}\n                <div className=\"md:col-span-2 border-t border-slate-200 dark:border-slate-800 pt-4\">\n                  <div className=\"flex items-center gap-2 mb-3\">\n                    <label className=\"flex items-center gap-2\">\n                      <input\n                        type=\"checkbox\"\n                        checked={formData.enableSubmissionDeadline}\n                        onChange={(e) => handleInputChange('enableSubmissionDeadline', e.target.checked)}\n                        className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                      />\n                      <span className=\"text-sm font-medium text-slate-800 dark:text-slate-200\">\n                        Set Custom Submission Deadline\n                      </span>\n                    </label>\n                  </div>\n                  \n                  <p className=\"text-xs text-slate-500 mb-3\">\n                    {formData.enableSubmissionDeadline \n                      ? \"Submissions will close at the custom deadline below\" \n                      : \"Submissions will be accepted until the contest ends\"\n                    }\n                  </p>\n\n                  {formData.enableSubmissionDeadline && (\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                          Submission Deadline Date *\n                        </label>\n                        <input\n                          type=\"date\"\n                          value={formData.submissionDeadline}\n                          onChange={(e) => handleInputChange('submissionDeadline', e.target.value)}\n                          className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                        />\n                      </div>\n\n                      <div>\n                        <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                          Submission Deadline Time\n                        </label>\n                        <input\n                          type=\"time\"\n                          value={formData.submissionDeadlineTime}\n                          onChange={(e) => handleInputChange('submissionDeadlineTime', e.target.value)}\n                          className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                        />\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Voting Start Date *\n                  </label>\n                  <div className=\"mb-2\">\n                    <label className=\"flex items-center gap-2\">\n                      <input\n                        type=\"radio\"\n                        name=\"votingStartOption\"\n                        value=\"now\"\n                        checked={formData.votingStartOption === 'now'}\n                        onChange={(e) => handleInputChange('votingStartOption', e.target.value)}\n                        className=\"h-4 w-4 text-violet-600 focus:ring-violet-500\"\n                      />\n                      <span className=\"text-sm text-slate-800 dark:text-slate-200\">Start Voting Now</span>\n                    </label>\n                  </div>\n                  <div className=\"mb-2\">\n                    <label className=\"flex items-center gap-2\">\n                      <input\n                        type=\"radio\"\n                        name=\"votingStartOption\"\n                        value=\"later\"\n                        checked={formData.votingStartOption === 'later'}\n                        onChange={(e) => handleInputChange('votingStartOption', e.target.value)}\n                        className=\"h-4 w-4 text-violet-600 focus:ring-violet-500\"\n                      />\n                      <span className=\"text-sm text-slate-800 dark:text-slate-200\">Start Voting Later</span>\n                    </label>\n                  </div>\n                  <input\n                    type=\"date\"\n                    value={formData.votingStartDate}\n                    onChange={(e) => handleInputChange('votingStartDate', e.target.value)}\n                    disabled={formData.votingStartOption === 'now'}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                  />\n                  <p className=\"text-xs text-slate-500 mt-1\">Voting ends when the contest ends</p>\n                </div>\n              </div>\n            </section>\n\n            {/* Prizes */}\n            <section>\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center gap-2\">\n                <Trophy className=\"h-5 w-5 text-violet-600\" />\n                Prizes\n              </h3>\n\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                      Prize Pool *\n                    </label>\n                    <input\n                      type=\"number\"\n                      value={formData.prizePool}\n                      onChange={(e) => handleInputChange('prizePool', e.target.value)}\n                      placeholder=\"10000\"\n                      className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                      Currency\n                    </label>\n                    <select\n                      value={formData.currency}\n                      onChange={(e) => handleInputChange('currency', e.target.value)}\n                      className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    >\n                      <option value=\"GLORY\">$GLORY</option>\n                      <option value=\"USD\">USD</option>\n                      <option value=\"ETH\">ETH</option>\n                    </select>\n                  </div>\n                </div>\n\n\n                <div>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <label className=\"text-sm font-medium text-slate-800 dark:text-slate-200\">\n                      Prize Distribution\n                    </label>\n                    <button\n                      type=\"button\"\n                      onClick={addPrizePlace}\n                      className=\"flex items-center gap-1 text-xs px-2 py-1 rounded-lg bg-violet-600/10 text-violet-700 hover:bg-violet-600/20\"\n                    >\n                      <Plus className=\"h-3 w-3\" />\n                      Add Place\n                    </button>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    {(formData.prizeDistribution || []).map((prize, index) => (\n                      <div key={index} className=\"flex items-center gap-2\">\n                        <span className=\"text-sm font-medium text-slate-700 dark:text-slate-200 w-16\">\n                          {prize.place}. place\n                        </span>\n                        <input\n                          type=\"number\"\n                          value={prize.value}\n                          onChange={(e) => updatePrizeValue(index, parseInt(e.target.value) || 0)}\n                          className=\"flex-1 rounded-lg border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-1 text-sm outline-none focus:ring-2 focus:ring-violet-500\"\n                          min=\"0\"\n                        />\n                        <span className=\"text-sm text-slate-500\">\n                          {formData.currency}\n                        </span>\n                        {(formData.prizeDistribution || []).length > 1 && (\n                          <button\n                            type=\"button\"\n                            onClick={() => removePrizePlace(index)}\n                            className=\"p-1 rounded text-red-600 hover:bg-red-50 dark:hover:bg-red-950/30\"\n                          >\n                            <Minus className=\"h-4 w-4\" />\n                          </button>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n\n                  <div className=\"text-xs text-slate-500 mt-1\">\n                    Total: {(formData.prizeDistribution || []).reduce((sum, prize) => sum + prize.value, 0)}\n                    {` ${formData.currency}`}\n                  </div>\n                </div>\n              </div>\n            </section>\n\n            {/* Participation Rules */}\n            <section>\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center gap-2\">\n                <Users className=\"h-5 w-5 text-violet-600\" />\n                Participation Rules\n              </h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Eligibility\n                  </label>\n                  <select\n                    value={formData.eligibility}\n                    onChange={(e) => handleInputChange('eligibility', e.target.value)}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                  >\n                    <option value=\"all_users\">All Users</option>\n                    <option value=\"token_holders\">Token Holders Only</option>\n                    <option value=\"verified_users\">Verified Users Only</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Max Submissions per User\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={formData.maxSubmissions}\n                    onChange={(e) => handleInputChange('maxSubmissions', parseInt(e.target.value) || 1)}\n                    min=\"1\"\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    File Size Limit (MB)\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={formData.fileSizeLimit}\n                    onChange={(e) => handleInputChange('fileSizeLimit', parseInt(e.target.value) || 50)}\n                    min=\"1\"\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200\">\n                    Allowed Media Types\n                  </label>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {['Images', 'Videos', 'GIFs'].map((type) => (\n                      <label key={type} className=\"flex items-center gap-2\">\n                        <input\n                          type=\"checkbox\"\n                          checked={formData.allowedMediaTypes.includes(type)}\n                          onChange={() => handleArrayToggle('allowedMediaTypes', type)}\n                          className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                        />\n                        <span className=\"text-sm text-slate-800 dark:text-slate-200\">{type}</span>\n                      </label>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"md:col-span-2 space-y-2\">\n                  <label className=\"flex items-center gap-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.nsfwAllowed}\n                      onChange={(e) => handleInputChange('nsfwAllowed', e.target.checked)}\n                      className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                    />\n                    <span className=\"text-sm text-slate-800 dark:text-slate-200\">NSFW Content Allowed</span>\n                  </label>\n                </div>\n              </div>\n            </section>\n\n            {/* Voting */}\n            <section>\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center gap-2\">\n                <Eye className=\"h-5 w-5 text-violet-600\" />\n                Voting Settings\n              </h3>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Voting Methods\n                  </label>\n                  <div className=\"space-y-2\">\n                    {[\n                      { value: 'public', label: 'Public Voting' },\n                      { value: 'logged_users', label: 'Logged Users Only' },\n                      { value: 'jury', label: 'Jury Voting' }\n                    ].map((method) => (\n                      <label key={method.value} className=\"flex items-center gap-2\">\n                        <input\n                          type=\"checkbox\"\n                          checked={formData.votingMethods.includes(method.value)}\n                          onChange={() => handleArrayToggle('votingMethods', method.value)}\n                          className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                        />\n                        <span className=\"text-sm text-slate-800 dark:text-slate-200\">{method.label}</span>\n                      </label>\n                    ))}\n                  </div>\n                  <p className=\"text-xs text-slate-500 mt-1\">\n                    Select one or more voting methods. Multiple methods can run simultaneously.\n                  </p>\n                </div>\n\n                {/* Jury Members Selection - shown only when jury voting is enabled */}\n                {formData.votingMethods.includes('jury') && (\n                  <div className=\"border-t border-slate-200 dark:border-slate-800 pt-4\">\n                    <h4 className=\"text-md font-medium text-slate-800 dark:text-slate-200 mb-2\">\n                      Jury Members\n                    </h4>\n                    <p className=\"text-xs text-slate-500 mb-3\">\n                      Select users who can vote as jury members. {formData.votingMethods.length === 1 ? 'Only jury members can vote.' : 'Jury members can vote alongside public voters.'}\n                    </p>\n                    \n                    {approvedUsers.length === 0 ? (\n                      <p className=\"text-sm text-slate-500 italic\">No approved users available for jury selection.</p>\n                    ) : (\n                      <div className=\"max-h-48 overflow-y-auto border border-slate-300/60 dark:border-slate-700/60 rounded-xl p-3 space-y-2\">\n                        {approvedUsers.map((user: any) => (\n                          <label key={user.id} className=\"flex items-center gap-2 hover:bg-slate-100 dark:hover:bg-slate-800 p-2 rounded-lg cursor-pointer\">\n                            <input\n                              type=\"checkbox\"\n                              checked={formData.juryMembers.includes(user.id)}\n                              onChange={(e) => {\n                                if (e.target.checked) {\n                                  handleInputChange('juryMembers', [...formData.juryMembers, user.id]);\n                                } else {\n                                  handleInputChange('juryMembers', formData.juryMembers.filter(id => id !== user.id));\n                                }\n                              }}\n                              className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                              data-testid={`checkbox-jury-${user.id}`}\n                            />\n                            <span className=\"text-sm text-slate-800 dark:text-slate-200\">{user.username}</span>\n                            <span className=\"text-xs text-slate-500\">({user.email})</span>\n                          </label>\n                        ))}\n                      </div>\n                    )}\n                    \n                    {formData.juryMembers.length > 0 && (\n                      <p className=\"text-xs text-slate-600 dark:text-slate-400 mt-2\">\n                        Selected: {formData.juryMembers.length} jury member(s)\n                      </p>\n                    )}\n                  </div>\n                )}\n\n                <div className=\"border-t border-slate-200 dark:border-slate-800 pt-4\">\n                  <h4 className=\"text-md font-medium text-slate-800 dark:text-slate-200 mb-3\">Voting Frequency</h4>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                        Votes per user per period\n                      </label>\n                      <input\n                        type=\"number\"\n                        value={formData.votesPerUserPerPeriod}\n                        onChange={(e) => handleInputChange('votesPerUserPerPeriod', parseInt(e.target.value) || 1)}\n                        min=\"1\"\n                        className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                      />\n                      <p className=\"text-xs text-slate-500 mt-1\">How many votes per time period</p>\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                        Period duration (hours)\n                      </label>\n                      <input\n                        type=\"number\"\n                        value={formData.periodDurationHours}\n                        onChange={(e) => handleInputChange('periodDurationHours', parseInt(e.target.value) || 24)}\n                        min=\"1\"\n                        max=\"168\"\n                        className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                      />\n                      <p className=\"text-xs text-slate-500 mt-1\">Time period in hours (max 168)</p>\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                        Total votes per user\n                      </label>\n                      <input\n                        type=\"number\"\n                        value={formData.totalVotesPerUser}\n                        onChange={(e) => handleInputChange('totalVotesPerUser', parseInt(e.target.value) || 0)}\n                        min=\"0\"\n                        className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                      />\n                      <p className=\"text-xs text-slate-500 mt-1\">\n                        {formData.totalVotesPerUser === 0 ? 'Unlimited votes during contest' : `Max ${formData.totalVotesPerUser} votes total`}\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"mt-3 p-3 rounded-lg bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-800\">\n                    <p className=\"text-sm text-blue-800 dark:text-blue-200\">\n                      <strong>Example:</strong> With current settings, each user can vote{' '}\n                      <span className=\"font-semibold\">{formData.votesPerUserPerPeriod} time(s)</span> every{' '}\n                      <span className=\"font-semibold\">{formData.periodDurationHours} hour(s)</span>\n                      {formData.totalVotesPerUser > 0 && (\n                        <>, with a maximum of <span className=\"font-semibold\">{formData.totalVotesPerUser} total votes</span> during the entire contest</>\n                      )}\n                      {formData.totalVotesPerUser === 0 && (\n                        <>, with <span className=\"font-semibold\">unlimited total votes</span> during the contest</>\n                      )}\n                      .\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </section>\n\n            {/* Admin Settings */}\n            <section>\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center gap-2\">\n                <Settings className=\"h-5 w-5 text-violet-600\" />\n                Admin Settings\n              </h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Contest Status\n                  </label>\n                  <select\n                    value={formData.status}\n                    onChange={(e) => handleInputChange('status', e.target.value)}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    data-testid=\"select-contest-status\"\n                  >\n                    <option value=\"draft\">Draft - Awaiting Activation</option>\n                    <option value=\"active\">Publish - Active Immediately</option>\n                    <option value=\"archived\">Archive - Hide Contest</option>\n                  </select>\n                  <p className=\"text-xs text-slate-500 mt-1\">\n                    {formData.status === 'draft' && 'Contest will be saved as draft and require admin approval'}\n                    {formData.status === 'active' && 'Contest will be published and active immediately'}\n                    {formData.status === 'archived' && 'Contest will be archived and hidden from users'}\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label className=\"flex items-center gap-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.featured}\n                      onChange={(e) => handleInputChange('featured', e.target.checked)}\n                      className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                    />\n                    <span className=\"text-sm text-slate-800 dark:text-slate-200\">Featured Contest</span>\n                  </label>\n                </div>\n              </div>\n            </section>\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"flex items-center justify-between gap-3 p-6 border-t border-slate-200 dark:border-slate-800\">\n          <button\n            onClick={onClose}\n            className=\"px-6 py-2 rounded-xl border border-slate-300/60 dark:border-slate-700/60 text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors\"\n          >\n            Cancel\n          </button>\n\n          <button\n            onClick={async () => {\n              const draftData = { ...formData, status: 'draft' };\n              \n              // Use unified validation function\n              const validationErrors = validateFormData(draftData);\n              \n              setErrors(validationErrors);\n              \n              if (validationErrors.length === 0) {\n                await handleSubmitWithData(draftData);\n              }\n            }}\n            className=\"px-6 py-2 rounded-xl bg-violet-600 text-white hover:bg-violet-700 transition-colors font-semibold\"\n            data-testid=\"button-create-contest\"\n          >\n            Create Contest\n          </button>\n        </div>\n      </div>\n\n      {/* Image Gallery Selector Modal */}\n      {showImageSelector && (\n        <div className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-[60] flex items-center justify-center p-4\">\n          <div className=\"bg-white dark:bg-slate-900 rounded-2xl max-w-6xl w-full max-h-[80vh] shadow-2xl flex flex-col\">\n            <div className=\"flex items-center justify-between p-6 border-b border-slate-200 dark:border-slate-800\">\n              <div className=\"flex items-center gap-3\">\n                <ImageIcon className=\"h-6 w-6 text-violet-600\" />\n                <h2 className=\"text-xl font-bold text-slate-900 dark:text-slate-100\">Select Cover Image</h2>\n              </div>\n              <button\n                onClick={() => setShowImageSelector(false)}\n                className=\"p-2 rounded-full hover:bg-slate-200 dark:hover:bg-slate-800 transition-colors\"\n                data-testid=\"button-close-gallery-modal\"\n              >\n                <X size={20} />\n              </button>\n            </div>\n\n            <div className=\"flex-1 overflow-y-auto p-6\">\n              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n                {submissions\n                  .filter((sub: any) => sub.status === 'approved' && sub.type === 'image')\n                  .map((submission: any) => (\n                    <button\n                      key={submission.id}\n                      type=\"button\"\n                      onClick={() => {\n                        setCoverImagePreview(submission.mediaUrl);\n                        handleInputChange('coverImage', submission.mediaUrl);\n                        setShowImageSelector(false);\n                      }}\n                      className=\"group relative aspect-square rounded-xl overflow-hidden border-2 border-transparent hover:border-violet-500 transition-all\"\n                      data-testid={`button-gallery-image-${submission.id}`}\n                    >\n                      <img\n                        src={submission.mediaUrl}\n                        alt={submission.title}\n                        className=\"w-full h-full object-cover\"\n                      />\n                      <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\">\n                        <div className=\"absolute bottom-0 left-0 right-0 p-3\">\n                          <p className=\"text-white text-sm font-medium truncate\">{submission.title}</p>\n                          <p className=\"text-white/80 text-xs\">{submission.votesCount} votes</p>\n                        </div>\n                      </div>\n                    </button>\n                  ))}\n              </div>\n\n              {submissions.filter((sub: any) => sub.status === 'approved' && sub.type === 'image').length === 0 && (\n                <div className=\"text-center py-12\">\n                  <ImageIcon className=\"h-16 w-16 text-slate-400 mx-auto mb-4\" />\n                  <p className=\"text-slate-600 dark:text-slate-400\">No approved images available</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":58204},"server/middleware/rate-limit.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport { storage } from \"../storage\";\n\n// In-memory rate limiting (would use Redis in production)\nconst voteLimits = new Map<string, { count: number; resetTime: number }>();\n\nconst VOTE_LIMIT = 30; // Max votes per hour\nconst WINDOW_MS = 60 * 60 * 1000; // 1 hour\n\nexport const rateLimiter = async (req: Request, res: Response, next: NextFunction) => {\n  if (!req.userId) {\n    return next(); // Auth middleware will handle this\n  }\n\n  try {\n    const now = Date.now();\n    const windowStart = new Date(now - WINDOW_MS);\n    \n    // Check database for actual votes in the time window\n    const recentVotes = await storage.getUserVotesInTimeWindow(req.userId, windowStart);\n    \n    if (recentVotes >= VOTE_LIMIT) {\n      return res.status(429).json({ \n        error: \"Rate limit exceeded. Maximum 30 votes per hour.\", \n        code: \"RATE_LIMIT_EXCEEDED\" \n      });\n    }\n\n    next();\n  } catch (error) {\n    console.error(\"Rate limiter error:\", error);\n    // Continue on error to avoid blocking legitimate requests\n    next();\n  }\n};\n","size_bytes":1095},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/pages/home.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { SubmissionCard } from \"@/components/submission-card\";\nimport { ContestLightboxModal } from \"@/components/ContestLightboxModal\";\nimport { GlassButton } from \"@/components/GlassButton\";\nimport { Trophy, Upload, ArrowRight, Users, Image as ImageIcon, Clock, Play } from \"lucide-react\";\nimport { useAuth, isAuthenticated, isApproved } from \"@/lib/auth\";\nimport { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Home() {\n  const { data: user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [page, setPage] = useState(1);\n  const [allSubmissions, setAllSubmissions] = useState<any[]>([]);\n  const [hasMore, setHasMore] = useState(true);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [selectedSubmission, setSelectedSubmission] = useState<any>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [mediaFilter, setMediaFilter] = useState<'all' | 'images' | 'videos'>('all');\n\n  // Clear submissions cache on mount to ensure fresh data\n  useEffect(() => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n    queryClient.removeQueries({ queryKey: [\"/api/submissions\"] }); // Force remove cache\n    setAllSubmissions([]);\n    setPage(1);\n  }, [queryClient]);\n\n  const { data: contests = [] } = useQuery({\n    queryKey: [\"/api/contests\", { status: \"active\" }],\n    queryFn: async () => {\n      const response = await fetch(\"/api/contests?status=active\");\n      if (!response.ok) throw new Error(\"Failed to fetch contests\");\n      return response.json();\n    },\n  });\n\n  const { data: submissions = [], isLoading } = useQuery({\n    queryKey: [\"/api/submissions\", page],\n    queryFn: async () => {\n      const response = await fetch(`/api/submissions?status=approved&page=${page}&limit=8`);\n      if (!response.ok) throw new Error(\"Failed to fetch submissions\");\n      return response.json();\n    },\n  });\n\n  // Update submissions when new data arrives\n  useEffect(() => {\n    if (submissions && submissions.length > 0) {\n      if (page === 1) {\n        setAllSubmissions(submissions);\n      } else {\n        setAllSubmissions(prev => [...prev, ...submissions]);\n      }\n      setHasMore(submissions.length === 8); // If we got less than 8, no more pages\n      setIsLoadingMore(false);\n    } else if (submissions && submissions.length === 0 && page > 1) {\n      // No more submissions available\n      setHasMore(false);\n      setIsLoadingMore(false);\n    }\n  }, [submissions, page]);\n\n  // Infinite scroll logic\n  const handleScroll = useCallback(() => {\n    if (isLoadingMore || !hasMore || allSubmissions.length < 8) return; // Don't scroll if less than 8 items\n    \n    const scrollTop = document.documentElement.scrollTop;\n    const scrollHeight = document.documentElement.scrollHeight;\n    const clientHeight = document.documentElement.clientHeight;\n    \n    if (scrollTop + clientHeight >= scrollHeight - 500) { // Reduced threshold to 500px\n      setIsLoadingMore(true);\n      setPage(prev => prev + 1);\n    }\n  }, [isLoadingMore, hasMore, allSubmissions.length]);\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [handleScroll]);\n\n  // Vote mutation for modal\n  const voteMutation = useMutation({\n    mutationFn: async (submissionId: string) => {\n      const response = await apiRequest(\"POST\", \"/api/votes\", {\n        submissionId,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      toast({\n        title: \"Vote recorded!\",\n        description: \"Your vote has been counted successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to vote. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handle voting from modal\n  const handleVoteFromModal = (submissionId: string) => {\n    if (!isAuthenticated(user)) {\n      toast({\n        title: \"Authentication required\",\n        description: \"Please log in to vote on submissions.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!isApproved(user)) {\n      toast({\n        title: \"Account approval required\",\n        description: \"Your account must be approved to vote.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (user.id === selectedSubmission?.user?.id) {\n      toast({\n        title: \"Cannot vote\",\n        description: \"You cannot vote on your own submission.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    voteMutation.mutate(submissionId);\n  };\n\n  // Handle sharing from modal\n  const handleShareFromModal = () => {\n    if (selectedSubmission) {\n      const shareUrl = `${window.location.origin}/submission/${selectedSubmission.id}`;\n      \n      if (navigator.share) {\n        navigator.share({\n          title: selectedSubmission.title,\n          text: `Check out this amazing submission: ${selectedSubmission.title}`,\n          url: shareUrl,\n        }).catch(() => {\n          fallbackShare(shareUrl);\n        });\n      } else {\n        fallbackShare(shareUrl);\n      }\n    }\n  };\n\n  // Fallback share functionality\n  const fallbackShare = (url: string) => {\n    navigator.clipboard.writeText(url).then(() => {\n      toast({\n        title: \"Link copied!\",\n        description: \"Submission link has been copied to clipboard.\",\n      });\n    }).catch(() => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy link to clipboard.\",\n        variant: \"destructive\",\n      });\n    });\n  };\n\n  // Handle opening submission modal\n  const handleOpenSubmissionModal = (submission: any) => {\n    setSelectedSubmission(submission);\n    setIsModalOpen(true);\n  };\n\n  // Handle closing submission modal\n  const handleCloseSubmissionModal = () => {\n    setIsModalOpen(false);\n    setSelectedSubmission(null);\n  };\n\n  const featuredContest = contests[0];\n\n  // Filter submissions by media type (always sorted by newest)\n  const filteredSubmissions = useMemo(() => {\n    let filtered = [...allSubmissions];\n\n    // Apply media filter\n    if (mediaFilter === 'images') {\n      filtered = filtered.filter((sub: any) => \n        sub.mediaUrl?.match(/\\.(jpg|jpeg|png|gif|webp)$/i)\n      );\n    } else if (mediaFilter === 'videos') {\n      filtered = filtered.filter((sub: any) => \n        sub.mediaUrl?.match(/\\.(mp4|webm|mov)$/i)\n      );\n    }\n\n    // Always sort by newest (already sorted from API, but ensure consistency)\n    filtered.sort((a: any, b: any) => \n      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    );\n\n    return filtered;\n  }, [allSubmissions, mediaFilter]);\n\n  return (\n    <div className=\"min-h-screen pb-32 md:pb-0\" data-testid=\"home-page\">\n      {/* Hero Section */}\n      <section className=\"relative overflow-hidden py-10 md:py-20 border-b border-border\">\n        <div className=\"absolute inset-0 opacity-10\">\n          <div className=\"absolute top-0 left-1/4 w-96 h-96 bg-primary rounded-full blur-3xl\"></div>\n          <div className=\"absolute bottom-0 right-1/4 w-96 h-96 bg-purple-600 rounded-full blur-3xl\"></div>\n        </div>\n        {/* Background Image Placeholder - uncomment and add your image here */}\n        {/* <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\" aria-hidden=\"true\">\n          <img \n            src={yourImagePath} \n            alt=\"\" \n            className=\"w-64 h-64 md:w-96 md:h-96 opacity-5 select-none\"\n          />\n        </div> */}\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center max-w-3xl mx-auto\">\n            <h1 className=\"text-4xl sm:text-5xl md:text-6xl font-black tracking-tight mb-4 md:mb-6 leading-tight gradient-text\" data-testid=\"hero-title\">\n              Compete, Create, <br/>\n              Win GLORY\n            </h1>\n            <p className=\"text-lg sm:text-xl text-muted-foreground mb-6 md:mb-8\" data-testid=\"hero-description\">\n              Join creative contests, showcase your talent, and win rewards. Top 5 submissions win GLORY rewards.\n            </p>\n            <div className=\"flex flex-col sm:flex-row items-center justify-center gap-4\">\n              <Link href=\"/contests\" data-testid=\"hero-button-contests\">\n                <GlassButton className=\"text-lg px-8 py-3\">\n                  Browse Contests\n                </GlassButton>\n              </Link>\n              {isAuthenticated(user) ? (\n                <Link href=\"/upload\" data-testid=\"hero-button-upload\">\n                  <GlassButton className=\"text-lg px-8 py-3\">\n                    Submit Your Art\n                  </GlassButton>\n                </Link>\n              ) : (\n                <Link href=\"/register\" data-testid=\"hero-button-register\">\n                  <Button size=\"lg\" variant=\"outline\" className=\"text-lg px-8 py-3\">\n                    Join Now\n                  </Button>\n                </Link>\n              )}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Latest Submissions */}\n      <section className=\"py-8 md:py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-6 md:mb-8 gap-4\">\n            <div>\n              <h2 className=\"text-2xl md:text-3xl font-bold tracking-tight mb-1 md:mb-2\" data-testid=\"submissions-section-title\">\n                Latest Submissions\n              </h2>\n              <p className=\"text-sm md:text-base text-muted-foreground\">Discover amazing work from our community</p>\n            </div>\n            \n            {/* Media Type Filter */}\n            <div className=\"flex items-center gap-2\">\n              <Button \n                variant={mediaFilter === 'all' ? 'default' : 'ghost'} \n                size=\"sm\" \n                onClick={() => setMediaFilter('all')}\n                className=\"text-xs sm:text-sm\"\n                data-testid=\"filter-all\"\n              >\n                All\n              </Button>\n              <Button \n                variant={mediaFilter === 'images' ? 'default' : 'ghost'} \n                size=\"sm\" \n                onClick={() => setMediaFilter('images')}\n                className=\"text-xs sm:text-sm\"\n                data-testid=\"filter-images\"\n              >\n                <ImageIcon className=\"w-3 h-3 sm:w-4 sm:h-4 sm:mr-1\" />\n                <span className=\"hidden sm:inline\">Images</span>\n              </Button>\n              <Button \n                variant={mediaFilter === 'videos' ? 'default' : 'ghost'} \n                size=\"sm\" \n                onClick={() => setMediaFilter('videos')}\n                className=\"text-xs sm:text-sm\"\n                data-testid=\"filter-videos\"\n              >\n                <Play className=\"w-3 h-3 sm:w-4 sm:h-4 sm:mr-1\" />\n                <span className=\"hidden sm:inline\">Videos</span>\n              </Button>\n            </div>\n          </div>\n\n          {filteredSubmissions.length > 0 ? (\n            <>\n              <div className=\"masonry-grid\" data-testid=\"submissions-grid\">\n                {filteredSubmissions.map((submission: any) => (\n                  <SubmissionCard \n                    key={submission.id}\n                    submission={submission}\n                    showVoting={true}\n                    onExpand={() => handleOpenSubmissionModal(submission)}\n                  />\n                ))}\n              </div>\n              \n              {/* Loading indicator for infinite scroll */}\n              {isLoadingMore && (\n                <div className=\"mt-8 text-center\">\n                  <div className=\"inline-flex items-center px-4 py-2 text-sm text-muted-foreground\">\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary mr-2\"></div>\n                    Loading more submissions...\n                  </div>\n                </div>\n              )}\n              \n              {/* End of content indicator */}\n              {!hasMore && filteredSubmissions.length > 0 && allSubmissions.length < 8 && (\n                <div className=\"mt-8 text-center\">\n                  <p className=\"text-sm text-muted-foreground\">All submissions loaded 📚</p>\n                </div>\n              )}\n              \n              {!hasMore && filteredSubmissions.length > 0 && allSubmissions.length >= 8 && (\n                <div className=\"mt-8 text-center\">\n                  <p className=\"text-sm text-muted-foreground\">You've reached the end! 🎉</p>\n                </div>\n              )}\n            </>\n          ) : isLoading ? (\n            <div className=\"text-center py-12\">\n              <div className=\"inline-flex items-center px-4 py-2 text-sm text-muted-foreground\">\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary mr-2\"></div>\n                Loading submissions...\n              </div>\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <div className=\"w-24 h-24 mx-auto mb-6 rounded-full bg-muted flex items-center justify-center\">\n                <ImageIcon className=\"w-12 h-12 text-muted-foreground\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">No submissions yet</h3>\n              <p className=\"text-muted-foreground mb-6\">Be the first to submit your creative work!</p>\n              {isAuthenticated(user) && (\n                <Link href=\"/upload\" data-testid=\"empty-state-upload-link\">\n                  <GlassButton>\n                    Submit Your Art\n                    <Upload className=\"ml-2 w-4 h-4\" />\n                  </GlassButton>\n                </Link>\n              )}\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Submission Lightbox Modal */}\n      {isModalOpen && selectedSubmission && (\n        <ContestLightboxModal\n          isOpen={isModalOpen}\n          submission={selectedSubmission}\n          onClose={handleCloseSubmissionModal}\n          onVote={handleVoteFromModal}\n          onShare={handleShareFromModal}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":14707},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type Contest, \n  type InsertContest,\n  type Submission,\n  type InsertSubmission,\n  type Vote,\n  type InsertVote,\n  type GloryLedger,\n  type InsertGloryLedger,\n  type AuditLog,\n  type InsertAuditLog,\n  type UserWallet,\n  type InsertUserWallet,\n  type CashoutRequest,\n  type InsertCashoutRequest,\n  type CashoutRequestWithRelations,\n  type CashoutEvent,\n  type InsertCashoutEvent,\n  type SiteSettings,\n  type InsertSiteSettings,\n  type SubmissionWithUser,\n  type ContestWithStats,\n  type UserWithStats,\n  users,\n  contests,\n  submissions,\n  votes,\n  gloryLedger,\n  auditLog,\n  userWallets,\n  cashoutRequests,\n  cashoutEvents,\n  siteSettings\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport bcrypt from \"bcrypt\";\nimport { db } from \"./db\";\nimport { eq, and, desc, sql, count, countDistinct, sum, inArray } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  updateWithdrawalAddress(userId: string, address: string): Promise<User | undefined>;\n  deleteUser(id: string): Promise<void>;\n  getUsersWithFilters(filters: { status?: string; role?: string }): Promise<UserWithStats[]>;\n  getUsersByIds(ids: string[]): Promise<User[]>;\n  bulkDeleteUsers(ids: string[]): Promise<number>;\n  \n  // Contests\n  getContest(id: string): Promise<Contest | undefined>;\n  getContestBySlug(slug: string): Promise<Contest | undefined>;\n  getContests(filters?: { status?: string }): Promise<ContestWithStats[]>;\n  createContest(contest: InsertContest): Promise<Contest>;\n  updateContest(id: string, updates: Partial<Contest>): Promise<Contest | undefined>;\n  deleteContest(id: string): Promise<boolean>;\n  \n  // Submissions\n  getSubmission(id: string): Promise<Submission | undefined>;\n  getSubmissions(filters: { contestId?: string; userId?: string; status?: string; page?: number; limit?: number }): Promise<SubmissionWithUser[]>;\n  createSubmission(submission: InsertSubmission): Promise<Submission>;\n  updateSubmission(id: string, updates: Partial<Submission>): Promise<Submission | undefined>;\n  deleteSubmission(id: string): Promise<boolean>;\n  getTopSubmissionsByContest(contestId: string, limit?: number): Promise<SubmissionWithUser[]>;\n  getUserSubmissionsInContest(userId: string, contestId: string): Promise<number>;\n  \n  // Votes\n  getVote(userId: string, submissionId: string): Promise<Vote | undefined>;\n  createVote(vote: InsertVote): Promise<Vote>;\n  getVoteCountByUser(userId: string, since: Date): Promise<number>;\n  getVoteCountForSubmissionInPeriod(userId: string, submissionId: string, since: Date): Promise<number>;\n  getUserTotalVotesInContest(userId: string, contestId: string): Promise<number>;\n  \n  // Glory Ledger (now handles all currencies)\n  createGloryTransaction(transaction: InsertGloryLedger): Promise<GloryLedger>;\n  getGloryTransactions(userId: string, currency?: string): Promise<GloryLedger[]>;\n  getGloryTransactionByHash(txHash: string): Promise<GloryLedger | undefined>;\n  clearGloryTransactions(userId: string): Promise<void>;\n  updateUserBalance(userId: string, delta: number, currency: string): Promise<void>;\n  \n  // Audit Log\n  createAuditLog(log: InsertAuditLog): Promise<AuditLog>;\n  getAuditLogs(limit?: number): Promise<AuditLog[]>;\n  clearAuditLogs(): Promise<void>;\n  \n  // Contest distribution\n  distributeContestRewards(contestId: string): Promise<void>;\n  \n  // User Wallets\n  getUserWallet(userId: string): Promise<UserWallet | undefined>;\n  getUserWalletByAddress(address: string): Promise<UserWallet | undefined>;\n  createUserWallet(wallet: InsertUserWallet): Promise<UserWallet>;\n  updateUserWallet(id: string, updates: Partial<UserWallet>): Promise<UserWallet | undefined>;\n  \n  // Cashout Requests\n  getCashoutRequest(id: string): Promise<CashoutRequest | undefined>;\n  getCashoutRequests(filters?: { userId?: string; status?: string }): Promise<CashoutRequestWithRelations[]>;\n  createCashoutRequest(request: InsertCashoutRequest): Promise<CashoutRequest>;\n  updateCashoutRequest(id: string, updates: Partial<CashoutRequest>): Promise<CashoutRequest | undefined>;\n  \n  // Cashout Events\n  createCashoutEvent(event: InsertCashoutEvent): Promise<CashoutEvent>;\n  getCashoutEvents(cashoutRequestId: string): Promise<CashoutEvent[]>;\n  \n  // Site Settings\n  getSiteSettings(): Promise<SiteSettings>;\n  updateSiteSettings(updates: Partial<SiteSettings>): Promise<SiteSettings>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private contests: Map<string, Contest> = new Map();\n  private submissions: Map<string, Submission> = new Map();\n  private votes: Map<string, Vote> = new Map();\n  private gloryLedger: Map<string, GloryLedger> = new Map();\n  private auditLogs: Map<string, AuditLog> = new Map();\n\n  constructor() {\n    this.seedData();\n  }\n\n  private async seedData() {\n    // Create admin user\n    const adminPasswordHash = await bcrypt.hash(\"Admin123!\", 10);\n    const adminUser: User = {\n      id: randomUUID(),\n      username: \"admin\",\n      email: \"bellapokerstars@gmail.com\",\n      passwordHash: adminPasswordHash,\n      avatarUrl: null,\n      role: \"admin\",\n      status: \"approved\",\n      gloryBalance: 0,\n      solBalance: 0,\n      usdcBalance: 0,\n      withdrawalAddress: null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.users.set(adminUser.id, adminUser);\n\n    // Create sample approved users\n    const users = [\n      { username: \"tbppworld\", email: \"tbppworld@gmail.com\", gloryBalance: 0 },\n      { username: \"creative_legend\", email: \"legend@example.com\", gloryBalance: 12380 },\n      { username: \"design_master\", email: \"master@example.com\", gloryBalance: 8450 },\n      { username: \"pixel_wizard\", email: \"wizard@example.com\", gloryBalance: 7920 },\n      { username: \"art_jones\", email: \"jones@example.com\", gloryBalance: 6850 },\n      { username: \"video_king\", email: \"king@example.com\", gloryBalance: 5420 }\n    ];\n\n    for (const userData of users) {\n      const passwordHash = await bcrypt.hash(\"password123\", 10);\n      const user: User = {\n        id: randomUUID(),\n        username: userData.username,\n        email: userData.email,\n        passwordHash,\n        avatarUrl: null,\n        role: \"user\",\n        status: \"approved\",\n        gloryBalance: userData.gloryBalance,\n        solBalance: 0,\n        usdcBalance: 0,\n        withdrawalAddress: null,\n        createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000),\n        updatedAt: new Date()\n      };\n      this.users.set(user.id, user);\n    }\n\n    // Create active contest\n    const contest: Contest = {\n      id: randomUUID(),\n      title: \"Weekly Top 5 Challenge\",\n      slug: \"weekly-top-5\",\n      description: \"Submit your best creative work this week! Top 5 submissions share a prize pool of 1,000 GLORY points.\",\n      rules: \"Submit original artwork only (images or videos up to 100MB). One submission per user per contest. Voting ends when the contest timer reaches zero. Top 5 submissions win GLORY: 40%, 25%, 15%, 10%, 10%. Admin approval required before submissions are visible.\",\n      coverImageUrl: null,\n      status: \"active\",\n      prizeGlory: 1000,\n      startAt: new Date(),\n      endAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days from now\n      config: {\n        votesPerUserPerPeriod: 1,\n        periodDurationHours: 24,\n        totalVotesPerUser: 0\n      },\n      createdAt: new Date()\n    };\n    this.contests.set(contest.id, contest);\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = {\n      ...insertUser,\n      id,\n      avatarUrl: insertUser.avatarUrl || null,\n      role: insertUser.role || \"user\",\n      status: insertUser.status || \"pending\",\n      gloryBalance: 0,\n      solBalance: 0,\n      usdcBalance: 0,\n      withdrawalAddress: insertUser.withdrawalAddress || null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...updates, updatedAt: new Date() };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async updateWithdrawalAddress(userId: string, address: string): Promise<User | undefined> {\n    return this.updateUser(userId, { withdrawalAddress: address });\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    this.users.delete(id);\n    // Cascade delete related data\n    Array.from(this.submissions.values())\n      .filter(s => s.userId === id)\n      .forEach(s => this.submissions.delete(s.id));\n    Array.from(this.votes.values())\n      .filter(v => v.userId === id)\n      .forEach(v => this.votes.delete(v.id));\n    Array.from(this.gloryLedger.values())\n      .filter(g => g.userId === id)\n      .forEach(g => this.gloryLedger.delete(g.id));\n    Array.from(this.auditLogs.values())\n      .filter(a => a.actorUserId === id)\n      .forEach(a => this.auditLogs.delete(a.id));\n  }\n\n  async getUsersWithFilters(filters: { status?: string; role?: string }): Promise<UserWithStats[]> {\n    const users = Array.from(this.users.values());\n    let filtered = users;\n\n    if (filters.status) {\n      filtered = filtered.filter(user => user.status === filters.status);\n    }\n    if (filters.role) {\n      filtered = filtered.filter(user => user.role === filters.role);\n    }\n\n    return filtered.map(user => ({\n      ...user,\n      submissionCount: Array.from(this.submissions.values()).filter(s => s.userId === user.id).length,\n      totalVotes: Array.from(this.submissions.values())\n        .filter(s => s.userId === user.id)\n        .reduce((sum, s) => sum + s.votesCount, 0),\n      contestWins: 0 // TODO: implement win tracking\n    }));\n  }\n\n  async getUsersByIds(ids: string[]): Promise<User[]> {\n    return ids.map(id => this.users.get(id)).filter((u): u is User => u !== undefined);\n  }\n\n  async bulkDeleteUsers(ids: string[]): Promise<number> {\n    let deletedCount = 0;\n    \n    for (const userId of ids) {\n      if (this.users.has(userId)) {\n        // Delete user's submissions\n        const userSubmissions = Array.from(this.submissions.values()).filter(s => s.userId === userId);\n        for (const submission of userSubmissions) {\n          this.submissions.delete(submission.id);\n          // Delete votes on this submission\n          Array.from(this.votes.keys()).forEach(voteId => {\n            const vote = this.votes.get(voteId);\n            if (vote && vote.submissionId === submission.id) {\n              this.votes.delete(voteId);\n            }\n          });\n        }\n        \n        // Delete user's votes\n        Array.from(this.votes.keys()).forEach(voteId => {\n          const vote = this.votes.get(voteId);\n          if (vote && vote.userId === userId) {\n            this.votes.delete(voteId);\n          }\n        });\n        \n        // Delete user's glory ledger entries\n        Array.from(this.gloryLedger.keys()).forEach(ledgerId => {\n          const entry = this.gloryLedger.get(ledgerId);\n          if (entry && entry.userId === userId) {\n            this.gloryLedger.delete(ledgerId);\n          }\n        });\n        \n        // Finally delete the user\n        this.users.delete(userId);\n        deletedCount++;\n      }\n    }\n    \n    return deletedCount;\n  }\n\n  // Contests\n  async getContest(id: string): Promise<Contest | undefined> {\n    return this.contests.get(id);\n  }\n\n  async getContestBySlug(slug: string): Promise<Contest | undefined> {\n    return Array.from(this.contests.values()).find(contest => contest.slug === slug);\n  }\n\n  async getContests(filters?: { status?: string }): Promise<ContestWithStats[]> {\n    let contests = Array.from(this.contests.values());\n    \n    if (filters?.status) {\n      contests = contests.filter(contest => contest.status === filters.status);\n    }\n\n    return contests.map(contest => {\n      const submissions = Array.from(this.submissions.values()).filter(s => s.contestId === contest.id);\n      const approvedSubmissions = submissions.filter(s => s.status === 'approved');\n      const uniqueUsers = new Set(submissions.map(s => s.userId));\n      \n      // Find top submission by votes (for cover image)\n      const topSubmission = approvedSubmissions.length > 0\n        ? approvedSubmissions.reduce((top, current) => \n            current.votesCount > top.votesCount ? current : top\n          )\n        : null;\n      \n      return {\n        ...contest,\n        submissionCount: submissions.length,\n        participantCount: uniqueUsers.size,\n        totalVotes: submissions.reduce((sum, s) => sum + s.votesCount, 0),\n        topSubmissionImageUrl: topSubmission?.mediaUrl || null\n      };\n    });\n  }\n\n  async createContest(insertContest: InsertContest): Promise<Contest> {\n    const id = randomUUID();\n    const contest: Contest = {\n      ...insertContest,\n      id,\n      status: insertContest.status || \"draft\",\n      coverImageUrl: insertContest.coverImageUrl || null,\n      prizeGlory: insertContest.prizeGlory || 0,\n      config: insertContest.config || null,\n      createdAt: new Date()\n    };\n    this.contests.set(id, contest);\n    return contest;\n  }\n\n  async updateContest(id: string, updates: Partial<Contest>): Promise<Contest | undefined> {\n    const contest = this.contests.get(id);\n    if (!contest) return undefined;\n    \n    const updatedContest = { ...contest, ...updates };\n    this.contests.set(id, updatedContest);\n    return updatedContest;\n  }\n\n  async deleteContest(id: string): Promise<boolean> {\n    return this.contests.delete(id);\n  }\n\n  // Submissions\n  async getSubmission(id: string): Promise<Submission | undefined> {\n    return this.submissions.get(id);\n  }\n\n  async getSubmissions(filters: { contestId?: string; userId?: string; status?: string; page?: number; limit?: number }): Promise<SubmissionWithUser[]> {\n    let submissions = Array.from(this.submissions.values());\n    \n    if (filters.contestId) {\n      submissions = submissions.filter(s => s.contestId === filters.contestId);\n    }\n    if (filters.userId) {\n      submissions = submissions.filter(s => s.userId === filters.userId);\n    }\n    if (filters.status) {\n      submissions = submissions.filter(s => s.status === filters.status);\n    }\n\n    // Sort by creation date (newest first)\n    submissions = submissions.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n\n    // Apply pagination\n    const page = filters.page || 1;\n    const limit = filters.limit || 20;\n    const offset = (page - 1) * limit;\n    const paginatedSubmissions = submissions.slice(offset, offset + limit);\n\n    return paginatedSubmissions.map(submission => {\n        const user = this.users.get(submission.userId)!;\n        const contest = submission.contestId ? this.contests.get(submission.contestId) : null;\n        \n        return {\n          ...submission,\n          user: { id: user.id, username: user.username },\n          contest: contest ? { id: contest.id, title: contest.title } : { id: '', title: submission.contestName || 'Deleted Contest' }\n        };\n      });\n  }\n\n  async createSubmission(insertSubmission: InsertSubmission): Promise<Submission> {\n    const id = randomUUID();\n    const submission: Submission = {\n      ...insertSubmission,\n      id,\n      status: insertSubmission.status || \"pending\",\n      description: insertSubmission.description || null,\n      contestId: insertSubmission.contestId || null,\n      contestName: insertSubmission.contestName || null,\n      thumbnailUrl: insertSubmission.thumbnailUrl || null,\n      tags: insertSubmission.tags || null,\n      cloudinaryPublicId: insertSubmission.cloudinaryPublicId || null,\n      cloudinaryResourceType: insertSubmission.cloudinaryResourceType || null,\n      votesCount: 0,\n      createdAt: new Date()\n    };\n    this.submissions.set(id, submission);\n    return submission;\n  }\n\n  async updateSubmission(id: string, updates: Partial<Submission>): Promise<Submission | undefined> {\n    const submission = this.submissions.get(id);\n    if (!submission) return undefined;\n    \n    const updatedSubmission = { ...submission, ...updates };\n    this.submissions.set(id, updatedSubmission);\n    return updatedSubmission;\n  }\n\n  async deleteSubmission(id: string): Promise<boolean> {\n    return this.submissions.delete(id);\n  }\n\n  async getTopSubmissionsByContest(contestId: string, limit = 10): Promise<SubmissionWithUser[]> {\n    const submissions = await this.getSubmissions({ contestId, status: \"approved\" });\n    return submissions\n      .sort((a, b) => b.votesCount - a.votesCount)\n      .slice(0, limit);\n  }\n\n  async getUserSubmissionsInContest(userId: string, contestId: string): Promise<number> {\n    return Array.from(this.submissions.values()).filter(\n      submission => submission.userId === userId && submission.contestId === contestId\n    ).length;\n  }\n\n  // Votes\n  async getVote(userId: string, submissionId: string): Promise<Vote | undefined> {\n    return Array.from(this.votes.values()).find(\n      vote => vote.userId === userId && vote.submissionId === submissionId\n    );\n  }\n\n  async createVote(insertVote: InsertVote): Promise<Vote> {\n    const id = randomUUID();\n    const vote: Vote = {\n      ...insertVote,\n      id,\n      createdAt: new Date()\n    };\n    this.votes.set(id, vote);\n\n    // Update submission vote count\n    const submission = this.submissions.get(insertVote.submissionId);\n    if (submission) {\n      submission.votesCount += 1;\n      this.submissions.set(submission.id, submission);\n    }\n\n    return vote;\n  }\n\n  async getVoteCountByUser(userId: string, since: Date): Promise<number> {\n    return Array.from(this.votes.values()).filter(\n      vote => vote.userId === userId && vote.createdAt >= since\n    ).length;\n  }\n\n  async getVoteCountForSubmissionInPeriod(userId: string, submissionId: string, since: Date): Promise<number> {\n    return Array.from(this.votes.values()).filter(\n      vote => vote.userId === userId && vote.submissionId === submissionId && vote.createdAt >= since\n    ).length;\n  }\n\n  async getUserTotalVotesInContest(userId: string, contestId: string): Promise<number> {\n    const contestSubmissions = Array.from(this.submissions.values()).filter(\n      submission => submission.contestId === contestId\n    );\n    const submissionIds = contestSubmissions.map(s => s.id);\n    \n    return Array.from(this.votes.values()).filter(\n      vote => vote.userId === userId && submissionIds.includes(vote.submissionId)\n    ).length;\n  }\n\n  // Glory Ledger\n  async createGloryTransaction(insertTransaction: InsertGloryLedger): Promise<GloryLedger> {\n    const id = randomUUID();\n    const transaction: GloryLedger = {\n      ...insertTransaction,\n      id,\n      currency: insertTransaction.currency || \"GLORY\",\n      contestId: insertTransaction.contestId || null,\n      submissionId: insertTransaction.submissionId || null,\n      txHash: insertTransaction.txHash || null,\n      metadata: insertTransaction.metadata || null,\n      createdAt: new Date()\n    };\n    this.gloryLedger.set(id, transaction);\n    \n    // Update user balance\n    await this.updateUserBalance(transaction.userId, transaction.delta, transaction.currency);\n    \n    return transaction;\n  }\n\n  async getGloryTransactions(userId: string, currency?: string): Promise<GloryLedger[]> {\n    return Array.from(this.gloryLedger.values())\n      .filter(transaction => \n        transaction.userId === userId && \n        (!currency || transaction.currency === currency)\n      )\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getGloryTransactionByHash(txHash: string): Promise<GloryLedger | undefined> {\n    return Array.from(this.gloryLedger.values())\n      .find(transaction => transaction.txHash === txHash);\n  }\n\n  async clearGloryTransactions(userId: string): Promise<void> {\n    // Delete all transactions for this user\n    const userTransactions = Array.from(this.gloryLedger.entries())\n      .filter(([_, transaction]) => transaction.userId === userId);\n    \n    for (const [id, _] of userTransactions) {\n      this.gloryLedger.delete(id);\n    }\n  }\n\n  async updateUserBalance(userId: string, delta: number, currency: string): Promise<void> {\n    const user = this.users.get(userId);\n    if (user) {\n      if (currency === \"GLORY\") {\n        user.gloryBalance += delta;\n      } else if (currency === \"SOL\") {\n        user.solBalance = (user.solBalance || 0) + delta;\n      } else if (currency === \"USDC\") {\n        user.usdcBalance = (user.usdcBalance || 0) + delta;\n      }\n      user.updatedAt = new Date();\n      this.users.set(userId, user);\n    }\n  }\n\n  // Audit Log\n  async createAuditLog(insertLog: InsertAuditLog): Promise<AuditLog> {\n    const id = randomUUID();\n    const log: AuditLog = {\n      ...insertLog,\n      id,\n      meta: insertLog.meta || null,\n      createdAt: new Date()\n    };\n    this.auditLogs.set(id, log);\n    return log;\n  }\n\n  async getAuditLogs(limit = 100): Promise<AuditLog[]> {\n    return Array.from(this.auditLogs.values())\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime())\n      .slice(0, limit);\n  }\n\n  async clearAuditLogs(): Promise<void> {\n    this.auditLogs.clear();\n  }\n\n  // Contest distribution\n  async distributeContestRewards(contestId: string): Promise<void> {\n    const contest = this.contests.get(contestId);\n    \n    if (!contest || contest.status !== \"active\") {\n      return;\n    }\n\n    // Get prize distribution from config (fixed amounts) or use default percentages\n    const config = contest.config as any;\n    let prizes: number[] = [];\n    \n    if (config?.prizeDistribution && Array.isArray(config.prizeDistribution)) {\n      // Use fixed prize amounts from config\n      prizes = config.prizeDistribution\n        .map((p: any) => Number(p.value))\n        .filter((v: number) => !isNaN(v) && v > 0);\n    } else {\n      // Fallback to percentage-based distribution\n      const defaultPercentages = [0.4, 0.25, 0.15, 0.1, 0.1];\n      prizes = defaultPercentages.map(p => Math.floor(contest.prizeGlory * p));\n    }\n\n    // Get top N submissions based on number of prizes\n    const topSubmissions = await this.getTopSubmissionsByContest(contestId, prizes.length);\n    const numPrizes = Math.min(topSubmissions.length, prizes.length);\n    \n    for (let i = 0; i < numPrizes; i++) {\n      const submission = topSubmissions[i];\n      const prize = prizes[i];\n      \n      // Create glory transaction\n      await this.createGloryTransaction({\n        userId: submission.userId,\n        delta: prize,\n        reason: `Contest Prize - ${i + 1}${i === 0 ? 'st' : i === 1 ? 'nd' : i === 2 ? 'rd' : 'th'} Place`,\n        contestId: contestId,\n        submissionId: submission.id\n      });\n    }\n\n    // Update contest status to ended\n    contest.status = \"ended\";\n    this.contests.set(contestId, contest);\n  }\n\n  // User Wallets (MemStorage - not used in production)\n  async getUserWallet(userId: string): Promise<UserWallet | undefined> {\n    throw new Error(\"MemStorage wallet methods not implemented\");\n  }\n\n  async getUserWalletByAddress(address: string): Promise<UserWallet | undefined> {\n    throw new Error(\"MemStorage wallet methods not implemented\");\n  }\n\n  async createUserWallet(wallet: InsertUserWallet): Promise<UserWallet> {\n    throw new Error(\"MemStorage wallet methods not implemented\");\n  }\n\n  async updateUserWallet(id: string, updates: Partial<UserWallet>): Promise<UserWallet | undefined> {\n    throw new Error(\"MemStorage wallet methods not implemented\");\n  }\n\n  // Cashout Requests (MemStorage - not used in production)\n  async getCashoutRequest(id: string): Promise<CashoutRequest | undefined> {\n    throw new Error(\"MemStorage cashout methods not implemented\");\n  }\n\n  async getCashoutRequests(filters?: { userId?: string; status?: string }): Promise<CashoutRequestWithRelations[]> {\n    throw new Error(\"MemStorage cashout methods not implemented\");\n  }\n\n  async createCashoutRequest(request: InsertCashoutRequest): Promise<CashoutRequest> {\n    throw new Error(\"MemStorage cashout methods not implemented\");\n  }\n\n  async updateCashoutRequest(id: string, updates: Partial<CashoutRequest>): Promise<CashoutRequest | undefined> {\n    throw new Error(\"MemStorage cashout methods not implemented\");\n  }\n\n  // Cashout Events (MemStorage - not used in production)\n  async createCashoutEvent(event: InsertCashoutEvent): Promise<CashoutEvent> {\n    throw new Error(\"MemStorage cashout methods not implemented\");\n  }\n\n  async getCashoutEvents(cashoutRequestId: string): Promise<CashoutEvent[]> {\n    throw new Error(\"MemStorage cashout methods not implemented\");\n  }\n\n  // Site Settings (MemStorage - not used in production)\n  async getSiteSettings(): Promise<SiteSettings> {\n    throw new Error(\"MemStorage site settings methods not implemented\");\n  }\n\n  async updateSiteSettings(updates: Partial<SiteSettings>): Promise<SiteSettings> {\n    throw new Error(\"MemStorage site settings methods not implemented\");\n  }\n}\n\nexport class DbStorage implements IStorage {\n  constructor() {\n    this.seedDatabase().catch(err => {\n      console.error(\"[DB] Failed to seed database:\", err);\n    });\n  }\n\n  private async seedDatabase() {\n    const existingAdmin = await db.query.users.findFirst({\n      where: eq(users.email, \"bellapokerstars@gmail.com\")\n    });\n\n    if (!existingAdmin) {\n      const adminPasswordHash = await bcrypt.hash(\"Admin123!\", 10);\n      await db.insert(users).values({\n        username: \"admin\",\n        email: \"bellapokerstars@gmail.com\",\n        passwordHash: adminPasswordHash,\n        role: \"admin\",\n        status: \"approved\",\n        gloryBalance: 0\n      });\n    }\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.query.users.findFirst({\n      where: eq(users.id, id)\n    });\n    return result;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.query.users.findFirst({\n      where: eq(users.email, email)\n    });\n    return result;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.query.users.findFirst({\n      where: eq(users.username, username)\n    });\n    return result;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user as User;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const [user] = await db.update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async updateWithdrawalAddress(userId: string, address: string): Promise<User | undefined> {\n    return this.updateUser(userId, { withdrawalAddress: address });\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    await db.delete(users).where(eq(users.id, id));\n    // Cascade delete is handled by database constraints\n  }\n\n  async getUsersWithFilters(filters: { status?: string; role?: string }): Promise<UserWithStats[]> {\n    const conditions = [];\n    if (filters.status) conditions.push(eq(users.status, filters.status));\n    if (filters.role) conditions.push(eq(users.role, filters.role));\n\n    const usersData = await db.query.users.findMany({\n      where: conditions.length > 0 ? and(...conditions) : undefined\n    });\n\n    const result: UserWithStats[] = [];\n    for (const user of usersData) {\n      const submissionCount = await db.select({ count: count() })\n        .from(submissions)\n        .where(eq(submissions.userId, user.id));\n      \n      const totalVotesResult = await db.select({ total: sum(submissions.votesCount) })\n        .from(submissions)\n        .where(eq(submissions.userId, user.id));\n\n      result.push({\n        ...user,\n        submissionCount: submissionCount[0]?.count || 0,\n        totalVotes: Number(totalVotesResult[0]?.total) || 0,\n        contestWins: 0\n      });\n    }\n\n    return result;\n  }\n\n  async getUsersByIds(ids: string[]): Promise<User[]> {\n    if (ids.length === 0) return [];\n    \n    const result = await db.query.users.findMany({\n      where: inArray(users.id, ids)\n    });\n    return result;\n  }\n\n  async bulkDeleteUsers(ids: string[]): Promise<number> {\n    if (ids.length === 0) return 0;\n    \n    try {\n      // Since neon-http doesn't support transactions, we'll delete in proper order\n      // to maintain referential integrity as much as possible\n      \n      // Get user submissions to delete associated votes\n      const userSubmissions = await db.select({ id: submissions.id })\n        .from(submissions)\n        .where(inArray(submissions.userId, ids));\n\n      const submissionIds = userSubmissions.map(s => s.id);\n\n      // Delete votes on user submissions first\n      if (submissionIds.length > 0) {\n        await db.delete(votes)\n          .where(inArray(votes.submissionId, submissionIds));\n      }\n\n      // Delete user votes\n      await db.delete(votes)\n        .where(inArray(votes.userId, ids));\n\n      // Delete cashout events (via cashout requests first)\n      const userCashoutRequests = await db.select({ id: cashoutRequests.id })\n        .from(cashoutRequests)\n        .where(inArray(cashoutRequests.userId, ids));\n      \n      const cashoutRequestIds = userCashoutRequests.map(r => r.id);\n      if (cashoutRequestIds.length > 0) {\n        await db.delete(cashoutEvents)\n          .where(inArray(cashoutEvents.cashoutRequestId, cashoutRequestIds));\n      }\n\n      // Delete cashout requests\n      await db.delete(cashoutRequests)\n        .where(inArray(cashoutRequests.userId, ids));\n\n      // Delete user wallets\n      await db.delete(userWallets)\n        .where(inArray(userWallets.userId, ids));\n\n      // Delete glory ledger entries\n      await db.delete(gloryLedger)\n        .where(inArray(gloryLedger.userId, ids));\n\n      // Delete submissions\n      await db.delete(submissions)\n        .where(inArray(submissions.userId, ids));\n\n      // Finally delete users\n      const result = await db.delete(users)\n        .where(inArray(users.id, ids));\n\n      return result.rowCount || 0;\n    } catch (error) {\n      console.error('Error in bulkDeleteUsers:', error);\n      throw error;\n    }\n  }\n\n  async getContest(id: string): Promise<Contest | undefined> {\n    const result = await db.query.contests.findFirst({\n      where: eq(contests.id, id)\n    });\n    return result;\n  }\n\n  async getContestBySlug(slug: string): Promise<Contest | undefined> {\n    const result = await db.query.contests.findFirst({\n      where: eq(contests.slug, slug)\n    });\n    return result;\n  }\n\n  async getContests(filters?: { status?: string }): Promise<ContestWithStats[]> {\n    const contestsData = await db.query.contests.findMany({\n      where: filters?.status ? eq(contests.status, filters.status) : undefined\n    });\n\n    const result: ContestWithStats[] = [];\n    for (const contest of contestsData) {\n      const submissionCount = await db.select({ count: count() })\n        .from(submissions)\n        .where(eq(submissions.contestId, contest.id));\n      \n      const participantCount = await db.select({ count: countDistinct(submissions.userId) })\n        .from(submissions)\n        .where(eq(submissions.contestId, contest.id));\n      \n      const totalVotesResult = await db.select({ total: sum(submissions.votesCount) })\n        .from(submissions)\n        .where(eq(submissions.contestId, contest.id));\n\n      // Get top submission image (highest voted approved submission)\n      const topSubmission = await db.query.submissions.findFirst({\n        where: and(\n          eq(submissions.contestId, contest.id),\n          eq(submissions.status, 'approved')\n        ),\n        orderBy: [desc(submissions.votesCount)],\n        columns: { mediaUrl: true }\n      });\n\n      result.push({\n        ...contest,\n        submissionCount: submissionCount[0]?.count || 0,\n        participantCount: participantCount[0]?.count || 0,\n        totalVotes: Number(totalVotesResult[0]?.total) || 0,\n        topSubmissionImageUrl: topSubmission?.mediaUrl || null\n      });\n    }\n\n    return result;\n  }\n\n  async createContest(insertContest: InsertContest): Promise<Contest> {\n    const [contest] = await db.insert(contests).values(insertContest).returning();\n    return contest as Contest;\n  }\n\n  async updateContest(id: string, updates: Partial<Contest>): Promise<Contest | undefined> {\n    const [contest] = await db.update(contests)\n      .set(updates)\n      .where(eq(contests.id, id))\n      .returning();\n    return contest;\n  }\n\n  async deleteContest(id: string): Promise<boolean> {\n    const result = await db.delete(contests)\n      .where(eq(contests.id, id));\n    return true;\n  }\n\n  async getSubmission(id: string): Promise<Submission | undefined> {\n    const result = await db.query.submissions.findFirst({\n      where: eq(submissions.id, id)\n    });\n    return result;\n  }\n\n  async getSubmissions(filters: { contestId?: string; userId?: string; status?: string; page?: number; limit?: number }): Promise<SubmissionWithUser[]> {\n    const conditions = [];\n    if (filters.contestId) conditions.push(eq(submissions.contestId, filters.contestId));\n    if (filters.userId) conditions.push(eq(submissions.userId, filters.userId));\n    if (filters.status) conditions.push(eq(submissions.status, filters.status));\n\n    // Calculate pagination\n    const page = filters.page || 1;\n    const limit = filters.limit || 20;\n    const offset = (page - 1) * limit;\n\n    const submissionsData = await db.query.submissions.findMany({\n      where: conditions.length > 0 ? and(...conditions) : undefined,\n      orderBy: [desc(submissions.createdAt)],\n      limit: limit,\n      offset: offset\n    });\n\n    const result: SubmissionWithUser[] = [];\n    for (const submission of submissionsData) {\n      const user = await db.query.users.findFirst({\n        where: eq(users.id, submission.userId),\n        columns: { id: true, username: true }\n      });\n      \n      let contest = null;\n      if (submission.contestId) {\n        contest = await db.query.contests.findFirst({\n          where: eq(contests.id, submission.contestId),\n          columns: { id: true, title: true }\n        });\n      }\n      \n      if (user) {\n        result.push({\n          ...submission,\n          user,\n          contest: contest || { id: '', title: submission.contestName || 'Deleted Contest' }\n        });\n      }\n    }\n\n    return result;\n  }\n\n  async createSubmission(insertSubmission: InsertSubmission): Promise<Submission> {\n    const [submission] = await db.insert(submissions).values(insertSubmission).returning();\n    return submission as Submission;\n  }\n\n  async updateSubmission(id: string, updates: Partial<Submission>): Promise<Submission | undefined> {\n    const [submission] = await db.update(submissions)\n      .set(updates)\n      .where(eq(submissions.id, id))\n      .returning();\n    return submission;\n  }\n\n  async deleteSubmission(id: string): Promise<boolean> {\n    const result = await db.delete(submissions)\n      .where(eq(submissions.id, id));\n    return true;\n  }\n\n  async getTopSubmissionsByContest(contestId: string, limit = 10): Promise<SubmissionWithUser[]> {\n    const submissionsData = await db.query.submissions.findMany({\n      where: and(\n        eq(submissions.contestId, contestId),\n        eq(submissions.status, \"approved\")\n      ),\n      orderBy: [desc(submissions.votesCount)],\n      limit\n    });\n\n    const result: SubmissionWithUser[] = [];\n    for (const submission of submissionsData) {\n      const user = await db.query.users.findFirst({\n        where: eq(users.id, submission.userId),\n        columns: { id: true, username: true }\n      });\n      \n      let contest = null;\n      if (submission.contestId) {\n        contest = await db.query.contests.findFirst({\n          where: eq(contests.id, submission.contestId),\n          columns: { id: true, title: true }\n        });\n      }\n      \n      if (user) {\n        result.push({\n          ...submission,\n          user,\n          contest: contest || { id: '', title: 'No Contest' }\n        });\n      }\n    }\n\n    return result;\n  }\n\n  async getUserSubmissionsInContest(userId: string, contestId: string): Promise<number> {\n    const result = await db.select({ count: count() })\n      .from(submissions)\n      .where(and(\n        eq(submissions.userId, userId),\n        eq(submissions.contestId, contestId)\n      ));\n    \n    return result[0]?.count || 0;\n  }\n\n  async getVote(userId: string, submissionId: string): Promise<Vote | undefined> {\n    const result = await db.query.votes.findFirst({\n      where: and(\n        eq(votes.userId, userId),\n        eq(votes.submissionId, submissionId)\n      )\n    });\n    return result;\n  }\n\n  async createVote(insertVote: InsertVote): Promise<Vote> {\n    const [vote] = await db.insert(votes).values(insertVote).returning();\n    \n    await db.update(submissions)\n      .set({ votesCount: sql`${submissions.votesCount} + 1` })\n      .where(eq(submissions.id, insertVote.submissionId));\n\n    return vote;\n  }\n\n  async getVoteCountByUser(userId: string, since: Date): Promise<number> {\n    const result = await db.select({ count: count() })\n      .from(votes)\n      .where(and(\n        eq(votes.userId, userId),\n        sql`${votes.createdAt} >= ${since}`\n      ));\n    \n    return result[0]?.count || 0;\n  }\n\n  async getVoteCountForSubmissionInPeriod(userId: string, submissionId: string, since: Date): Promise<number> {\n    const result = await db.select({ count: count() })\n      .from(votes)\n      .where(and(\n        eq(votes.userId, userId),\n        eq(votes.submissionId, submissionId),\n        sql`${votes.createdAt} >= ${since}`\n      ));\n    \n    return result[0]?.count || 0;\n  }\n\n  async getUserTotalVotesInContest(userId: string, contestId: string): Promise<number> {\n    const result = await db.select({ count: count() })\n      .from(votes)\n      .innerJoin(submissions, eq(votes.submissionId, submissions.id))\n      .where(and(\n        eq(votes.userId, userId),\n        eq(submissions.contestId, contestId)\n      ));\n    \n    return result[0]?.count || 0;\n  }\n\n  async createGloryTransaction(insertTransaction: InsertGloryLedger): Promise<GloryLedger> {\n    const [transaction] = await db.insert(gloryLedger).values(insertTransaction).returning();\n    \n    await this.updateUserBalance(transaction.userId, transaction.delta, transaction.currency || \"GLORY\");\n    \n    return transaction as GloryLedger;\n  }\n\n  async getGloryTransactions(userId: string, currency?: string): Promise<GloryLedger[]> {\n    const result = await db.query.gloryLedger.findMany({\n      where: currency \n        ? and(eq(gloryLedger.userId, userId), eq(gloryLedger.currency, currency))\n        : eq(gloryLedger.userId, userId),\n      orderBy: [desc(gloryLedger.createdAt)]\n    });\n    return result;\n  }\n\n  async getGloryTransactionByHash(txHash: string): Promise<GloryLedger | undefined> {\n    const result = await db.query.gloryLedger.findFirst({\n      where: eq(gloryLedger.txHash, txHash)\n    });\n    return result;\n  }\n\n  async clearGloryTransactions(userId: string): Promise<void> {\n    await db.delete(gloryLedger).where(eq(gloryLedger.userId, userId));\n  }\n\n  async updateUserBalance(userId: string, delta: number, currency: string): Promise<void> {\n    if (currency === \"GLORY\") {\n      await db.update(users)\n        .set({ \n          gloryBalance: sql`${users.gloryBalance} + ${delta}`,\n          updatedAt: new Date()\n        })\n        .where(eq(users.id, userId));\n    } else if (currency === \"SOL\") {\n      await db.update(users)\n        .set({ \n          solBalance: sql`${users.solBalance} + ${delta}`,\n          updatedAt: new Date()\n        })\n        .where(eq(users.id, userId));\n    } else if (currency === \"USDC\") {\n      await db.update(users)\n        .set({ \n          usdcBalance: sql`${users.usdcBalance} + ${delta}`,\n          updatedAt: new Date()\n        })\n        .where(eq(users.id, userId));\n    }\n  }\n\n  async createAuditLog(insertLog: InsertAuditLog): Promise<AuditLog> {\n    const [log] = await db.insert(auditLog).values(insertLog).returning();\n    return log as AuditLog;\n  }\n\n  async getAuditLogs(limit = 100): Promise<AuditLog[]> {\n    const result = await db.query.auditLog.findMany({\n      orderBy: [desc(auditLog.createdAt)],\n      limit\n    });\n    return result;\n  }\n\n  async clearAuditLogs(): Promise<void> {\n    await db.delete(auditLog);\n  }\n\n  async distributeContestRewards(contestId: string): Promise<void> {\n    // Note: Can't use db.transaction with neon-http driver\n    const contest = await db.query.contests.findFirst({\n      where: eq(contests.id, contestId)\n    });\n    \n    if (!contest) {\n      throw new Error(\"Contest not found\");\n    }\n\n    if (contest.status === \"ended\") {\n      throw new Error(\"Contest has already ended\");\n    }\n\n    if (contest.status !== \"active\") {\n      throw new Error(\"Contest is not active\");\n    }\n\n    // Get prize distribution from config (fixed amounts) or use default percentages\n    const config = contest.config as any;\n    let prizes: number[] = [];\n    \n    if (config?.prizeDistribution && Array.isArray(config.prizeDistribution)) {\n      // Use fixed prize amounts from config\n      prizes = config.prizeDistribution\n        .map((p: any) => Number(p.value))\n        .filter((v: number) => !isNaN(v) && v > 0);\n    } else {\n      // Fallback to percentage-based distribution\n      const defaultPercentages = [0.4, 0.25, 0.15, 0.1, 0.1];\n      prizes = defaultPercentages.map(p => Math.floor(contest.prizeGlory * p));\n    }\n\n    // Get top N submissions based on number of prizes\n    const topSubmissionsData = await db.query.submissions.findMany({\n      where: and(\n        eq(submissions.contestId, contestId),\n        eq(submissions.status, \"approved\")\n      ),\n      orderBy: [desc(submissions.votesCount)],\n      limit: prizes.length\n    });\n    \n    if (topSubmissionsData.length === 0) {\n      await db.update(contests)\n        .set({ status: \"ended\" })\n        .where(eq(contests.id, contestId));\n      return;\n    }\n    \n    const numPrizes = Math.min(topSubmissionsData.length, prizes.length);\n    \n    // Batch prepare all ledger entries and user updates\n    const ledgerEntries = [];\n    const userUpdates = [];\n    \n    // Check for existing ledger entries in one query\n    const existingLedgers = await db.query.gloryLedger.findMany({\n      where: and(\n        eq(gloryLedger.contestId, contestId),\n        inArray(gloryLedger.submissionId, topSubmissionsData.map(s => s.id))\n      )\n    });\n    \n    const existingSubmissionIds = new Set(existingLedgers.map(l => l.submissionId));\n    \n    for (let i = 0; i < numPrizes; i++) {\n      const submission = topSubmissionsData[i];\n      const prize = prizes[i];\n      \n      // Skip if already awarded\n      if (existingSubmissionIds.has(submission.id)) {\n        continue;\n      }\n\n      ledgerEntries.push({\n        userId: submission.userId,\n        delta: prize,\n        reason: `Contest Prize - ${i + 1}${i === 0 ? 'st' : i === 1 ? 'nd' : i === 2 ? 'rd' : 'th'} Place`,\n        contestId: contestId,\n        submissionId: submission.id\n      });\n      \n      userUpdates.push({\n        userId: submission.userId,\n        prize: prize\n      });\n    }\n\n    // Batch insert ledger entries (single query)\n    if (ledgerEntries.length > 0) {\n      await db.insert(gloryLedger).values(ledgerEntries).onConflictDoNothing();\n      \n      // Update user balances (unfortunately needs to be individual queries)\n      for (const update of userUpdates) {\n        await db.update(users)\n          .set({ \n            gloryBalance: sql`${users.gloryBalance} + ${update.prize}`,\n            updatedAt: new Date()\n          })\n          .where(eq(users.id, update.userId));\n      }\n    }\n\n    // Only end contest if we actually awarded new prizes\n    if (ledgerEntries.length > 0) {\n      await db.update(contests)\n        .set({ status: \"ended\" })\n        .where(eq(contests.id, contestId));\n    }\n  }\n\n  // User Wallets\n  async getUserWallet(userId: string): Promise<UserWallet | undefined> {\n    const result = await db.query.userWallets.findFirst({\n      where: eq(userWallets.userId, userId)\n    });\n    return result;\n  }\n\n  async getUserWalletByAddress(address: string): Promise<UserWallet | undefined> {\n    const result = await db.query.userWallets.findFirst({\n      where: eq(userWallets.address, address)\n    });\n    return result;\n  }\n\n  async createUserWallet(wallet: InsertUserWallet): Promise<UserWallet> {\n    const [newWallet] = await db.insert(userWallets).values(wallet).returning();\n    return newWallet as UserWallet;\n  }\n\n  async updateUserWallet(id: string, updates: Partial<UserWallet>): Promise<UserWallet | undefined> {\n    const [wallet] = await db.update(userWallets)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(userWallets.id, id))\n      .returning();\n    return wallet;\n  }\n\n  // Cashout Requests\n  async getCashoutRequest(id: string): Promise<CashoutRequest | undefined> {\n    const result = await db.query.cashoutRequests.findFirst({\n      where: eq(cashoutRequests.id, id)\n    });\n    return result;\n  }\n\n  async getCashoutRequests(filters?: { userId?: string; status?: string }): Promise<CashoutRequestWithRelations[]> {\n    const conditions = [];\n    if (filters?.userId) conditions.push(eq(cashoutRequests.userId, filters.userId));\n    if (filters?.status) conditions.push(eq(cashoutRequests.status, filters.status));\n\n    const result = await db.query.cashoutRequests.findMany({\n      where: conditions.length > 0 ? and(...conditions) : undefined,\n      orderBy: [desc(cashoutRequests.createdAt)],\n      with: {\n        user: {\n          columns: {\n            id: true,\n            username: true,\n            email: true,\n            gloryBalance: true\n          }\n        }\n      }\n    });\n    return result as CashoutRequestWithRelations[];\n  }\n\n  async createCashoutRequest(request: InsertCashoutRequest): Promise<CashoutRequest> {\n    const [newRequest] = await db.insert(cashoutRequests).values(request).returning();\n    return newRequest as CashoutRequest;\n  }\n\n  async updateCashoutRequest(id: string, updates: Partial<CashoutRequest>): Promise<CashoutRequest | undefined> {\n    const [request] = await db.update(cashoutRequests)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(cashoutRequests.id, id))\n      .returning();\n    return request;\n  }\n\n  // Cashout Events\n  async createCashoutEvent(event: InsertCashoutEvent): Promise<CashoutEvent> {\n    const [newEvent] = await db.insert(cashoutEvents).values(event).returning();\n    return newEvent as CashoutEvent;\n  }\n\n  async getCashoutEvents(cashoutRequestId: string): Promise<CashoutEvent[]> {\n    const result = await db.query.cashoutEvents.findMany({\n      where: eq(cashoutEvents.cashoutRequestId, cashoutRequestId),\n      orderBy: [desc(cashoutEvents.createdAt)]\n    });\n    return result;\n  }\n\n  // Site Settings\n  async getSiteSettings(): Promise<SiteSettings> {\n    // Try to get existing settings\n    const existing = await db.query.siteSettings.findFirst();\n    \n    if (existing) {\n      return existing;\n    }\n    \n    // Create default settings if none exist\n    const [newSettings] = await db.insert(siteSettings)\n      .values({ privateMode: false })\n      .returning();\n    \n    return newSettings as SiteSettings;\n  }\n\n  async updateSiteSettings(updates: Partial<SiteSettings>): Promise<SiteSettings> {\n    // Get existing settings to get the ID\n    const existing = await this.getSiteSettings();\n    \n    // Update settings\n    const [updated] = await db.update(siteSettings)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(siteSettings.id, existing.id))\n      .returning();\n    \n    return updated as SiteSettings;\n  }\n}\n\nexport const storage = new DbStorage();\n","size_bytes":48506},"server/services/reward-distribution.ts":{"content":"/**\n * Pure function for calculating contest reward distribution\n * Top 5 submissions get: 40%, 25%, 15%, 10%, 10%\n */\n\nexport interface SubmissionWithVotes {\n  id: string;\n  userId: string;\n  votesCount: number;\n}\n\nexport interface RewardDistribution {\n  userId: string;\n  submissionId: string;\n  amount: number;\n  rank: number;\n}\n\nexport function calculateRewardDistribution(\n  submissions: SubmissionWithVotes[],\n  totalPrizePool: number\n): RewardDistribution[] {\n  // Prize distribution percentages for top 5\n  const prizePercentages = [0.4, 0.25, 0.15, 0.1, 0.1];\n  \n  // Sort submissions by votes (descending)\n  const sortedSubmissions = [...submissions]\n    .sort((a, b) => b.votesCount - a.votesCount)\n    .slice(0, 5); // Take top 5 only\n\n  const distributions: RewardDistribution[] = [];\n\n  for (let i = 0; i < sortedSubmissions.length; i++) {\n    const submission = sortedSubmissions[i];\n    const percentage = prizePercentages[i];\n    const amount = Math.floor(totalPrizePool * percentage);\n\n    distributions.push({\n      userId: submission.userId,\n      submissionId: submission.id,\n      amount,\n      rank: i + 1,\n    });\n  }\n\n  return distributions;\n}\n\n","size_bytes":1170},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ContestRulesCard.tsx":{"content":"import { useEffect } from \"react\";\nimport { X, Trophy, Calendar, Users, FileText, Award, CheckSquare, Image, Shield } from \"lucide-react\";\nimport { GlassButton } from \"./GlassButton\";\n\ninterface ContestRulesCardProps {\n  isOpen: boolean;\n  contest: {\n    title: string;\n    description: string;\n    rules: string;\n    prizeGlory: number;\n    startAt: string;\n    endAt: string;\n    config?: any;\n  } | null;\n  onClose: () => void;\n}\n\nexport function ContestRulesCard({ isOpen, contest, onClose }: ContestRulesCardProps) {\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const modalId = Date.now();\n\n    // Push unique history state when modal opens\n    window.history.pushState({ modal: 'rules', modalId }, '');\n\n    // Handle Escape key\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        onClose();\n      }\n    };\n\n    // Handle browser back button\n    const handlePopState = () => {\n      // Close modal when going back in history\n      if (window.history.state?.modalId !== modalId) {\n        onClose();\n      }\n    };\n\n    window.addEventListener('keydown', handleEscape);\n    window.addEventListener('popstate', handlePopState);\n\n    return () => {\n      window.removeEventListener('keydown', handleEscape);\n      window.removeEventListener('popstate', handlePopState);\n    };\n  }, [isOpen, onClose]);\n\n  if (!isOpen || !contest) return null;\n\n  return (\n    <div \n      className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/80 backdrop-blur-sm p-4\"\n      onClick={onClose}\n      data-testid=\"rules-overlay\"\n    >\n      <div \n        className=\"relative max-w-3xl w-full max-h-[90vh] overflow-y-auto bg-slate-900/90 backdrop-blur-xl rounded-2xl border border-white/10 shadow-2xl shadow-violet-600/20\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* Header */}\n        <div className=\"sticky top-0 bg-slate-900/95 backdrop-blur-xl border-b border-white/10 p-6 flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 rounded-lg bg-violet-600/20 border border-violet-500/30\">\n              <FileText className=\"h-6 w-6 text-violet-400\" />\n            </div>\n            <h2 className=\"text-2xl font-bold text-white\" data-testid=\"text-contest-title\">\n              Contest Rules\n            </h2>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"p-2 hover:bg-white/10 rounded-lg transition-colors\"\n            data-testid=\"button-close-rules\"\n          >\n            <X className=\"h-6 w-6 text-slate-400\" />\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6 space-y-6\">\n          {/* Contest Title */}\n          <div>\n            <h3 className=\"text-xl font-bold text-white mb-2\">{contest.title}</h3>\n            <p className=\"text-slate-300\">{contest.description}</p>\n          </div>\n\n          {/* Key Info Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"bg-white/5 backdrop-blur-sm rounded-xl border border-white/10 p-4\">\n              <div className=\"flex items-center gap-2 text-violet-400 mb-2\">\n                <Trophy className=\"h-5 w-5\" />\n                <span className=\"text-sm font-medium\">Prize Pool</span>\n              </div>\n              <p className=\"text-2xl font-bold text-white\" data-testid=\"text-prize-pool\">\n                {contest.prizeGlory.toLocaleString()} GLORY\n              </p>\n            </div>\n\n            <div className=\"bg-white/5 backdrop-blur-sm rounded-xl border border-white/10 p-4\">\n              <div className=\"flex items-center gap-2 text-violet-400 mb-2\">\n                <Calendar className=\"h-5 w-5\" />\n                <span className=\"text-sm font-medium\">Start Date</span>\n              </div>\n              <p className=\"text-lg font-semibold text-white\">\n                {new Date(contest.startAt).toLocaleDateString()}\n              </p>\n            </div>\n\n            <div className=\"bg-white/5 backdrop-blur-sm rounded-xl border border-white/10 p-4\">\n              <div className=\"flex items-center gap-2 text-violet-400 mb-2\">\n                <Calendar className=\"h-5 w-5\" />\n                <span className=\"text-sm font-medium\">End Date</span>\n              </div>\n              <p className=\"text-lg font-semibold text-white\">\n                {new Date(contest.endAt).toLocaleDateString()}\n              </p>\n            </div>\n          </div>\n\n          {/* Prize Distribution */}\n          {contest.config?.prizeDistribution && contest.config.prizeDistribution.length > 0 && (\n            <div className=\"bg-white/5 backdrop-blur-sm rounded-xl border border-white/10 p-6\">\n              <h4 className=\"text-lg font-bold text-white mb-4 flex items-center gap-2\">\n                <Award className=\"h-5 w-5 text-violet-400\" />\n                Prize Distribution\n              </h4>\n              <div className=\"space-y-2\">\n                {contest.config.prizeDistribution.map((prize: any) => (\n                  <div key={prize.place} className=\"flex items-center justify-between p-3 bg-white/5 rounded-lg\">\n                    <span className=\"text-slate-300 font-medium\">{prize.place === 1 ? '🥇' : prize.place === 2 ? '🥈' : prize.place === 3 ? '🥉' : `${prize.place}th`} Place</span>\n                    <span className=\"text-white font-bold\">{prize.value.toLocaleString()} {contest.config.currency || 'GLORY'}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Voting Rules */}\n          {contest.config && (\n            <div className=\"bg-white/5 backdrop-blur-sm rounded-xl border border-white/10 p-6\">\n              <h4 className=\"text-lg font-bold text-white mb-4 flex items-center gap-2\">\n                <CheckSquare className=\"h-5 w-5 text-violet-400\" />\n                Voting Rules\n              </h4>\n              <div className=\"space-y-2 text-slate-300\">\n                {contest.config.voteLimitPerPeriod && (\n                  <div className=\"flex items-center justify-between p-3 bg-white/5 rounded-lg\">\n                    <span>Votes per Period</span>\n                    <span className=\"text-white font-semibold\">{contest.config.voteLimitPerPeriod}</span>\n                  </div>\n                )}\n                {contest.config.votePeriodHours && (\n                  <div className=\"flex items-center justify-between p-3 bg-white/5 rounded-lg\">\n                    <span>Period Duration</span>\n                    <span className=\"text-white font-semibold\">{contest.config.votePeriodHours} hours</span>\n                  </div>\n                )}\n                {contest.config.totalVoteLimit !== undefined && (\n                  <div className=\"flex items-center justify-between p-3 bg-white/5 rounded-lg\">\n                    <span>Total Vote Limit</span>\n                    <span className=\"text-white font-semibold\">{contest.config.totalVoteLimit === 0 ? 'Unlimited' : contest.config.totalVoteLimit}</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Participation Rules */}\n          {contest.config && (\n            <div className=\"bg-white/5 backdrop-blur-sm rounded-xl border border-white/10 p-6\">\n              <h4 className=\"text-lg font-bold text-white mb-4 flex items-center gap-2\">\n                <Shield className=\"h-5 w-5 text-violet-400\" />\n                Participation Rules\n              </h4>\n              <div className=\"space-y-2 text-slate-300\">\n                {contest.config.maxSubmissions && (\n                  <div className=\"flex items-center justify-between p-3 bg-white/5 rounded-lg\">\n                    <span>Max Submissions per User</span>\n                    <span className=\"text-white font-semibold\">{contest.config.maxSubmissions}</span>\n                  </div>\n                )}\n                {contest.config.allowedMediaTypes && (\n                  <div className=\"flex items-center justify-between p-3 bg-white/5 rounded-lg\">\n                    <span>Allowed Media Types</span>\n                    <span className=\"text-white font-semibold\">{contest.config.allowedMediaTypes.join(', ')}</span>\n                  </div>\n                )}\n                {contest.config.fileSizeLimit && (\n                  <div className=\"flex items-center justify-between p-3 bg-white/5 rounded-lg\">\n                    <span>File Size Limit</span>\n                    <span className=\"text-white font-semibold\">{contest.config.fileSizeLimit}MB</span>\n                  </div>\n                )}\n                {contest.config.eligibility && (\n                  <div className=\"flex items-center justify-between p-3 bg-white/5 rounded-lg\">\n                    <span>Eligibility</span>\n                    <span className=\"text-white font-semibold capitalize\">{contest.config.eligibility.replace(/_/g, ' ')}</span>\n                  </div>\n                )}\n                {contest.config.entryFee && contest.config.entryFeeAmount && (\n                  <div className=\"flex items-center justify-between p-3 bg-white/5 rounded-lg\">\n                    <span>Entry Fee</span>\n                    <span className=\"text-white font-semibold\">{contest.config.entryFeeAmount} {contest.config.currency || 'GLORY'}</span>\n                  </div>\n                )}\n                {!contest.config.entryFee && (\n                  <div className=\"flex items-center justify-between p-3 bg-white/5 rounded-lg\">\n                    <span>Entry Fee</span>\n                    <span className=\"text-green-400 font-semibold\">Free to Enter</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Rules */}\n          <div className=\"bg-white/5 backdrop-blur-sm rounded-xl border border-white/10 p-6\">\n            <h4 className=\"text-lg font-bold text-white mb-4 flex items-center gap-2\">\n              <Users className=\"h-5 w-5 text-violet-400\" />\n              Contest Rules & Guidelines\n            </h4>\n            <div \n              className=\"prose prose-invert prose-sm max-w-none text-slate-300\"\n              dangerouslySetInnerHTML={{ __html: contest.rules.replace(/\\n/g, '<br>') }}\n              data-testid=\"text-contest-rules\"\n            />\n          </div>\n\n          {/* Close Button */}\n          <GlassButton\n            onClick={onClose}\n            className=\"w-full py-3\"\n            data-testid=\"button-close-rules-bottom\"\n          >\n            Close\n          </GlassButton>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10641},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"replit.md":{"content":"# 5best - Creative Competition Platform\n\n## Overview\n\n5best is a creative competition platform built with a modern full-stack architecture. The application enables users to participate in contests by submitting images and videos, vote on submissions, and earn GLORY rewards. The platform features role-based access control with admin moderation capabilities and implements a structured reward distribution system where top 5 submissions receive tiered GLORY prizes (40%, 25%, 15%, 10%, 10%).\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript running on Vite for fast development and optimized production builds\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Components**: shadcn/ui component library built on Radix UI primitives with Tailwind CSS for styling\n- **State Management**: TanStack Query (React Query) for server state management with automatic caching and invalidation\n- **Form Handling**: React Hook Form with Zod validation for type-safe form schemas\n- **Design System**: Custom design tokens with CSS variables supporting dark mode, gradient effects, and glass morphism aesthetics\n\n**Key Design Decisions**:\n- Chose Vite over Create React App for faster HMR and build times\n- TanStack Query eliminates need for global state management (Redux/Zustand) by managing server state effectively\n- shadcn/ui provides accessible, customizable components while maintaining full code ownership\n- Wouter chosen over React Router for smaller bundle size in this application\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js REST API\n- **Language**: TypeScript with ES modules for type safety and modern JavaScript features\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect (configured for Neon serverless)\n- **Authentication**: JWT-based authentication with httpOnly cookies for secure token storage\n- **Password Security**: bcrypt for password hashing (10 rounds)\n- **Middleware Stack**: Cookie parser, JSON body parsing with raw body preservation for webhooks\n\n**Authentication & Authorization**:\n- Three-tier access control: unauthenticated, authenticated users, and admin\n- User status flow: pending → approved/banned (requires admin action)\n- JWT tokens stored in httpOnly cookies to prevent XSS attacks\n- Middleware chain: `authenticateToken` → `requireApproved` → `requireAdmin` for progressive authorization\n\n**Rate Limiting**:\n- In-memory rate limiter for voting (30 votes per hour per user)\n- Tracks votes via database queries within sliding time window\n- Production-ready design allows easy migration to Redis for distributed systems\n\n### Database Schema & Data Model\n\n**Core Entities**:\n1. **Users**: Identity, roles (user/admin), status (pending/approved/banned), GLORY balance\n2. **Contests**: Competition details, prize pool, status lifecycle (draft/active/ended)\n3. **Submissions**: User-created content linked to contests, moderation status\n4. **Votes**: One vote per user per submission with uniqueness constraint\n5. **GloryLedger**: Immutable transaction log for GLORY balance changes\n6. **AuditLog**: Activity tracking for administrative actions\n\n**Key Schema Patterns**:\n- UUID primary keys with PostgreSQL `gen_random_uuid()` for distributed safety\n- Composite unique constraints on votes (userId + submissionId) to enforce one-vote rule\n- Cascade deletion from users/contests to maintain referential integrity\n- Indexed columns on frequently queried fields (email, username, slug, status)\n- Timestamp tracking (createdAt, updatedAt) for audit trails\n\n### File Upload & Media Management\n- **Primary**: Cloudinary integration for image/video uploads with automatic optimization\n- **Fallback**: Local file system storage when Cloudinary credentials unavailable\n- **Upload Flow**: Multer middleware → file validation → Cloudinary/local storage → URL persistence\n- **File Constraints**: 10MB for images, 100MB for videos with MIME type validation\n- **Media Types**: Images and H.264/WebM video support with thumbnail generation\n\n**Tradeoffs**:\n- Cloudinary provides CDN, automatic format optimization, and video transcoding\n- Local fallback ensures development works without external service dependencies\n- Chose Cloudinary over S3 for simpler API and built-in transformations\n\n### Contest & Reward System\n\n**Contest Lifecycle**:\n1. **Draft**: Admin creates contest, configures prize pool and timeline\n2. **Active**: Users submit entries (pending approval), approved users can vote\n3. **Ended**: Admin triggers reward distribution, calculates top 5, distributes GLORY\n\n**Reward Distribution Algorithm**:\n- Top 5 submissions sorted by vote count receive tiered percentages\n- Distribution: 1st place 40%, 2nd 25%, 3rd 15%, 4th 10%, 5th 10%\n- Atomic transaction: Creates GloryLedger entries and updates user balances\n- Remainder from rounding goes to first place winner\n\n**Vote Integrity & Flexibility**:\n- **Voting Frequency Control**: Contests can configure `votesPerUserPerPeriod` and `periodDurationHours` to allow multiple votes per submission within time windows (e.g., 3 votes per 24 hours)\n- **Total Vote Limits**: Optional `totalVotesPerUser` caps total votes across entire contest\n- **Rate Limiting**: System-wide 30 votes per hour per user prevents abuse\n- **Access Control**: Only approved users can vote (prevents banned/pending abuse)\n\n**Contest Type Validation**:\n- Contests specify `contestType` (image/video) in config\n- Submissions validated against contest type during upload\n- File type enforcement ensures only matching media types accepted\n\n**Entry Fee System**:\n- Contests can require entry fees (paid in GLORY, Solana, or USDC)\n- Entry fee deducted AFTER submission creation (atomic operation)\n- Creates `glory_ledger` entry for transparency\n- Prevents GLORY loss if upload fails\n\n**Jury Voting**:\n- Contests can enable `votingMethods`: ['public'], ['jury'], or ['public', 'jury']\n- When ONLY 'jury' voting: restricted to users in `juryMembers` array\n- Hybrid mode (public+jury): all approved users can vote\n- Jury members specified by user IDs in contest config\n\n**Contest Status Workflow**:\n- **Draft**: Requires admin approval, not publicly visible\n- **Active** (via \"Publish\"): Live immediately, users can submit/vote\n- **Ended**: Voting closed, ready for reward distribution\n- **Archived**: Historical storage, no longer active\n\n**Submission Rules**:\n- `maxSubmissions`: Limit submissions per user (validated at submission time)\n- `fileSizeLimit`: Max file size in MB (validated during upload)\n- `submissionEndAt`: Optional deadline separate from voting end\n\n### API Design Patterns\n- **Validation**: Zod schemas shared between client and server (`@shared/schema`)\n- **Error Handling**: Consistent JSON error responses with descriptive messages\n- **Response Format**: Standard { data } success, { error } failure pattern\n- **Path Aliases**: `@/` for client, `@shared/` for shared code enabling clean imports\n\n### Submission Detail & Sharing System\n\n**Dedicated Submission Pages**:\n- Each submission has unique URL: `/submission/:id`\n- Public access for approved submissions, private for pending (owner/admin only)\n- Full submission details: image/video, author info, contest link, vote count, tags\n- Direct vote and share functionality on submission page\n\n**Share Functionality**:\n- Web Share API for native mobile sharing\n- Clipboard fallback for desktop browsers  \n- Share URLs point to dedicated submission detail pages (`/submission/:id`)\n- Prepared for future marketplace: dedicated pages enable product listings, pricing, licensing info\n\n**API Endpoint** (`GET /api/submissions/:id`):\n- Optional authentication (public access for approved, authenticated for own pending)\n- Enriched response includes user info, contest info, hasVoted status\n- Permission-based visibility: admin sees all, users see approved + own submissions\n\n**Future Marketplace Integration**:\n- Submission detail pages designed to support \"Buy Now\" buttons\n- URL structure ready for SEO and social media sharing\n- Foundation for adding price, license type, download management\n\n## External Dependencies\n\n### Core Services\n- **Neon Database**: Serverless PostgreSQL with connection pooling via `@neondatabase/serverless`\n- **Cloudinary**: Media hosting, CDN, and transformation service for images/videos\n\n### Authentication & Security\n- **JWT**: Token generation and verification via `jsonwebtoken`\n- **bcrypt**: Password hashing with configurable salt rounds\n- **Cookie Parser**: Secure cookie handling for authentication tokens\n\n### Development & Build Tools\n- **Drizzle Kit**: Database migrations and schema management\n- **esbuild**: Fast server-side bundling for production\n- **tsx**: TypeScript execution for development workflow\n- **Vite**: Frontend bundling with HMR and optimized builds\n\n### UI & Component Libraries\n- **Radix UI**: Headless accessible component primitives (30+ components)\n- **Tailwind CSS**: Utility-first styling with custom design tokens\n- **class-variance-authority**: Type-safe component variant management\n- **React Hook Form**: Performant form state management\n- **TanStack Query**: Async state management and caching\n\n### Session Management\n- **connect-pg-simple**: PostgreSQL session store (configured but JWT is primary auth method)\n- **express-session**: Session middleware for potential session-based features\n\n### Additional Utilities\n- **date-fns**: Date manipulation and formatting\n- **nanoid**: Unique ID generation for sessions/tokens\n- **multer**: Multipart form data handling for file uploads","size_bytes":9630},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        DEFAULT: \"0.25rem\",\n        lg: \"0.5rem\",\n        xl: \"0.75rem\",\n        full: \"9999px\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        success: {\n          DEFAULT: \"var(--success)\",\n          foreground: \"var(--success-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        display: ['Inter', 'sans-serif'],\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      animation: {\n        \"pulse-slow\": \"pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2984},"CASHOUT_TEST_SCENARIO.md":{"content":"# Solana Cashout Test Scenario\n\n## Test Environment Setup\n\n### Prerequisites\n- Phantom wallet browser extension installed\n- Test Solana wallet with devnet SOL/USDC (for demo purposes)\n- Two browser profiles/windows:\n  - Profile 1: Regular user account\n  - Profile 2: Admin account\n\n---\n\n## Test Scenario: Complete Cashout Workflow\n\n### Phase 1: User Wallet Connection\n\n**As a Regular User:**\n\n1. **Login to User Account**\n   - Navigate to `/login`\n   - Login with regular user credentials\n   - Verify user has GLORY balance > 1000\n\n2. **Connect Phantom Wallet**\n   - Navigate to `/profile`\n   - Click on \"Settings\" tab\n   - Locate \"Solana Wallet\" card\n   - Click \"Connect Phantom Wallet\" button\n   - Phantom extension popup appears\n   - Approve the connection request\n   - Verify wallet address is displayed\n   - Verify \"Verified\" badge appears\n\n**Expected Result:**\n- ✅ Wallet address shown in the UI\n- ✅ Green \"Verified\" badge displayed\n- ✅ Connection status saved to database\n\n---\n\n### Phase 2: Cashout Request\n\n**As a Regular User (continued):**\n\n3. **Submit Cashout Request**\n   - Still on Settings tab in profile page\n   - Locate \"Cash Out GLORY\" card\n   - Enter amount: `2000` GLORY\n   - Select token type: `USDC` (or SOL/GLORY)\n   - Click \"Request Cashout\" button\n   - Wait for success toast notification\n\n4. **Verify Request Appears**\n   - Scroll down to \"Cashout History\" section\n   - Verify new request appears with:\n     - Amount: 2000 GLORY → 2000 USDC (1:1 ratio)\n     - Status: \"pending\" (yellow badge)\n     - Date: Current date\n   - Check user's GLORY balance (should be unchanged - not deducted yet)\n\n**Expected Result:**\n- ✅ Request created successfully\n- ✅ Status shows \"pending\"\n- ✅ GLORY not yet deducted (deducted only on admin approval)\n\n---\n\n### Phase 3: Admin Approval\n\n**As an Admin:**\n\n5. **Access Admin Dashboard**\n   - Login with admin credentials\n   - Navigate to `/admin`\n   - Click on \"Cashouts\" tab\n\n6. **Review Pending Request**\n   - Verify the cashout request appears in the table\n   - Check details:\n     - User: Username and email visible\n     - Amount: 2000 GLORY → 2000 USDC\n     - Wallet: Truncated Solana address\n     - Status: \"pending\" badge\n     - Actions: \"Approve\" and \"Reject\" buttons visible\n\n7. **Approve Cashout Request**\n   - Click \"Approve\" button for the request\n   - Wait for success toast: \"Cashout Approved - GLORY has been deducted...\"\n   - Verify status changes to \"approved\" (blue badge)\n   - Verify action button changes to \"Mark as Sent\"\n\n**Expected Result:**\n- ✅ Status changed to \"approved\"\n- ✅ User's GLORY balance deducted by 2000\n- ✅ GLORY ledger entry created (negative delta)\n- ✅ \"Mark as Sent\" button now visible\n\n**Alternative Flow - Rejection:**\n- Click \"Reject\" instead of \"Approve\"\n- Verify status changes to \"rejected\" (red badge)\n- Verify user's GLORY balance remains unchanged (no deduction occurred)\n- Verify no GLORY ledger entries created (query glory_ledger for this user)\n- Verify cashout_events shows pending → rejected transition\n- No further actions available\n\n---\n\n### Phase 4: Token Transfer & Transaction Recording\n\n**As an Admin (continued):**\n\n8. **Simulate Token Transfer**\n   - **Manual Step:** Use Phantom wallet to send tokens to user's wallet address\n   - Copy user's Solana wallet address from the table\n   - Send 2000 USDC (or equivalent) on Solana devnet\n   - **Copy the transaction hash from Phantom**\n\n9. **Mark Cashout as Sent**\n   - Back in admin dashboard, click \"Mark as Sent\" button\n   - Transaction hash dialog appears\n   - Paste the transaction hash from Phantom\n   - Click \"Mark as Sent\" button\n   - Wait for success toast\n\n10. **Verify Transaction Recorded**\n    - Status changes to \"sent\" (blue badge)\n    - \"View TX\" link appears next to the request\n    - Click \"View TX\" link\n    - Verify it opens Solscan.io with correct transaction hash\n    - Verify transaction details on Solscan (devnet)\n\n**Expected Result:**\n- ✅ Transaction hash saved to database\n- ✅ Status updated to \"sent\"\n- ✅ Solscan link works correctly\n- ✅ Cashout event recorded in audit log\n\n---\n\n### Phase 5: User Verification\n\n**As a Regular User:**\n\n11. **Check Cashout Status**\n    - Navigate back to `/profile` → Settings tab\n    - Scroll to \"Cashout History\"\n    - Verify request now shows:\n      - Status: \"sent\" or \"confirmed\" (blue/green badge)\n      - \"View Transaction\" link visible\n    - Click transaction link\n    - Verify Solscan page loads with transaction\n\n12. **Verify GLORY Balance**\n    - Check GLORY balance display (should be reduced by 2000)\n    - Navigate to \"GLORY History\" tab\n    - Verify deduction entry appears:\n      - Reason: \"Cashout deduction\" or similar\n      - Delta: -2000 GLORY\n      - Date: Approval timestamp\n\n**Expected Result:**\n- ✅ User sees completed cashout with transaction link\n- ✅ GLORY balance correctly reduced\n- ✅ GLORY ledger shows deduction entry\n- ✅ Transaction link works from user view\n\n---\n\n## Test Case Matrix\n\n| Scenario | Expected Behavior | Status |\n|----------|------------------|--------|\n| Connect wallet without Phantom | Error message, redirect to Phantom download | ⬜ |\n| Request cashout < 1000 GLORY | Validation error message | ⬜ |\n| Request cashout > user balance | Backend validation error | ⬜ |\n| Admin approves request | GLORY deducted, status → approved | ⬜ |\n| Admin rejects pending request | Status → rejected, no GLORY change | ⬜ |\n| Mark as sent without TX hash | Validation error in dialog | ⬜ |\n| Mark as sent with TX hash | Status → sent, link works | ⬜ |\n| Approve request twice (race condition) | Second attempt fails gracefully | ⬜ |\n| Disconnect wallet | Wallet status cleared, cashout disabled | ⬜ |\n\n---\n\n## Edge Cases to Test\n\n### 1. Multiple Cashout Requests\n- Create 3 cashout requests as user\n- Approve 1st, reject 2nd, keep 3rd pending\n- Verify all show correct status independently\n\n### 2. Transaction Confirmation Flow\n- Admin approves request (GLORY deducted, status → \"approved\")\n- Admin marks as sent with TX hash (status → \"sent\")\n- **Expected:** Transaction recorded with hash\n- **Verify:** Solscan link works, cashout_events shows transitions\n\n### 3. Invalid Transaction Hash\n- Mark cashout as sent\n- Enter invalid/malformed transaction hash\n- Complete the action\n- Click \"View TX\" link\n- **Expected:** Solscan shows error or 404 (graceful handling)\n\n### 4. Wallet Re-connection\n- Connect wallet\n- Submit cashout request\n- Disconnect wallet\n- Reconnect same wallet\n- **Expected:** Previous cashout request still accessible\n\n---\n\n## Database Verification Queries\n\nAfter testing, verify database state:\n\n```sql\n-- Check cashout requests\nSELECT id, user_id, wallet_id, amount_glory, amount_token, \n       token_type, status, tx_hash, admin_id, created_at\nFROM cashout_requests \nORDER BY created_at DESC LIMIT 5;\n\n-- Check cashout events (audit trail for status transitions)\nSELECT id, cashout_request_id, from_status, to_status, \n       actor_user_id, notes, created_at\nFROM cashout_events \nORDER BY created_at DESC LIMIT 10;\n\n-- Check user GLORY balance and wallet\nSELECT u.id, u.username, u.glory_balance, \n       w.address, w.provider, w.status AS wallet_status\nFROM users u\nLEFT JOIN user_wallets w ON w.user_id = u.id\nWHERE u.username = 'testuser';\n\n-- Check GLORY ledger entries for cashout-related transactions\nSELECT user_id, delta, reason, contest_id, submission_id, created_at\nFROM glory_ledger \nWHERE reason LIKE '%cashout%' OR reason LIKE '%Cashout%'\nORDER BY created_at DESC LIMIT 10;\n\n-- Get full cashout details with user and wallet info\nSELECT \n    cr.id AS request_id,\n    cr.status,\n    cr.amount_glory,\n    cr.amount_token,\n    cr.token_type,\n    cr.tx_hash,\n    u.username,\n    u.email,\n    u.glory_balance AS current_glory,\n    w.address AS wallet_address,\n    w.provider,\n    cr.created_at,\n    cr.updated_at\nFROM cashout_requests cr\nJOIN users u ON cr.user_id = u.id\nJOIN user_wallets w ON cr.wallet_id = w.id\nORDER BY cr.created_at DESC\nLIMIT 5;\n```\n\n---\n\n## Success Criteria\n\n- ✅ Wallet connects and verifies via Solana signature\n- ✅ Cashout requests created with correct amounts and token types\n- ✅ Admin can approve/reject pending requests with proper state transitions\n- ✅ GLORY deducted only on admin approval (not on request creation)\n- ✅ GLORY remains unchanged on pending rejection (no deduction occurred, so no refund needed)\n- ✅ Transaction hashes saved and displayed correctly\n- ✅ Solscan links work for devnet transactions\n- ✅ Complete audit trail in cashout_events table:\n  - pending → approved (or rejected)\n  - approved → sent (with TX hash)\n- ✅ GLORY ledger entries created correctly:\n  - Deduction entry when admin approves request\n  - No ledger entry when admin rejects pending request (nothing to deduct/refund)\n- ✅ All UI states display correctly:\n  - pending: Shows approve/reject buttons\n  - approved: Shows \"mark as sent\" button\n  - sent: Shows Solscan transaction link\n  - rejected: No actions available\n- ✅ No console errors or unhandled exceptions\n- ✅ Proper toast notifications for all state changes\n\n---\n\n## Known Limitations (Devnet)\n\n1. **Mock Token Conversion:** 1 GLORY = 1 USDC (hardcoded, no real price feed)\n2. **Manual Token Transfer:** Admin must manually send tokens via Phantom\n3. **Devnet Only:** Transaction links point to Solscan devnet\n4. **No Automatic Confirmation:** Status doesn't auto-update from blockchain\n\n---\n\n## Next Steps After Testing\n\nIf all tests pass:\n1. Document any bugs found and fixes applied\n2. Consider adding automated tests for critical flows\n3. Add production-ready features:\n   - Automatic token price conversion (GLORY → USD → SOL/USDC)\n   - Automated token transfer via backend wallet\n   - Blockchain confirmation polling\n   - Mainnet deployment configuration\n","size_bytes":9828},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, jsonb, unique, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\", { length: 255 }).notNull().unique(),\n  email: varchar(\"email\", { length: 255 }).notNull().unique(),\n  passwordHash: text(\"password_hash\").notNull(),\n  avatarUrl: text(\"avatar_url\"),\n  role: varchar(\"role\", { length: 50 }).notNull().default(\"user\"), // user, admin\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"pending\"), // pending, approved, banned\n  gloryBalance: integer(\"glory_balance\").notNull().default(0),\n  solBalance: integer(\"sol_balance\").notNull().default(0),\n  usdcBalance: integer(\"usdc_balance\").notNull().default(0),\n  withdrawalAddress: varchar(\"withdrawal_address\", { length: 255 }), // Solana withdrawal address\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow()\n}, (table) => ({\n  emailIdx: index(\"users_email_idx\").on(table.email),\n  usernameIdx: index(\"users_username_idx\").on(table.username)\n}));\n\n// Contests table\nexport const contests = pgTable(\"contests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  slug: varchar(\"slug\", { length: 255 }).notNull().unique(),\n  description: text(\"description\").notNull(),\n  rules: text(\"rules\").notNull(),\n  coverImageUrl: text(\"cover_image_url\"),\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"draft\"), // draft, active, ended, archived\n  prizeGlory: integer(\"prize_glory\").notNull().default(0),\n  startAt: timestamp(\"start_at\").notNull(),\n  endAt: timestamp(\"end_at\").notNull(),\n  config: jsonb(\"config\"), // Stores all additional contest configuration (voting rules, prize distribution, etc.)\n  createdAt: timestamp(\"created_at\").notNull().defaultNow()\n}, (table) => ({\n  slugIdx: index(\"contests_slug_idx\").on(table.slug),\n  statusIdx: index(\"contests_status_idx\").on(table.status)\n}));\n\n// Submissions table\nexport const submissions = pgTable(\"submissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  contestId: varchar(\"contest_id\").references(() => contests.id, { onDelete: \"set null\" }),\n  contestName: varchar(\"contest_name\", { length: 255 }), // Preserved contest name even after contest deletion\n  type: varchar(\"type\", { length: 50 }).notNull(), // image, video\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  mediaUrl: text(\"media_url\").notNull(),\n  thumbnailUrl: text(\"thumbnail_url\"),\n  cloudinaryPublicId: varchar(\"cloudinary_public_id\", { length: 255 }), // Store Cloudinary public_id for easy deletion\n  cloudinaryResourceType: varchar(\"cloudinary_resource_type\", { length: 20 }), // Store resource type (image/video) for deletion\n  tags: text(\"tags\").array(),\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"pending\"), // pending, approved, rejected\n  votesCount: integer(\"votes_count\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow()\n}, (table) => ({\n  userContestIdx: index(\"submissions_user_contest_idx\").on(table.userId, table.contestId),\n  contestStatusIdx: index(\"submissions_contest_status_idx\").on(table.contestId, table.status),\n  votesIdx: index(\"submissions_votes_idx\").on(table.votesCount)\n}));\n\n// Votes table\nexport const votes = pgTable(\"votes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  submissionId: varchar(\"submission_id\").notNull().references(() => submissions.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow()\n}, (table) => ({\n  userIdx: index(\"votes_user_idx\").on(table.userId),\n  submissionIdx: index(\"votes_submission_idx\").on(table.submissionId),\n  createdAtIdx: index(\"votes_created_at_idx\").on(table.createdAt)\n}));\n\n// Glory Ledger table (kept for backwards compatibility, but now tracks all currencies)\nexport const gloryLedger = pgTable(\"glory_ledger\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  delta: integer(\"delta\").notNull(), // positive or negative change\n  currency: varchar(\"currency\", { length: 20 }).notNull().default(\"GLORY\"), // GLORY, SOL, USDC\n  reason: text(\"reason\").notNull(),\n  contestId: varchar(\"contest_id\").references(() => contests.id, { onDelete: \"set null\" }),\n  submissionId: varchar(\"submission_id\").references(() => submissions.id, { onDelete: \"set null\" }),\n  txHash: varchar(\"tx_hash\", { length: 255 }), // Blockchain transaction hash (for crypto payments)\n  metadata: jsonb(\"metadata\"), // Additional transaction metadata\n  createdAt: timestamp(\"created_at\").notNull().defaultNow()\n}, (table) => ({\n  userIdx: index(\"glory_ledger_user_idx\").on(table.userId),\n  createdAtIdx: index(\"glory_ledger_created_at_idx\").on(table.createdAt),\n  contestSubmissionUnique: unique(\"glory_ledger_contest_submission_unique\").on(table.contestId, table.submissionId),\n  txHashUnique: unique(\"glory_ledger_tx_hash_unique\").on(table.txHash)\n}));\n\n// Audit Log table\nexport const auditLog = pgTable(\"audit_log\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  actorUserId: varchar(\"actor_user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  action: varchar(\"action\", { length: 255 }).notNull(),\n  meta: jsonb(\"meta\"), // JSON metadata\n  createdAt: timestamp(\"created_at\").notNull().defaultNow()\n}, (table) => ({\n  actorIdx: index(\"audit_log_actor_idx\").on(table.actorUserId),\n  createdAtIdx: index(\"audit_log_created_at_idx\").on(table.createdAt)\n}));\n\n// User Wallets table (Solana wallet addresses)\nexport const userWallets = pgTable(\"user_wallets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  address: varchar(\"address\", { length: 255 }).notNull().unique(), // Solana wallet address\n  provider: varchar(\"provider\", { length: 50 }).notNull(), // phantom, solflare, etc\n  signatureNonce: varchar(\"signature_nonce\", { length: 255 }), // For verification\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"active\"), // active, inactive\n  verifiedAt: timestamp(\"verified_at\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow()\n}, (table) => ({\n  userIdx: index(\"user_wallets_user_idx\").on(table.userId),\n  addressIdx: index(\"user_wallets_address_idx\").on(table.address)\n}));\n\n// Cashout Requests table\nexport const cashoutRequests = pgTable(\"cashout_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  withdrawalAddress: varchar(\"withdrawal_address\", { length: 255 }).notNull(), // Solana withdrawal address\n  amountGlory: integer(\"amount_glory\").notNull(), // GLORY points to cash out\n  amountToken: text(\"amount_token\").notNull(), // Token amount (as string for precision)\n  tokenType: varchar(\"token_type\", { length: 50 }).notNull().default(\"USDC\"), // USDC, SOL, GLORY\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"pending\"), // pending, approved, rejected, processing, sent, confirmed, failed\n  adminId: varchar(\"admin_id\").references(() => users.id, { onDelete: \"set null\" }), // Admin who processed\n  txHash: varchar(\"tx_hash\", { length: 255 }), // Solana transaction hash\n  txMeta: jsonb(\"tx_meta\"), // Additional transaction metadata\n  rejectionReason: text(\"rejection_reason\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow()\n}, (table) => ({\n  userIdx: index(\"cashout_requests_user_idx\").on(table.userId),\n  statusIdx: index(\"cashout_requests_status_idx\").on(table.status),\n  createdAtIdx: index(\"cashout_requests_created_at_idx\").on(table.createdAt)\n}));\n\n// Cashout Events table (audit trail)\nexport const cashoutEvents = pgTable(\"cashout_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  cashoutRequestId: varchar(\"cashout_request_id\").notNull().references(() => cashoutRequests.id, { onDelete: \"cascade\" }),\n  fromStatus: varchar(\"from_status\", { length: 50 }).notNull(),\n  toStatus: varchar(\"to_status\", { length: 50 }).notNull(),\n  actorUserId: varchar(\"actor_user_id\").references(() => users.id, { onDelete: \"set null\" }),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow()\n}, (table) => ({\n  cashoutRequestIdx: index(\"cashout_events_cashout_request_idx\").on(table.cashoutRequestId),\n  createdAtIdx: index(\"cashout_events_created_at_idx\").on(table.createdAt)\n}));\n\n// Relations\nexport const cashoutRequestsRelations = relations(cashoutRequests, ({ one }) => ({\n  user: one(users, {\n    fields: [cashoutRequests.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  gloryBalance: true\n});\n\nexport const insertContestSchema = createInsertSchema(contests).omit({\n  id: true,\n  createdAt: true\n}).extend({\n  startAt: z.union([z.date(), z.string()]).transform(val => \n    typeof val === 'string' ? new Date(val) : val\n  ),\n  endAt: z.union([z.date(), z.string()]).transform(val => \n    typeof val === 'string' ? new Date(val) : val\n  )\n});\n\nexport const insertSubmissionSchema = createInsertSchema(submissions).omit({\n  id: true,\n  createdAt: true,\n  votesCount: true\n});\n\nexport const insertVoteSchema = createInsertSchema(votes).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertGloryLedgerSchema = createInsertSchema(gloryLedger).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLog).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertUserWalletSchema = createInsertSchema(userWallets).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\n\nexport const insertCashoutRequestSchema = createInsertSchema(cashoutRequests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\n\nexport const insertCashoutEventSchema = createInsertSchema(cashoutEvents).omit({\n  id: true,\n  createdAt: true\n});\n\n// Contest Config schema\nexport const contestConfigSchema = z.object({\n  // Contest type and rules\n  contestType: z.enum([\"image\", \"video\"]).optional(),\n  votingMethods: z.array(z.enum([\"public\", \"jury\"])).optional(),\n  juryMembers: z.array(z.string()).optional(),\n  maxSubmissions: z.number().optional(),\n  fileSizeLimit: z.number().optional(),\n  \n  // Timing\n  submissionEndAt: z.string().optional(),\n  votingStartAt: z.string().optional(),\n  votingEndAt: z.string().optional(),\n  \n  // Voting rules\n  votesPerUserPerPeriod: z.number().optional(),\n  periodDurationHours: z.number().optional(),\n  totalVotesPerUser: z.number().optional(),\n  \n  // Prize distribution\n  prizeDistribution: z.array(z.number()).optional(),\n  \n  // Entry fee configuration\n  entryFee: z.boolean().optional(),\n  entryFeeAmount: z.number().optional(),\n  entryFeeCurrency: z.enum([\"GLORY\", \"SOL\", \"USDC\", \"CUSTOM\"]).optional(),\n  entryFeePaymentMethods: z.array(z.enum([\"balance\", \"wallet\"])).optional(), // Allow balance or wallet payment\n  \n  // Platform wallet configuration for crypto payments\n  platformWalletAddress: z.string().min(32).max(44).regex(/^[1-9A-HJ-NP-Za-km-z]+$/).optional(), // Solana wallet address (base58, 32-44 chars)\n  platformFeePercentage: z.number().min(0).max(100).optional(), // Platform fee percentage from entry fees\n  \n  // Custom SPL token support\n  customTokenMint: z.string().min(32).max(44).regex(/^[1-9A-HJ-NP-Za-km-z]+$/).optional(), // Solana SPL token mint address (base58, 32-44 chars)\n  customTokenDecimals: z.number().int().min(0).max(9).optional(), // Decimals for custom token (0-9)\n}).optional().refine((config) => {\n  // If currency is CUSTOM, require customTokenMint and customTokenDecimals\n  if (config?.entryFeeCurrency === \"CUSTOM\") {\n    return config.customTokenMint && config.customTokenDecimals !== undefined;\n  }\n  return true;\n}, {\n  message: \"customTokenMint and customTokenDecimals are required when entryFeeCurrency is CUSTOM\"\n}).refine((config) => {\n  // Forbid customTokenMint/decimals when currency is not CUSTOM\n  if (config?.entryFeeCurrency && config.entryFeeCurrency !== \"CUSTOM\") {\n    return !config.customTokenMint && config.customTokenDecimals === undefined;\n  }\n  return true;\n}, {\n  message: \"customTokenMint and customTokenDecimals can only be used when entryFeeCurrency is CUSTOM\"\n}).refine((config) => {\n  // If wallet payment is enabled, require platformWalletAddress\n  if (config?.entryFeePaymentMethods?.includes(\"wallet\")) {\n    return !!config.platformWalletAddress;\n  }\n  return true;\n}, {\n  message: \"platformWalletAddress is required when wallet payment method is enabled\"\n});\n\nexport type ContestConfig = z.infer<typeof contestConfigSchema>;\n\n// Auth schemas\nexport const loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6)\n});\n\nexport const registerSchema = z.object({\n  username: z.string().min(3).max(50),\n  email: z.string().email(),\n  password: z.string().min(6)\n});\n\n// API response schemas\nexport const voteSubmissionSchema = z.object({\n  submissionId: z.string()\n});\n\nexport const updateUserStatusSchema = z.object({\n  status: z.enum([\"pending\", \"approved\", \"banned\"])\n});\n\nexport const updateSubmissionStatusSchema = z.object({\n  status: z.enum([\"pending\", \"approved\", \"rejected\"])\n});\n\nexport const updateWithdrawalAddressSchema = z.object({\n  address: z.string().min(32).max(44) // Solana wallet address (32-44 chars)\n});\n\nexport const bulkSubmissionIdsSchema = z.object({\n  submissionIds: z.array(z.string()).min(1, \"At least one submission must be selected\")\n});\n\n// Wallet and Cashout schemas\nexport const connectWalletSchema = z.object({\n  address: z.string().min(32).max(44), // Solana addresses are 32-44 chars\n  provider: z.string(), // phantom, solflare, etc\n  signature: z.string(), // Signature for verification\n  message: z.string() // Message that was signed\n});\n\nexport const createCashoutRequestSchema = z.object({\n  withdrawalAddress: z.string().min(32).max(44), // Solana address\n  amountGlory: z.number().int().min(1000), // Minimum 1000 GLORY\n  tokenType: z.enum([\"USDC\", \"SOL\", \"GLORY\"]).default(\"USDC\")\n});\n\nexport const updateCashoutStatusSchema = z.object({\n  status: z.enum([\"approved\", \"rejected\", \"processing\", \"sent\", \"confirmed\", \"failed\"]),\n  rejectionReason: z.string().optional(),\n  txHash: z.string().optional()\n});\n\nexport const approveCashoutSchema = z.object({\n  requestId: z.string()\n});\n\nexport const rejectCashoutSchema = z.object({\n  requestId: z.string(),\n  rejectionReason: z.string().optional()\n});\n\nexport const bulkCashoutIdsSchema = z.object({\n  requestIds: z.array(z.string()).min(1, \"At least one request must be selected\")\n});\n\nexport const bulkRejectCashoutSchema = z.object({\n  requestIds: z.array(z.string()).min(1, \"At least one request must be selected\"),\n  rejectionReason: z.string().optional()\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertContest = z.infer<typeof insertContestSchema>;\nexport type Contest = typeof contests.$inferSelect;\nexport type InsertSubmission = z.infer<typeof insertSubmissionSchema>;\nexport type Submission = typeof submissions.$inferSelect;\nexport type InsertVote = z.infer<typeof insertVoteSchema>;\nexport type Vote = typeof votes.$inferSelect;\nexport type InsertGloryLedger = z.infer<typeof insertGloryLedgerSchema>;\nexport type GloryLedger = typeof gloryLedger.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\nexport type AuditLog = typeof auditLog.$inferSelect;\nexport type InsertUserWallet = z.infer<typeof insertUserWalletSchema>;\nexport type UserWallet = typeof userWallets.$inferSelect;\nexport type InsertCashoutRequest = z.infer<typeof insertCashoutRequestSchema>;\nexport type CashoutRequest = typeof cashoutRequests.$inferSelect;\nexport type InsertCashoutEvent = z.infer<typeof insertCashoutEventSchema>;\nexport type CashoutEvent = typeof cashoutEvents.$inferSelect;\n\n// Extended types with relations\nexport type SubmissionWithUser = Submission & {\n  user: Pick<User, 'id' | 'username'>;\n  contest: Pick<Contest, 'id' | 'title'>;\n};\n\nexport type ContestWithStats = Contest & {\n  submissionCount: number;\n  participantCount: number;\n  totalVotes: number;\n  topSubmissionImageUrl?: string | null;\n};\n\nexport type UserWithStats = User & {\n  submissionCount: number;\n  totalVotes: number;\n  contestWins: number;\n};\n\nexport type CashoutRequestWithRelations = CashoutRequest & {\n  user: Pick<User, 'id' | 'username' | 'email' | 'gloryBalance'>;\n};\n\n// Site Settings table (global settings - should have only one row)\nexport const siteSettings = pgTable(\"site_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  privateMode: boolean(\"private_mode\").notNull().default(false), // When true, only logged-in users can access the site\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow()\n});\n\nexport const insertSiteSettingsSchema = createInsertSchema(siteSettings).omit({\n  id: true,\n  updatedAt: true\n});\n\nexport type InsertSiteSettings = z.infer<typeof insertSiteSettingsSchema>;\nexport type SiteSettings = typeof siteSettings.$inferSelect;\n","size_bytes":17906},"client/src/components/layout/footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { Trophy } from \"lucide-react\";\n\nexport function Footer() {\n  return (\n    <footer className=\"border-t border-border mt-8 md:mt-16 pb-20 md:pb-0\" data-testid=\"footer\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 md:py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 md:gap-8 mb-6 md:mb-8\">\n          <div>\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <div className=\"w-10 h-10 rounded-lg gradient-glory flex items-center justify-center\">\n                <Trophy className=\"text-white text-xl\" />\n              </div>\n              <span className=\"text-2xl font-bold tracking-tight\">5best</span>\n            </div>\n            <p className=\"text-muted-foreground text-sm\">\n              The premier platform for creative competitions. Compete, create, and win GLORY.\n            </p>\n          </div>\n          \n          <div>\n            <h4 className=\"font-bold mb-4\">Platform</h4>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li><Link href=\"/contests\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-link-contests\">Contests</Link></li>\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-link-how-it-works\">How It Works</a></li>\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-link-rules\">Rules</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"font-bold mb-4\">Community</h4>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-link-discord\">Discord</a></li>\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-link-twitter\">Twitter</a></li>\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-link-instagram\">Instagram</a></li>\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-link-blog\">Blog</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"font-bold mb-4\">Support</h4>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-link-help\">Help Center</a></li>\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-link-contact\">Contact Us</a></li>\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-link-privacy\">Privacy Policy</a></li>\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-link-terms\">Terms of Service</a></li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"pt-6 md:pt-8 border-t border-border flex flex-col md:flex-row items-center justify-between gap-4\">\n          <p className=\"text-xs sm:text-sm text-muted-foreground\">\n            © 2024 5best. All rights reserved.\n          </p>\n          <div className=\"flex items-center space-x-4 md:space-x-6\">\n            <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"footer-social-twitter\">\n              <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path d=\"M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z\" />\n              </svg>\n            </a>\n            <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"footer-social-instagram\">\n              <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path d=\"M12.017 0C5.396 0 .029 5.367.029 11.987c0 6.62 5.367 11.987 11.988 11.987s11.987-5.367 11.987-11.987C24.004 5.367 18.637.001 12.017.001zM8.449 16.988c-1.297 0-2.448-.49-3.323-1.297C4.198 14.894 3.708 13.743 3.708 12.446s.49-2.448 1.297-3.323c.875-.807 2.026-1.297 3.323-1.297s2.448.49 3.323 1.297c.807.875 1.297 2.026 1.297 3.323s-.49 2.448-1.297 3.323c-.875.807-2.026 1.297-3.323 1.297zm7.83-9.708h-1.511V5.789h1.511v1.491zm-1.848 3.708c-.875-.807-2.026-1.297-3.323-1.297s-2.448.49-3.323 1.297c-.807.875-1.297 2.026-1.297 3.323s.49 2.448 1.297 3.323c.875.807 2.026 1.297 3.323 1.297s2.448-.49 3.323-1.297c.807-.875 1.297-2.026 1.297-3.323s-.49-2.448-1.297-3.323z\" />\n              </svg>\n            </a>\n            <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"footer-social-discord\">\n              <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path d=\"M20.317 4.37a19.791 19.791 0 0 0-4.885-1.515.074.074 0 0 0-.079.037c-.21.375-.444.864-.608 1.25a18.27 18.27 0 0 0-5.487 0 12.64 12.64 0 0 0-.617-1.25.077.077 0 0 0-.079-.037A19.736 19.736 0 0 0 3.677 4.37a.07.07 0 0 0-.032.027C.533 9.046-.32 13.58.099 18.057a.082.082 0 0 0 .031.057 19.9 19.9 0 0 0 5.993 3.03.078.078 0 0 0 .084-.028c.462-.63.874-1.295 1.226-1.994a.076.076 0 0 0-.041-.106 13.107 13.107 0 0 1-1.872-.892.077.077 0 0 1-.008-.128 10.2 10.2 0 0 0 .372-.292.074.074 0 0 1 .077-.01c3.928 1.793 8.18 1.793 12.062 0a.074.074 0 0 1 .078.01c.12.098.246.198.373.292a.077.077 0 0 1-.006.127 12.299 12.299 0 0 1-1.873.892.077.077 0 0 0-.041.107c.36.698.772 1.362 1.225 1.993a.076.076 0 0 0 .084.028 19.839 19.839 0 0 0 6.002-3.03.077.077 0 0 0 .032-.054c.5-5.177-.838-9.674-3.549-13.66a.061.061 0 0 0-.031-.03zM8.02 15.33c-1.183 0-2.157-1.085-2.157-2.419 0-1.333.956-2.419 2.157-2.419 1.21 0 2.176 1.096 2.157 2.42 0 1.333-.956 2.418-2.157 2.418zm7.975 0c-1.183 0-2.157-1.085-2.157-2.419 0-1.333.955-2.419 2.157-2.419 1.21 0 2.176 1.096 2.157 2.42 0 1.333-.946 2.418-2.157 2.418Z\" />\n              </svg>\n            </a>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":6133},"client/src/components/ui/ShareModal.tsx":{"content":"import React, { useState } from \"react\";\nimport { X, Twitter, Facebook, Copy, Share2, MessageSquare } from \"lucide-react\";\n\ninterface Props {\n  open: boolean;\n  onClose: () => void;\n  title?: string;\n  url?: string;\n}\n\nexport default function ShareModal({ open, onClose, title, url }: Props) {\n  const [copied, setCopied] = useState(false);\n  const shareUrl = url || (typeof window !== \"undefined\" ? window.location.href : \"\");\n\n  const handleWebShare = async () => {\n    if ((navigator as any).share) {\n      try {\n        await (navigator as any).share({ title, url: shareUrl });\n      } catch (e) {\n        // user cancelled or error — ignore\n      }\n      return;\n    }\n\n    // fallback to twitter\n    window.open(\n      `https://twitter.com/intent/tweet?text=${encodeURIComponent(`${title || \"\"} ${shareUrl}`)}`,\n      \"_blank\",\n      \"noopener,noreferrer\"\n    );\n  };\n\n  const handleTwitter = () => {\n    window.open(\n      `https://twitter.com/intent/tweet?text=${encodeURIComponent(`${title || \"\"} ${shareUrl}`)}`,\n      \"_blank\",\n      \"noopener,noreferrer\"\n    );\n  };\n\n  const handleFacebook = () => {\n    window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}`, \"_blank\", \"noopener,noreferrer\");\n  };\n\n  const handleTelegram = () => {\n    window.open(`https://t.me/share/url?url=${encodeURIComponent(shareUrl)}&text=${encodeURIComponent(title || \"\")}`, \"_blank\", \"noopener,noreferrer\");\n  };\n\n  const handleWhatsApp = () => {\n    window.open(`https://api.whatsapp.com/send?text=${encodeURIComponent(`${title || \"\"} ${shareUrl}`)}`, \"_blank\", \"noopener,noreferrer\");\n  };\n\n  const handleCopy = async () => {\n    try {\n      await navigator.clipboard.writeText(shareUrl);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 1500);\n    } catch (e) {\n      // ignore\n    }\n  };\n\n  if (!open) return null;\n\n  return (\n    <div\n      className=\"fixed inset-0 z-50 flex items-center justify-center\"\n      role=\"dialog\"\n      aria-modal=\"true\"\n      aria-label=\"Share\"\n    >\n      <div className=\"fixed inset-0 bg-black/50\" onClick={onClose} />\n      <div className=\"relative z-10 w-full max-w-md mx-4 rounded-lg bg-background p-4 shadow-lg\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h3 className=\"text-sm font-semibold text-white\">{title || \"Share\"}</h3>\n          <button onClick={onClose} aria-label=\"Close\" className=\"p-1 rounded hover:bg-white/5\">\n            <X className=\"text-white\" size={16} />\n          </button>\n        </div>\n\n        <div className=\"grid grid-cols-3 gap-3\">\n          <button onClick={handleWebShare} className=\"flex flex-col items-center justify-center gap-2 bg-white/5 rounded p-3\">\n            <Share2 size={20} />\n            <span className=\"text-xs\">Share</span>\n          </button>\n\n          <button onClick={handleTwitter} className=\"flex flex-col items-center justify-center gap-2 bg-white/5 rounded p-3\">\n            <Twitter size={20} />\n            <span className=\"text-xs\">Twitter</span>\n          </button>\n\n          <button onClick={handleFacebook} className=\"flex flex-col items-center justify-center gap-2 bg-white/5 rounded p-3\">\n            <Facebook size={20} />\n            <span className=\"text-xs\">Facebook</span>\n          </button>\n\n          <button onClick={handleTelegram} className=\"flex flex-col items-center justify-center gap-2 bg-white/5 rounded p-3\">\n            <MessageSquare size={20} />\n            <span className=\"text-xs\">Telegram</span>\n          </button>\n\n          <button onClick={handleWhatsApp} className=\"flex flex-col items-center justify-center gap-2 bg-white/5 rounded p-3\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"w-5 h-5\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M20.5 3.5A11 11 0 0 0 3.5 20.5L2 22l1.5-4.5A11 11 0 1 0 20.5 3.5z\"/></svg>\n            <span className=\"text-xs\">WhatsApp</span>\n          </button>\n\n          <button onClick={handleCopy} className=\"flex flex-col items-center justify-center gap-2 bg-white/5 rounded p-3\">\n            <Copy size={20} />\n            <span className=\"text-xs\">{copied ? \"Copied\" : \"Copy\"}</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4214},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"server/contest-scheduler.ts":{"content":"import type { IStorage } from \"./storage\";\n\ninterface ScheduledJob {\n  contestId: string;\n  timeoutId: NodeJS.Timeout;\n  endAt: Date;\n}\n\nexport class ContestScheduler {\n  private jobs: Map<string, ScheduledJob> = new Map();\n  private storage: IStorage;\n\n  constructor(storage: IStorage) {\n    this.storage = storage;\n  }\n\n  async initialize() {\n    // Schedule all active contests on startup\n    const contests = await this.storage.getContests({ status: \"active\" });\n    \n    for (const contest of contests) {\n      if (contest.endAt) {\n        this.scheduleContestEnd(contest.id, contest.endAt);\n      }\n    }\n    \n    console.log(`Contest scheduler initialized with ${this.jobs.size} active contests`);\n  }\n\n  scheduleContestEnd(contestId: string, endAt: Date) {\n    // Cancel existing job if any\n    this.cancelJob(contestId);\n\n    const now = new Date();\n    const endTime = new Date(endAt);\n    const delay = endTime.getTime() - now.getTime();\n\n    // Only schedule if the end time is in the future\n    if (delay <= 0) {\n      console.log(`Contest ${contestId} has already ended, distributing immediately`);\n      this.distributeRewards(contestId);\n      return;\n    }\n\n    // Maximum timeout value in JavaScript is ~24.8 days\n    const MAX_TIMEOUT = 2147483647;\n    const actualDelay = delay > MAX_TIMEOUT ? MAX_TIMEOUT : delay;\n\n    console.log(`Scheduling contest ${contestId} to end in ${Math.round(delay / 1000)} seconds`);\n\n    const timeoutId = setTimeout(async () => {\n      // Recalculate remaining delay\n      const nowInCallback = new Date();\n      const remainingDelay = endTime.getTime() - nowInCallback.getTime();\n      \n      // If there's still time remaining, reschedule for the remaining time\n      if (remainingDelay > 0) {\n        console.log(`Rescheduling contest ${contestId} for remaining ${Math.round(remainingDelay / 1000)} seconds`);\n        this.scheduleContestEnd(contestId, endTime);\n      } else {\n        await this.distributeRewards(contestId);\n        this.jobs.delete(contestId);\n      }\n    }, actualDelay);\n\n    this.jobs.set(contestId, {\n      contestId,\n      timeoutId,\n      endAt: endTime,\n    });\n  }\n\n  private async distributeRewards(contestId: string) {\n    try {\n      // Verify contest is still active before distributing\n      const contest = await this.storage.getContest(contestId);\n      if (!contest) {\n        console.log(`Contest ${contestId} no longer exists, skipping distribution`);\n        return;\n      }\n      \n      if (contest.status !== \"active\") {\n        console.log(`Contest ${contestId} is ${contest.status}, skipping distribution`);\n        return;\n      }\n\n      console.log(`Auto-distributing rewards for contest ${contestId}`);\n      await this.storage.distributeContestRewards(contestId);\n      console.log(`Successfully distributed rewards for contest ${contestId}`);\n    } catch (error) {\n      console.error(`Failed to distribute rewards for contest ${contestId}:`, error);\n    }\n  }\n\n  cancelJob(contestId: string) {\n    const job = this.jobs.get(contestId);\n    if (job) {\n      clearTimeout(job.timeoutId);\n      this.jobs.delete(contestId);\n      console.log(`Cancelled scheduled end for contest ${contestId}`);\n    }\n  }\n\n  rescheduleContest(contestId: string, newEndAt: Date) {\n    this.scheduleContestEnd(contestId, newEndAt);\n  }\n\n  getScheduledJobs() {\n    return Array.from(this.jobs.values()).map(job => ({\n      contestId: job.contestId,\n      endAt: job.endAt,\n    }));\n  }\n}\n","size_bytes":3469},"client/src/components/layout/bottom-nav.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth, useLogout, isAuthenticated, isAdmin } from \"@/lib/auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Home, Trophy, LogOut, User, Shield, Image } from \"lucide-react\";\n\nexport function BottomNav() {\n  const { data: user } = useAuth();\n  const logout = useLogout();\n  const [location, setLocation] = useLocation();\n\n  const handleLogout = () => {\n    logout.mutate();\n    setLocation(\"/\");\n  };\n\n  const getInitials = (username: string) => {\n    return username.substring(0, 2).toUpperCase();\n  };\n\n  const isActive = (path: string) => {\n    return location === path;\n  };\n\n  return (\n    <nav className={`${isAuthenticated(user) ? 'md:hidden' : ''} fixed bottom-0 left-0 right-0 z-50 bg-background-dark border-t border-white/10 shadow-lg`} data-testid=\"bottom-nav\">\n      <div className=\"flex items-center justify-around h-16 px-2\">\n        {/* Home */}\n        <Link href=\"/\" data-testid=\"bottom-link-home\">\n          <Button \n            variant=\"ghost\" \n            className={`flex flex-col items-center justify-center h-14 px-4 ${isActive('/') ? 'text-primary' : 'text-muted-foreground'}`}\n          >\n            <Home className=\"w-5 h-5\" />\n            <span className=\"text-xs mt-1\">Home</span>\n          </Button>\n        </Link>\n\n        {/* Contests */}\n        <Link href=\"/contests\" data-testid=\"bottom-link-contests\">\n          <Button \n            variant=\"ghost\" \n            className={`flex flex-col items-center justify-center h-14 px-4 ${isActive('/contests') ? 'text-primary' : 'text-muted-foreground'}`}\n          >\n            <Trophy className=\"w-5 h-5\" />\n            <span className=\"text-xs mt-1\">Contests</span>\n          </Button>\n        </Link>\n\n        {/* User Menu or Auth Buttons */}\n        {isAuthenticated(user) ? (\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button \n                variant=\"ghost\" \n                className=\"flex flex-col items-center justify-center h-14 px-4\" \n                data-testid=\"bottom-user-menu\"\n              >\n                <Avatar className=\"w-6 h-6\">\n                  <AvatarFallback className=\"gradient-glory text-white font-bold text-xs\">\n                    {getInitials(user.username)}\n                  </AvatarFallback>\n                </Avatar>\n                <span className=\"text-xs mt-1 text-muted-foreground\">Menu</span>\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-56 mb-2\">\n              <div className=\"px-3 py-2\">\n                <p className=\"text-sm font-medium\">{user.username}</p>\n                <p className=\"text-xs text-muted-foreground\">{user.email}</p>\n                <div className=\"flex items-center gap-2 mt-1\">\n                  <Badge \n                    variant={user.status === \"approved\" ? \"default\" : user.status === \"pending\" ? \"secondary\" : \"destructive\"}\n                    className=\"text-xs\"\n                    data-testid={`bottom-status-${user.status}`}\n                  >\n                    {user.status}\n                  </Badge>\n                  {isAdmin(user) && (\n                    <Badge variant=\"outline\" className=\"text-xs\" data-testid=\"bottom-admin-badge\">\n                      <Shield className=\"w-3 h-3 mr-1\" />\n                      Admin\n                    </Badge>\n                  )}\n                </div>\n              </div>\n              <DropdownMenuSeparator />\n              <Link href=\"/profile\" data-testid=\"bottom-link-profile\">\n                <DropdownMenuItem>\n                  <User className=\"w-4 h-4 mr-2\" />\n                  Profile\n                </DropdownMenuItem>\n              </Link>\n              <Link href=\"/my-submissions\" data-testid=\"bottom-link-my-submissions\">\n                <DropdownMenuItem>\n                  <Image className=\"w-4 h-4 mr-2\" />\n                  My Gallery\n                </DropdownMenuItem>\n              </Link>\n              {isAdmin(user) && (\n                <Link href=\"/admin\" data-testid=\"bottom-link-admin\">\n                  <DropdownMenuItem>\n                    <Shield className=\"w-4 h-4 mr-2\" />\n                    Admin Dashboard\n                  </DropdownMenuItem>\n                </Link>\n              )}\n              <DropdownMenuSeparator />\n              <DropdownMenuItem onClick={handleLogout} data-testid=\"bottom-button-logout\">\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Logout\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        ) : (\n          <>\n            {/* Sign In */}\n            <Link href=\"/login\" data-testid=\"bottom-link-login\">\n              <Button \n                variant=\"ghost\" \n                className={`flex flex-col items-center justify-center h-14 px-3 ${isActive('/login') ? 'text-primary' : 'text-muted-foreground'}`}\n              >\n                <User className=\"w-5 h-5\" />\n                <span className=\"text-xs mt-1\">Sign In</span>\n              </Button>\n            </Link>\n\n            {/* Sign Up */}\n            <Link href=\"/register\" data-testid=\"bottom-link-register\">\n              <Button \n                variant=\"ghost\" \n                className={`flex flex-col items-center justify-center h-14 px-3 ${isActive('/register') ? 'text-primary' : 'text-muted-foreground'}`}\n              >\n                <User className=\"w-5 h-5\" />\n                <span className=\"text-xs mt-1\">Sign Up</span>\n              </Button>\n            </Link>\n          </>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":5890},"client/src/pages/submission-detail.tsx":{"content":"import { useRoute, Link } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Heart, ArrowLeft, Share2, Trophy, User } from \"lucide-react\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useEffect } from \"react\";\n\nexport default function SubmissionDetailPage() {\n  const [match, params] = useRoute(\"/submission/:id\");\n  const submissionId = params?.id || \"\";\n  const { data: user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch submission\n  const { data: submission, isLoading } = useQuery({\n    queryKey: [\"/api/submissions\", submissionId],\n    enabled: !!submissionId,\n    queryFn: async () => {\n      const response = await fetch(`/api/submissions/${submissionId}`, {\n        credentials: \"include\"\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch submission\");\n      return response.json();\n    }\n  });\n\n  // Vote mutation\n  const voteMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/votes\", { \n        submissionId: submission.id \n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\", submissionId] });\n      toast({\n        title: \"Vote recorded!\",\n        description: \"Your vote has been counted\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Vote failed\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleVote = () => {\n    if (!user) {\n      toast({\n        title: \"Login required\",\n        description: \"Please log in to vote\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    voteMutation.mutate();\n  };\n\n  const handleShare = () => {\n    const shareUrl = window.location.href;\n    \n    if (navigator.share) {\n      navigator.share({\n        title: submission.title,\n        text: `Check out ${submission.title} by ${submission.user?.username || 'Unknown'}`,\n        url: shareUrl,\n      }).catch(() => {\n        fallbackShare(shareUrl);\n      });\n    } else {\n      fallbackShare(shareUrl);\n    }\n  };\n\n  const fallbackShare = (url: string) => {\n    navigator.clipboard.writeText(url).then(() => {\n      toast({\n        title: \"Link copied!\",\n        description: \"Submission link copied to clipboard.\",\n      });\n    }).catch(() => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy link.\",\n        variant: \"destructive\",\n      });\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-background-dark via-purple-950/20 to-background-dark flex items-center justify-center\">\n        <div className=\"text-white text-xl\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!submission) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-background-dark via-purple-950/20 to-background-dark flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-3xl font-bold text-white mb-4\">Submission not found</h1>\n          <Link href=\"/\">\n            <a className=\"text-primary hover:text-primary/80\">Go back home</a>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background-dark via-purple-950/20 to-background-dark pb-32 md:pb-0\">\n      <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n        {/* Back button */}\n        <div className=\"mb-6\">\n          {submission.contest ? (\n            <Link href={`/contest/${submission.contest.slug}`}>\n              <a className=\"inline-flex items-center gap-2 text-white/80 hover:text-white transition-colors\" data-testid=\"link-back-contest\">\n                <ArrowLeft className=\"h-5 w-5\" />\n                Back to {submission.contest.title}\n              </a>\n            </Link>\n          ) : (\n            <Link href=\"/\">\n              <a className=\"inline-flex items-center gap-2 text-white/80 hover:text-white transition-colors\" data-testid=\"link-back-home\">\n                <ArrowLeft className=\"h-5 w-5\" />\n                Back to home\n              </a>\n            </Link>\n          )}\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Image/Video Section */}\n          <div className=\"lg:col-span-2\">\n            <div className=\"rounded-2xl overflow-hidden shadow-2xl glow-border\">\n              {submission.type === \"video\" ? (\n                <video\n                  src={submission.mediaUrl}\n                  controls\n                  className=\"w-full h-auto max-h-[70vh] object-contain bg-black\"\n                  data-testid=\"video-submission\"\n                />\n              ) : (\n                <img\n                  src={submission.mediaUrl}\n                  alt={submission.title}\n                  className=\"w-full h-auto max-h-[70vh] object-contain bg-black\"\n                  loading=\"lazy\"\n                  data-testid=\"img-submission\"\n                />\n              )}\n            </div>\n          </div>\n\n          {/* Info Section */}\n          <div className=\"lg:col-span-1 space-y-6\">\n            {/* Title and Author */}\n            <div>\n              <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-4 text-glow\" data-testid=\"text-title\">\n                {submission.title}\n              </h1>\n              \n              {submission.user && (\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <div className=\"h-12 w-12 rounded-full bg-gradient-to-br from-primary to-purple-600 flex items-center justify-center\">\n                    <User className=\"h-6 w-6 text-white\" />\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-white/60\">Created by</p>\n                    <p className=\"text-lg font-semibold text-white\" data-testid=\"text-author\">\n                      {submission.user.username}\n                    </p>\n                  </div>\n                </div>\n              )}\n\n              {submission.description && (\n                <p className=\"text-white/80 mt-4\" data-testid=\"text-description\">\n                  {submission.description}\n                </p>\n              )}\n            </div>\n\n            {/* Contest Info */}\n            {submission.contest && (\n              <div className=\"p-4 rounded-lg bg-white/5 backdrop-blur-sm border border-white/10\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Trophy className=\"h-5 w-5 text-yellow-400\" />\n                  <p className=\"text-sm text-white/60\">Contest Entry</p>\n                </div>\n                <Link href={`/contest/${submission.contest.slug}`}>\n                  <a className=\"text-lg font-semibold text-primary hover:text-primary/80 transition-colors\" data-testid=\"link-contest\">\n                    {submission.contest.title}\n                  </a>\n                </Link>\n              </div>\n            )}\n\n            {/* Vote and Share Actions */}\n            <div className=\"space-y-3\">\n              {/* Vote Button */}\n              <button\n                onClick={handleVote}\n                disabled={voteMutation.isPending || submission.hasVoted}\n                className={`w-full py-4 px-6 rounded-lg font-semibold transition-all duration-300 flex items-center justify-center gap-3 ${\n                  submission.hasVoted\n                    ? \"bg-primary text-white cursor-not-allowed\"\n                    : \"bg-white/10 text-white hover:bg-primary hover:scale-105 backdrop-blur-sm\"\n                }`}\n                data-testid=\"button-vote\"\n              >\n                <Heart className={`h-5 w-5 ${submission.hasVoted ? \"fill-current\" : \"\"}`} />\n                <span>\n                  {submission.hasVoted ? \"Voted\" : \"Vote\"} ({submission.voteCount})\n                </span>\n              </button>\n\n              {/* Share Button */}\n              <button\n                onClick={handleShare}\n                className=\"w-full py-4 px-6 rounded-lg font-semibold bg-white/10 text-white hover:bg-white/20 transition-all duration-300 flex items-center justify-center gap-3 backdrop-blur-sm\"\n                data-testid=\"button-share\"\n              >\n                <Share2 className=\"h-5 w-5\" />\n                <span>Share</span>\n              </button>\n            </div>\n\n            {/* Tags */}\n            {submission.tags && submission.tags.length > 0 && (\n              <div>\n                <p className=\"text-sm text-white/60 mb-2\">Tags</p>\n                <div className=\"flex flex-wrap gap-2\">\n                  {submission.tags.map((tag: string, index: number) => (\n                    <span\n                      key={index}\n                      className=\"px-3 py-1 bg-white/10 rounded-full text-sm text-white/80\"\n                      data-testid={`tag-${index}`}\n                    >\n                      #{tag}\n                    </span>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9279},"client/src/lib/cloudinary.ts":{"content":"/**\n * Cloudinary URL transformation utilities for responsive images\n */\n\nexport interface CloudinaryTransformOptions {\n  width?: number;\n  height?: number;\n  quality?: 'auto' | 'auto:good' | 'auto:best' | 'auto:eco' | 'auto:low' | number;\n  format?: 'auto' | 'jpg' | 'png' | 'webp' | 'avif';\n  crop?: 'fill' | 'fit' | 'scale' | 'limit';\n}\n\n/**\n * Transform a Cloudinary URL with responsive image optimizations\n * Returns original URL if not a Cloudinary URL or already has transformations\n */\nexport function transformCloudinaryUrl(\n  url: string,\n  options: CloudinaryTransformOptions = {}\n): string {\n  // Only transform Cloudinary URLs\n  if (!url.includes('cloudinary.com')) {\n    return url;\n  }\n\n  // Check if URL already has transformations (avoid double transformation)\n  // Look for transformation prefixes: w_, h_, c_, q_, f_, t_, e_, g_, ar_, dpr_, fl_, bo_, if_\n  // This catches parameter-based and named transforms but allows folders (e.g., /upload/user_assets/)\n  const hasTransformations = /\\/upload\\/[^/]*(?:w_|h_|c_|q_|f_|t_|e_|g_|ar_|dpr_|fl_|bo_|if_)/.test(url);\n  if (hasTransformations) {\n    return url; // Already transformed, return as-is\n  }\n\n  const {\n    width,\n    height,\n    quality = 'auto:good',\n    format = 'auto',\n    crop = 'fill'\n  } = options;\n\n  // Build transformation string\n  const transformations: string[] = [];\n  \n  if (quality) {\n    transformations.push(`q_${quality}`);\n  }\n  \n  if (format) {\n    transformations.push(`f_${format}`);\n  }\n  \n  if (width || height || crop) {\n    const parts: string[] = [];\n    if (crop) parts.push(`c_${crop}`);\n    if (width) parts.push(`w_${width}`);\n    if (height) parts.push(`h_${height}`);\n    transformations.push(parts.join(','));\n  }\n\n  // Find 'upload/' in URL and insert transformations after it\n  const uploadPattern = /\\/upload\\//;\n  if (uploadPattern.test(url)) {\n    const transformStr = transformations.join(',');\n    return url.replace(/\\/upload\\//, `/upload/${transformStr}/`);\n  }\n\n  return url;\n}\n\n/**\n * Preset transformations for common use cases\n */\nexport const cloudinaryPresets = {\n  /** Thumbnail for cards and grids (400px width) */\n  thumbnail: (url: string) => transformCloudinaryUrl(url, { \n    width: 400, \n    crop: 'fill',\n    quality: 'auto:good',\n    format: 'auto'\n  }),\n  \n  /** Medium size for detail views (800px width) */\n  medium: (url: string) => transformCloudinaryUrl(url, { \n    width: 800, \n    crop: 'fit',\n    quality: 'auto:good',\n    format: 'auto'\n  }),\n  \n  /** Large for lightbox/fullscreen (1920px width) */\n  large: (url: string) => transformCloudinaryUrl(url, { \n    width: 1920, \n    crop: 'fit',\n    quality: 'auto:good',\n    format: 'auto'\n  }),\n  \n  /** Extra small for mobile thumbnails (200px width) */\n  xsmall: (url: string) => transformCloudinaryUrl(url, { \n    width: 200, \n    crop: 'fill',\n    quality: 'auto:eco',\n    format: 'auto'\n  })\n};\n","size_bytes":2893},"client/src/components/PrivateModeGuard.tsx":{"content":"import { useAuth } from \"@/lib/auth\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { usePrivateMode } from \"@/lib/private-mode-context\";\n\ninterface PrivateModeGuardProps {\n  children: React.ReactNode;\n}\n\nexport function PrivateModeGuard({ children }: PrivateModeGuardProps) {\n  const { data: user, isLoading: authLoading } = useAuth();\n  const { privateMode, isLoading: privateModeLoading } = usePrivateMode();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    // Wait for both queries to load\n    if (authLoading || privateModeLoading) return;\n\n    // If private mode is enabled and user is not authenticated, redirect to login\n    if (privateMode && !user) {\n      setLocation(\"/login\");\n    }\n  }, [privateMode, user, authLoading, privateModeLoading, setLocation]);\n\n  // Show loading state while checking\n  if (authLoading || privateModeLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-muted-foreground\">Loading...</div>\n      </div>\n    );\n  }\n\n  // If private mode is enabled and no user, don't render (redirect will happen)\n  if (privateMode && !user) {\n    return null;\n  }\n\n  // Otherwise, render children\n  return <>{children}</>;\n}\n","size_bytes":1268},"client/src/lib/private-mode-context.tsx":{"content":"import { createContext, useContext, ReactNode } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface PrivateModeContextType {\n  privateMode: boolean;\n  isLoading: boolean;\n}\n\nconst PrivateModeContext = createContext<PrivateModeContextType | undefined>(undefined);\n\nexport function PrivateModeProvider({ children }: { children: ReactNode }) {\n  const { data: privateModeStatus, isLoading } = useQuery<{ privateMode: boolean }>({\n    queryKey: [\"/api/settings/private-mode\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/settings/private-mode\");\n      if (!response.ok) throw new Error(\"Failed to fetch private mode status\");\n      return response.json();\n    },\n  });\n\n  return (\n    <PrivateModeContext.Provider value={{ privateMode: privateModeStatus?.privateMode || false, isLoading }}>\n      {children}\n    </PrivateModeContext.Provider>\n  );\n}\n\nexport function usePrivateMode() {\n  const context = useContext(PrivateModeContext);\n  if (context === undefined) {\n    throw new Error(\"usePrivateMode must be used within a PrivateModeProvider\");\n  }\n  return context;\n}\n","size_bytes":1115},"server/solana.ts":{"content":"import { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\n\nconst network = (process.env.SOLANA_NETWORK || 'devnet') as 'devnet' | 'testnet' | 'mainnet-beta';\n\nconst endpoint = process.env.SOLANA_RPC_ENDPOINT || clusterApiUrl(network);\n\nexport const solanaConnection = new Connection(endpoint, 'confirmed');\n\nexport async function verifySolanaSignature(\n  publicKey: string,\n  signature: string,\n  message: string\n): Promise<boolean> {\n  try {\n    const publicKeyObj = new PublicKey(publicKey);\n    const messageBytes = new TextEncoder().encode(message);\n    const signatureBytes = Buffer.from(signature, 'base64');\n\n    const nacl = await import('tweetnacl');\n    return nacl.sign.detached.verify(\n      messageBytes,\n      signatureBytes,\n      publicKeyObj.toBytes()\n    );\n  } catch (error) {\n    console.error('Failed to verify Solana signature:', error);\n    return false;\n  }\n}\n\nexport async function getSolanaBalance(walletAddress: string): Promise<number> {\n  try {\n    const publicKey = new PublicKey(walletAddress);\n    const balance = await solanaConnection.getBalance(publicKey);\n    return balance / 1e9; // Convert lamports to SOL\n  } catch (error) {\n    console.error('Failed to get Solana balance:', error);\n    return 0;\n  }\n}\n\nexport async function verifyTransaction(signature: string): Promise<{\n  confirmed: boolean;\n  amount?: number;\n  from?: string;\n  to?: string;\n  accountKeys?: string[];\n}> {\n  try {\n    const tx = await solanaConnection.getTransaction(signature, {\n      commitment: 'confirmed',\n      maxSupportedTransactionVersion: 0,\n    });\n\n    if (!tx || !tx.meta) {\n      return { confirmed: false };\n    }\n\n    // Get all account keys (static + loaded addresses for versioned transactions)\n    const staticKeys = tx.transaction.message.staticAccountKeys.map(key => key.toBase58());\n    const loadedWritable = tx.meta.loadedAddresses?.writable?.map(key => key.toBase58()) || [];\n    const loadedReadonly = tx.meta.loadedAddresses?.readonly?.map(key => key.toBase58()) || [];\n    \n    // Combine all account keys in the correct order\n    const accountKeys = [...staticKeys, ...loadedWritable, ...loadedReadonly];\n    \n    // Find the largest balance decrease (actual payer)\n    let maxDecrease = 0;\n    let payerIndex = 0;\n    \n    for (let i = 0; i < tx.meta.preBalances.length; i++) {\n      const preBalance = tx.meta.preBalances[i] || 0;\n      const postBalance = tx.meta.postBalances[i] || 0;\n      const decrease = preBalance - postBalance;\n      \n      if (decrease > maxDecrease) {\n        maxDecrease = decrease;\n        payerIndex = i;\n      }\n    }\n\n    // Get the actual payer address from the computed index\n    const payer = accountKeys[payerIndex];\n\n    // Subtract transaction fee to get actual transfer amount\n    const fee = tx.meta.fee || 0;\n    const transferAmount = Math.max(0, maxDecrease - fee);\n    \n    // Find recipient (account with largest balance increase)\n    let maxIncrease = 0;\n    let recipientIndex = -1;\n    \n    for (let i = 0; i < tx.meta.postBalances.length; i++) {\n      if (i === payerIndex) continue; // Skip payer\n      \n      const preBalance = tx.meta.preBalances[i] || 0;\n      const postBalance = tx.meta.postBalances[i] || 0;\n      const increase = postBalance - preBalance;\n      \n      if (increase > maxIncrease) {\n        maxIncrease = increase;\n        recipientIndex = i;\n      }\n    }\n\n    const recipient = recipientIndex >= 0 ? accountKeys[recipientIndex] : undefined;\n\n    return {\n      confirmed: true,\n      amount: transferAmount / 1e9, // Convert lamports to SOL\n      from: payer,\n      to: recipient,\n      accountKeys,\n    };\n  } catch (error) {\n    console.error('Failed to verify transaction:', error);\n    return { confirmed: false };\n  }\n}\n","size_bytes":3758},"client/src/context/WalletContextProvider.tsx":{"content":"import { FC, ReactNode, useMemo } from 'react';\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from '@solana/wallet-adapter-react';\nimport { WalletModalProvider } from '@solana/wallet-adapter-react-ui';\nimport { clusterApiUrl } from '@solana/web3.js';\n\n// Import default wallet adapter styles\nimport '@solana/wallet-adapter-react-ui/styles.css';\n\ninterface Props {\n  children: ReactNode;\n}\n\nexport const WalletContextProvider: FC<Props> = ({ children }) => {\n  // Use devnet for testing, can be changed to mainnet-beta for production\n  const network = import.meta.env.VITE_SOLANA_NETWORK || 'devnet';\n  const endpoint = useMemo(() => {\n    // Use custom RPC if provided, otherwise use default cluster API\n    const customRpc = import.meta.env.VITE_SOLANA_RPC_ENDPOINT;\n    if (customRpc) {\n      return customRpc;\n    }\n    return clusterApiUrl(network as 'devnet' | 'testnet' | 'mainnet-beta');\n  }, [network]);\n  \n  // Empty array - Wallet Standard automatically detects Phantom, Solflare, Backpack, etc.\n  const wallets = useMemo(() => [], []);\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletModalProvider>\n          {children}\n        </WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n};\n","size_bytes":1302},"client/src/components/payment/SolanaPayment.tsx":{"content":"import { useEffect, useState, useCallback, useMemo } from \"react\";\nimport { QRCodeSVG } from \"qrcode.react\";\nimport { PublicKey, Keypair } from \"@solana/web3.js\";\nimport { encodeURL, createQR, TransferRequestURLFields } from \"@solana/pay\";\nimport BigNumber from \"bignumber.js\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Copy, Check, Loader2, ExternalLink } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface SolanaPaymentProps {\n  amount: number;\n  currency: \"SOL\" | \"USDC\" | \"CUSTOM\";\n  recipient: string; // Platform wallet address\n  label: string; // Contest name\n  message?: string; // Optional message\n  customTokenMint?: string; // For custom SPL tokens\n  customTokenDecimals?: number; // For custom SPL tokens\n  userId: string; // Current user ID\n  contestId: string; // Contest ID for verification\n  onSuccess: (txHash: string) => void;\n  onCancel?: () => void;\n}\n\nexport function SolanaPayment({\n  amount,\n  currency,\n  recipient,\n  label,\n  message,\n  customTokenMint,\n  customTokenDecimals,\n  userId,\n  contestId,\n  onSuccess,\n  onCancel,\n}: SolanaPaymentProps) {\n  const [paymentUrl, setPaymentUrl] = useState<string>(\"\");\n  const [copied, setCopied] = useState(false);\n  const [isVerifying, setIsVerifying] = useState(false);\n  const [pollingInterval, setPollingInterval] = useState<NodeJS.Timeout | null>(null);\n  const { toast } = useToast();\n\n  // Generate unique reference for transaction tracking (stable across renders)\n  const reference = useMemo(() => Keypair.generate().publicKey, []);\n\n  // Generate Solana Pay URL\n  useEffect(() => {\n    try {\n      const recipientPubkey = new PublicKey(recipient);\n      \n      // Determine SPL token mint if applicable\n      let splToken: PublicKey | undefined;\n      \n      if (currency === \"USDC\") {\n        // USDC devnet mint address\n        splToken = new PublicKey(\"4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU\");\n      } else if (currency === \"CUSTOM\" && customTokenMint) {\n        splToken = new PublicKey(customTokenMint);\n      }\n\n      // Create transfer request URL\n      const url: TransferRequestURLFields = {\n        recipient: recipientPubkey,\n        amount: new BigNumber(amount),\n        reference: [reference],\n        ...(splToken && { splToken }),\n        label,\n        message: message || `Entry fee for ${label}`,\n        memo: `contest:${contestId}:user:${userId}`,\n      };\n\n      const encodedUrl = encodeURL(url);\n      setPaymentUrl(encodedUrl.toString());\n    } catch (error) {\n      console.error(\"Error generating payment URL:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate payment link\",\n        variant: \"destructive\",\n      });\n    }\n  }, [amount, currency, recipient, label, message, customTokenMint, contestId, userId, toast]);\n\n  // Copy payment URL to clipboard\n  const copyToClipboard = useCallback(() => {\n    navigator.clipboard.writeText(paymentUrl);\n    setCopied(true);\n    toast({\n      title: \"Copied!\",\n      description: \"Payment link copied to clipboard\",\n    });\n    setTimeout(() => setCopied(false), 2000);\n  }, [paymentUrl, toast]);\n\n  // Open payment URL in wallet\n  const openInWallet = useCallback(() => {\n    window.open(paymentUrl, \"_blank\");\n  }, [paymentUrl]);\n\n  // Poll backend for payment verification using reference\n  const startPolling = useCallback(() => {\n    if (pollingInterval) return;\n\n    const interval = setInterval(async () => {\n      try {\n        const res = await apiRequest(\"POST\", \"/api/payment/find-by-reference\", {\n          reference: reference.toBase58(),\n          expectedAmount: amount,\n          recipientAddress: recipient,\n          contestId,\n        });\n        \n        const data = await res.json();\n        \n        if (data.found && data.success && data.txHash) {\n          // Payment verified!\n          clearInterval(interval);\n          setPollingInterval(null);\n          onSuccess(data.txHash);\n        }\n      } catch (error) {\n        console.error(\"Error checking payment status:\", error);\n      }\n    }, 3000); // Poll every 3 seconds\n\n    setPollingInterval(interval);\n  }, [reference, amount, recipient, contestId, onSuccess, pollingInterval]);\n\n  // Cleanup polling on unmount\n  useEffect(() => {\n    return () => {\n      if (pollingInterval) {\n        clearInterval(pollingInterval);\n      }\n    };\n  }, [pollingInterval]);\n\n  // Manual verification\n  const verifyPayment = useCallback(async () => {\n    setIsVerifying(true);\n    \n    try {\n      const res = await apiRequest(\"POST\", \"/api/payment/find-by-reference\", {\n        reference: reference.toBase58(),\n        expectedAmount: amount,\n        recipientAddress: recipient,\n        contestId,\n      });\n      \n      const data = await res.json();\n      \n      if (data.found && data.success && data.txHash) {\n        onSuccess(data.txHash);\n        toast({\n          title: \"Payment Verified!\",\n          description: \"Your entry fee payment has been confirmed\",\n        });\n      } else {\n        toast({\n          title: \"Payment Not Found\",\n          description: data.message || \"Please complete the payment and try again\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      console.error(\"Error verifying payment:\", error);\n      toast({\n        title: \"Verification Error\",\n        description: error instanceof Error ? error.message : \"Failed to verify payment. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsVerifying(false);\n    }\n  }, [reference, amount, recipient, contestId, onSuccess, toast]);\n\n  const displayAmount = currency === \"CUSTOM\" && customTokenDecimals\n    ? `${amount} (Custom Token)`\n    : `${amount} ${currency}`;\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\" data-testid=\"card-solana-payment\">\n      <CardHeader>\n        <CardTitle>Pay Entry Fee</CardTitle>\n        <CardDescription>\n          Scan QR code or use the payment link to pay {displayAmount}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* QR Code */}\n        {paymentUrl && (\n          <div className=\"flex justify-center p-4 bg-white rounded-lg\" data-testid=\"container-qr-code\">\n            <QRCodeSVG value={paymentUrl} size={200} level=\"H\" />\n          </div>\n        )}\n\n        {/* Payment URL */}\n        <div className=\"space-y-2\">\n          <p className=\"text-sm text-muted-foreground\">Payment Link:</p>\n          <div className=\"flex gap-2\">\n            <input\n              type=\"text\"\n              value={paymentUrl}\n              readOnly\n              className=\"flex-1 px-3 py-2 text-sm border rounded-md bg-muted\"\n              data-testid=\"input-payment-url\"\n            />\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={copyToClipboard}\n              data-testid=\"button-copy-link\"\n            >\n              {copied ? <Check className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n            </Button>\n          </div>\n        </div>\n\n        {/* Instructions */}\n        <div className=\"p-3 bg-muted rounded-lg text-sm space-y-1\">\n          <p className=\"font-medium\">How to pay:</p>\n          <ol className=\"list-decimal list-inside space-y-1 text-muted-foreground\">\n            <li>Scan QR code with mobile wallet (Phantom, Solflare)</li>\n            <li>Or copy link and open in wallet app</li>\n            <li>Confirm transaction in your wallet</li>\n            <li>Wait for verification (automatic)</li>\n          </ol>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"outline\"\n            className=\"flex-1\"\n            onClick={openInWallet}\n            data-testid=\"button-open-wallet\"\n          >\n            <ExternalLink className=\"h-4 w-4 mr-2\" />\n            Open in Wallet\n          </Button>\n          \n          <Button\n            variant=\"default\"\n            className=\"flex-1\"\n            onClick={verifyPayment}\n            disabled={isVerifying}\n            data-testid=\"button-verify-payment\"\n          >\n            {isVerifying ? (\n              <>\n                <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                Verifying...\n              </>\n            ) : (\n              \"Verify Payment\"\n            )}\n          </Button>\n        </div>\n\n        {/* Auto-polling notice */}\n        <p className=\"text-xs text-center text-muted-foreground\">\n          Payment verification happens automatically. You can also verify manually.\n        </p>\n\n        {/* Cancel */}\n        {onCancel && (\n          <Button\n            variant=\"ghost\"\n            className=\"w-full\"\n            onClick={onCancel}\n            data-testid=\"button-cancel-payment\"\n          >\n            Cancel\n          </Button>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9034}},"version":2}