{"file_contents":{"client/src/lib/constants.ts":{"content":"export const GLORY_DISTRIBUTION = [0.4, 0.25, 0.15, 0.1, 0.1] as const;\n\nexport const CONTEST_STATUS = {\n  DRAFT: \"draft\",\n  ACTIVE: \"active\",\n  ENDED: \"ended\",\n} as const;\n\nexport const SUBMISSION_STATUS = {\n  PENDING: \"pending\",\n  APPROVED: \"approved\",\n  REJECTED: \"rejected\",\n} as const;\n\nexport const USER_STATUS = {\n  PENDING: \"pending\",\n  APPROVED: \"approved\",\n  BANNED: \"banned\",\n} as const;\n\nexport const USER_ROLES = {\n  USER: \"user\",\n  ADMIN: \"admin\",\n} as const;\n\nexport const SUBMISSION_TYPES = {\n  IMAGE: \"image\",\n  VIDEO: \"video\",\n} as const;\n\nexport const MAX_FILE_SIZE = {\n  IMAGE: 10 * 1024 * 1024, // 10MB\n  VIDEO: 100 * 1024 * 1024, // 100MB\n} as const;\n\nexport const VOTING_RATE_LIMIT = {\n  MAX_VOTES: 30,\n  WINDOW_HOURS: 1,\n} as const;\n","size_bytes":757},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/App.tsx":{"content":"import { useEffect } from \"react\";\nimport { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/lib/theme\";\nimport { SolanaWalletProvider } from \"@/lib/wallet-provider\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { Footer } from \"@/components/layout/footer\";\nimport { BottomNav } from \"@/components/layout/bottom-nav\";\nimport { PrivateModeGuard } from \"@/components/PrivateModeGuard\";\nimport { PrivateModeProvider, usePrivateMode } from \"@/lib/private-mode-context\";\nimport { useAuth } from \"@/lib/auth\";\nimport Home from \"@/pages/home\";\nimport Explore from \"@/pages/explore\";\nimport Login from \"@/pages/login\";\nimport Register from \"@/pages/register\";\nimport Contests from \"@/pages/contests\";\nimport ContestDetail from \"@/pages/contest-detail\";\nimport SubmissionDetail from \"@/pages/submission-detail\";\nimport Upload from \"@/pages/upload\";\nimport Profile from \"@/pages/profile\";\nimport MySubmissions from \"@/pages/my-submissions\";\nimport AdminDashboard from \"@/pages/admin/dashboard\";\nimport AdminContestDetail from \"@/pages/admin/contest-detail\";\nimport AdminSettings from \"@/pages/admin/settings\";\nimport AdminSubscriptionTiers from \"@/pages/admin/subscription-tiers\";\nimport RoadmapPage from \"@/pages/roadmap\";\nimport AiGeneratorPage from \"@/pages/ai-generator\";\nimport ImageEditor from \"@/pages/image-editor\";\nimport PricingPage from \"@/pages/pricing\";\nimport SubscriptionPage from \"@/pages/subscription\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction ScrollToTop() {\n  const [location] = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location]);\n\n  return null;\n}\n\nfunction Router() {\n  const { data: user } = useAuth();\n  const { privateMode } = usePrivateMode();\n  const [location] = useLocation();\n\n  // Hide navbar on pages with sidebar (AI Studio and Explore)\n  const hasSidebar = location === '/ai-generator' || location.startsWith('/image-editor/') || location === '/explore';\n  \n  // Hide footer on Explore page (infinite scroll) and AI Studio pages\n  const hideFooter = hasSidebar;\n  \n  // Show Footer and BottomNav when: Private Mode is OFF OR user is logged in, AND not on pages with infinity scroll\n  const showFooterAndBottomNav = (!privateMode || !!user) && !hideFooter;\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      {!hasSidebar && <Navbar />}\n      <main className=\"flex-1 pb-16\">\n        <ScrollToTop />\n        <Switch>\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/register\" component={Register} />\n          <Route>\n            <PrivateModeGuard>\n              <Switch>\n                <Route path=\"/\" component={Home} />\n                <Route path=\"/explore\" component={Explore} />\n                <Route path=\"/roadmap\" component={RoadmapPage} />\n                <Route path=\"/pricing\" component={PricingPage} />\n                <Route path=\"/subscription\" component={SubscriptionPage} />\n                <Route path=\"/ai-generator\" component={AiGeneratorPage} />\n                <Route path=\"/image-editor/:id\" component={ImageEditor} />\n                <Route path=\"/contests\" component={Contests} />\n                <Route path=\"/contest/:slug\" component={ContestDetail} />\n                <Route path=\"/submission/:id\" component={SubmissionDetail} />\n                <Route path=\"/upload\" component={Upload} />\n                <Route path=\"/profile\" component={Profile} />\n                <Route path=\"/my-submissions\" component={MySubmissions} />\n                <Route path=\"/admin\" component={AdminDashboard} />\n                <Route path=\"/admin/dashboard\" component={AdminDashboard} />\n                <Route path=\"/admin/settings\" component={AdminSettings} />\n                <Route path=\"/admin/subscription-tiers\" component={AdminSubscriptionTiers} />\n                <Route path=\"/admin/contest/:id\" component={AdminContestDetail} />\n                <Route component={NotFound} />\n              </Switch>\n            </PrivateModeGuard>\n          </Route>\n        </Switch>\n      </main>\n      {showFooterAndBottomNav && <Footer />}\n      {showFooterAndBottomNav && <BottomNav />}\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <SolanaWalletProvider>\n          <PrivateModeProvider>\n            <TooltipProvider>\n              <Toaster />\n              <Router />\n            </TooltipProvider>\n          </PrivateModeProvider>\n        </SolanaWalletProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4800},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/EditSubmissionModal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { X } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\n\ninterface EditSubmissionModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (data: { title: string; description: string; tags: string[] }) => void;\n  submission: {\n    id: string;\n    title: string;\n    description?: string;\n    tags?: string[];\n  };\n}\n\nexport function EditSubmissionModal({ isOpen, onClose, onSubmit, submission }: EditSubmissionModalProps) {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [tagsInput, setTagsInput] = useState('');\n\n  useEffect(() => {\n    if (submission && isOpen) {\n      setTitle(submission.title || '');\n      setDescription(submission.description || '');\n      setTagsInput(submission.tags?.join(', ') || '');\n    }\n  }, [submission, isOpen]);\n\n  // Handle browser back button and Escape key\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const modalId = Date.now();\n\n    // Push unique history state when modal opens\n    window.history.pushState({ modal: 'editSubmission', modalId }, '');\n\n    // Handle Escape key\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        onClose();\n      }\n    };\n\n    // Handle browser back button\n    const handlePopState = () => {\n      // Close modal when going back in history\n      if (window.history.state?.modalId !== modalId) {\n        onClose();\n      }\n    };\n\n    window.addEventListener('keydown', handleEscape);\n    window.addEventListener('popstate', handlePopState);\n\n    return () => {\n      window.removeEventListener('keydown', handleEscape);\n      window.removeEventListener('popstate', handlePopState);\n    };\n  }, [isOpen, onClose]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Parse tags from comma-separated input\n    const tags = tagsInput\n      .split(',')\n      .map(tag => tag.trim())\n      .filter(tag => tag.length > 0);\n\n    onSubmit({ title, description, tags });\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/50\" onClick={onClose}>\n      <div \n        className=\"bg-background rounded-2xl p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto\"\n        onClick={(e) => e.stopPropagation()}\n        data-testid=\"edit-submission-modal\"\n      >\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-2xl font-bold\">Edit Submission</h2>\n          <button\n            onClick={onClose}\n            className=\"p-2 hover:bg-muted rounded-lg transition-colors\"\n            data-testid=\"close-modal-button\"\n          >\n            <X className=\"w-5 h-5\" />\n          </button>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"title\">Title *</Label>\n            <Input\n              id=\"title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              placeholder=\"Enter submission title\"\n              required\n              data-testid=\"input-title\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea\n              id=\"description\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              placeholder=\"Describe your submission...\"\n              rows={4}\n              data-testid=\"input-description\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"tags\">Tags</Label>\n            <Input\n              id=\"tags\"\n              value={tagsInput}\n              onChange={(e) => setTagsInput(e.target.value)}\n              placeholder=\"Enter tags separated by commas (e.g., digital art, abstract, colorful)\"\n              data-testid=\"input-tags\"\n            />\n            <p className=\"text-sm text-muted-foreground\">Separate tags with commas</p>\n          </div>\n\n          <div className=\"flex items-center justify-end gap-3 pt-4 border-t border-border\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onClose}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              className=\"gradient-glory hover:opacity-90 transition-opacity\"\n              data-testid=\"button-save\"\n            >\n              Save Changes\n            </Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4840},"client/src/pages/my-submissions.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Image, Share2, Expand, Trash2, Play, X, User, Calendar, Pencil } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { SubmissionWithUser } from \"@shared/schema\";\nimport { GlassButton } from \"@/components/ui/glass-button\";\nimport { ProEditModal } from \"@/components/pro-edit/ProEditModal\";\n\nexport default function MySubmissions() {\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [selectedSubmission, setSelectedSubmission] = useState<SubmissionWithUser | null>(null);\n  const [activeCardId, setActiveCardId] = useState<string | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Pro Edit modal state\n  const [proEditModalOpen, setProEditModalOpen] = useState(false);\n  const [proEditImageUrl, setProEditImageUrl] = useState<string>(\"\");\n  const [proEditSubmissionId, setProEditSubmissionId] = useState<string | null>(null);\n\n  // Handle browser back button and Escape key for lightbox modal\n  useEffect(() => {\n    if (!selectedSubmission) return;\n\n    const modalId = Date.now();\n\n    // Push unique history state when modal opens\n    window.history.pushState({ modal: 'galleryLightbox', modalId }, '');\n\n    // Handle Escape key\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        // Remove focus/hover state to prevent visual artifacts\n        (document.activeElement as HTMLElement)?.blur();\n        setSelectedSubmission(null);\n      }\n    };\n\n    // Handle browser back button\n    const handlePopState = () => {\n      // Close modal when going back in history\n      if (window.history.state?.modalId !== modalId) {\n        setSelectedSubmission(null);\n      }\n    };\n\n    window.addEventListener('keydown', handleEscape);\n    window.addEventListener('popstate', handlePopState);\n\n    return () => {\n      window.removeEventListener('keydown', handleEscape);\n      window.removeEventListener('popstate', handlePopState);\n    };\n  }, [selectedSubmission]);\n\n  // Always fetch all submissions for accurate counts\n  const { data: allSubmissions, isLoading } = useQuery<SubmissionWithUser[]>({\n    queryKey: [\"/api/me/submissions\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/me/submissions`, {\n        credentials: \"include\"\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch submissions\");\n      return response.json();\n    }\n  });\n\n  const deleteSubmissionMutation = useMutation({\n    mutationFn: async (submissionId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/submissions/${submissionId}`);\n      if (!response.ok) throw new Error(\"Failed to delete submission\");\n      return await response.json();\n    },\n    onMutate: async (submissionId: string) => {\n      // Cancel outgoing refetches\n      await queryClient.cancelQueries({ queryKey: [\"/api/me/submissions\"] });\n      \n      // Snapshot previous value\n      const previousSubmissions = queryClient.getQueryData([\"/api/me/submissions\"]);\n      \n      // Optimistically update - immediately remove from UI\n      queryClient.setQueryData<SubmissionWithUser[]>([\"/api/me/submissions\"], (old) => \n        old?.filter(s => s.id !== submissionId) || []\n      );\n      \n      return { previousSubmissions };\n    },\n    onSuccess: () => {\n      // Invalidate all submissions caches to remove deleted submission everywhere\n      queryClient.invalidateQueries({ queryKey: [\"/api/me/submissions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      toast({\n        title: \"Submission deleted\",\n        description: \"Your submission has been permanently deleted.\",\n      });\n    },\n    onError: (error: any, _variables, context) => {\n      // Rollback on error\n      if (context?.previousSubmissions) {\n        queryClient.setQueryData([\"/api/me/submissions\"], context.previousSubmissions);\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete submission.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleShare = (submission: SubmissionWithUser) => {\n    const shareUrl = `${window.location.origin}/submission/${submission.id}`;\n    \n    if (navigator.share) {\n      navigator.share({\n        title: submission.title,\n        text: `Check out this amazing submission: ${submission.title}`,\n        url: shareUrl,\n      }).catch(() => {\n        fallbackShare(shareUrl);\n      });\n    } else {\n      fallbackShare(shareUrl);\n    }\n  };\n\n  const fallbackShare = (url: string) => {\n    navigator.clipboard.writeText(url).then(() => {\n      toast({\n        title: \"Link copied!\",\n        description: \"Submission link has been copied to clipboard.\",\n      });\n    }).catch(() => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy link to clipboard.\",\n        variant: \"destructive\",\n      });\n    });\n  };\n\n  const handleExpand = (submission: SubmissionWithUser) => {\n    setSelectedSubmission(submission);\n  };\n\n  const handleDelete = (submissionId: string) => {\n    if (confirm('Are you sure you want to delete this submission? This action cannot be undone.')) {\n      deleteSubmissionMutation.mutate(submissionId);\n    }\n  };\n\n  const handleCardClick = (e: React.MouseEvent, submissionId: string) => {\n    // Only toggle on mobile (below lg breakpoint)\n    if (window.innerWidth < 1024) {\n      e.stopPropagation();\n      setActiveCardId(activeCardId === submissionId ? null : submissionId);\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return <Badge className=\"bg-green-500/20 text-green-400 border-green-500/30\">Approved</Badge>;\n      case \"pending\":\n        return <Badge className=\"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\">Pending</Badge>;\n      case \"rejected\":\n        return <Badge className=\"bg-red-500/20 text-red-400 border-red-500/30\">Rejected</Badge>;\n      default:\n        return <Badge>{status}</Badge>;\n    }\n  };\n\n  const statusCounts = {\n    all: allSubmissions?.length || 0,\n    pending: allSubmissions?.filter(s => s.status === \"pending\").length || 0,\n    approved: allSubmissions?.filter(s => s.status === \"approved\").length || 0,\n    rejected: allSubmissions?.filter(s => s.status === \"rejected\").length || 0\n  };\n\n  const filteredSubmissions = (statusFilter === \"all\" \n    ? allSubmissions \n    : allSubmissions?.filter(s => s.status === statusFilter))?.filter(s => s.mediaUrl);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-950 via-purple-950/20 to-gray-950 pb-32 md:pb-0\">\n      <div className=\"container mx-auto px-4 py-6 md:py-8 max-w-7xl\">\n        <div className=\"mb-6 md:mb-8\">\n          <h1 className=\"text-3xl md:text-4xl font-bold mb-1 md:mb-2 bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent\" data-testid=\"heading-my-submissions\">\n            My Gallery\n          </h1>\n          <p className=\"text-sm md:text-base text-gray-400\" data-testid=\"text-gallery-description\">\n            View all your uploaded creative works\n          </p>\n        </div>\n\n        <Tabs value={statusFilter} onValueChange={setStatusFilter} className=\"mb-6 md:mb-8\">\n          <TabsList className=\"bg-white/5 border border-white/10\">\n            <TabsTrigger value=\"all\" data-testid=\"tab-all\">\n              All ({statusCounts.all})\n            </TabsTrigger>\n            <TabsTrigger value=\"pending\" data-testid=\"tab-pending\">\n              Pending ({statusCounts.pending})\n            </TabsTrigger>\n            <TabsTrigger value=\"approved\" data-testid=\"tab-approved\">\n              Approved ({statusCounts.approved})\n            </TabsTrigger>\n            <TabsTrigger value=\"rejected\" data-testid=\"tab-rejected\">\n              Rejected ({statusCounts.rejected})\n            </TabsTrigger>\n          </TabsList>\n        </Tabs>\n\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <Card key={i} className=\"bg-white/5 border-white/10\">\n                <CardContent className=\"p-0\">\n                  <Skeleton className=\"w-full h-64\" />\n                  <div className=\"p-4\">\n                    <Skeleton className=\"h-6 w-3/4 mb-2\" />\n                    <Skeleton className=\"h-4 w-1/2\" />\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : filteredSubmissions && filteredSubmissions.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredSubmissions.map((submission) => (\n              <Card\n                key={submission.id}\n                className=\"group relative overflow-hidden hover:border-primary/50 transition-all duration-300 rounded-2xl shadow-lg hover:shadow-xl\"\n                data-testid={`submission-card-${submission.id}`}\n              >\n                <div className=\"relative overflow-hidden rounded-t-2xl aspect-square\" onClick={(e) => handleCardClick(e, submission.id)}>\n                  <img\n                    src={submission.type === \"video\" ? submission.thumbnailUrl || submission.mediaUrl : submission.mediaUrl}\n                    alt={submission.title}\n                    className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n                    loading=\"lazy\"\n                    onError={(e) => {\n                      const target = e.target as HTMLImageElement;\n                      target.src = 'data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"400\" height=\"400\"%3E%3Crect fill=\"%23334155\" width=\"400\" height=\"400\"/%3E%3Ctext fill=\"%239ca3af\" font-family=\"system-ui\" font-size=\"48\" x=\"50%25\" y=\"50%25\" text-anchor=\"middle\" dominant-baseline=\"middle\"%3E%3Ctspan x=\"50%25\" dy=\"-20\"%3E' + (submission.type === 'video' ? '🎬' : '🖼️') + '%3C/tspan%3E%3Ctspan x=\"50%25\" dy=\"60\" font-size=\"16\"%3EImage not available%3C/tspan%3E%3C/text%3E%3C/svg%3E';\n                      target.onerror = null;\n                    }}\n                  />\n\n                  {/* Hover Overlay */}\n                  <div className=\"absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-all duration-300\">\n                    <div className={`absolute top-2 sm:top-3 right-2 sm:right-3 flex flex-row items-center gap-1 sm:gap-2 ${activeCardId === submission.id ? 'opacity-100 lg:opacity-0' : 'opacity-0'} lg:group-hover:opacity-100 transition-opacity duration-300`}>\n                      <GlassButton \n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"h-8 w-8 sm:h-10 sm:w-10 rounded-full\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleShare(submission);\n                        }}\n                        data-testid={`button-share-${submission.id}`}\n                      >\n                        <Share2 className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                      </GlassButton>\n                      <GlassButton \n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"h-8 w-8 sm:h-10 sm:w-10 rounded-full\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleExpand(submission);\n                        }}\n                        data-testid={`button-expand-${submission.id}`}\n                      >\n                        <Expand className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                      </GlassButton>\n                      \n                      {/* Edit (Pro Edit) - only for image submissions */}\n                      {submission.type === \"image\" && (\n                        <GlassButton \n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"h-8 w-8 sm:h-10 sm:w-10 rounded-full bg-gradient-to-r from-purple-600/20 to-pink-600/20 hover:from-purple-600/30 hover:to-pink-600/30\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            setProEditImageUrl(submission.mediaUrl);\n                            setProEditSubmissionId(submission.id);\n                            setProEditModalOpen(true);\n                          }}\n                          title=\"Edit\"\n                          data-testid={`button-edit-${submission.id}`}\n                        >\n                          <Pencil className=\"h-3 w-3 sm:h-4 sm:w-4 text-purple-300\" />\n                        </GlassButton>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Status badge */}\n                  <div className=\"absolute top-3 left-3 z-10\">\n                    {getStatusBadge(submission.status)}\n                  </div>\n\n                  {/* Video play overlay */}\n                  {submission.type === \"video\" && (\n                    <div className=\"absolute inset-0 flex items-center justify-center bg-black/20 pointer-events-none\">\n                      <div className=\"w-16 h-16 rounded-full bg-primary/90 flex items-center justify-center\">\n                        <Play className=\"w-6 h-6 text-white ml-1\" />\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Delete button */}\n                  <div className={`absolute bottom-2 sm:bottom-3 right-2 sm:right-3 z-10 ${activeCardId === submission.id ? 'opacity-100 lg:opacity-0' : 'opacity-0'} lg:group-hover:opacity-100 transition-opacity duration-300`}>\n                    <GlassButton \n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"h-8 w-8 sm:h-10 sm:w-10 rounded-full bg-red-500/80 hover:bg-red-500\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleDelete(submission.id);\n                      }}\n                      disabled={deleteSubmissionMutation.isPending}\n                      data-testid={`button-delete-${submission.id}`}\n                    >\n                      <Trash2 className=\"h-3 w-3 sm:h-4 sm:w-4 text-white\" />\n                    </GlassButton>\n                  </div>\n                </div>\n\n                <CardContent className={`absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/90 via-black/70 to-transparent ${activeCardId === submission.id ? 'opacity-100 lg:opacity-0' : 'opacity-0'} lg:group-hover:opacity-100 transition-opacity duration-300 rounded-b-2xl`}>\n                  <h3 className=\"font-semibold text-lg mb-2 line-clamp-1 text-white drop-shadow-lg\">\n                    {submission.title}\n                  </h3>\n\n                  <div className=\"text-gray-200 text-xs truncate\">\n                    {submission.contest?.title || submission.contestName || 'Contest deleted'}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-20\">\n            <div className=\"inline-block p-6 bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl mb-4\">\n              <Image className=\"w-16 h-16 text-purple-400 mx-auto\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2 text-white\" data-testid=\"text-no-submissions\">\n              No submissions yet\n            </h3>\n            <p className=\"text-gray-400\" data-testid=\"text-no-submissions-description\">\n              {statusFilter === \"all\" \n                ? \"Start creating and uploading your work to contests!\"\n                : `You don't have any ${statusFilter} submissions.`}\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Fullscreen Lightbox Modal */}\n      {selectedSubmission && (\n        <div \n          className=\"fixed inset-0 z-50 bg-black\"\n          onClick={() => setSelectedSubmission(null)}\n          data-testid=\"lightbox-overlay\"\n        >\n          {/* Full-screen image */}\n          <div className=\"absolute inset-0 flex items-center justify-center z-0\">\n            <img\n              src={selectedSubmission.type === \"video\" ? selectedSubmission.thumbnailUrl || selectedSubmission.mediaUrl : selectedSubmission.mediaUrl}\n              alt={selectedSubmission.title}\n              className=\"max-w-full max-h-full object-contain\"\n              data-testid=\"lightbox-image\"\n              onClick={(e) => e.stopPropagation()}\n            />\n          </div>\n\n          {/* Top Left - Share and Delete Icons */}\n          <div className=\"absolute top-6 left-6 flex gap-3 z-30\">\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                handleShare(selectedSubmission);\n              }}\n              className=\"p-3 rounded-full bg-black/50 backdrop-blur-sm text-white hover:bg-primary/90 transition-all duration-300 border border-white/20\"\n              data-testid=\"button-share-lightbox\"\n            >\n              <Share2 className=\"h-6 w-6\" />\n            </button>\n            \n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                setSelectedSubmission(null);\n                handleDelete(selectedSubmission.id);\n              }}\n              className=\"p-3 rounded-full bg-black/50 backdrop-blur-sm text-white hover:bg-red-500 transition-all duration-300 border border-white/20\"\n              data-testid=\"button-delete-lightbox\"\n            >\n              <Trash2 className=\"h-6 w-6\" />\n            </button>\n          </div>\n\n          {/* Top Right - Close Icon */}\n          <button\n            onClick={() => setSelectedSubmission(null)}\n            className=\"absolute top-6 right-6 p-3 rounded-full bg-black/50 backdrop-blur-sm text-white hover:bg-red-500 transition-all duration-300 border border-white/20 z-30\"\n            data-testid=\"button-close-lightbox\"\n          >\n            <X className=\"h-6 w-6\" />\n          </button>\n\n          {/* Bottom Info Bar */}\n          <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 via-black/50 to-transparent p-6 z-20\">\n            <div className=\"max-w-4xl mx-auto\">\n              <h2 className=\"text-2xl font-bold text-white mb-2\" data-testid=\"text-submission-title\">\n                {selectedSubmission.title}\n              </h2>\n              {selectedSubmission.description && (\n                <p className=\"text-gray-300 text-sm mb-3\" data-testid=\"text-submission-description\">\n                  {selectedSubmission.description}\n                </p>\n              )}\n              \n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"h-8 w-8 rounded-full bg-violet-600/20 border border-violet-500/30 flex items-center justify-center\">\n                    <User className=\"h-4 w-4 text-violet-400\" />\n                  </div>\n                  <div>\n                    <p className=\"text-white font-semibold text-sm\" data-testid=\"text-creator-username\">\n                      @{selectedSubmission.user?.username || 'You'}\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center gap-4 text-sm text-gray-400\">\n                  <div className=\"flex items-center gap-2\">\n                    <Calendar className=\"h-4 w-4\" />\n                    <span>{new Date(selectedSubmission.createdAt).toLocaleDateString()}</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <Badge className={\n                      selectedSubmission.status === \"approved\" ? \"bg-green-500/20 text-green-400 border-green-500/30\" :\n                      selectedSubmission.status === \"pending\" ? \"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\" :\n                      \"bg-red-500/20 text-red-400 border-red-500/30\"\n                    }>\n                      {selectedSubmission.status}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Pro Edit Modal */}\n      <ProEditModal\n        open={proEditModalOpen}\n        onOpenChange={setProEditModalOpen}\n        imageUrl={proEditImageUrl}\n        submissionId={proEditSubmissionId || undefined}\n      />\n    </div>\n  );\n}\n","size_bytes":20944},"server/services/rate-limiter.ts":{"content":"// Simple in-memory rate limiter\n// In production, this should use Redis for distributed rate limiting\n\ninterface RateLimitEntry {\n  count: number;\n  windowStart: number;\n}\n\nclass RateLimiter {\n  private limits = new Map<string, RateLimitEntry>();\n  private readonly windowMs: number;\n  private readonly maxRequests: number;\n\n  constructor(windowMs = 60 * 60 * 1000, maxRequests = 30) { // 1 hour window, 30 max requests\n    this.windowMs = windowMs;\n    this.maxRequests = maxRequests;\n    \n    // Clean up expired entries every 5 minutes\n    setInterval(() => this.cleanup(), 5 * 60 * 1000);\n  }\n\n  isAllowed(key: string): boolean {\n    const now = Date.now();\n    const entry = this.limits.get(key);\n\n    if (!entry) {\n      this.limits.set(key, { count: 1, windowStart: now });\n      return true;\n    }\n\n    // Check if window has expired\n    if (now - entry.windowStart > this.windowMs) {\n      this.limits.set(key, { count: 1, windowStart: now });\n      return true;\n    }\n\n    // Check if limit exceeded\n    if (entry.count >= this.maxRequests) {\n      return false;\n    }\n\n    // Increment count\n    entry.count++;\n    this.limits.set(key, entry);\n    return true;\n  }\n\n  getRemainingRequests(key: string): number {\n    const entry = this.limits.get(key);\n    if (!entry) return this.maxRequests;\n    \n    const now = Date.now();\n    if (now - entry.windowStart > this.windowMs) {\n      return this.maxRequests;\n    }\n    \n    return Math.max(0, this.maxRequests - entry.count);\n  }\n\n  getResetTime(key: string): number {\n    const entry = this.limits.get(key);\n    if (!entry) return 0;\n    \n    return entry.windowStart + this.windowMs;\n  }\n\n  private cleanup() {\n    const now = Date.now();\n    for (const [key, entry] of this.limits.entries()) {\n      if (now - entry.windowStart > this.windowMs) {\n        this.limits.delete(key);\n      }\n    }\n  }\n}\n\nexport const votingRateLimiter = new RateLimiter(60 * 60 * 1000, 30); // 30 votes per hour\n","size_bytes":1956},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/pages/auth/login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { loginSchema } from \"@shared/schema\";\nimport { useAuth } from \"@/lib/auth\";\nimport { Link } from \"wouter\";\nimport { Eye, EyeOff, LogIn, Trophy } from \"lucide-react\";\nimport type { z } from \"zod\";\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { refetch } = useAuth();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      refetch();\n      setLocation(\"/\");\n    },\n  });\n\n  const onSubmit = (data: LoginFormData) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-background px-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        <div className=\"text-center\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <div className=\"w-12 h-12 rounded-lg gradient-glory flex items-center justify-center\">\n              <Trophy className=\"text-white text-xl\" />\n            </div>\n            <span className=\"text-3xl font-bold tracking-tight\">5best</span>\n          </div>\n          <h1 className=\"text-2xl font-bold\">Welcome back</h1>\n          <p className=\"text-muted-foreground\">Sign in to your account to compete and create</p>\n        </div>\n\n        <Card className=\"glass-effect border-border\">\n          <CardHeader className=\"space-y-1 pb-4\">\n            <CardTitle className=\"text-xl font-semibold\">Sign In</CardTitle>\n            <CardDescription>\n              Enter your credentials to access your account\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input\n                          data-testid=\"input-email\"\n                          {...field}\n                          type=\"email\"\n                          placeholder=\"your@email.com\"\n                          className=\"bg-muted border-border focus:border-primary\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            data-testid=\"input-password\"\n                            {...field}\n                            type={showPassword ? \"text\" : \"password\"}\n                            placeholder=\"Enter your password\"\n                            className=\"bg-muted border-border focus:border-primary pr-10\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowPassword(!showPassword)}\n                          >\n                            {showPassword ? (\n                              <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {loginMutation.error && (\n                  <Alert variant=\"destructive\">\n                    <AlertDescription data-testid=\"error-message\">\n                      {loginMutation.error instanceof Error ? loginMutation.error.message : \"Login failed\"}\n                    </AlertDescription>\n                  </Alert>\n                )}\n\n                <Button\n                  data-testid=\"button-submit\"\n                  type=\"submit\"\n                  className=\"w-full gradient-glory font-semibold\"\n                  disabled={loginMutation.isPending}\n                >\n                  {loginMutation.isPending ? (\n                    \"Signing in...\"\n                  ) : (\n                    <>\n                      <LogIn className=\"w-4 h-4 mr-2\" />\n                      Sign In\n                    </>\n                  )}\n                </Button>\n              </form>\n            </Form>\n\n            <div className=\"mt-6 text-center text-sm\">\n              <span className=\"text-muted-foreground\">Don't have an account? </span>\n              <Link href=\"/register\">\n                <Button variant=\"link\" className=\"p-0 h-auto text-primary font-semibold\" data-testid=\"link-register\">\n                  Sign up\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6405},"client/src/pages/register.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Trophy, Eye, EyeOff, CheckCircle } from \"lucide-react\";\nimport { useRegister, useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst registerSchema = z.object({\n  username: z.string()\n    .min(3, \"Username must be at least 3 characters\")\n    .max(50, \"Username must be less than 50 characters\")\n    .regex(/^[a-zA-Z0-9_-]+$/, \"Username can only contain letters, numbers, underscores, and hyphens\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string()\n    .min(6, \"Password must be at least 6 characters\")\n    .regex(/[A-Z]/, \"Password must contain at least one uppercase letter\")\n    .regex(/[a-z]/, \"Password must contain at least one lowercase letter\")\n    .regex(/[0-9]/, \"Password must contain at least one number\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype RegisterForm = z.infer<typeof registerSchema>;\n\nexport default function Register() {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [registrationSuccess, setRegistrationSuccess] = useState(false);\n  const [, setLocation] = useLocation();\n  const { data: user } = useAuth();\n  const register = useRegister();\n  const { toast } = useToast();\n\n  const {\n    register: registerField,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n  } = useForm<RegisterForm>({\n    resolver: zodResolver(registerSchema),\n  });\n\n  // Redirect if already logged in\n  if (user) {\n    setLocation(\"/\");\n    return null;\n  }\n\n  const onSubmit = async (data: RegisterForm) => {\n    try {\n      const response = await register.mutateAsync({\n        username: data.username,\n        email: data.email,\n        password: data.password,\n      });\n      \n      setRegistrationSuccess(true);\n      toast({\n        title: \"Registration successful!\",\n        description: \"Please wait for admin approval to start participating.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Registration failed\",\n        description: error.message || \"Please try again with different credentials.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (registrationSuccess) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\" data-testid=\"registration-success-page\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <CheckCircle className=\"w-16 h-16 text-success mx-auto mb-4\" />\n              <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"success-title\">\n                Registration Successful!\n              </h2>\n              <p className=\"text-muted-foreground mb-6\">\n                Your account has been created. Please wait for admin approval to start participating in contests.\n              </p>\n              <Link href=\"/login\" data-testid=\"success-login-link\">\n                <Button className=\"gradient-glory\">\n                  Go to Login\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\" data-testid=\"register-page\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"w-12 h-12 rounded-lg gradient-glory flex items-center justify-center\">\n              <Trophy className=\"text-white text-xl\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold\" data-testid=\"register-title\">\n            Join 5best\n          </CardTitle>\n          <p className=\"text-muted-foreground\">\n            Create your account and start competing for GLORY\n          </p>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\" data-testid=\"register-form\">\n            <div>\n              <Label htmlFor=\"username\">Username</Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                placeholder=\"Choose a unique username\"\n                {...registerField(\"username\")}\n                className={errors.username ? \"border-destructive\" : \"\"}\n                data-testid=\"input-username\"\n              />\n              {errors.username && (\n                <p className=\"text-sm text-destructive mt-1\" data-testid=\"error-username\">\n                  {errors.username.message}\n                </p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                {...registerField(\"email\")}\n                className={errors.email ? \"border-destructive\" : \"\"}\n                data-testid=\"input-email\"\n              />\n              {errors.email && (\n                <p className=\"text-sm text-destructive mt-1\" data-testid=\"error-email\">\n                  {errors.email.message}\n                </p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Create a strong password\"\n                  {...registerField(\"password\")}\n                  className={errors.password ? \"border-destructive pr-10\" : \"pr-10\"}\n                  data-testid=\"input-password\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  data-testid=\"toggle-password-visibility\"\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                  )}\n                </Button>\n              </div>\n              {errors.password && (\n                <p className=\"text-sm text-destructive mt-1\" data-testid=\"error-password\">\n                  {errors.password.message}\n                </p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"confirmPassword\"\n                  type={showConfirmPassword ? \"text\" : \"password\"}\n                  placeholder=\"Confirm your password\"\n                  {...registerField(\"confirmPassword\")}\n                  className={errors.confirmPassword ? \"border-destructive pr-10\" : \"pr-10\"}\n                  data-testid=\"input-confirm-password\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                  data-testid=\"toggle-confirm-password-visibility\"\n                >\n                  {showConfirmPassword ? (\n                    <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                  )}\n                </Button>\n              </div>\n              {errors.confirmPassword && (\n                <p className=\"text-sm text-destructive mt-1\" data-testid=\"error-confirm-password\">\n                  {errors.confirmPassword.message}\n                </p>\n              )}\n            </div>\n\n            {register.isError && (\n              <Alert variant=\"destructive\" data-testid=\"register-error\">\n                <AlertDescription>\n                  {(register.error as any)?.message || \"Registration failed. Please try again.\"}\n                </AlertDescription>\n              </Alert>\n            )}\n\n            <Button\n              type=\"submit\"\n              className=\"w-full gradient-glory hover:opacity-90 transition-opacity\"\n              disabled={isSubmitting || register.isPending}\n              data-testid=\"button-register\"\n            >\n              {register.isPending ? \"Creating account...\" : \"Create Account\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Already have an account?{\" \"}\n              <Link href=\"/login\" className=\"text-primary hover:underline\" data-testid=\"link-login\">\n                Sign in here\n              </Link>\n            </p>\n          </div>\n\n          <div className=\"mt-4 p-4 bg-muted rounded-lg\">\n            <p className=\"text-xs text-muted-foreground\">\n              <strong>Password requirements:</strong> At least 6 characters with uppercase, lowercase, and numbers.\n              Your account will be pending admin approval after registration.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10052},"client/src/components/contest-card.tsx":{"content":"import { Calendar, Trophy, Share2, Users } from \"lucide-react\";\nimport { GlassButton } from \"@/components/ui/glass-button\";\nimport { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatPrizeAmount } from \"@/lib/utils\";\n\ninterface Contest {\n  id: string;\n  title: string;\n  slug: string;\n  description: string;\n  rules: string;\n  coverImageUrl?: string;\n  topSubmissionImageUrl?: string;\n  status: string;\n  prizeGlory: number;\n  startAt: string;\n  endAt: string;\n  createdAt: string;\n}\n\ninterface ContestCardProps {\n  contest: Contest;\n}\n\nexport function ContestCard({ contest }: ContestCardProps) {\n  const [, setLocation] = useLocation();\n  const [timeLeft, setTimeLeft] = useState({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n  const { toast } = useToast();\n\n  const handleShare = async () => {\n    const shareUrl = `${window.location.origin}/contest/${contest.slug}`;\n    \n    if (navigator.share) {\n      try {\n        await navigator.share({\n          title: contest.title,\n          text: contest.description,\n          url: shareUrl,\n        });\n      } catch (error) {\n        if ((error as Error).name !== 'AbortError') {\n          console.error('Error sharing:', error);\n        }\n      }\n    } else {\n      // Fallback: copy to clipboard\n      try {\n        await navigator.clipboard.writeText(shareUrl);\n        toast({\n          title: \"Link copied!\",\n          description: \"Contest link copied to clipboard\",\n        });\n      } catch (error) {\n        console.error('Error copying to clipboard:', error);\n        toast({\n          title: \"Error\",\n          description: \"Could not copy link to clipboard\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    const calculateTimeLeft = () => {\n      if (contest.status === \"ended\") {\n        setTimeLeft({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n        return;\n      }\n\n      const endTime = new Date(contest.endAt).getTime();\n      const now = new Date().getTime();\n      const difference = endTime - now;\n\n      if (difference > 0) {\n        const days = Math.floor(difference / (1000 * 60 * 60 * 24));\n        const hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));\n        const seconds = Math.floor((difference % (1000 * 60)) / 1000);\n        setTimeLeft({ days, hours, minutes, seconds });\n      } else {\n        setTimeLeft({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n      }\n    };\n\n    calculateTimeLeft();\n    const timer = setInterval(calculateTimeLeft, 1000);\n    return () => clearInterval(timer);\n  }, [contest.endAt, contest.status]);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return \"bg-green-500/20 text-green-400 border-green-500/30\";\n      case \"upcoming\":\n        return \"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\";\n      case \"ended\":\n        return \"bg-gray-500/20 text-gray-400 border-gray-500/30\";\n      default:\n        return \"bg-primary/20 text-primary border-primary/30\";\n    }\n  };\n\n  const defaultImage = \"https://images.unsplash.com/photo-1618005182384-a83a8bd57fbe?w=800&q=80\";\n  const coverImage = contest.topSubmissionImageUrl || contest.coverImageUrl || defaultImage;\n  \n  return (\n    <div className=\"relative min-h-[600px] w-full overflow-hidden rounded-xl shadow-lg transition-all duration-300 hover:shadow-primary/20 hover:-translate-y-1 group border border-transparent hover:border-primary/50 hover:shadow-[0_0_30px_rgba(124,60,236,0.3)]\">\n      {/* Background image with smooth zoom on hover */}\n      <img\n        src={coverImage}\n        alt={contest.title}\n        className=\"absolute inset-0 h-full w-full object-cover transition-transform duration-700 ease-out group-hover:scale-105\"\n      />\n\n      {/* Readability overlays (always on) */}\n      {/* Soft dark veil that slightly increases on hover */}\n      <div className=\"absolute inset-0 bg-black/25 transition-colors duration-500 group-hover:bg-black/35\" />\n      {/* Gradient from bottom for text contrast */}\n      <div className=\"absolute inset-0 bg-gradient-to-t from-[#171121] via-[#171121]/70 to-transparent pointer-events-none\" />\n\n      {/* Status */}\n      <div className=\"absolute top-4 left-4 z-10\">\n        <div\n          className={`px-2 sm:px-3 py-1 rounded-full text-xs font-bold border backdrop-blur-sm ${getStatusColor(contest.status)}`}\n        >\n          {contest.status.charAt(0).toUpperCase() + contest.status.slice(1)}\n        </div>\n      </div>\n\n      {/* Prize */}\n      <div className=\"absolute top-4 right-4 z-10\">\n        <div className=\"glassmorphism px-3 py-1 rounded-lg\">\n          <div className=\"flex items-center gap-1 text-yellow-400\">\n            <Trophy size={14} />\n            <span className=\"text-xs sm:text-sm font-bold text-white\">\n              {formatPrizeAmount(contest.prizeGlory)} {((contest as any).config?.currency) || 'GLORY'}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"absolute bottom-0 left-0 right-0 z-10 px-4 sm:px-6 pb-4 sm:pb-6 text-center\">\n\n        {/* Title + Desc */}\n        <div className=\"mb-4\">\n          <h1 className=\"text-xl sm:text-2xl lg:text-3xl font-black text-white drop-shadow mb-2\">\n            {contest.title}\n          </h1>\n          <p className=\"text-xs sm:text-sm lg:text-base text-white/85 max-w-md mx-auto line-clamp-2\">\n            {contest.description}\n          </p>\n        </div>\n\n        {/* Countdown */}\n        <div className=\"mb-4 flex justify-center gap-1 sm:gap-2 lg:gap-3\">\n          {[\n            { label: \"Days\", val: String(timeLeft.days).padStart(2, \"0\") },\n            { label: \"Hours\", val: String(timeLeft.hours).padStart(2, \"0\") },\n            { label: \"Min\", val: String(timeLeft.minutes).padStart(2, \"0\") },\n            {\n              label: \"Sec\",\n              val: String(timeLeft.seconds).padStart(2, \"0\"),\n              pulse: true,\n            },\n          ].map(({ label, val, pulse }) => (\n            <div key={label} className=\"flex flex-col items-center\">\n              <div className=\"glassmorphism flex h-10 w-10 sm:h-12 sm:w-12 lg:h-16 lg:w-16 items-center justify-center rounded-lg\">\n                <p\n                  className={`text-sm sm:text-lg lg:text-2xl font-bold text-white ${pulse ? \"animate-pulse\" : \"\"}`}\n                >\n                  {val}\n                </p>\n              </div>\n              <p className=\"mt-1 text-xs font-medium text-white/75 uppercase tracking-widest\">\n                {label}\n              </p>\n            </div>\n          ))}\n        </div>\n\n        {/* Info: Status | Prize | Participants */}\n        <div className=\"mb-4 flex flex-wrap justify-center gap-2\">\n          <div className=\"glassmorphism flex-grow rounded-lg p-2 sm:p-3 text-center min-w-[100px] sm:min-w-[120px] max-w-[140px] sm:max-w-[160px]\">\n            <p className=\"text-xs font-medium text-white/80\">Status</p>\n            <p className=\"text-xs sm:text-sm lg:text-lg font-bold text-primary mt-1 capitalize\">\n              {contest.status}\n            </p>\n          </div>\n\n          {/* Prize tile removed */}\n\n          <div className=\"glassmorphism flex-grow rounded-lg p-2 sm:p-3 text-center min-w-[100px] sm:min-w-[120px] max-w-[140px] sm:max-w-[160px]\">\n            <p className=\"text-xs font-medium text-white/80\">Participants</p>\n            <p className=\"text-xs sm:text-sm lg:text-lg font-bold text-white mt-1\">\n              {typeof (contest as any).submissionCount === 'number'\n                ? (contest as any).submissionCount.toLocaleString()\n                : ((contest as any).submissions ? (contest as any).submissions.length : 0)}\n            </p>\n          </div>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex justify-center items-center\">\n          <GlassButton\n            onClick={() => setLocation(`/contest/${contest.slug}`)}\n            className=\"rounded-lg bg-background-dark/80 backdrop-blur-sm border border-primary/30 text-white font-bold transition-all duration-300 focus-ring hover:border-primary/50 glow-border px-6 py-3 text-base hover:bg-primary/20 w-full sm:w-auto min-w-[140px] sm:min-w-[160px] h-10 sm:h-12 px-4 sm:px-6 text-xs sm:text-sm tracking-wide hover:scale-105 flex items-center justify-center\"\n            data-testid={`button-join-contest-${contest.id}`}\n          >\n            {contest.status === \"ended\" ? (\n              <>\n                <Trophy size={16} className=\"mr-2\" />\n                <span className=\"truncate\">View Results</span>\n              </>\n            ) : (\n              <>\n                <Calendar size={16} className=\"mr-2\" />\n                <span className=\"truncate\">Join Contest</span>\n              </>\n            )}\n          </GlassButton>\n        </div>\n\n        {/* Share */}\n        <div className=\"mt-3 flex justify-center items-center gap-3\">\n          <p className=\"text-xs font-medium text-white/75\">Share:</p>\n          <div className=\"flex items-center gap-2\">\n            <button\n              onClick={handleShare}\n              className=\"group flex items-center justify-center rounded-full size-8 bg-primary/20 dark:bg-primary/30 hover:bg-primary/40 transition-colors\"\n              aria-label=\"Share contest\"\n            >\n              <Share2 className=\"text-white\" size={14} />\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9576},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/pages/login.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Trophy, Eye, EyeOff } from \"lucide-react\";\nimport { useLogin, useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [showPassword, setShowPassword] = useState(false);\n  const [, setLocation] = useLocation();\n  const { data: user } = useAuth();\n  const login = useLogin();\n  const { toast } = useToast();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n  } = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n  });\n\n  // Redirect if already logged in (do this in an effect to avoid updating\n  // during render which causes React warnings)\n  useEffect(() => {\n    if (user) {\n      setLocation(\"/\");\n    }\n  }, [user, setLocation]);\n\n  const onSubmit = async (data: LoginForm) => {\n    try {\n      await login.mutateAsync(data);\n      toast({\n        title: \"Welcome back!\",\n        description: \"You have been successfully logged in.\",\n      });\n      setLocation(\"/\");\n    } catch (error: any) {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Please check your credentials and try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\" data-testid=\"login-page\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"w-12 h-12 rounded-lg gradient-glory flex items-center justify-center\">\n              <Trophy className=\"text-white text-xl\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold\" data-testid=\"login-title\">\n            Welcome back to 5best\n          </CardTitle>\n          <p className=\"text-muted-foreground\">\n            Sign in to your account to continue competing\n          </p>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\" data-testid=\"login-form\">\n            <div>\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                {...register(\"email\")}\n                className={errors.email ? \"border-destructive\" : \"\"}\n                data-testid=\"input-email\"\n              />\n              {errors.email && (\n                <p className=\"text-sm text-destructive mt-1\" data-testid=\"error-email\">\n                  {errors.email.message}\n                </p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Enter your password\"\n                  {...register(\"password\")}\n                  className={errors.password ? \"border-destructive pr-10\" : \"pr-10\"}\n                  data-testid=\"input-password\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  data-testid=\"toggle-password-visibility\"\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                  )}\n                </Button>\n              </div>\n              {errors.password && (\n                <p className=\"text-sm text-destructive mt-1\" data-testid=\"error-password\">\n                  {errors.password.message}\n                </p>\n              )}\n            </div>\n\n            {login.isError && (\n              <Alert variant=\"destructive\" data-testid=\"login-error\">\n                <AlertDescription>\n                  {(login.error as any)?.message || \"Login failed. Please try again.\"}\n                </AlertDescription>\n              </Alert>\n            )}\n\n            <Button\n              type=\"submit\"\n              className=\"w-full gradient-glory hover:opacity-90 transition-opacity\"\n              disabled={isSubmitting || login.isPending}\n              data-testid=\"button-login\"\n            >\n              {login.isPending ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Don't have an account?{\" \"}\n              <Link href=\"/register\" className=\"text-primary hover:underline\" data-testid=\"link-register\">\n                Sign up here\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5725},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/UploadCard.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { X, Upload, Image as ImageIcon, Loader2 } from \"lucide-react\";\nimport { GlassButton } from \"./GlassButton\";\nimport { Input } from \"./ui/input\";\nimport { Textarea } from \"./ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface UploadCardProps {\n  isOpen: boolean;\n  contestId: string;\n  onClose: () => void;\n  onSuccess: () => void;\n}\n\nexport function UploadCard({ isOpen, contestId, onClose, onSuccess }: UploadCardProps) {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [preview, setPreview] = useState<string>(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [isUploading, setIsUploading] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  if (!isOpen) return null;\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setSelectedFile(file);\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setPreview(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    const file = e.dataTransfer.files[0];\n    if (file && file.type.startsWith('image/')) {\n      setSelectedFile(file);\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setPreview(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (!selectedFile || !title.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a file and provide a title\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsUploading(true);\n\n    try {\n      const formData = new FormData();\n      formData.append('file', selectedFile);\n      formData.append('contestId', contestId);\n      formData.append('title', title);\n      formData.append('description', description);\n      formData.append('type', selectedFile.type.startsWith('video/') ? 'video' : 'image');\n\n      const response = await fetch('/api/submissions', {\n        method: 'POST',\n        credentials: 'include',\n        body: formData\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to submit');\n      }\n\n      toast({\n        title: \"Success!\",\n        description: \"Your submission has been uploaded and is pending approval\"\n      });\n\n      onSuccess();\n      handleClose();\n    } catch (error) {\n      toast({\n        title: \"Upload Failed\",\n        description: error instanceof Error ? error.message : \"Please try again\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const handleClose = () => {\n    setSelectedFile(null);\n    setPreview(\"\");\n    setTitle(\"\");\n    setDescription(\"\");\n    onClose();\n  };\n\n  return (\n    <div \n      className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/80 backdrop-blur-sm p-4\"\n      onClick={handleClose}\n      data-testid=\"upload-card-overlay\"\n    >\n      <div \n        className=\"relative max-w-2xl w-full max-h-[90vh] overflow-y-auto bg-slate-900/90 backdrop-blur-xl rounded-2xl border border-white/10 shadow-2xl shadow-violet-600/20\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* Header */}\n        <div className=\"sticky top-0 bg-slate-900/95 backdrop-blur-xl border-b border-white/10 p-6 flex items-center justify-between\">\n          <h2 className=\"text-2xl font-bold text-white\">Upload Submission</h2>\n          <button\n            onClick={handleClose}\n            className=\"p-2 hover:bg-white/10 rounded-lg transition-colors\"\n            data-testid=\"button-close-upload\"\n          >\n            <X className=\"h-6 w-6 text-slate-400\" />\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6 space-y-6\">\n          {/* File Upload Area */}\n          <div\n            onDragOver={(e) => e.preventDefault()}\n            onDrop={handleDrop}\n            onClick={() => fileInputRef.current?.click()}\n            className=\"relative border-2 border-dashed border-white/20 hover:border-violet-500/50 rounded-xl p-8 text-center cursor-pointer transition-colors bg-white/5\"\n            data-testid=\"upload-drop-zone\"\n          >\n            {preview ? (\n              <div className=\"relative\">\n                <img src={preview} alt=\"Preview\" className=\"max-h-64 mx-auto rounded-lg\" />\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setSelectedFile(null);\n                    setPreview(\"\");\n                  }}\n                  className=\"absolute top-2 right-2 p-2 bg-black/50 hover:bg-black/70 rounded-lg transition-colors\"\n                  data-testid=\"button-remove-file\"\n                >\n                  <X className=\"h-5 w-5 text-white\" />\n                </button>\n              </div>\n            ) : (\n              <div className=\"flex flex-col items-center gap-4\">\n                <div className=\"p-4 rounded-full bg-violet-600/20 border border-violet-500/30\">\n                  <ImageIcon className=\"h-12 w-12 text-violet-400\" />\n                </div>\n                <div>\n                  <p className=\"text-lg font-semibold text-white mb-1\">\n                    Drop your image here or click to browse\n                  </p>\n                  <p className=\"text-sm text-slate-400\">\n                    PNG, JPG up to 10MB\n                  </p>\n                </div>\n              </div>\n            )}\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              accept=\"image/*,video/*\"\n              onChange={handleFileSelect}\n              className=\"hidden\"\n              data-testid=\"input-file\"\n            />\n          </div>\n\n          {/* Title */}\n          <div>\n            <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n              Title *\n            </label>\n            <Input\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              placeholder=\"Enter submission title\"\n              className=\"bg-white/5 border-white/10 text-white\"\n              data-testid=\"input-title\"\n            />\n          </div>\n\n          {/* Description */}\n          <div>\n            <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n              Description (optional)\n            </label>\n            <Textarea\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              placeholder=\"Tell us about your submission...\"\n              rows={4}\n              className=\"bg-white/5 border-white/10 text-white\"\n              data-testid=\"input-description\"\n            />\n          </div>\n\n          {/* Submit Button */}\n          <GlassButton\n            onClick={handleSubmit}\n            disabled={!selectedFile || !title.trim() || isUploading}\n            variant=\"purple\"\n            className=\"w-full py-4 flex items-center justify-center gap-2\"\n            data-testid=\"button-submit-upload\"\n          >\n            {isUploading ? (\n              <>\n                <Loader2 className=\"h-5 w-5 animate-spin\" />\n                Uploading...\n              </>\n            ) : (\n              <>\n                <Upload className=\"h-5 w-5\" />\n                Submit Entry\n              </>\n            )}\n          </GlassButton>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7659},"server/services/file-upload.ts":{"content":"import { v2 as cloudinary } from \"cloudinary\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\n\n// Configure Cloudinary\ncloudinary.config({\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n  api_key: process.env.CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_API_SECRET,\n});\n\n// Check if Cloudinary is configured\nconst isCloudinaryConfigured = () => {\n  return !!(\n    process.env.CLOUDINARY_CLOUD_NAME &&\n    process.env.CLOUDINARY_API_KEY &&\n    process.env.CLOUDINARY_API_SECRET\n  );\n};\n\n// Local upload configuration\nconst localStorage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    const uploadsDir = path.join(process.cwd(), \"public\", \"uploads\");\n    if (!fs.existsSync(uploadsDir)) {\n      fs.mkdirSync(uploadsDir, { recursive: true });\n    }\n    cb(null, uploadsDir);\n  },\n  filename: (req, file, cb) => {\n    const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);\n    cb(null, file.fieldname + \"-\" + uniqueSuffix + path.extname(file.originalname));\n  },\n});\n\n// File filter\nconst fileFilter = (req: any, file: any, cb: any) => {\n  // Accept images and videos\n  if (file.mimetype.startsWith(\"image/\") || file.mimetype.startsWith(\"video/\")) {\n    cb(null, true);\n  } else {\n    cb(new Error(\"Only image and video files are allowed\"), false);\n  }\n};\n\nexport const upload = multer({\n  storage: localStorage,\n  fileFilter,\n  limits: {\n    fileSize: 100 * 1024 * 1024, // 100MB limit\n  },\n});\n\nexport async function uploadToCloudinary(file: Express.Multer.File): Promise<{\n  url: string;\n  publicId: string;\n  thumbnailUrl?: string;\n  resourceType: string;\n}> {\n  try {\n    const isVideo = file.mimetype.startsWith(\"video/\");\n    const resourceType = isVideo ? \"video\" : \"image\";\n    \n    // Upload to Cloudinary with optimization\n    const result = await cloudinary.uploader.upload(file.path, {\n      resource_type: resourceType,\n      folder: \"5best-submissions\",\n      // Auto-optimization settings\n      quality: \"auto:good\", // Automatic quality optimization\n      fetch_format: \"auto\", // Automatic format selection (WebP, AVIF when supported)\n    });\n\n    let thumbnailUrl: string | undefined;\n    \n    if (isVideo) {\n      // Generate video thumbnail using Cloudinary transformation\n      thumbnailUrl = cloudinary.url(result.public_id, {\n        resource_type: \"video\",\n        format: \"jpg\",\n        transformation: [\n          { width: 400, height: 400, crop: \"fill\", quality: \"auto:good\" },\n          { fetch_format: \"auto\" }\n        ]\n      });\n    }\n\n    return {\n      url: result.secure_url,\n      publicId: result.public_id,\n      thumbnailUrl,\n      resourceType,\n    };\n  } catch (error) {\n    throw new Error(`Cloudinary upload failed: ${error}`);\n  }\n}\n\nexport async function uploadFile(file: Express.Multer.File): Promise<{\n  url: string;\n  thumbnailUrl?: string;\n  cloudinaryPublicId?: string;\n  cloudinaryResourceType?: string;\n}> {\n  if (isCloudinaryConfigured()) {\n    try {\n      const result = await uploadToCloudinary(file);\n      \n      // Clean up local file\n      fs.unlinkSync(file.path);\n      \n      return {\n        url: result.url,\n        thumbnailUrl: result.thumbnailUrl,\n        cloudinaryPublicId: result.publicId,\n        cloudinaryResourceType: result.resourceType,\n      };\n    } catch (error) {\n      console.error(\"Cloudinary upload failed, falling back to local:\", error);\n    }\n  }\n\n  // Fallback to local storage\n  const url = `/uploads/${file.filename}`;\n  \n  let thumbnailUrl: string | undefined;\n  if (file.mimetype.startsWith(\"video/\")) {\n    // For videos, use a placeholder thumbnail in local mode\n    thumbnailUrl = \"/api/placeholder/video-thumbnail\";\n  }\n\n  return { url, thumbnailUrl };\n}\n\nexport async function deleteFile(\n  mediaUrl: string, \n  cloudinaryPublicId?: string | null,\n  cloudinaryResourceType?: string,\n  isLegacySubmission: boolean = false\n): Promise<void> {\n  try {\n    // Handle Cloudinary URLs\n    if (mediaUrl.includes('cloudinary.com')) {\n      let publicIdToDelete = cloudinaryPublicId;\n      let resourceType = cloudinaryResourceType || 'image';\n      \n      // If no publicId stored, check if this is legacy or gallery reuse\n      if (!publicIdToDelete) {\n        if (isLegacySubmission) {\n          // Legacy submission: parse URL to extract publicId\n          console.log('Legacy Cloudinary submission - parsing URL for deletion');\n          \n          const urlParts = mediaUrl.split('/');\n          const uploadIndex = urlParts.indexOf('upload');\n          \n          // Determine resource type from URL\n          const resourceTypeIndex = uploadIndex - 1;\n          if (resourceTypeIndex >= 0) {\n            resourceType = urlParts[resourceTypeIndex] === 'video' ? 'video' : 'image';\n          }\n          \n          if (uploadIndex !== -1) {\n            // Find the version part (starts with 'v' followed by numbers)\n            let versionIndex = -1;\n            for (let i = uploadIndex + 1; i < urlParts.length; i++) {\n              if (urlParts[i].match(/^v\\d+$/)) {\n                versionIndex = i;\n                break;\n              }\n            }\n            \n            if (versionIndex !== -1 && versionIndex + 1 < urlParts.length) {\n              // Get everything after version as the public_id path\n              const pathAfterVersion = urlParts.slice(versionIndex + 1).join('/');\n              // Remove file extension\n              publicIdToDelete = pathAfterVersion.replace(/\\.[^/.]+$/, '');\n            }\n          }\n        } else {\n          // No publicId and not legacy = gallery reuse, don't delete\n          console.log(`Skipping Cloudinary deletion - no publicId stored (likely gallery reuse): ${mediaUrl}`);\n          return;\n        }\n      }\n      \n      if (publicIdToDelete) {\n        await cloudinary.uploader.destroy(publicIdToDelete, {\n          resource_type: resourceType\n        });\n        console.log(`Deleted Cloudinary asset: ${publicIdToDelete} (${resourceType})`);\n      }\n    } else if (mediaUrl.startsWith('/uploads/')) {\n      // Local file - extract filename and delete\n      const fileName = mediaUrl.replace('/uploads/', '');\n      const filePath = path.join(process.cwd(), \"public\", \"uploads\", fileName);\n      \n      if (fs.existsSync(filePath)) {\n        fs.unlinkSync(filePath);\n        console.log(`Deleted local file: ${fileName}`);\n      }\n    }\n  } catch (error) {\n    console.error(`File deletion failed: ${error}`);\n    // Don't throw error - we still want to delete the database record even if file deletion fails\n  }\n}\n","size_bytes":6547},"client/src/lib/auth.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport interface User {\n  id: string;\n  username: string;\n  email: string;\n  role: string;\n  status: string;\n  gloryBalance: number;\n  solBalance: number;\n  usdcBalance: number;\n  avatarUrl?: string | null;\n  withdrawalAddress?: string | null;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport function useAuth() {\n  return useQuery<User | null>({\n    queryKey: [\"/api/me\"],\n    queryFn: async () => {\n      try {\n        const response = await fetch(\"/api/me\", { credentials: \"include\" });\n        if (response.status === 401) {\n          return null;\n        }\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch user\");\n        }\n        return await response.json();\n      } catch (error) {\n        return null;\n      }\n    },\n    staleTime: 5000, // Consider data stale after 5 seconds\n    refetchInterval: 30000, // Refetch every 30 seconds\n    refetchOnWindowFocus: true, // Refetch when window gets focus\n  });\n}\n\nexport function useLogin() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (data: { email: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n    },\n  });\n}\n\nexport function useRegister() {\n  return useMutation({\n    mutationFn: async (data: { username: string; email: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", data);\n      return await response.json();\n    },\n  });\n}\n\nexport function useLogout() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/auth/logout\");\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.clear();\n    },\n  });\n}\n\nexport function isAuthenticated(user: User | null | undefined): user is User {\n  return user != null;\n}\n\nexport function isAdmin(user: User | null | undefined): boolean {\n  return user?.role === \"admin\";\n}\n\nexport function isApproved(user: User | null | undefined): boolean {\n  return user?.status === \"approved\";\n}\n","size_bytes":2346},"client/src/components/ContestLightboxModal.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { X, Heart, User, Calendar, Share2, Tag, Sparkles, MessageSquare, ShoppingCart, ChevronDown } from \"lucide-react\";\nimport { GlassButton } from \"./GlassButton\";\n\ninterface ContestLightboxModalProps {\n  isOpen: boolean;\n  submission: {\n    id: string;\n    title: string;\n    description?: string;\n    mediaUrl: string;\n    userId: string;\n    user?: {\n      username: string;\n    };\n    createdAt: string;\n    voteCount?: number;\n    hasVoted?: boolean;\n    hasPurchasedPrompt?: boolean;\n    category?: string | null;\n    aiModel?: string | null;\n    prompt?: string | null;\n    tags?: string[] | null;\n    promptForSale?: boolean;\n    promptPrice?: string | null;\n    promptCurrency?: string | null;\n  } | null;\n  onClose: () => void;\n  onVote?: (submissionId: string) => void;\n  onShare?: () => void;\n  onBuyPrompt?: (submissionId: string) => void;\n}\n\nexport function ContestLightboxModal({ \n  isOpen, \n  submission, \n  onClose, \n  onVote,\n  onShare,\n  onBuyPrompt\n}: ContestLightboxModalProps) {\n  const infoPanelRef = useRef<HTMLDivElement>(null);\n\n  const scrollToInfo = () => {\n    infoPanelRef.current?.scrollIntoView({ behavior: 'smooth', block: 'start' });\n  };\n\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const modalId = Date.now();\n\n    // Push unique history state when modal opens\n    window.history.pushState({ modal: 'lightbox', modalId }, '');\n\n    // Handle Escape key\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        // Remove focus/hover state to prevent visual artifacts\n        (document.activeElement as HTMLElement)?.blur();\n        onClose();\n      }\n    };\n\n    // Handle browser back button\n    const handlePopState = () => {\n      // Close modal when going back in history\n      if (window.history.state?.modalId !== modalId) {\n        onClose();\n      }\n    };\n\n    window.addEventListener('keydown', handleEscape);\n    window.addEventListener('popstate', handlePopState);\n\n    return () => {\n      window.removeEventListener('keydown', handleEscape);\n      window.removeEventListener('popstate', handlePopState);\n    };\n  }, [isOpen, onClose]);\n\n  if (!isOpen || !submission) return null;\n\n  const handleVote = () => {\n    if (onVote) {\n      onVote(submission.id);\n    }\n  };\n\n  const handleShare = () => {\n    if (onShare) {\n      onShare();\n    } else {\n      // Fallback share functionality if no onShare prop provided\n      const shareUrl = `${window.location.origin}/submission/${submission.id}`;\n      \n      if (navigator.share) {\n        navigator.share({\n          title: submission.title,\n          text: `Check out this amazing submission: ${submission.title}`,\n          url: shareUrl,\n        }).catch(() => {\n          navigator.clipboard.writeText(shareUrl);\n        });\n      } else {\n        navigator.clipboard.writeText(shareUrl);\n      }\n    }\n  };\n\n  const handleBuyPrompt = () => {\n    if (onBuyPrompt && submission) {\n      onBuyPrompt(submission.id);\n    }\n  };\n\n  const formatPrice = (price: string | null | undefined): string => {\n    if (!price) return \"0\";\n    const num = parseFloat(price);\n    if (isNaN(num)) return price || \"0\";\n    return num.toString();\n  };\n\n  return (\n    <div \n      className=\"fixed inset-0 z-[100] bg-black/95 backdrop-blur-sm overflow-y-auto\"\n      onClick={onClose}\n      data-testid=\"lightbox-overlay\"\n    >\n      {/* Desktop: Grid layout | Mobile: Stack layout */}\n      <div className=\"min-h-full flex flex-col lg:grid lg:grid-cols-[1fr,350px] lg:h-full gap-0\">\n        \n        {/* Image Section */}\n        <div \n          className=\"relative min-h-screen lg:min-h-0 lg:flex-1 flex items-center justify-center lg:p-8\"\n          onClick={(e) => e.stopPropagation()}\n        >\n          <img\n            src={submission.mediaUrl}\n            alt={submission.title}\n            className=\"w-full h-full lg:max-w-full lg:max-h-full object-cover lg:object-contain lg:rounded-lg\"\n            data-testid=\"lightbox-image\"\n          />\n          \n          {/* Close button - top right on image */}\n          <button\n            onClick={onClose}\n            className=\"absolute top-6 right-6 p-3 rounded-full bg-black/70 backdrop-blur-sm text-white hover:bg-red-500 transition-all duration-300 border border-white/20 z-10\"\n            data-testid=\"button-close-lightbox\"\n          >\n            <X className=\"h-6 w-6\" />\n          </button>\n\n          {/* Animated scroll arrow - mobile only */}\n          <ChevronDown\n            onClick={scrollToInfo}\n            className=\"absolute bottom-0 left-1/2 -translate-x-1/2 h-8 w-8 text-white/80 animate-bounce cursor-pointer lg:hidden\"\n            data-testid=\"button-scroll-to-info\"\n          />\n        </div>\n\n        {/* Info Panel - Right on desktop, Bottom on mobile */}\n        <div \n          ref={infoPanelRef}\n          className=\"bg-gradient-to-br from-slate-900/95 via-slate-800/95 to-slate-900/95 backdrop-blur-xl border-l border-white/10 lg:overflow-y-auto lg:max-h-none\"\n          onClick={(e) => e.stopPropagation()}\n        >\n          <div className=\"p-6 space-y-6\">\n            \n            {/* Title & Description */}\n            <div>\n              <h2 className=\"text-2xl font-bold text-white mb-2\" data-testid=\"text-submission-title\">\n                {submission.title}\n              </h2>\n              {submission.description && (\n                <p className=\"text-gray-300 text-sm leading-relaxed\" data-testid=\"text-submission-description\">\n                  {submission.description}\n                </p>\n              )}\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex gap-3\">\n              <button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleVote();\n                }}\n                className=\"flex-1 flex items-center justify-center gap-2 px-4 py-3 rounded-xl bg-gradient-to-r from-violet-600 to-purple-600 hover:from-violet-700 hover:to-purple-700 text-white font-semibold transition-all duration-300 shadow-lg shadow-violet-500/20\"\n                data-testid=\"button-vote-submission\"\n              >\n                <Heart \n                  className={`h-5 w-5 ${submission.hasVoted ? 'fill-current' : ''}`}\n                />\n                <span>{submission.hasVoted ? 'Voted' : 'Vote'}</span>\n                {submission.voteCount !== undefined && (\n                  <span className=\"ml-1 text-white/80\">({submission.voteCount})</span>\n                )}\n              </button>\n              \n              <button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleShare();\n                }}\n                className=\"px-4 py-3 rounded-xl bg-slate-700/50 hover:bg-slate-600/50 text-white transition-all duration-300 border border-white/10\"\n                data-testid=\"button-share-submission\"\n              >\n                <Share2 className=\"h-5 w-5\" />\n              </button>\n            </div>\n\n            {/* Details Grid */}\n            <div className=\"space-y-4 pt-4 border-t border-white/10\">\n              \n              {/* Category */}\n              {submission.category && (\n                <div className=\"flex items-start gap-3\" data-testid=\"info-category\">\n                  <Tag className=\"h-5 w-5 text-violet-400 mt-0.5 flex-shrink-0\" />\n                  <div>\n                    <p className=\"text-xs text-gray-400 uppercase tracking-wide mb-1\">Category</p>\n                    <p className=\"text-white font-medium\">{submission.category}</p>\n                  </div>\n                </div>\n              )}\n\n              {/* AI Model */}\n              {submission.aiModel && (\n                <div className=\"flex items-start gap-3\" data-testid=\"info-ai-model\">\n                  <Sparkles className=\"h-5 w-5 text-violet-400 mt-0.5 flex-shrink-0\" />\n                  <div>\n                    <p className=\"text-xs text-gray-400 uppercase tracking-wide mb-1\">AI Model</p>\n                    <p className=\"text-white font-medium\">{submission.aiModel}</p>\n                  </div>\n                </div>\n              )}\n\n              {/* Prompt */}\n              {submission.prompt && (\n                <div className=\"flex flex-col gap-2\" data-testid=\"info-prompt\">\n                  <div className=\"flex items-start gap-3\">\n                    <MessageSquare className=\"h-5 w-5 text-violet-400 mt-0.5 flex-shrink-0\" />\n                    <div className=\"flex-1\">\n                      <p className=\"text-xs text-gray-400 uppercase tracking-wide mb-1\">Prompt</p>\n                      <div className=\"relative\">\n                        <p \n                          className={`text-white text-sm leading-relaxed ${\n                            submission.promptForSale && !submission.hasPurchasedPrompt ? 'filter blur-sm select-none pointer-events-none' : ''\n                          }`}\n                          data-testid=\"text-prompt-content\"\n                        >\n                          {submission.prompt}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* Buy Prompt Button - show only if for sale and not purchased */}\n                  {submission.promptForSale && !submission.hasPurchasedPrompt && (\n                    <GlassButton\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleBuyPrompt();\n                      }}\n                      className=\"w-full flex items-center justify-center gap-2\"\n                      data-testid=\"button-buy-prompt\"\n                    >\n                      <ShoppingCart className=\"h-5 w-5\" />\n                      <span className=\"font-semibold\">Buy Prompt</span>\n                      {submission.promptPrice && submission.promptCurrency && (\n                        <span className=\"ml-2 px-3 py-1 rounded-full bg-white/10 border border-white/20 text-sm\">\n                          {formatPrice(submission.promptPrice)} {submission.promptCurrency}\n                        </span>\n                      )}\n                    </GlassButton>\n                  )}\n                </div>\n              )}\n\n              {/* Tags */}\n              {submission.tags && submission.tags.length > 0 && (\n                <div className=\"flex flex-wrap gap-2 pt-2\">\n                  {submission.tags.map((tag, index) => (\n                    <span\n                      key={index}\n                      className=\"px-3 py-1 rounded-full bg-violet-600/20 border border-violet-500/30 text-violet-300 text-xs font-medium\"\n                    >\n                      #{tag}\n                    </span>\n                  ))}\n                </div>\n              )}\n\n              {/* Creator & Date */}\n              <div className=\"pt-4 border-t border-white/10 space-y-3\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"h-10 w-10 rounded-full bg-violet-600/20 border border-violet-500/30 flex items-center justify-center flex-shrink-0\">\n                    <User className=\"h-5 w-5 text-violet-400\" />\n                  </div>\n                  <div>\n                    <p className=\"text-xs text-gray-400\">Created by</p>\n                    <p className=\"text-white font-semibold\" data-testid=\"text-creator-username\">\n                      @{submission.user?.username || 'Unknown'}\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center gap-2 text-sm text-gray-400\">\n                  <Calendar className=\"h-4 w-4\" />\n                  <span>{new Date(submission.createdAt).toLocaleDateString()}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11904},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/lib/wallet-provider.tsx":{"content":"import { createContext, useContext, useMemo, ReactNode, useCallback } from \"react\";\nimport {\n  ConnectionProvider,\n  WalletProvider,\n  useWallet as useSolanaWallet,\n} from '@solana/wallet-adapter-react';\nimport { WalletModalProvider } from '@solana/wallet-adapter-react-ui';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport bs58 from 'bs58';\n\n// Import default wallet adapter styles\nimport '@solana/wallet-adapter-react-ui/styles.css';\n\ninterface WalletContextType {\n  connected: boolean;\n  connecting: boolean;\n  publicKey: string | null;\n  connect: () => Promise<void>;\n  disconnect: () => void;\n  signMessage: (message: string) => Promise<string>;\n}\n\nconst WalletContext = createContext<WalletContextType | null>(null);\n\nexport function SolanaWalletProvider({ children }: { children: ReactNode }) {\n  // Using mainnet-beta for production (real transactions)\n  const network = import.meta.env.VITE_SOLANA_NETWORK || 'mainnet-beta';\n  const endpoint = useMemo(() => {\n    // Use custom RPC if provided, otherwise use default cluster API\n    const customRpc = import.meta.env.VITE_SOLANA_RPC_ENDPOINT;\n    if (customRpc) {\n      return customRpc;\n    }\n    return clusterApiUrl(network as 'devnet' | 'testnet' | 'mainnet-beta');\n  }, [network]);\n  \n  // Empty array - Wallet Standard automatically detects Phantom, Solflare, Backpack, etc.\n  const wallets = useMemo(() => [], []);\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletModalProvider>\n          <WalletContextWrapper>\n            {children}\n          </WalletContextWrapper>\n        </WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}\n\n// Wrapper to provide compatibility with existing useWallet hook\nfunction WalletContextWrapper({ children }: { children: ReactNode }) {\n  const { \n    publicKey: solanaPublicKey, \n    connected, \n    connecting, \n    connect: solanaConnect,\n    disconnect: solanaDisconnect,\n    signMessage: solanaSignMessage,\n  } = useSolanaWallet();\n\n  const publicKey = solanaPublicKey?.toBase58() || null;\n\n  const connect = useCallback(async () => {\n    if (!solanaConnect) {\n      throw new Error(\"Wallet adapter not initialized\");\n    }\n    await solanaConnect();\n  }, [solanaConnect]);\n\n  const disconnect = useCallback(async () => {\n    if (solanaDisconnect) {\n      await solanaDisconnect();\n    }\n  }, [solanaDisconnect]);\n\n  const signMessage = useCallback(async (message: string): Promise<string> => {\n    if (!solanaSignMessage || !connected) {\n      throw new Error(\"Wallet not connected\");\n    }\n\n    const encodedMessage = new TextEncoder().encode(message);\n    const signature = await solanaSignMessage(encodedMessage);\n    \n    // Convert Uint8Array to base58\n    return bs58.encode(signature);\n  }, [solanaSignMessage, connected]);\n\n  const value = useMemo(() => ({\n    connected,\n    connecting,\n    publicKey,\n    connect,\n    disconnect,\n    signMessage,\n  }), [connected, connecting, publicKey, connect, disconnect, signMessage]);\n\n  return (\n    <WalletContext.Provider value={value}>\n      {children}\n    </WalletContext.Provider>\n  );\n}\n\nexport function useWallet() {\n  const context = useContext(WalletContext);\n  if (!context) {\n    throw new Error(\"useWallet must be used within SolanaWalletProvider\");\n  }\n  return context;\n}\n\n// Export additional wallet adapter hooks for advanced usage\nexport { useConnection } from '@solana/wallet-adapter-react';\nexport { useWallet as useSolanaWalletAdapter } from '@solana/wallet-adapter-react';\n\ndeclare global {\n  interface Window {\n    solana?: any;\n  }\n}\n","size_bytes":3619},"client/src/pages/admin/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { \n  Shield, \n  Users, \n  Image as ImageIcon, \n  Trophy, \n  Crown, \n  Clock, \n  Search, \n  CheckCircle, \n  XCircle,\n  AlertTriangle,\n  Calendar,\n  Eye,\n  BarChart3,\n  DollarSign,\n  Loader2,\n  Trash2,\n  Edit3,\n  Copy,\n  Download,\n  Settings,\n  Sparkles,\n  Save\n} from \"lucide-react\";\nimport { useAuth, isAdmin } from \"@/lib/auth\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { CreateContestModal } from \"@/components/CreateContestModal\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\n\n// Settings form schema\nconst settingsFormSchema = z.object({\n  privateMode: z.boolean(),\n  platformWalletAddress: z.string().optional().refine(\n    (val) => !val || /^[1-9A-HJ-NP-Za-km-z]{32,44}$/.test(val),\n    { message: \"Invalid Solana wallet address\" }\n  ),\n});\n\ntype SettingsFormValues = z.infer<typeof settingsFormSchema>;\n\nconst MODEL_NAMES: Record<string, string> = {\n  \"leonardo\": \"Leonardo Lucid (Fast)\",\n  \"nano-banana\": \"Nano Banana (Style Reference)\",\n  \"flux-1.1-pro\": \"Flux 1.1 Pro (High Quality)\",\n  \"sd-3.5-large\": \"Stable Diffusion 3.5\",\n  \"ideogram-v3\": \"Ideogram v3 (Premium)\",\n  \"upscale\": \"AI Upscaling (4x)\",\n};\n\nexport default function AdminDashboard() {\n  const { data: user } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [userStatusFilter, setUserStatusFilter] = useState(\"all\");\n  const [userSearchQuery, setUserSearchQuery] = useState(\"\");\n  const [submissionStatusFilter, setSubmissionStatusFilter] = useState(\"all\");\n  const [submissionContestFilter, setSubmissionContestFilter] = useState(\"all\");\n  const [submissionSearchQuery, setSubmissionSearchQuery] = useState(\"\");\n  const [isCreateContestModalOpen, setIsCreateContestModalOpen] = useState(false);\n  \n  // Bulk deletion state\n  const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);\n  const [bulkDeleteDialogOpen, setBulkDeleteDialogOpen] = useState(false);\n  const [deleteConfirmText, setDeleteConfirmText] = useState(\"\");\n\n  // Bulk submission actions state\n  const [selectedSubmissionIds, setSelectedSubmissionIds] = useState<string[]>([]);\n\n  // Bulk contest actions state\n  const [selectedContestIds, setSelectedContestIds] = useState<string[]>([]);\n  const [bulkDeleteContestsDialogOpen, setBulkDeleteContestsDialogOpen] = useState(false);\n  const [deleteContestsConfirmText, setDeleteContestsConfirmText] = useState(\"\");\n\n  // Bulk cashout actions state\n  const [selectedCashoutIds, setSelectedCashoutIds] = useState<string[]>([]);\n\n  // Balance edit state\n  const [gloryEditDialogOpen, setGloryEditDialogOpen] = useState(false);\n  const [selectedUserId, setSelectedUserId] = useState(\"\");\n  const [gloryAmountInput, setGloryAmountInput] = useState(\"\");\n  const [selectedCurrency, setSelectedCurrency] = useState<\"GLORY\" | \"SOL\" | \"USDC\">(\"GLORY\");\n\n  // Clear audit logs state\n  const [clearLogsDialogOpen, setClearLogsDialogOpen] = useState(false);\n  const [clearLogsConfirmText, setClearLogsConfirmText] = useState(\"\");\n\n  // AI Pricing state\n  const [pricingValues, setPricingValues] = useState<Record<string, number>>({});\n\n  // Redirect if not admin\n  if (!user || !isAdmin(user)) {\n    setLocation(\"/\");\n    return null;\n  }\n\n  // Fetch admin data\n  const { data: users = [] } = useQuery({\n    queryKey: [\"/api/admin/users\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/users\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch users\");\n      return response.json();\n    },\n  });\n\n  const { data: submissions = [] } = useQuery({\n    queryKey: [\"/api/admin/submissions\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/submissions\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch submissions\");\n      return response.json();\n    },\n  });\n\n  const { data: contests = [] } = useQuery({\n    queryKey: [\"/api/contests\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/contests\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch contests\");\n      return response.json();\n    },\n  });\n\n  const { data: auditLogs = [] } = useQuery({\n    queryKey: [\"/api/admin/audit-logs\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/audit-logs\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch audit logs\");\n      return response.json();\n    },\n  });\n\n  const { data: cashoutRequests = [] } = useQuery({\n    queryKey: [\"/api/admin/cashout/requests\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/cashout/requests\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch cashout requests\");\n      const data = await response.json();\n      return data.requests;\n    },\n    refetchInterval: 10000,\n  });\n\n  // Site Settings\n  const { data: siteSettings } = useQuery<{ privateMode: boolean; platformWalletAddress?: string | null }>({\n    queryKey: [\"/api/admin/settings\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/settings\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch site settings\");\n      return response.json();\n    },\n  });\n\n  // AI Pricing Settings\n  const { data: pricing, isLoading: loadingPricing } = useQuery<Record<string, number>>({\n    queryKey: [\"/api/admin/settings/pricing\"],\n  });\n\n  useEffect(() => {\n    if (pricing) {\n      setPricingValues(pricing);\n    }\n  }, [pricing]);\n\n  // Settings form\n  const settingsForm = useForm<SettingsFormValues>({\n    resolver: zodResolver(settingsFormSchema),\n    values: {\n      privateMode: siteSettings?.privateMode || false,\n      platformWalletAddress: siteSettings?.platformWalletAddress || \"\",\n    },\n  });\n\n  // Mutations\n  const updateUserStatusMutation = useMutation({\n    mutationFn: async ({ userId, status }: { userId: string; status: string }) => {\n      const response = await apiRequest(\"PATCH\", `/api/admin/users/${userId}`, { status });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"User status updated\",\n        description: \"The user's status has been successfully updated.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update user status.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateSubmissionStatusMutation = useMutation({\n    mutationFn: async ({ submissionId, status }: { submissionId: string; status: string }) => {\n      const response = await apiRequest(\"PATCH\", `/api/admin/submissions/${submissionId}`, { status });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/submissions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      toast({\n        title: \"Submission status updated\",\n        description: \"The submission's status has been successfully updated.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update submission status.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteSubmissionMutation = useMutation({\n    mutationFn: async (submissionId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/admin/submissions/${submissionId}`);\n      if (!response.ok) throw new Error(\"Failed to delete submission\");\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/submissions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      toast({\n        title: \"Submission deleted\",\n        description: \"The submission has been permanently deleted.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete submission.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const bulkApproveSubmissionsMutation = useMutation({\n    mutationFn: async (submissionIds: string[]) => {\n      const response = await apiRequest(\"PATCH\", \"/api/admin/submissions/bulk/approve\", { submissionIds });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/submissions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      setSelectedSubmissionIds([]);\n      toast({\n        title: \"Submissions approved\",\n        description: `Successfully approved ${data.count} submission(s).`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to approve submissions.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const bulkRejectSubmissionsMutation = useMutation({\n    mutationFn: async (submissionIds: string[]) => {\n      const response = await apiRequest(\"PATCH\", \"/api/admin/submissions/bulk/reject\", { submissionIds });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/submissions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      setSelectedSubmissionIds([]);\n      toast({\n        title: \"Submissions rejected\",\n        description: `Successfully rejected ${data.count} submission(s).`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reject submissions.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const bulkDeleteSubmissionsMutation = useMutation({\n    mutationFn: async (submissionIds: string[]) => {\n      const response = await apiRequest(\"DELETE\", \"/api/admin/submissions/bulk\", { submissionIds });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/submissions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      setSelectedSubmissionIds([]);\n      toast({\n        title: \"Submissions deleted\",\n        description: `Successfully deleted ${data.count} submission(s).`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete submissions.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const cleanupBrokenSubmissionsMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/admin/cleanup-broken-submissions\", {});\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/submissions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/me/submissions\"] });\n      toast({\n        title: \"Cleanup completed\",\n        description: data.message || `Successfully removed ${data.deletedCount} broken submission(s).`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to cleanup broken submissions.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const activateContestMutation = useMutation({\n    mutationFn: async (contestId: string) => {\n      const response = await apiRequest(\"PATCH\", `/api/admin/contests/${contestId}/activate`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contests\"] });\n      toast({\n        title: \"Contest activated\",\n        description: \"Contest is now active and users can submit entries.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to activate contest.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const endContestMutation = useMutation({\n    mutationFn: async (contestId: string) => {\n      const response = await apiRequest(\"POST\", `/api/admin/contests/${contestId}/end`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contests\"] });\n      toast({\n        title: \"Contest ended\",\n        description: \"Contest has been ended and rewards have been distributed.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to end contest.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const bulkActivateContestsMutation = useMutation({\n    mutationFn: async (contestIds: string[]) => {\n      const response = await apiRequest(\"PATCH\", \"/api/admin/contests/bulk/activate\", { contestIds });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contests\"] });\n      setSelectedContestIds([]);\n      toast({\n        title: \"Contests activated\",\n        description: `Successfully activated ${data.updatedCount} contests.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to activate contests.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const bulkEndContestsMutation = useMutation({\n    mutationFn: async (contestIds: string[]) => {\n      const response = await apiRequest(\"POST\", \"/api/admin/contests/bulk/end\", { contestIds });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contests\"] });\n      setSelectedContestIds([]);\n      toast({\n        title: \"Contests ended\",\n        description: `Successfully ended ${data.endedCount} contests and distributed rewards.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to end contests.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const bulkDeleteContestsMutation = useMutation({\n    mutationFn: async (contestIds: string[]) => {\n      const response = await apiRequest(\"DELETE\", \"/api/admin/contests/bulk\", { contestIds });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contests\"] });\n      setSelectedContestIds([]);\n      setBulkDeleteContestsDialogOpen(false);\n      setDeleteContestsConfirmText(\"\");\n      toast({\n        title: \"Contests deleted\",\n        description: `Successfully deleted ${data.deletedCount} contests.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete contests.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createContestMutation = useMutation({\n    mutationFn: async (formData: any) => {\n      // The CreateContestModal already sends data in the correct format\n      // with all processing done (slug, dates, config object, etc.)\n      const response = await apiRequest(\"POST\", \"/api/admin/contests\", formData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contests\"] });\n      setIsCreateContestModalOpen(false);\n      toast({\n        title: \"Contest created\",\n        description: \"The contest has been successfully created.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create contest.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const approveCashoutMutation = useMutation({\n    mutationFn: async (requestId: string) => {\n      return apiRequest(\"POST\", \"/api/admin/cashout/approve\", { requestId });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/cashout/requests\"] });\n      toast({\n        title: \"Cashout Approved\",\n        description: \"GLORY has been deducted. Remember to send tokens and mark as sent.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to approve cashout.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const rejectCashoutMutation = useMutation({\n    mutationFn: async (requestId: string) => {\n      return apiRequest(\"POST\", \"/api/admin/cashout/reject\", { requestId });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/cashout/requests\"] });\n      toast({\n        title: \"Cashout Rejected\",\n        description: \"The cashout request has been rejected.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reject cashout.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Bulk cashout approval mutation\n  const bulkApproveCashoutsMutation = useMutation({\n    mutationFn: async (requestIds: string[]) => {\n      const response = await apiRequest(\"POST\", \"/api/admin/cashout/bulk-approve\", { requestIds });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/cashout/requests\"] });\n      setSelectedCashoutIds([]);\n      toast({\n        title: \"Cashouts approved\",\n        description: `Successfully approved ${data.approvedCount} cashout requests.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to approve cashouts.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Bulk cashout rejection mutation\n  const bulkRejectCashoutsMutation = useMutation({\n    mutationFn: async (requestIds: string[]) => {\n      const response = await apiRequest(\"POST\", \"/api/admin/cashout/bulk-reject\", { requestIds });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/cashout/requests\"] });\n      setSelectedCashoutIds([]);\n      toast({\n        title: \"Cashouts rejected\",\n        description: `Successfully rejected ${data.rejectedCount} cashout requests.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reject cashouts.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Bulk user approval mutation\n  const bulkApproveUsersMutation = useMutation({\n    mutationFn: async (userIds: string[]) => {\n      const response = await apiRequest(\"PATCH\", \"/api/admin/users/bulk/approve\", { userIds });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      setSelectedUserIds([]);\n      toast({\n        title: \"Users approved\",\n        description: `Successfully approved ${data.updatedCount} users.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to approve users.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Bulk user deletion mutation\n  const bulkDeleteUsersMutation = useMutation({\n    mutationFn: async (userIds: string[]) => {\n      const response = await apiRequest(\"DELETE\", \"/api/admin/users/bulk\", { userIds });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/submissions\"] });\n      setSelectedUserIds([]);\n      setBulkDeleteDialogOpen(false);\n      setDeleteConfirmText(\"\");\n      toast({\n        title: \"Users deleted\",\n        description: `Successfully deleted ${data.deletedCount} users and all their associated assets.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete users.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Clear audit logs mutation\n  const clearAuditLogsMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"DELETE\", \"/api/admin/audit-logs\", {});\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/audit-logs\"] });\n      setClearLogsDialogOpen(false);\n      setClearLogsConfirmText(\"\");\n      toast({\n        title: \"Audit logs cleared\",\n        description: \"All audit logs have been successfully cleared.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to clear audit logs.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update Balance mutation\n  const updateGloryBalanceMutation = useMutation({\n    mutationFn: async ({ userId, amount, operation, currency }: { userId: string; amount: number; operation: 'set' | 'add' | 'subtract'; currency: 'GLORY' | 'SOL' | 'USDC' }) => {\n      const response = await apiRequest(\"PATCH\", `/api/admin/users/${userId}/balance`, { \n        amount, \n        operation,\n        currency\n      });\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      setGloryEditDialogOpen(false);\n      setGloryAmountInput(\"\");\n      setSelectedUserId(\"\");\n      const updatedCurrency = variables.currency;\n      setSelectedCurrency(\"GLORY\");\n      \n      // Also invalidate /api/me for all users to update their balance display\n      queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n      \n      // Force refetch to ensure immediate update\n      queryClient.refetchQueries({ queryKey: [\"/api/me\"] });\n      \n      toast({\n        title: \"Balance updated\",\n        description: data.message || `Successfully updated user's ${updatedCurrency} balance.`,\n      });\n    },\n    onError: (error: any, variables) => {\n      toast({\n        title: \"Error\",\n        description: error.message || `Failed to update ${variables.currency} balance.`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update Settings mutation\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (values: SettingsFormValues) => {\n      const response = await apiRequest(\"PATCH\", \"/api/admin/settings\", values);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/settings\"] });\n      toast({\n        title: \"Settings Updated\",\n        description: \"Site settings have been successfully updated\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update Pricing mutation\n  const updatePricingMutation = useMutation({\n    mutationFn: async () => {\n      const updates = Object.entries(pricingValues).map(([key, value]) =>\n        apiRequest(\"PUT\", `/api/admin/settings/pricing/${key}`, { value })\n      );\n      await Promise.all(updates);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/settings/pricing\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/pricing\"] });\n      toast({\n        title: \"Pricing Updated\",\n        description: \"AI model pricing has been successfully updated\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update pricing\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSettingsSubmit = (values: SettingsFormValues) => {\n    updateSettingsMutation.mutate(values);\n  };\n\n  // Helper functions\n  const getInitials = (username: string) => {\n    return username.substring(0, 2).toUpperCase();\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return \"bg-success/20 text-success border-success/30\";\n      case \"pending\":\n        return \"bg-muted text-muted-foreground border-border\";\n      case \"banned\":\n      case \"rejected\":\n        return \"bg-destructive/20 text-destructive border-destructive/30\";\n      case \"active\":\n        return \"bg-success/20 text-success border-success/30\";\n      case \"ended\":\n        return \"bg-muted text-muted-foreground border-border\";\n      default:\n        return \"bg-muted text-muted-foreground border-border\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"approved\":\n      case \"active\":\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case \"pending\":\n        return <Clock className=\"w-4 h-4\" />;\n      case \"banned\":\n      case \"rejected\":\n        return <XCircle className=\"w-4 h-4\" />;\n      default:\n        return <AlertTriangle className=\"w-4 h-4\" />;\n    }\n  };\n\n  // Stats calculations\n  const pendingUsers = users.filter((u: any) => u.status === \"pending\").length;\n  const pendingSubmissions = submissions.filter((s: any) => s.status === \"pending\").length;\n  const activeContests = contests.filter((c: any) => c.status === \"active\").length;\n  const totalGloryDistributed = users.reduce((sum: number, u: any) => sum + u.gloryBalance, 0);\n  const pendingCashouts = cashoutRequests.filter((r: any) => r.status === \"pending\").length;\n\n  // Filtered users\n  const filteredUsers = users.filter((user: any) => {\n    const matchesStatus = userStatusFilter === \"all\" || user.status === userStatusFilter;\n    const matchesSearch = user.username.toLowerCase().includes(userSearchQuery.toLowerCase()) ||\n                         user.email.toLowerCase().includes(userSearchQuery.toLowerCase());\n    return matchesStatus && matchesSearch;\n  });\n\n  // Filtered submissions\n  const filteredSubmissions = submissions.filter((submission: any) => {\n    const matchesStatus = submissionStatusFilter === \"all\" || submission.status === submissionStatusFilter;\n    const matchesContest = submissionContestFilter === \"all\" || submission.contestId === submissionContestFilter;\n    const matchesSearch = \n      submission.title.toLowerCase().includes(submissionSearchQuery.toLowerCase()) ||\n      (submission.description?.toLowerCase() || \"\").includes(submissionSearchQuery.toLowerCase()) ||\n      submission.user.username.toLowerCase().includes(submissionSearchQuery.toLowerCase());\n    return matchesStatus && matchesContest && matchesSearch;\n  });\n\n  // Helper functions for bulk selection\n  const handleUserSelect = (userId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedUserIds(prev => [...prev, userId]);\n    } else {\n      setSelectedUserIds(prev => prev.filter(id => id !== userId));\n    }\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      setSelectedUserIds(filteredUsers.map((user: any) => user.id));\n    } else {\n      setSelectedUserIds([]);\n    }\n  };\n\n  const isAllSelected = filteredUsers.length > 0 && selectedUserIds.length === filteredUsers.length;\n  const isSomeSelected = selectedUserIds.length > 0 && selectedUserIds.length < filteredUsers.length;\n\n  const handleBulkApprove = () => {\n    if (selectedUserIds.length === 0) return;\n    bulkApproveUsersMutation.mutate(selectedUserIds);\n  };\n\n  const handleBulkDelete = () => {\n    if (selectedUserIds.length === 0) return;\n    setBulkDeleteDialogOpen(true);\n  };\n\n  const confirmBulkDelete = () => {\n    if (deleteConfirmText !== \"DELETE\") {\n      toast({\n        title: \"Confirmation required\",\n        description: 'Please type \"DELETE\" to confirm the deletion.',\n        variant: \"destructive\",\n      });\n      return;\n    }\n    bulkDeleteUsersMutation.mutate(selectedUserIds);\n  };\n\n  // Helper functions for bulk submission selection\n  const handleSubmissionSelect = (submissionId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedSubmissionIds(prev => [...prev, submissionId]);\n    } else {\n      setSelectedSubmissionIds(prev => prev.filter(id => id !== submissionId));\n    }\n  };\n\n  const handleSelectAllSubmissions = (checked: boolean) => {\n    if (checked) {\n      setSelectedSubmissionIds(filteredSubmissions.map((sub: any) => sub.id));\n    } else {\n      setSelectedSubmissionIds([]);\n    }\n  };\n\n  const isAllSubmissionsSelected = filteredSubmissions.length > 0 && selectedSubmissionIds.length === filteredSubmissions.length;\n  const isSomeSubmissionsSelected = selectedSubmissionIds.length > 0 && selectedSubmissionIds.length < filteredSubmissions.length;\n\n  // Helper function to open Balance edit dialog\n  const openGloryEditDialog = (userId: string) => {\n    setSelectedUserId(userId);\n    setGloryAmountInput(\"\");\n    setSelectedCurrency(\"GLORY\");\n    setGloryEditDialogOpen(true);\n  };\n\n  // Helper function to handle Glory balance update\n  const handleGloryBalanceUpdate = () => {\n    // Prevent double clicks while mutation is pending\n    if (updateGloryBalanceMutation.isPending) {\n      return;\n    }\n\n    const input = gloryAmountInput.trim();\n    if (!input) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a valid amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    let operation: 'set' | 'add' | 'subtract';\n    let amount: number;\n\n    if (input.startsWith('+')) {\n      operation = 'add';\n      amount = parseInt(input.substring(1));\n    } else if (input.startsWith('-')) {\n      operation = 'subtract';\n      amount = parseInt(input.substring(1));\n    } else {\n      // When no +/- prefix, treat as 'set' operation\n      operation = 'set';\n      amount = parseInt(input);\n    }\n\n    if (isNaN(amount) || amount < 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a valid number (0 or greater)\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateGloryBalanceMutation.mutate({ userId: selectedUserId, amount, operation, currency: selectedCurrency });\n  };\n\n  // Helper functions for bulk contest selection\n  const handleContestSelect = (contestId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedContestIds(prev => [...prev, contestId]);\n    } else {\n      setSelectedContestIds(prev => prev.filter(id => id !== contestId));\n    }\n  };\n\n  const handleSelectAllContests = (checked: boolean) => {\n    if (checked) {\n      setSelectedContestIds(contests.map((contest: any) => contest.id));\n    } else {\n      setSelectedContestIds([]);\n    }\n  };\n\n  const isAllContestsSelected = contests.length > 0 && selectedContestIds.length === contests.length;\n  const isSomeContestsSelected = selectedContestIds.length > 0 && selectedContestIds.length < contests.length;\n\n  const handleBulkActivateContests = () => {\n    if (selectedContestIds.length === 0) return;\n    bulkActivateContestsMutation.mutate(selectedContestIds);\n  };\n\n  const handleBulkEndContests = () => {\n    if (selectedContestIds.length === 0) return;\n    bulkEndContestsMutation.mutate(selectedContestIds);\n  };\n\n  const handleBulkDeleteContests = () => {\n    if (selectedContestIds.length === 0) return;\n    setBulkDeleteContestsDialogOpen(true);\n  };\n\n  const confirmBulkDeleteContests = () => {\n    if (deleteContestsConfirmText !== \"DELETE\") {\n      toast({\n        title: \"Confirmation required\",\n        description: 'Please type \"DELETE\" to confirm the deletion.',\n        variant: \"destructive\",\n      });\n      return;\n    }\n    bulkDeleteContestsMutation.mutate(selectedContestIds);\n  };\n\n  return (\n    <div className=\"min-h-screen py-8 md:py-16\" data-testid=\"admin-dashboard\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-2xl md:text-4xl font-black tracking-tight mb-2 flex items-center\" data-testid=\"admin-title\">\n              <Shield className=\"w-8 h-8 md:w-10 md:h-10 text-primary mr-2 md:mr-3\" />\n              Admin Dashboard\n            </h1>\n            <p className=\"text-muted-foreground\">Manage users, submissions, and contests</p>\n          </div>\n          <Badge variant=\"outline\" className=\"text-primary border-primary\">\n            <Shield className=\"w-4 h-4 mr-2\" />\n            Admin Access\n          </Badge>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid sm:grid-cols-2 lg:grid-cols-5 gap-6 mb-8\">\n          <Card data-testid=\"stat-pending-users\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Pending Users</CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{pendingUsers}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Awaiting approval\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-pending-submissions\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Pending Submissions</CardTitle>\n              <ImageIcon className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{pendingSubmissions}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Awaiting review\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-active-contests\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Active Contests</CardTitle>\n              <Trophy className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{activeContests}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Currently running\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-total-glory\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total GLORY</CardTitle>\n              <Crown className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{totalGloryDistributed.toLocaleString()}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Distributed to users\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-private-mode\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Private Mode</CardTitle>\n              <Shield className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-sm font-medium\">\n                  {siteSettings?.privateMode ? \"Enabled\" : \"Disabled\"}\n                </div>\n                <Switch\n                  checked={siteSettings?.privateMode || false}\n                  onCheckedChange={(checked) => updateSettingsMutation.mutate({ \n                    privateMode: checked,\n                    platformWalletAddress: siteSettings?.platformWalletAddress || \"\"\n                  })}\n                  disabled={updateSettingsMutation.isPending}\n                  data-testid=\"switch-private-mode\"\n                />\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-2\">\n                {siteSettings?.privateMode ? \"Login required\" : \"Public access\"}\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Admin Tabs */}\n        <Tabs defaultValue=\"users\" className=\"space-y-4\" data-testid=\"admin-tabs\">\n          <TabsList className=\"grid w-full grid-cols-6\">\n            <TabsTrigger value=\"users\" data-testid=\"tab-users\">\n              <Users className=\"w-4 h-4 mr-2\" />\n              Users\n            </TabsTrigger>\n            <TabsTrigger value=\"submissions\" data-testid=\"tab-submissions\">\n              <ImageIcon className=\"w-4 h-4 mr-2\" />\n              Submissions\n            </TabsTrigger>\n            <TabsTrigger value=\"contests\" data-testid=\"tab-contests\">\n              <Trophy className=\"w-4 h-4 mr-2\" />\n              Contests\n            </TabsTrigger>\n            <TabsTrigger value=\"cashouts\" data-testid=\"tab-cashouts\">\n              <DollarSign className=\"w-4 h-4 mr-2\" />\n              Cashouts\n            </TabsTrigger>\n            <TabsTrigger value=\"audit\" data-testid=\"tab-audit\">\n              <BarChart3 className=\"w-4 h-4 mr-2\" />\n              Audit Logs\n            </TabsTrigger>\n            <TabsTrigger value=\"settings\" data-testid=\"tab-settings\">\n              <Settings className=\"w-4 h-4 mr-2\" />\n              Settings\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Users Management Tab */}\n          <TabsContent value=\"users\" className=\"space-y-4\" data-testid=\"users-tab\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>User Management</CardTitle>\n                  <div className=\"flex items-center space-x-2\">\n                    {selectedUserIds.length > 0 && (\n                      <>\n                        <Button\n                          variant=\"outline\"\n                          className=\"bg-success/20 text-success hover:bg-success/30 border-success/30\"\n                          onClick={handleBulkApprove}\n                          data-testid=\"bulk-approve-button\"\n                        >\n                          <CheckCircle className=\"w-4 h-4 mr-2\" />\n                          Approve Selected ({selectedUserIds.length})\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          className=\"bg-destructive/20 text-destructive hover:bg-destructive/30 border-destructive/30\"\n                          onClick={handleBulkDelete}\n                          data-testid=\"bulk-delete-button\"\n                        >\n                          <Trash2 className=\"w-4 h-4 mr-2\" />\n                          Delete Selected ({selectedUserIds.length})\n                        </Button>\n                      </>\n                    )}\n                    <Select value={userStatusFilter} onValueChange={setUserStatusFilter} data-testid=\"user-status-filter\">\n                      <SelectTrigger className=\"w-40\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Statuses</SelectItem>\n                        <SelectItem value=\"pending\">Pending</SelectItem>\n                        <SelectItem value=\"approved\">Approved</SelectItem>\n                        <SelectItem value=\"banned\">Banned</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                      <Input\n                        placeholder=\"Search users...\"\n                        value={userSearchQuery}\n                        onChange={(e) => setUserSearchQuery(e.target.value)}\n                        className=\"pl-10 w-64\"\n                        data-testid=\"user-search\"\n                      />\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        const csvData = filteredUsers.map((user: any) => ({\n                          Username: user.username,\n                          Email: user.email,\n                          Status: user.status,\n                          'GLORY Balance': user.gloryBalance || 0,\n                          'SOL Balance': user.solBalance || 0,\n                          'USDC Balance': user.usdcBalance || 0,\n                          'Withdrawal Address': user.withdrawalAddress || 'Not set',\n                          'Joined': new Date(user.createdAt).toLocaleDateString(),\n                        }));\n                        \n                        const headers = Object.keys(csvData[0] || {});\n                        const csv = [\n                          headers.join(','),\n                          ...csvData.map((row: any) => headers.map(h => `\"${row[h]}\"`).join(','))\n                        ].join('\\n');\n                        \n                        const blob = new Blob([csv], { type: 'text/csv' });\n                        const url = window.URL.createObjectURL(blob);\n                        const a = document.createElement('a');\n                        a.href = url;\n                        a.download = `users-${new Date().toISOString().split('T')[0]}.csv`;\n                        a.click();\n                        window.URL.revokeObjectURL(url);\n                        \n                        toast({\n                          title: \"CSV Downloaded\",\n                          description: `${filteredUsers.length} users exported successfully`,\n                        });\n                      }}\n                      data-testid=\"export-users-csv\"\n                    >\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Export CSV\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                {/* Desktop Table View */}\n                <div className=\"hidden md:block overflow-x-auto\">\n                  <table className=\"w-full\" data-testid=\"users-table\">\n                    <thead className=\"bg-muted\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left\">\n                          <Checkbox\n                            checked={isSomeSelected ? \"indeterminate\" : isAllSelected}\n                            onCheckedChange={(checked) => handleSelectAll(!!checked)}\n                            data-testid=\"select-all-checkbox\"\n                          />\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          User\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          Status\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          GLORY\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          Joined\n                        </th>\n                        <th className=\"px-6 py-3 text-right text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          Actions\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-border\">\n                      {filteredUsers.map((user: any) => (\n                        <tr key={user.id} className=\"hover:bg-muted/30 transition-colors\" data-testid={`user-row-${user.id}`}>\n                          <td className=\"px-6 py-4\">\n                            <Checkbox\n                              checked={selectedUserIds.includes(user.id)}\n                              onCheckedChange={(checked) => handleUserSelect(user.id, !!checked)}\n                              data-testid={`select-user-${user.id}`}\n                            />\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"flex items-center space-x-3\">\n                              <Avatar>\n                                <AvatarFallback className={user.status === \"banned\" ? \"bg-destructive/20 text-destructive\" : \"bg-secondary text-secondary-foreground\"}>\n                                  {getInitials(user.username)}\n                                </AvatarFallback>\n                              </Avatar>\n                              <div>\n                                <div className={`font-semibold ${user.status === \"banned\" ? \"line-through opacity-60\" : \"\"}`} data-testid={`username-${user.id}`}>\n                                  {user.username}\n                                </div>\n                                <div className=\"text-sm text-muted-foreground\" data-testid={`email-${user.id}`}>\n                                  {user.email}\n                                </div>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <Badge className={getStatusColor(user.status)} data-testid={`status-${user.id}`}>\n                              {getStatusIcon(user.status)}\n                              <span className=\"ml-1\">{user.status.charAt(0).toUpperCase() + user.status.slice(1)}</span>\n                            </Badge>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"flex items-center space-x-2\">\n                              <span className=\"font-semibold font-mono\" data-testid={`glory-${user.id}`}>\n                                {user.gloryBalance.toLocaleString()}\n                              </span>\n                              <Button\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                className=\"h-6 w-6 p-0 hover:bg-primary/20\"\n                                onClick={() => openGloryEditDialog(user.id)}\n                                data-testid={`edit-balance-${user.id}`}\n                                title=\"Edit user balance\"\n                              >\n                                <Edit3 className=\"w-3 h-3\" />\n                              </Button>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\" data-testid={`joined-${user.id}`}>\n                            {new Date(user.createdAt).toLocaleDateString()}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-right\">\n                            <div className=\"flex items-center justify-end space-x-2\">\n                              {user.status === \"pending\" && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  className=\"bg-success/20 text-success hover:bg-success/30 border-success/30\"\n                                  onClick={() => updateUserStatusMutation.mutate({ userId: user.id, status: \"approved\" })}\n                                  disabled={updateUserStatusMutation.isPending}\n                                  data-testid={`approve-user-${user.id}`}\n                                >\n                                  <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                  Approve\n                                </Button>\n                              )}\n                              {user.status !== \"banned\" && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  className=\"bg-destructive/20 text-destructive hover:bg-destructive/30 border-destructive/30\"\n                                  onClick={() => updateUserStatusMutation.mutate({ userId: user.id, status: \"banned\" })}\n                                  disabled={updateUserStatusMutation.isPending}\n                                  data-testid={`ban-user-${user.id}`}\n                                >\n                                  <XCircle className=\"w-3 h-3 mr-1\" />\n                                  Ban\n                                </Button>\n                              )}\n                              {user.status === \"banned\" && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  className=\"bg-success/20 text-success hover:bg-success/30 border-success/30\"\n                                  onClick={() => updateUserStatusMutation.mutate({ userId: user.id, status: \"approved\" })}\n                                  disabled={updateUserStatusMutation.isPending}\n                                  data-testid={`unban-user-${user.id}`}\n                                >\n                                  <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                  Unban\n                                </Button>\n                              )}\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n\n                {/* Mobile Card View */}\n                <div className=\"md:hidden\">\n                  {/* Mobile Select All Header */}\n                  {filteredUsers.length > 0 && (\n                    <div className=\"flex items-center gap-3 p-4 border-b border-border bg-muted/50\">\n                      <Checkbox\n                        checked={isSomeSelected ? \"indeterminate\" : isAllSelected}\n                        onCheckedChange={(checked) => handleSelectAll(!!checked)}\n                        data-testid=\"select-all-checkbox-mobile\"\n                      />\n                      <span className=\"text-sm font-medium\">\n                        {selectedUserIds.length > 0 \n                          ? `${selectedUserIds.length} selected` \n                          : 'Select all'}\n                      </span>\n                    </div>\n                  )}\n                  \n                  <div className=\"divide-y divide-border\">\n                    {filteredUsers.map((user: any) => (\n                    <div key={user.id} className=\"p-4 hover:bg-muted/30 transition-colors\" data-testid={`user-card-${user.id}`}>\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Checkbox\n                            checked={selectedUserIds.includes(user.id)}\n                            onCheckedChange={(checked) => handleUserSelect(user.id, !!checked)}\n                            data-testid={`select-user-mobile-${user.id}`}\n                          />\n                          <Avatar className=\"h-10 w-10\">\n                            <AvatarFallback className={user.status === \"banned\" ? \"bg-destructive/20 text-destructive\" : \"bg-secondary text-secondary-foreground\"}>\n                              {getInitials(user.username)}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"flex-1 min-w-0\">\n                            <div className={`font-semibold truncate ${user.status === \"banned\" ? \"line-through opacity-60\" : \"\"}`}>\n                              {user.username}\n                            </div>\n                            <div className=\"text-sm text-muted-foreground truncate\">\n                              {user.email}\n                            </div>\n                          </div>\n                        </div>\n                        <Badge className={getStatusColor(user.status)}>\n                          {getStatusIcon(user.status)}\n                          <span className=\"ml-1\">{user.status.charAt(0).toUpperCase() + user.status.slice(1)}</span>\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-3 mb-3 text-sm\">\n                        <div>\n                          <div className=\"text-muted-foreground text-xs\">GLORY Balance</div>\n                          <div className=\"flex items-center space-x-2 mt-1\">\n                            <span className=\"font-semibold font-mono\">{user.gloryBalance.toLocaleString()}</span>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              className=\"h-6 w-6 p-0 hover:bg-primary/20\"\n                              onClick={() => openGloryEditDialog(user.id)}\n                              title=\"Edit balance\"\n                            >\n                              <Edit3 className=\"w-3 h-3\" />\n                            </Button>\n                          </div>\n                        </div>\n                        <div>\n                          <div className=\"text-muted-foreground text-xs\">Joined</div>\n                          <div className=\"mt-1\">{new Date(user.createdAt).toLocaleDateString()}</div>\n                        </div>\n                      </div>\n\n                      <div className=\"flex gap-2 flex-wrap\">\n                        {user.status === \"pending\" && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"flex-1 bg-success/20 text-success hover:bg-success/30 border-success/30\"\n                            onClick={() => updateUserStatusMutation.mutate({ userId: user.id, status: \"approved\" })}\n                            disabled={updateUserStatusMutation.isPending}\n                          >\n                            <CheckCircle className=\"w-3 h-3 mr-1\" />\n                            Approve\n                          </Button>\n                        )}\n                        {user.status !== \"banned\" && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"flex-1 bg-destructive/20 text-destructive hover:bg-destructive/30 border-destructive/30\"\n                            onClick={() => updateUserStatusMutation.mutate({ userId: user.id, status: \"banned\" })}\n                            disabled={updateUserStatusMutation.isPending}\n                          >\n                            <XCircle className=\"w-3 h-3 mr-1\" />\n                            Ban\n                          </Button>\n                        )}\n                        {user.status === \"banned\" && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"flex-1 bg-success/20 text-success hover:bg-success/30 border-success/30\"\n                            onClick={() => updateUserStatusMutation.mutate({ userId: user.id, status: \"approved\" })}\n                            disabled={updateUserStatusMutation.isPending}\n                          >\n                            <CheckCircle className=\"w-3 h-3 mr-1\" />\n                            Unban\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Submissions Tab */}\n          <TabsContent value=\"submissions\" className=\"space-y-4\" data-testid=\"submissions-tab\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <CardTitle>Submission Management</CardTitle>\n                    {filteredSubmissions.length > 0 && (\n                      <div className=\"flex items-center gap-2\">\n                        <Checkbox\n                          checked={isAllSubmissionsSelected}\n                          onCheckedChange={handleSelectAllSubmissions}\n                          data-testid=\"select-all-submissions\"\n                        />\n                        <span className=\"text-sm text-muted-foreground\">\n                          {selectedSubmissionIds.length > 0 ? `${selectedSubmissionIds.length} selected` : 'Select all'}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    {selectedSubmissionIds.length > 0 && (\n                      <>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"bg-success/20 text-success hover:bg-success/30 border-success/30\"\n                          onClick={() => bulkApproveSubmissionsMutation.mutate(selectedSubmissionIds)}\n                          disabled={bulkApproveSubmissionsMutation.isPending}\n                          data-testid=\"bulk-approve-submissions\"\n                        >\n                          <CheckCircle className=\"w-4 h-4 mr-1\" />\n                          Approve ({selectedSubmissionIds.length})\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"bg-destructive/20 text-destructive hover:bg-destructive/30 border-destructive/30\"\n                          onClick={() => bulkRejectSubmissionsMutation.mutate(selectedSubmissionIds)}\n                          disabled={bulkRejectSubmissionsMutation.isPending}\n                          data-testid=\"bulk-reject-submissions\"\n                        >\n                          <XCircle className=\"w-4 h-4 mr-1\" />\n                          Reject ({selectedSubmissionIds.length})\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"bg-destructive/20 text-destructive hover:bg-destructive/30 border-destructive/30\"\n                          onClick={() => bulkDeleteSubmissionsMutation.mutate(selectedSubmissionIds)}\n                          disabled={bulkDeleteSubmissionsMutation.isPending}\n                          data-testid=\"bulk-delete-submissions\"\n                        >\n                          <Trash2 className=\"w-4 h-4 mr-1\" />\n                          Delete ({selectedSubmissionIds.length})\n                        </Button>\n                      </>\n                    )}\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"bg-orange-500/20 text-orange-400 hover:bg-orange-500/30 border-orange-500/30\"\n                      onClick={() => cleanupBrokenSubmissionsMutation.mutate()}\n                      disabled={cleanupBrokenSubmissionsMutation.isPending}\n                      data-testid=\"cleanup-broken-submissions\"\n                    >\n                      {cleanupBrokenSubmissionsMutation.isPending ? (\n                        <Loader2 className=\"w-4 h-4 mr-1 animate-spin\" />\n                      ) : (\n                        <AlertTriangle className=\"w-4 h-4 mr-1\" />\n                      )}\n                      Cleanup Broken\n                    </Button>\n                    <Select value={submissionStatusFilter} onValueChange={setSubmissionStatusFilter} data-testid=\"submission-status-filter\">\n                      <SelectTrigger className=\"w-40\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Statuses</SelectItem>\n                        <SelectItem value=\"pending\">Pending</SelectItem>\n                        <SelectItem value=\"approved\">Approved</SelectItem>\n                        <SelectItem value=\"rejected\">Rejected</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <Select value={submissionContestFilter} onValueChange={setSubmissionContestFilter} data-testid=\"submission-contest-filter\">\n                      <SelectTrigger className=\"w-48\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Contests</SelectItem>\n                        {contests\n                          .filter((contest: any) => contest.status === \"active\")\n                          .map((contest: any) => (\n                            <SelectItem key={contest.id} value={contest.id}>\n                              {contest.title}\n                            </SelectItem>\n                          ))}\n                      </SelectContent>\n                    </Select>\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                      <Input\n                        placeholder=\"Search submissions...\"\n                        value={submissionSearchQuery}\n                        onChange={(e) => setSubmissionSearchQuery(e.target.value)}\n                        className=\"pl-10 w-64\"\n                        data-testid=\"submission-search\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {filteredSubmissions.map((submission: any) => (\n                    <Card key={submission.id} className=\"overflow-hidden\" data-testid={`pending-submission-${submission.id}`}>\n                      <div className=\"relative aspect-square\">\n                        <img\n                          src={submission.type === \"video\" ? submission.thumbnailUrl || submission.mediaUrl : submission.mediaUrl}\n                          alt={submission.title}\n                          className=\"w-full h-full object-cover\"\n                          onError={(e) => {\n                            const target = e.target as HTMLImageElement;\n                            target.src = 'data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"400\" height=\"400\"%3E%3Crect fill=\"%23334155\" width=\"400\" height=\"400\"/%3E%3Ctext fill=\"%239ca3af\" font-family=\"system-ui\" font-size=\"48\" x=\"50%25\" y=\"50%25\" text-anchor=\"middle\" dominant-baseline=\"middle\"%3E%3Ctspan x=\"50%25\" dy=\"-20\"%3E' + (submission.type === 'video' ? '🎬' : '🖼️') + '%3C/tspan%3E%3Ctspan x=\"50%25\" dy=\"60\" font-size=\"16\"%3EImage not available%3C/tspan%3E%3C/text%3E%3C/svg%3E';\n                            target.onerror = null;\n                          }}\n                        />\n                        <div className=\"absolute top-3 left-3 bg-background/80 backdrop-blur-sm rounded p-1\">\n                          <Checkbox\n                            checked={selectedSubmissionIds.includes(submission.id)}\n                            onCheckedChange={(checked) => handleSubmissionSelect(submission.id, checked as boolean)}\n                            data-testid={`select-submission-${submission.id}`}\n                          />\n                        </div>\n                        <div className=\"absolute top-3 right-3\">\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {submission.type === \"image\" ? (\n                              <><Eye className=\"w-3 h-3 mr-1\" />Image</>\n                            ) : (\n                              <><Eye className=\"w-3 h-3 mr-1\" />Video</>\n                            )}\n                          </Badge>\n                        </div>\n                      </div>\n                      <CardContent className=\"p-4\">\n                        <h4 className=\"font-bold mb-2\" data-testid={`submission-title-${submission.id}`}>\n                          {submission.title}\n                        </h4>\n                        {submission.description && (\n                          <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\" data-testid={`submission-description-${submission.id}`}>\n                            {submission.description}\n                          </p>\n                        )}\n                        <div className=\"flex items-center justify-between text-sm mb-3\">\n                          <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                            <span data-testid={`submission-author-${submission.id}`}>\n                              @{submission.user.username}\n                            </span>\n                          </div>\n                          <Badge className={getStatusColor(submission.status)} data-testid={`submission-status-${submission.id}`}>\n                            {getStatusIcon(submission.status)}\n                            <span className=\"ml-1\">{submission.status.charAt(0).toUpperCase() + submission.status.slice(1)}</span>\n                          </Badge>\n                        </div>\n                        <div className=\"text-xs text-muted-foreground mb-4\" data-testid={`submission-contest-${submission.id}`}>\n                          {submission.contest.title} • {submission.votesCount || 0} votes\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          {submission.status === \"pending\" && (\n                            <>\n                              <Button\n                                size=\"sm\"\n                                className=\"flex-1 bg-success/20 text-success hover:bg-success/30 border border-success/30\"\n                                onClick={() => updateSubmissionStatusMutation.mutate({ submissionId: submission.id, status: \"approved\" })}\n                                disabled={updateSubmissionStatusMutation.isPending}\n                                data-testid={`approve-submission-${submission.id}`}\n                              >\n                                <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                Approve\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                className=\"flex-1 bg-destructive/20 text-destructive hover:bg-destructive/30 border-destructive/30\"\n                                onClick={() => updateSubmissionStatusMutation.mutate({ submissionId: submission.id, status: \"rejected\" })}\n                                disabled={updateSubmissionStatusMutation.isPending}\n                                data-testid={`reject-submission-${submission.id}`}\n                              >\n                                <XCircle className=\"w-3 h-3 mr-1\" />\n                                Reject\n                              </Button>\n                            </>\n                          )}\n                          {submission.status === \"approved\" && (\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"flex-1 bg-destructive/20 text-destructive hover:bg-destructive/30 border-destructive/30\"\n                              onClick={() => updateSubmissionStatusMutation.mutate({ submissionId: submission.id, status: \"rejected\" })}\n                              disabled={updateSubmissionStatusMutation.isPending}\n                              data-testid={`reject-submission-${submission.id}`}\n                            >\n                              <XCircle className=\"w-3 h-3 mr-1\" />\n                              Reject\n                            </Button>\n                          )}\n                          {submission.status === \"rejected\" && (\n                            <Button\n                              size=\"sm\"\n                              className=\"flex-1 bg-success/20 text-success hover:bg-success/30 border border-success/30\"\n                              onClick={() => updateSubmissionStatusMutation.mutate({ submissionId: submission.id, status: \"approved\" })}\n                              disabled={updateSubmissionStatusMutation.isPending}\n                              data-testid={`approve-submission-${submission.id}`}\n                            >\n                              <CheckCircle className=\"w-3 h-3 mr-1\" />\n                              Approve\n                            </Button>\n                          )}\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"bg-destructive/10 text-destructive hover:bg-destructive/20 border-destructive/30\"\n                            onClick={() => {\n                              if (confirm('Are you sure you want to permanently delete this submission? This action cannot be undone.')) {\n                                deleteSubmissionMutation.mutate(submission.id);\n                              }\n                            }}\n                            disabled={deleteSubmissionMutation.isPending}\n                            data-testid={`delete-submission-${submission.id}`}\n                          >\n                            <Trash2 className=\"w-3 h-3\" />\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n                {filteredSubmissions.length === 0 && (\n                  <div className=\"text-center py-12\" data-testid=\"no-submissions-found\">\n                    <ImageIcon className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold mb-2\">No submissions found</h3>\n                    <p className=\"text-muted-foreground\">\n                      {submissionSearchQuery || submissionStatusFilter !== \"all\" \n                        ? \"Try adjusting your filters or search query.\"\n                        : \"No submissions have been uploaded yet.\"}\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Contests Tab */}\n          <TabsContent value=\"contests\" className=\"space-y-4\" data-testid=\"contests-tab\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>Contest Management</CardTitle>\n                  <div className=\"flex items-center gap-2\">\n                    {selectedContestIds.length > 0 && (\n                      <>\n                        <Button \n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"bg-success/20 text-success hover:bg-success/30 border-success/30\"\n                          onClick={handleBulkActivateContests}\n                          disabled={bulkActivateContestsMutation.isPending}\n                          data-testid=\"bulk-activate-contests\"\n                        >\n                          <Trophy className=\"w-4 h-4 mr-2\" />\n                          Activate Selected ({selectedContestIds.length})\n                        </Button>\n                        <Button \n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"gradient-glory\"\n                          onClick={handleBulkEndContests}\n                          disabled={bulkEndContestsMutation.isPending}\n                          data-testid=\"bulk-end-contests\"\n                        >\n                          <Trophy className=\"w-4 h-4 mr-2\" />\n                          End & Distribute Selected ({selectedContestIds.length})\n                        </Button>\n                        <Button \n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"bg-destructive/20 text-destructive hover:bg-destructive/30 border-destructive/30\"\n                          onClick={handleBulkDeleteContests}\n                          disabled={bulkDeleteContestsMutation.isPending}\n                          data-testid=\"bulk-delete-contests\"\n                        >\n                          <Trash2 className=\"w-4 h-4 mr-2\" />\n                          Delete Selected ({selectedContestIds.length})\n                        </Button>\n                      </>\n                    )}\n                    <Button \n                      className=\"gradient-glory\" \n                      data-testid=\"create-contest-button\"\n                      onClick={() => setIsCreateContestModalOpen(true)}\n                    >\n                      <Trophy className=\"w-4 h-4 mr-2\" />\n                      Create Contest\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {contests.length > 0 && (\n                  <div className=\"mb-4 flex items-center\">\n                    <Checkbox\n                      checked={isAllContestsSelected}\n                      onCheckedChange={handleSelectAllContests}\n                      data-testid=\"select-all-contests\"\n                      className={isSomeContestsSelected && !isAllContestsSelected ? \"data-[state=checked]:bg-primary/50\" : \"\"}\n                    />\n                    <label className=\"ml-2 text-sm font-medium text-muted-foreground\">\n                      Select All Contests\n                    </label>\n                  </div>\n                )}\n                <div className=\"space-y-4\">\n                  {contests.map((contest: any) => (\n                    <Card key={contest.id} className={contest.status === \"active\" ? \"border-primary/50\" : \"\"} data-testid={`contest-item-${contest.id}`}>\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex flex-col lg:flex-row lg:items-center justify-between gap-4\">\n                          <div className=\"flex items-start gap-4 flex-1\">\n                            <Checkbox\n                              checked={selectedContestIds.includes(contest.id)}\n                              onCheckedChange={(checked) => handleContestSelect(contest.id, checked as boolean)}\n                              data-testid={`select-contest-${contest.id}`}\n                              className=\"mt-1\"\n                            />\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center space-x-3 mb-2\">\n                                <h4 className=\"text-xl font-bold\" data-testid={`contest-title-${contest.id}`}>\n                                  {contest.title}\n                                </h4>\n                                <Badge className={getStatusColor(contest.status)} data-testid={`contest-status-${contest.id}`}>\n                                  {getStatusIcon(contest.status)}\n                                  <span className=\"ml-1\">{contest.status.charAt(0).toUpperCase() + contest.status.slice(1)}</span>\n                                </Badge>\n                              </div>\n                              <div className=\"grid sm:grid-cols-2 lg:grid-cols-4 gap-4 text-sm\">\n                                <div>\n                                  <span className=\"text-muted-foreground\">Prize Pool:</span>\n                                  <span className=\"font-semibold ml-2 text-primary\" data-testid={`contest-prize-${contest.id}`}>\n                                    {contest.prizeGlory.toLocaleString()} GLORY\n                                  </span>\n                                </div>\n                                <div>\n                                  <span className=\"text-muted-foreground\">Submissions:</span>\n                                  <span className=\"font-semibold ml-2\" data-testid={`contest-submissions-${contest.id}`}>\n                                    {contest.submissionCount || 0}\n                                  </span>\n                                </div>\n                                <div>\n                                  <span className=\"text-muted-foreground\">Participants:</span>\n                                  <span className=\"font-semibold ml-2\" data-testid={`contest-participants-${contest.id}`}>\n                                    {contest.participantCount || 0}\n                                  </span>\n                                </div>\n                                <div>\n                                  <span className=\"text-muted-foreground\">Total Votes:</span>\n                                  <span className=\"font-semibold ml-2\" data-testid={`contest-votes-${contest.id}`}>\n                                    {contest.totalVotes || 0}\n                                  </span>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\" \n                              onClick={() => setLocation(`/admin/contest/${contest.id}`)}\n                              data-testid={`view-contest-${contest.id}`}\n                            >\n                              <Eye className=\"w-4 h-4 mr-2\" />\n                              View\n                            </Button>\n                            {contest.status === \"draft\" && (\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                className=\"bg-primary/20 text-primary hover:bg-primary/30 border-primary/30\"\n                                onClick={() => activateContestMutation.mutate(contest.id)}\n                                disabled={activateContestMutation.isPending}\n                                data-testid={`activate-contest-${contest.id}`}\n                              >\n                                <Trophy className=\"w-4 h-4 mr-2\" />\n                                Activate\n                              </Button>\n                            )}\n                            {contest.status === \"active\" && (\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                className=\"gradient-glory\"\n                                onClick={() => endContestMutation.mutate(contest.id)}\n                                disabled={endContestMutation.isPending}\n                                data-testid={`end-contest-${contest.id}`}\n                              >\n                                <Trophy className=\"w-4 h-4 mr-2\" />\n                                End & Distribute\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n                {contests.length === 0 && (\n                  <div className=\"text-center py-12\" data-testid=\"no-contests\">\n                    <Trophy className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold mb-2\">No contests yet</h3>\n                    <p className=\"text-muted-foreground\">Create your first contest to get started.</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Cashouts Tab */}\n          <TabsContent value=\"cashouts\" className=\"space-y-4\" data-testid=\"cashouts-tab\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <CardTitle>Cashout Requests Management</CardTitle>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        const csvData = cashoutRequests.map((request: any) => ({\n                          ID: request.id,\n                          User: request.user.username,\n                          Email: request.user.email,\n                          Amount: request.amountGlory,\n                          Token: request.tokenType,\n                          'Token Amount': request.amountToken,\n                          'Withdrawal Address': request.withdrawalAddress,\n                          Status: request.status,\n                          'Created At': new Date(request.createdAt).toLocaleString(),\n                        }));\n                        \n                        const headers = Object.keys(csvData[0] || {});\n                        const csv = [\n                          headers.join(','),\n                          ...csvData.map((row: any) => headers.map(h => `\"${row[h]}\"`).join(','))\n                        ].join('\\n');\n                        \n                        const blob = new Blob([csv], { type: 'text/csv' });\n                        const url = window.URL.createObjectURL(blob);\n                        const a = document.createElement('a');\n                        a.href = url;\n                        a.download = `cashout-requests-${new Date().toISOString().split('T')[0]}.csv`;\n                        a.click();\n                        window.URL.revokeObjectURL(url);\n                        \n                        toast({\n                          title: \"CSV Downloaded\",\n                          description: `${cashoutRequests.length} cashout requests exported successfully`,\n                        });\n                      }}\n                      data-testid=\"export-cashouts-csv\"\n                    >\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Export CSV\n                    </Button>\n                  </div>\n                  {selectedCashoutIds.length > 0 && (\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-sm text-muted-foreground\">\n                        {selectedCashoutIds.length} selected\n                      </span>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        className=\"bg-success/20 text-success hover:bg-success/30 border-success/30\"\n                        onClick={() => bulkApproveCashoutsMutation.mutate(selectedCashoutIds)}\n                        disabled={bulkApproveCashoutsMutation.isPending}\n                        data-testid=\"bulk-approve-cashouts\"\n                      >\n                        <CheckCircle className=\"w-4 h-4 mr-2\" />\n                        Approve Selected\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        className=\"bg-destructive/20 text-destructive hover:bg-destructive/30 border-destructive/30\"\n                        onClick={() => bulkRejectCashoutsMutation.mutate(selectedCashoutIds)}\n                        disabled={bulkRejectCashoutsMutation.isPending}\n                        data-testid=\"bulk-reject-cashouts\"\n                      >\n                        <XCircle className=\"w-4 h-4 mr-2\" />\n                        Reject Selected\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                {/* Desktop Table View */}\n                <div className=\"overflow-x-auto hidden md:block\">\n                  <table className=\"w-full\" data-testid=\"cashouts-table\">\n                    <thead className=\"bg-muted\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left\">\n                          <input\n                            type=\"checkbox\"\n                            checked={\n                              cashoutRequests.filter((r: any) => r.status === \"pending\").length > 0 &&\n                              cashoutRequests\n                                .filter((r: any) => r.status === \"pending\")\n                                .every((r: any) => selectedCashoutIds.includes(r.id))\n                            }\n                            onChange={(e) => {\n                              const pendingRequests = cashoutRequests.filter((r: any) => r.status === \"pending\");\n                              if (e.target.checked) {\n                                setSelectedCashoutIds(pendingRequests.map((r: any) => r.id));\n                              } else {\n                                setSelectedCashoutIds([]);\n                              }\n                            }}\n                            className=\"rounded border-border\"\n                            data-testid=\"select-all-cashouts\"\n                          />\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          User\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          Amount\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          Wallet\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          Status\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          Date\n                        </th>\n                        <th className=\"px-6 py-3 text-right text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          Actions\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-border\">\n                      {cashoutRequests.map((request: any) => (\n                        <tr key={request.id} className=\"hover:bg-muted/30 transition-colors\" data-testid={`cashout-request-${request.id}`}>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            {request.status === \"pending\" && (\n                              <input\n                                type=\"checkbox\"\n                                checked={selectedCashoutIds.includes(request.id)}\n                                onChange={(e) => {\n                                  if (e.target.checked) {\n                                    setSelectedCashoutIds([...selectedCashoutIds, request.id]);\n                                  } else {\n                                    setSelectedCashoutIds(selectedCashoutIds.filter(id => id !== request.id));\n                                  }\n                                }}\n                                className=\"rounded border-border\"\n                                data-testid={`select-cashout-${request.id}`}\n                              />\n                            )}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"flex items-center space-x-3\">\n                              <Avatar>\n                                <AvatarFallback>\n                                  {getInitials(request.user.username)}\n                                </AvatarFallback>\n                              </Avatar>\n                              <div>\n                                <div className=\"font-semibold\" data-testid={`cashout-username-${request.id}`}>\n                                  {request.user.username}\n                                </div>\n                                <div className=\"text-sm text-muted-foreground\">\n                                  {request.user.email}\n                                </div>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"font-semibold font-mono\" data-testid={`cashout-amount-${request.id}`}>\n                              {request.amountGlory.toLocaleString()} GLORY\n                            </div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              → {request.amountToken} {request.tokenType}\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4\">\n                            <div className=\"flex items-center gap-2\">\n                              <div className=\"font-mono text-xs max-w-[200px] truncate\" data-testid={`cashout-wallet-${request.id}`}>\n                                {request.withdrawalAddress}\n                              </div>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                className=\"h-6 w-6\"\n                                onClick={() => {\n                                  navigator.clipboard.writeText(request.withdrawalAddress);\n                                  toast({\n                                    title: \"Address Copied\",\n                                    description: \"Withdrawal address copied to clipboard\",\n                                  });\n                                }}\n                                data-testid={`copy-address-${request.id}`}\n                              >\n                                <Copy className=\"h-3 w-3\" />\n                              </Button>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <Badge className={getStatusColor(request.status)} data-testid={`cashout-status-${request.id}`}>\n                              {getStatusIcon(request.status)}\n                              <span className=\"ml-1\">{request.status.charAt(0).toUpperCase() + request.status.slice(1)}</span>\n                            </Badge>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\">\n                            {new Date(request.createdAt).toLocaleDateString()}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-right\">\n                            <div className=\"flex items-center justify-end space-x-2\">\n                              {request.status === \"pending\" && (\n                                <>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    className=\"bg-success/20 text-success hover:bg-success/30 border-success/30\"\n                                    onClick={() => approveCashoutMutation.mutate(request.id)}\n                                    disabled={approveCashoutMutation.isPending}\n                                    data-testid={`approve-cashout-${request.id}`}\n                                  >\n                                    <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                    Approve\n                                  </Button>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    className=\"bg-destructive/20 text-destructive hover:bg-destructive/30 border-destructive/30\"\n                                    onClick={() => rejectCashoutMutation.mutate(request.id)}\n                                    disabled={rejectCashoutMutation.isPending}\n                                    data-testid={`reject-cashout-${request.id}`}\n                                  >\n                                    <XCircle className=\"w-3 h-3 mr-1\" />\n                                    Reject\n                                  </Button>\n                                </>\n                              )}\n                              {request.txHash && (\n                                <a\n                                  href={`https://solscan.io/tx/${request.txHash}?cluster=devnet`}\n                                  target=\"_blank\"\n                                  rel=\"noopener noreferrer\"\n                                  className=\"text-xs text-primary hover:underline\"\n                                  data-testid={`view-tx-${request.id}`}\n                                >\n                                  View TX\n                                </a>\n                              )}\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n\n                {/* Mobile Card View */}\n                <div className=\"md:hidden\">\n                  {/* Mobile Select All Header */}\n                  {cashoutRequests.filter((r: any) => r.status === \"pending\").length > 0 && (\n                    <div className=\"flex items-center gap-3 p-4 border-b border-border bg-muted/50\">\n                      <Checkbox\n                        checked={\n                          cashoutRequests.filter((r: any) => r.status === \"pending\").length > 0 &&\n                          cashoutRequests\n                            .filter((r: any) => r.status === \"pending\")\n                            .every((r: any) => selectedCashoutIds.includes(r.id))\n                        }\n                        onCheckedChange={(checked) => {\n                          const pendingRequests = cashoutRequests.filter((r: any) => r.status === \"pending\");\n                          if (checked) {\n                            setSelectedCashoutIds(pendingRequests.map((r: any) => r.id));\n                          } else {\n                            setSelectedCashoutIds([]);\n                          }\n                        }}\n                        data-testid=\"select-all-cashouts-mobile\"\n                      />\n                      <span className=\"text-sm font-medium\">\n                        {selectedCashoutIds.length > 0 \n                          ? `${selectedCashoutIds.length} selected` \n                          : 'Select all pending'}\n                      </span>\n                    </div>\n                  )}\n                  \n                  <div className=\"divide-y divide-border\">\n                    {cashoutRequests.map((request: any) => (\n                      <div key={request.id} className=\"p-4 hover:bg-muted/30 transition-colors\" data-testid={`cashout-card-${request.id}`}>\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div className=\"flex items-center space-x-3\">\n                            {request.status === \"pending\" && (\n                              <Checkbox\n                                checked={selectedCashoutIds.includes(request.id)}\n                                onCheckedChange={(checked) => {\n                                  if (checked) {\n                                    setSelectedCashoutIds([...selectedCashoutIds, request.id]);\n                                  } else {\n                                    setSelectedCashoutIds(selectedCashoutIds.filter(id => id !== request.id));\n                                  }\n                                }}\n                                data-testid={`select-cashout-mobile-${request.id}`}\n                              />\n                            )}\n                            <Avatar className=\"h-10 w-10\">\n                              <AvatarFallback>\n                                {getInitials(request.user.username)}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div className=\"flex-1 min-w-0\">\n                              <div className=\"font-semibold truncate\">\n                                {request.user.username}\n                              </div>\n                              <div className=\"text-sm text-muted-foreground truncate\">\n                                {request.user.email}\n                              </div>\n                            </div>\n                          </div>\n                          <Badge className={getStatusColor(request.status)}>\n                            {getStatusIcon(request.status)}\n                            <span className=\"ml-1\">{request.status.charAt(0).toUpperCase() + request.status.slice(1)}</span>\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"space-y-3 mb-3 text-sm\">\n                          <div>\n                            <div className=\"text-muted-foreground text-xs\">Amount</div>\n                            <div className=\"font-semibold font-mono mt-1\">\n                              {request.amountGlory.toLocaleString()} GLORY\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              → {request.amountToken} {request.tokenType}\n                            </div>\n                          </div>\n                          \n                          <div>\n                            <div className=\"text-muted-foreground text-xs\">Withdrawal Address</div>\n                            <div className=\"flex items-center gap-2 mt-1\">\n                              <div className=\"font-mono text-xs truncate flex-1\">\n                                {request.withdrawalAddress}\n                              </div>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                className=\"h-6 w-6 flex-shrink-0\"\n                                onClick={() => {\n                                  navigator.clipboard.writeText(request.withdrawalAddress);\n                                  toast({\n                                    title: \"Address Copied\",\n                                    description: \"Withdrawal address copied to clipboard\",\n                                  });\n                                }}\n                                data-testid={`copy-address-mobile-${request.id}`}\n                              >\n                                <Copy className=\"h-3 w-3\" />\n                              </Button>\n                            </div>\n                          </div>\n                          \n                          <div>\n                            <div className=\"text-muted-foreground text-xs\">Date</div>\n                            <div className=\"mt-1\">\n                              {new Date(request.createdAt).toLocaleDateString()}\n                            </div>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex gap-2 flex-wrap\">\n                          {request.status === \"pending\" && (\n                            <>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                className=\"flex-1 bg-success/20 text-success hover:bg-success/30 border-success/30\"\n                                onClick={() => approveCashoutMutation.mutate(request.id)}\n                                disabled={approveCashoutMutation.isPending}\n                                data-testid={`approve-cashout-mobile-${request.id}`}\n                              >\n                                <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                Approve\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                className=\"flex-1 bg-destructive/20 text-destructive hover:bg-destructive/30 border-destructive/30\"\n                                onClick={() => rejectCashoutMutation.mutate(request.id)}\n                                disabled={rejectCashoutMutation.isPending}\n                                data-testid={`reject-cashout-mobile-${request.id}`}\n                              >\n                                <XCircle className=\"w-3 h-3 mr-1\" />\n                                Reject\n                              </Button>\n                            </>\n                          )}\n                          {request.txHash && (\n                            <a\n                              href={`https://solscan.io/tx/${request.txHash}?cluster=devnet`}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              className=\"text-xs text-primary hover:underline flex items-center\"\n                              data-testid={`view-tx-mobile-${request.id}`}\n                            >\n                              View TX\n                            </a>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                {cashoutRequests.length === 0 && (\n                  <div className=\"text-center py-12\" data-testid=\"no-cashouts\">\n                    <DollarSign className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold mb-2\">No cashout requests</h3>\n                    <p className=\"text-muted-foreground\">Cashout requests will appear here when users request them.</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Audit Logs Tab */}\n          <TabsContent value=\"audit\" className=\"space-y-4\" data-testid=\"audit-tab\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>Audit Logs</CardTitle>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    className=\"bg-destructive/20 text-destructive hover:bg-destructive/30 border-destructive/30\"\n                    onClick={() => setClearLogsDialogOpen(true)}\n                    data-testid=\"button-clear-logs\"\n                  >\n                    <Trash2 className=\"w-4 h-4 mr-2\" />\n                    Clear All Logs\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                {/* Desktop Table View */}\n                <div className=\"overflow-x-auto hidden md:block\">\n                  <table className=\"w-full\" data-testid=\"audit-logs-table\">\n                    <thead className=\"bg-muted\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          Date\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          Admin\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          Action\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                          Details\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-border\">\n                      {auditLogs.map((log: any, index: number) => (\n                        <tr key={log.id} className=\"hover:bg-muted/30 transition-colors\" data-testid={`audit-log-${index}`}>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\">\n                            {new Date(log.createdAt).toLocaleDateString()} {new Date(log.createdAt).toLocaleTimeString()}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\" data-testid={`log-admin-${index}`}>\n                            Admin #{log.actorUserId.substring(0, 8)}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\" data-testid={`log-action-${index}`}>\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {log.action.replace(/_/g, \" \").toLowerCase()}\n                            </Badge>\n                          </td>\n                          <td className=\"px-6 py-4 text-sm text-muted-foreground\" data-testid={`log-details-${index}`}>\n                            {log.meta ? JSON.stringify(log.meta).substring(0, 100) + \"...\" : \"No details\"}\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n\n                {/* Mobile Card View */}\n                <div className=\"md:hidden divide-y divide-border\">\n                  {auditLogs.map((log: any, index: number) => (\n                    <div key={log.id} className=\"p-4 hover:bg-muted/30 transition-colors\" data-testid={`audit-log-card-${index}`}>\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div className=\"flex-1\">\n                          <div className=\"text-xs text-muted-foreground mb-1\">\n                            {new Date(log.createdAt).toLocaleDateString()} {new Date(log.createdAt).toLocaleTimeString()}\n                          </div>\n                          <div className=\"font-medium text-sm\">\n                            Admin #{log.actorUserId.substring(0, 8)}\n                          </div>\n                        </div>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {log.action.replace(/_/g, \" \").toLowerCase()}\n                        </Badge>\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {log.meta ? JSON.stringify(log.meta).substring(0, 100) + \"...\" : \"No details\"}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                {auditLogs.length === 0 && (\n                  <div className=\"text-center py-12\" data-testid=\"no-audit-logs\">\n                    <BarChart3 className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold mb-2\">No audit logs</h3>\n                    <p className=\"text-muted-foreground\">Admin actions will appear here.</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Settings Tab */}\n          <TabsContent value=\"settings\" className=\"space-y-4\" data-testid=\"settings-tab\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Site Settings</CardTitle>\n                <p className=\"text-sm text-muted-foreground\">Configure global platform settings</p>\n              </CardHeader>\n              <CardContent>\n                <Form {...settingsForm}>\n                  <form onSubmit={settingsForm.handleSubmit(onSettingsSubmit)} className=\"space-y-6\">\n                    {/* Private Mode */}\n                    <div className=\"space-y-4\">\n                      <div>\n                        <h3 className=\"text-lg font-semibold mb-1\">Access Control</h3>\n                        <p className=\"text-sm text-muted-foreground\">Manage who can access the platform</p>\n                      </div>\n                      <FormField\n                        control={settingsForm.control}\n                        name=\"privateMode\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                            <div className=\"space-y-0.5\">\n                              <FormLabel className=\"text-base\">Private Mode</FormLabel>\n                              <FormDescription>\n                                When enabled, only logged-in users can access the site\n                              </FormDescription>\n                            </div>\n                            <FormControl>\n                              <Switch\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                                data-testid=\"settings-switch-private-mode\"\n                              />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    {/* Platform Wallet */}\n                    <div className=\"space-y-4\">\n                      <div>\n                        <h3 className=\"text-lg font-semibold mb-1\">Payment Configuration</h3>\n                        <p className=\"text-sm text-muted-foreground\">Configure Solana wallet for receiving entry fees</p>\n                      </div>\n                      <FormField\n                        control={settingsForm.control}\n                        name=\"platformWalletAddress\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Platform Wallet Address</FormLabel>\n                            <FormControl>\n                              <Input\n                                placeholder=\"Enter Solana wallet address (e.g., 7xK...abc)\"\n                                {...field}\n                                data-testid=\"settings-input-platform-wallet\"\n                              />\n                            </FormControl>\n                            <FormDescription>\n                              This wallet will receive all entry fees paid with SOL, USDC, or custom tokens.\n                              Make sure you have access to this wallet.\n                            </FormDescription>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    {/* Save Button */}\n                    <div className=\"flex justify-end pt-4\">\n                      <Button\n                        type=\"submit\"\n                        disabled={updateSettingsMutation.isPending}\n                        data-testid=\"button-save-settings\"\n                      >\n                        {updateSettingsMutation.isPending ? (\n                          <>\n                            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                            Saving...\n                          </>\n                        ) : (\n                          <>\n                            <Settings className=\"mr-2 h-4 w-4\" />\n                            Save Settings\n                          </>\n                        )}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n\n                {/* AI Model Pricing */}\n                <div className=\"mt-8 pt-8 border-t\">\n                  <div className=\"mb-6\">\n                    <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                      <Sparkles className=\"h-5 w-5\" />\n                      AI Model Pricing\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      Configure credit costs for AI image generation and upscaling\n                    </p>\n                  </div>\n\n                  {loadingPricing ? (\n                    <div className=\"flex justify-center py-4\">\n                      <Loader2 className=\"h-6 w-6 animate-spin\" />\n                    </div>\n                  ) : (\n                    <>\n                      <div className=\"grid gap-4\">\n                        {Object.entries(MODEL_NAMES).map(([key, label]) => (\n                          <div key={key} className=\"flex items-center justify-between\">\n                            <div className=\"flex-1\">\n                              <label htmlFor={`pricing-${key}`} className=\"text-sm font-medium\">\n                                {label}\n                              </label>\n                              <p className=\"text-xs text-muted-foreground\">Cost per generation</p>\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <Input\n                                id={`pricing-${key}`}\n                                type=\"number\"\n                                min=\"0\"\n                                step=\"1\"\n                                value={pricingValues[key] || 0}\n                                onChange={(e) =>\n                                  setPricingValues({ ...pricingValues, [key]: parseInt(e.target.value) || 0 })\n                                }\n                                className=\"w-24\"\n                                data-testid={`input-pricing-${key}`}\n                              />\n                              <span className=\"text-sm text-muted-foreground\">credits</span>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                      <div className=\"flex justify-end pt-6\">\n                        <Button\n                          onClick={() => updatePricingMutation.mutate()}\n                          disabled={updatePricingMutation.isPending}\n                          data-testid=\"button-save-pricing\"\n                        >\n                          {updatePricingMutation.isPending ? (\n                            <>\n                              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                              Saving...\n                            </>\n                          ) : (\n                            <>\n                              <Save className=\"mr-2 h-4 w-4\" />\n                              Save Pricing\n                            </>\n                          )}\n                        </Button>\n                      </div>\n                    </>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      <CreateContestModal\n        isOpen={isCreateContestModalOpen}\n        onClose={() => setIsCreateContestModalOpen(false)}\n        onSubmit={(formData) => createContestMutation.mutate(formData)}\n      />\n\n      {/* Bulk Delete Confirmation Dialog */}\n      <Dialog open={bulkDeleteDialogOpen} onOpenChange={setBulkDeleteDialogOpen}>\n        <DialogContent data-testid=\"bulk-delete-dialog\">\n          <DialogHeader>\n            <DialogTitle className=\"text-destructive\">Delete Selected Users</DialogTitle>\n            <DialogDescription asChild>\n              <div className=\"space-y-3\">\n                <p>\n                  You are about to permanently delete <span className=\"font-semibold\">{selectedUserIds.length}</span> users.\n                </p>\n                <div>\n                  <p className=\"text-destructive font-medium mb-2\">\n                    This will also delete ALL associated data including:\n                  </p>\n                  <ul className=\"list-disc list-inside space-y-1 text-sm ml-4 text-muted-foreground\">\n                    <li>All submissions and media files</li>\n                    <li>All votes and interactions</li>\n                    <li>GLORY balance and transaction history</li>\n                    <li>Profile data and settings</li>\n                    <li>Cashout requests</li>\n                  </ul>\n                </div>\n                <p className=\"font-semibold text-destructive\">\n                  This action cannot be undone!\n                </p>\n              </div>\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirmDelete\">\n                Type <span className=\"font-mono font-bold\">DELETE</span> to confirm\n              </Label>\n              <Input\n                id=\"confirmDelete\"\n                placeholder=\"Type DELETE to confirm\"\n                value={deleteConfirmText}\n                onChange={(e) => setDeleteConfirmText(e.target.value)}\n                data-testid=\"confirm-delete-input\"\n              />\n            </div>\n            <div className=\"bg-muted p-3 rounded-md\">\n              <h4 className=\"font-semibold text-sm mb-2\">Selected users:</h4>\n              <div className=\"max-h-32 overflow-y-auto space-y-1\">\n                {selectedUserIds.map(userId => {\n                  const user = filteredUsers.find((u: any) => u.id === userId);\n                  return (\n                    <div key={userId} className=\"text-sm text-muted-foreground\">\n                      {user?.username} ({user?.email})\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setBulkDeleteDialogOpen(false);\n                setDeleteConfirmText(\"\");\n              }}\n              data-testid=\"cancel-bulk-delete\"\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={confirmBulkDelete}\n              disabled={bulkDeleteUsersMutation.isPending || deleteConfirmText !== \"DELETE\"}\n              data-testid=\"confirm-bulk-delete\"\n            >\n              {bulkDeleteUsersMutation.isPending ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Deleting...\n                </>\n              ) : (\n                <>\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Delete {selectedUserIds.length} Users\n                </>\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Bulk Delete Contests Confirmation Dialog */}\n      <Dialog open={bulkDeleteContestsDialogOpen} onOpenChange={setBulkDeleteContestsDialogOpen}>\n        <DialogContent data-testid=\"bulk-delete-contests-dialog\">\n          <DialogHeader>\n            <DialogTitle className=\"text-destructive\">Delete Selected Contests</DialogTitle>\n            <DialogDescription asChild>\n              <div className=\"space-y-3\">\n                <p>\n                  You are about to permanently delete <span className=\"font-semibold\">{selectedContestIds.length}</span> contests.\n                </p>\n                <div>\n                  <p className=\"text-destructive font-medium mb-2\">\n                    This will also delete ALL associated data including:\n                  </p>\n                  <ul className=\"list-disc list-inside space-y-1 text-sm ml-4 text-muted-foreground\">\n                    <li>All submissions in these contests</li>\n                    <li>All votes on these submissions</li>\n                    <li>All media files associated with submissions</li>\n                    <li>Prize pool and reward distribution data</li>\n                  </ul>\n                </div>\n                <p className=\"font-semibold text-destructive\">\n                  This action cannot be undone!\n                </p>\n              </div>\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirmDeleteContests\">\n                Type <span className=\"font-mono font-bold\">DELETE</span> to confirm\n              </Label>\n              <Input\n                id=\"confirmDeleteContests\"\n                placeholder=\"Type DELETE to confirm\"\n                value={deleteContestsConfirmText}\n                onChange={(e) => setDeleteContestsConfirmText(e.target.value)}\n                data-testid=\"confirm-delete-contests-input\"\n              />\n            </div>\n            <div className=\"bg-muted p-3 rounded-md\">\n              <h4 className=\"font-semibold text-sm mb-2\">Selected contests:</h4>\n              <div className=\"max-h-32 overflow-y-auto space-y-1\">\n                {selectedContestIds.map(contestId => {\n                  const contest = contests.find((c: any) => c.id === contestId);\n                  return (\n                    <div key={contestId} className=\"text-sm text-muted-foreground\">\n                      {contest?.title} ({contest?.status})\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setBulkDeleteContestsDialogOpen(false);\n                setDeleteContestsConfirmText(\"\");\n              }}\n              data-testid=\"cancel-bulk-delete-contests\"\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={confirmBulkDeleteContests}\n              disabled={bulkDeleteContestsMutation.isPending || deleteContestsConfirmText !== \"DELETE\"}\n              data-testid=\"confirm-bulk-delete-contests\"\n            >\n              {bulkDeleteContestsMutation.isPending ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Deleting...\n                </>\n              ) : (\n                <>\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Delete {selectedContestIds.length} Contests\n                </>\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Clear Audit Logs Confirmation Dialog */}\n      <Dialog open={clearLogsDialogOpen} onOpenChange={setClearLogsDialogOpen}>\n        <DialogContent data-testid=\"clear-logs-dialog\">\n          <DialogHeader>\n            <DialogTitle className=\"text-destructive\">Clear All Audit Logs</DialogTitle>\n            <DialogDescription asChild>\n              <div className=\"space-y-3\">\n                <p>\n                  You are about to permanently delete <span className=\"font-semibold\">all audit logs</span>.\n                </p>\n                <p className=\"text-destructive font-medium\">\n                  This will remove all historical records of admin actions and system events.\n                </p>\n                <p className=\"font-semibold text-destructive\">\n                  This action cannot be undone!\n                </p>\n              </div>\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirmClearLogs\">\n                Type <span className=\"font-mono font-bold\">CLEAR</span> to confirm\n              </Label>\n              <Input\n                id=\"confirmClearLogs\"\n                placeholder=\"Type CLEAR to confirm\"\n                value={clearLogsConfirmText}\n                onChange={(e) => setClearLogsConfirmText(e.target.value)}\n                data-testid=\"confirm-clear-logs-input\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setClearLogsDialogOpen(false);\n                setClearLogsConfirmText(\"\");\n              }}\n              data-testid=\"cancel-clear-logs\"\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={() => clearAuditLogsMutation.mutate()}\n              disabled={clearAuditLogsMutation.isPending || clearLogsConfirmText !== \"CLEAR\"}\n              data-testid=\"confirm-clear-logs\"\n            >\n              {clearAuditLogsMutation.isPending ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Clearing...\n                </>\n              ) : (\n                <>\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Clear All Logs\n                </>\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Balance Edit Dialog */}\n      <Dialog open={gloryEditDialogOpen} onOpenChange={(open) => {\n        setGloryEditDialogOpen(open);\n        if (!open) {\n          // Reset state when dialog closes\n          setGloryAmountInput(\"\");\n          setSelectedUserId(\"\");\n          setSelectedCurrency(\"GLORY\");\n        }\n      }}>\n        <DialogContent data-testid=\"balance-edit-dialog\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center\">\n              <Crown className=\"w-5 h-5 mr-2 text-primary\" />\n              Edit User Balance\n            </DialogTitle>\n            <DialogDescription asChild>\n              <div className=\"space-y-2\">\n                <p>\n                  Edit the balance for the selected user.\n                </p>\n                <div className=\"bg-muted p-3 rounded-md text-sm\">\n                  <p className=\"font-medium mb-2\">Supported formats:</p>\n                  <ul className=\"space-y-1 text-muted-foreground\">\n                    <li><code className=\"bg-background px-1 rounded\">300</code> - Set balance to exactly 300</li>\n                    <li><code className=\"bg-background px-1 rounded\">+50</code> - Add 50 to current balance</li>\n                    <li><code className=\"bg-background px-1 rounded\">-20</code> - Subtract 20 from current balance</li>\n                  </ul>\n                </div>\n              </div>\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"currency\">Currency</Label>\n              <Select value={selectedCurrency} onValueChange={(value) => setSelectedCurrency(value as \"GLORY\" | \"SOL\" | \"USDC\")}>\n                <SelectTrigger id=\"currency\" data-testid=\"select-balance-currency\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"GLORY\">GLORY</SelectItem>\n                  <SelectItem value=\"SOL\">SOL</SelectItem>\n                  <SelectItem value=\"USDC\">USDC</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            {selectedUserId && (\n              <div className=\"bg-muted p-3 rounded-md\">\n                <div className=\"text-sm\">\n                  <span className=\"text-muted-foreground\">Current {selectedCurrency} balance:</span>\n                  <span className=\"font-mono font-semibold ml-2\">\n                    {(() => {\n                      const userBalance = filteredUsers.find((u: any) => u.id === selectedUserId);\n                      const balance = selectedCurrency === 'SOL' ? userBalance?.solBalance : \n                                     selectedCurrency === 'USDC' ? userBalance?.usdcBalance : \n                                     userBalance?.gloryBalance;\n                      return (balance || 0).toLocaleString();\n                    })()} {selectedCurrency}\n                  </span>\n                </div>\n              </div>\n            )}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"gloryAmount\">New {selectedCurrency} Amount</Label>\n              <Input\n                id=\"gloryAmount\"\n                placeholder=\"e.g., 300, +50, -20\"\n                value={gloryAmountInput}\n                onChange={(e) => setGloryAmountInput(e.target.value)}\n                data-testid=\"glory-amount-input\"\n              />\n              <p className=\"text-xs text-muted-foreground\">\n                Enter a number to set exact balance, or use +/- to add/subtract\n              </p>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setGloryEditDialogOpen(false);\n                setGloryAmountInput(\"\");\n                setSelectedUserId(\"\");\n                setSelectedCurrency(\"GLORY\");\n              }}\n              data-testid=\"cancel-balance-edit\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleGloryBalanceUpdate}\n              disabled={updateGloryBalanceMutation.isPending || !gloryAmountInput.trim()}\n              data-testid=\"confirm-glory-edit\"\n              className=\"bg-primary/20 text-primary hover:bg-primary/30 border-primary/30\"\n            >\n              {updateGloryBalanceMutation.isPending ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Updating...\n                </>\n              ) : (\n                <>\n                  <Crown className=\"h-4 w-4 mr-2\" />\n                  Update Balance\n                </>\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":132458},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport cookieParser from \"cookie-parser\";\nimport * as ed25519 from \"@noble/ed25519\";\nimport { storage } from \"./storage\";\nimport { db } from \"./db\";\nimport { eq, and, ne } from \"drizzle-orm\";\nimport { authenticateToken, requireAdmin, requireApproved, authenticateOptional, generateToken, type AuthRequest } from \"./middleware/auth\";\nimport { votingRateLimiter } from \"./services/rate-limiter\";\nimport { upload, uploadFile, deleteFile, generateAndUploadThumbnail } from \"./services/file-upload\";\nimport { calculateRewardDistribution } from \"./services/reward-distribution\";\nimport { ContestScheduler } from \"./contest-scheduler\";\nimport { AiCleanupScheduler } from \"./ai-cleanup-scheduler\";\nimport { verifyTransaction, solanaConnection, solanaConnectionProcessed } from \"./solana\";\nimport { findReference } from \"@solana/pay\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { z } from \"zod\";\nimport * as replicate from \"./replicate\";\nimport { uploadImageToSupabase, copySupabaseFile } from \"./supabase\";\nimport { \n  loginSchema, \n  registerSchema, \n  voteSubmissionSchema,\n  updateUserStatusSchema,\n  updateSubmissionStatusSchema,\n  updateWithdrawalAddressSchema,\n  bulkSubmissionIdsSchema,\n  insertContestSchema,\n  insertSubmissionSchema,\n  connectWalletSchema,\n  createCashoutRequestSchema,\n  updateCashoutStatusSchema,\n  approveCashoutSchema,\n  rejectCashoutSchema,\n  bulkCashoutIdsSchema,\n  bulkRejectCashoutSchema,\n  insertSiteSettingsSchema,\n  subscriptionTiers,\n  editJobs,\n  images,\n  imageVersions,\n  type SubscriptionTier,\n  type UserSubscriptionWithTier,\n  type UserSubscription,\n  type SubscriptionTransaction\n} from \"@shared/schema\";\n\n// Create contest scheduler instance\nexport const contestScheduler = new ContestScheduler(storage);\n\n// Create AI cleanup scheduler instance\nexport const aiCleanupScheduler = new AiCleanupScheduler(storage);\n\n// Helper function to refund entry fee when submission is rejected\nasync function refundEntryFee(submissionId: string): Promise<boolean> {\n  try {\n    const submission = await storage.getSubmission(submissionId);\n    if (!submission) {\n      return false;\n    }\n\n    // Read entry fee from submission (captured at creation time)\n    const entryFeeAmount = submission.entryFeeAmount;\n    const currency = submission.entryFeeCurrency || \"GLORY\";\n\n    // Only refund if there's an entry fee\n    if (!entryFeeAmount || Number(entryFeeAmount) <= 0) {\n      return false;\n    }\n\n    // Get contest name for ledger reason\n    const contestName = submission.contestName || (submission.contestId ? (await storage.getContest(submission.contestId))?.title : null) || \"contest\";\n\n    // Create refund transaction\n    await storage.createGloryTransaction({\n      userId: submission.userId,\n      delta: String(entryFeeAmount), // Positive delta to add back\n      reason: `Entry fee refund for rejected submission in contest: ${contestName}`,\n      currency\n    });\n\n    console.log(`Refunded ${entryFeeAmount} ${currency} to user ${submission.userId} for rejected submission ${submissionId}`);\n    return true;\n  } catch (error) {\n    console.error(`Failed to refund entry fee for submission ${submissionId}:`, error);\n    return false;\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  app.use(cookieParser());\n  \n  // Initialize contest scheduler\n  contestScheduler.initialize().catch(err => {\n    console.error(\"Failed to initialize contest scheduler:\", err);\n  });\n\n  // Initialize AI cleanup scheduler (runs daily to delete old generations)\n  aiCleanupScheduler.initialize().catch(err => {\n    console.error(\"Failed to initialize AI cleanup scheduler:\", err);\n  });\n  \n  // Track recent GLORY balance requests to prevent duplicates\n  const recentGloryRequests = new Map<string, number>();\n\n\n  \n  // Serve uploaded files from public/uploads directory\n  const express = await import(\"express\");\n  const path = await import(\"path\");\n  app.use(\"/uploads\", express.default.static(path.join(process.cwd(), \"public\", \"uploads\")));\n\n  // Auth routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const { username, email, password } = registerSchema.parse(req.body);\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ error: \"User with this email already exists\" });\n      }\n\n      const existingUsername = await storage.getUserByUsername(username);\n      if (existingUsername) {\n        return res.status(400).json({ error: \"Username already taken\" });\n      }\n\n      // Hash password\n      const passwordHash = await bcrypt.hash(password, 10);\n\n      // Create user\n      const user = await storage.createUser({\n        username,\n        email,\n        passwordHash,\n        role: \"user\",\n        status: \"pending\" // Requires admin approval\n      });\n\n      // Auto-assign Free tier subscription to new users\n      try {\n        const freeTier = await storage.getSubscriptionTierBySlug(\"free\");\n        if (freeTier) {\n          // Free tier: set period end far in the future (100 years)\n          const farFuture = new Date();\n          farFuture.setFullYear(farFuture.getFullYear() + 100);\n          \n          await storage.createUserSubscription({\n            userId: user.id,\n            tierId: freeTier.id,\n            status: \"active\",\n            currentPeriodStart: new Date(),\n            currentPeriodEnd: farFuture,\n            cancelAtPeriodEnd: false\n          });\n          console.log(`Assigned Free tier to new user: ${user.id}`);\n        } else {\n          console.warn(\"Free tier not found, user created without subscription\");\n        }\n      } catch (error) {\n        console.error(\"Failed to assign Free tier to new user:\", error);\n        // Continue anyway - user creation succeeded\n      }\n\n      res.status(201).json({ \n        message: \"User created successfully. Please wait for admin approval.\",\n        user: { id: user.id, username: user.username, email: user.email, status: user.status }\n      });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid input\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      const validPassword = await bcrypt.compare(password, user.passwordHash);\n      if (!validPassword) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      if (user.status === \"banned\") {\n        return res.status(403).json({ error: \"Account is banned\" });\n      }\n\n      // Generate JWT token\n      const token = generateToken({\n        id: user.id,\n        email: user.email,\n        role: user.role,\n        status: user.status\n      });\n\n      // Set httpOnly cookie\n      res.cookie(\"authToken\", token, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === \"production\",\n        sameSite: \"lax\",\n        maxAge: 7 * 24 * 60 * 60 * 1000 // 7 days\n      });\n\n      res.json({ \n        user: { \n          id: user.id, \n          username: user.username, \n          email: user.email, \n          role: user.role, \n          status: user.status,\n          gloryBalance: user.gloryBalance\n        }\n      });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid input\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    res.clearCookie(\"authToken\");\n    res.json({ message: \"Logged out successfully\" });\n  });\n\n  app.get(\"/api/me\", authenticateToken, async (req: AuthRequest, res) => {\n    const userId = req.user!.id;\n\n    // Auto-refresh subscription credits if period has expired\n    try {\n      await storage.refreshSubscriptionIfNeeded(userId);\n    } catch (error) {\n      console.error(\"Failed to refresh subscription:\", error);\n      // Continue even if refresh fails - don't block user request\n    }\n\n    const user = await storage.getUser(userId);\n    if (!user) {\n      return res.status(404).json({ error: \"User not found\" });\n    }\n\n    res.json({\n      id: user.id,\n      username: user.username,\n      email: user.email,\n      role: user.role,\n      status: user.status,\n      gloryBalance: user.gloryBalance,\n      solBalance: user.solBalance,\n      usdcBalance: user.usdcBalance,\n      imageCredits: user.imageCredits,\n      avatarUrl: user.avatarUrl,\n      withdrawalAddress: user.withdrawalAddress,\n      createdAt: user.createdAt\n    });\n  });\n\n  app.get(\"/api/me/submissions\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const { status } = req.query;\n      const filters: any = { userId: req.user!.id };\n      \n      if (status && status !== 'all') {\n        filters.status = status as string;\n      }\n      \n      const submissions = await storage.getSubmissions(filters);\n      res.json(submissions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch submissions\" });\n    }\n  });\n\n  // Update profile (username)\n  app.patch(\"/api/me\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const { username } = req.body;\n      const userId = req.user!.id;\n\n      if (!username || username.trim().length < 3) {\n        return res.status(400).json({ error: \"Username must be at least 3 characters\" });\n      }\n\n      // Check if username is already taken by another user\n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser && existingUser.id !== userId) {\n        return res.status(400).json({ error: \"Username already taken\" });\n      }\n\n      await storage.updateUser(userId, { username: username.trim() });\n      const updatedUser = await storage.getUser(userId);\n\n      res.json({\n        id: updatedUser!.id,\n        username: updatedUser!.username,\n        email: updatedUser!.email,\n        role: updatedUser!.role,\n        status: updatedUser!.status,\n        gloryBalance: updatedUser!.gloryBalance,\n        avatarUrl: updatedUser!.avatarUrl,\n        createdAt: updatedUser!.createdAt\n      });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Failed to update profile\" });\n    }\n  });\n\n  // Upload/update avatar\n  app.post(\"/api/me/avatar\", authenticateToken, upload.single(\"avatar\"), async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n\n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      const { url } = await uploadFile(req.file);\n\n      await storage.updateUser(userId, { avatarUrl: url });\n      const updatedUser = await storage.getUser(userId);\n\n      res.json({\n        id: updatedUser!.id,\n        username: updatedUser!.username,\n        email: updatedUser!.email,\n        role: updatedUser!.role,\n        status: updatedUser!.status,\n        gloryBalance: updatedUser!.gloryBalance,\n        avatarUrl: updatedUser!.avatarUrl,\n        createdAt: updatedUser!.createdAt\n      });\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to upload avatar\" });\n    }\n  });\n\n  // Delete profile\n  app.delete(\"/api/me\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      \n      // Delete user (cascade will handle related data)\n      await storage.deleteUser(userId);\n\n      // Clear auth cookie\n      res.clearCookie(\"authToken\");\n      \n      res.json({ message: \"Profile deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to delete profile\" });\n    }\n  });\n\n  // Update withdrawal address\n  app.patch(\"/api/users/withdrawal-address\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const { address } = updateWithdrawalAddressSchema.parse(req.body);\n      const userId = req.user!.id;\n\n      const updatedUser = await storage.updateWithdrawalAddress(userId, address);\n      \n      if (!updatedUser) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      res.json({ \n        success: true, \n        withdrawalAddress: updatedUser.withdrawalAddress \n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid withdrawal address format\" });\n      }\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to update withdrawal address\" });\n    }\n  });\n\n  // Wallet routes\n  app.post(\"/api/wallet/connect\", authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    try {\n      const { address, provider, signature, message } = connectWalletSchema.parse(req.body);\n      const userId = req.user!.id;\n\n      // Check if wallet is already connected to another user\n      const existingWallet = await storage.getUserWalletByAddress(address);\n      if (existingWallet && existingWallet.userId !== userId) {\n        return res.status(400).json({ error: \"This wallet is already connected to another account\" });\n      }\n\n      // Check if user already has a wallet\n      const userWallet = await storage.getUserWallet(userId);\n      if (userWallet) {\n        return res.status(400).json({ error: \"User already has a connected wallet\" });\n      }\n\n      // Verify signature\n      try {\n        const messageBytes = new TextEncoder().encode(message);\n        const signatureBytes = Buffer.from(signature, 'base64');\n        const publicKeyBytes = Buffer.from(address, 'base64');\n        \n        const isValid = await ed25519.verify(signatureBytes, messageBytes, publicKeyBytes);\n        \n        if (!isValid) {\n          return res.status(400).json({ error: \"Invalid signature\" });\n        }\n      } catch (error) {\n        return res.status(400).json({ error: \"Signature verification failed\" });\n      }\n\n      // Create wallet\n      const wallet = await storage.createUserWallet({\n        userId,\n        address,\n        provider,\n        status: \"active\",\n        verifiedAt: new Date()\n      });\n\n      res.json({ wallet });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Failed to connect wallet\" });\n    }\n  });\n\n  app.get(\"/api/wallet/me\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const wallet = await storage.getUserWallet(req.user!.id);\n      res.json({ wallet });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch wallet\" });\n    }\n  });\n\n  // Solana payment verification\n  const verifySolanaPaymentSchema = z.object({\n    signature: z.string(),\n    expectedAmount: z.number().positive(),\n    recipientAddress: z.string(),\n    contestId: z.string().uuid().optional(),\n    submissionId: z.string().uuid().optional(),\n  });\n\n  app.post(\"/api/payment/verify-solana\", authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    try {\n      const { signature, expectedAmount, recipientAddress, contestId, submissionId } = \n        verifySolanaPaymentSchema.parse(req.body);\n      \n      const userId = req.user!.id;\n\n      // Get user's connected wallet\n      const userWallet = await storage.getUserWallet(userId);\n      if (!userWallet) {\n        return res.status(400).json({ error: \"No wallet connected. Please connect your Solana wallet first.\" });\n      }\n\n      // Check if transaction already used (prevent replay attacks)\n      const existingTx = await storage.getGloryTransactionByHash(signature);\n      if (existingTx) {\n        return res.status(400).json({ error: \"Transaction already verified. Each transaction can only be used once.\" });\n      }\n\n      // Verify transaction on Solana blockchain\n      const txResult = await verifyTransaction(signature);\n\n      if (!txResult.confirmed) {\n        return res.status(400).json({ error: \"Transaction not found or not confirmed on Solana blockchain\" });\n      }\n\n      // Verify payer matches user's connected wallet\n      if (txResult.from !== userWallet.address) {\n        return res.status(400).json({ \n          error: `Transaction payer mismatch. Expected ${userWallet.address}, got ${txResult.from}` \n        });\n      }\n\n      // Verify transaction details\n      if (!txResult.amount || txResult.amount < expectedAmount) {\n        return res.status(400).json({ \n          error: `Insufficient payment amount. Expected ${expectedAmount} SOL, received ${txResult.amount || 0} SOL` \n        });\n      }\n\n      if (txResult.to !== recipientAddress) {\n        return res.status(400).json({ \n          error: \"Payment recipient address mismatch\" \n        });\n      }\n\n      // Record transaction in glory ledger\n      await storage.createGloryTransaction({\n        userId,\n        delta: 0, // Crypto payments don't affect GLORY balance\n        currency: \"SOL\",\n        reason: `Solana payment verified - ${expectedAmount} SOL`,\n        contestId: contestId || null,\n        submissionId: submissionId || null,\n        txHash: signature,\n        metadata: {\n          from: txResult.from,\n          to: txResult.to,\n          amount: txResult.amount,\n          verifiedAt: new Date().toISOString(),\n        }\n      });\n\n      res.json({ \n        success: true, \n        transaction: {\n          signature,\n          amount: txResult.amount,\n          from: txResult.from,\n          to: txResult.to,\n        }\n      });\n    } catch (error) {\n      console.error(\"Solana payment verification error:\", error);\n      res.status(400).json({ \n        error: error instanceof Error ? error.message : \"Failed to verify Solana payment\" \n      });\n    }\n  });\n\n  // Find payment by reference (Solana Pay reference tracking)\n  const findPaymentByReferenceSchema = z.object({\n    reference: z.string(), // Base58 public key\n    expectedAmount: z.number().positive(),\n    recipientAddress: z.string(),\n    contestId: z.string().uuid().optional(),\n    submissionId: z.string().uuid().optional(),\n  });\n\n  app.post(\"/api/payment/find-by-reference\", authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    try {\n      console.log(\"🔍 [PAYMENT] Starting payment verification:\", req.body);\n      \n      const { reference, expectedAmount, recipientAddress, contestId, submissionId } = \n        findPaymentByReferenceSchema.parse(req.body);\n      \n      const userId = req.user!.id;\n      console.log(\"👤 [PAYMENT] User ID:\", userId);\n\n      // Get user's connected wallet\n      const userWallet = await storage.getUserWallet(userId);\n      if (!userWallet) {\n        console.log(\"❌ [PAYMENT] No wallet connected for user:\", userId);\n        return res.status(400).json({ error: \"No wallet connected. Please connect your Solana wallet first.\" });\n      }\n      \n      console.log(\"💼 [PAYMENT] User wallet found:\", userWallet.address);\n\n      // Convert reference string to PublicKey\n      const referenceKey = new PublicKey(reference);\n      console.log(\"🔑 [PAYMENT] Reference key:\", reference);\n\n      // Find transaction using reference  \n      console.log(\"🔎 [PAYMENT] Searching blockchain for reference...\");\n      const signatureInfo = await findReference(solanaConnection, referenceKey);\n      \n      if (!signatureInfo || !signatureInfo.signature) {\n        console.log(\"⚠️ [PAYMENT] No transaction found for reference\");\n        return res.json({ found: false, message: \"Payment not found yet. Please complete the transaction in your wallet.\" });\n      }\n\n      console.log(\"✅ [PAYMENT] Transaction found:\", signatureInfo.signature);\n\n      const signature = signatureInfo.signature;\n\n      // Check if transaction already processed\n      console.log(\"🔄 [PAYMENT] Checking if transaction already processed...\");\n      const existingTx = await storage.getGloryTransactionByHash(signature);\n      if (existingTx) {\n        console.log(\"ℹ️ [PAYMENT] Transaction already processed:\", signature);\n        return res.json({ \n          found: true, \n          alreadyProcessed: true,\n          success: true,\n          txHash: signature,\n          message: \"Payment already verified\" \n        });\n      }\n\n      // Verify transaction details\n      console.log(\"🔍 [PAYMENT] Verifying transaction details...\");\n      const txResult = await verifyTransaction(signature);\n      console.log(\"📊 [PAYMENT] Transaction verification result:\", txResult);\n\n      if (!txResult.confirmed) {\n        console.log(\"⚠️ [PAYMENT] Transaction not yet confirmed\");\n        return res.json({ found: false, message: \"Transaction found but not yet confirmed\" });\n      }\n\n      // Verify payer matches user's connected wallet\n      console.log(\"👤 [PAYMENT] Verifying payer:\", {\n        expected: userWallet.address,\n        actual: txResult.from,\n        match: txResult.from === userWallet.address\n      });\n      if (txResult.from !== userWallet.address) {\n        console.log(\"❌ [PAYMENT] Payer mismatch!\");\n        return res.status(400).json({ \n          error: `Transaction payer mismatch. Expected ${userWallet.address}, got ${txResult.from}` \n        });\n      }\n\n      // Verify transaction details\n      console.log(\"💰 [PAYMENT] Verifying amount:\", {\n        expected: expectedAmount,\n        actual: txResult.amount,\n        sufficient: txResult.amount && txResult.amount >= expectedAmount\n      });\n      if (!txResult.amount || txResult.amount < expectedAmount) {\n        console.log(\"❌ [PAYMENT] Insufficient amount!\");\n        return res.status(400).json({ \n          error: `Insufficient payment amount. Expected ${expectedAmount} SOL, received ${txResult.amount || 0} SOL` \n        });\n      }\n\n      console.log(\"🎯 [PAYMENT] Verifying recipient:\", {\n        expected: recipientAddress,\n        actual: txResult.to,\n        match: txResult.to === recipientAddress\n      });\n      if (txResult.to !== recipientAddress) {\n        console.log(\"❌ [PAYMENT] Recipient mismatch!\");\n        return res.status(400).json({ \n          error: \"Payment recipient address mismatch\" \n        });\n      }\n\n      console.log(\"✅ [PAYMENT] All verifications passed!\");\n\n      // Record transaction in glory ledger\n      console.log(\"📝 [PAYMENT] Recording transaction in ledger...\");\n      const ledgerEntry = await storage.createGloryTransaction({\n        userId,\n        delta: 0, // Crypto payments don't affect GLORY balance\n        currency: \"SOL\",\n        reason: `Solana payment verified via reference - ${expectedAmount} SOL`,\n        contestId: contestId || null,\n        submissionId: submissionId || null,\n        txHash: signature,\n        metadata: {\n          reference,\n          from: txResult.from,\n          to: txResult.to,\n          amount: txResult.amount,\n          verifiedAt: new Date().toISOString(),\n        }\n      });\n\n      console.log(\"✅ [PAYMENT] Payment verification completed successfully!\", {\n        txHash: signature,\n        amount: txResult.amount,\n        ledgerEntryId: ledgerEntry.id\n      });\n\n      res.json({ \n        found: true,\n        alreadyProcessed: false,\n        success: true, \n        txHash: signature,\n        transaction: {\n          signature,\n          amount: txResult.amount,\n          from: txResult.from,\n          to: txResult.to,\n        }\n      });\n    } catch (error) {\n      console.error(\"💥 [PAYMENT] Payment verification failed:\", error);\n      \n      // Handle specific errors\n      if (error instanceof Error) {\n        console.log(\"🔍 [PAYMENT] Error details:\", {\n          name: error.name,\n          message: error.message,\n          stack: error.stack?.slice(0, 200)\n        });\n        \n        if (error.message.includes(\"not found\")) {\n          return res.json({ found: false, message: \"Payment not found yet. Please complete the transaction.\" });\n        }\n      }\n      \n      res.status(400).json({ \n        error: error instanceof Error ? error.message : \"Failed to find payment\" \n      });\n    }\n  });\n\n  // Cashout routes\n  app.post(\"/api/cashout/request\", authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    try {\n      const { withdrawalAddress, amountGlory, tokenType } = createCashoutRequestSchema.parse(req.body);\n      const userId = req.user!.id;\n\n      // Check user balance\n      const user = await storage.getUser(userId);\n      if (!user || user.gloryBalance < amountGlory) {\n        return res.status(400).json({ error: \"Insufficient GLORY balance\" });\n      }\n\n      // Calculate token amount (for MVP, use 1:1 ratio or configure exchange rate)\n      const exchangeRate = 1; // 1 GLORY = 1 USDC (adjust as needed)\n      const amountToken = (amountGlory * exchangeRate).toString();\n\n      // Create cashout request\n      const request = await storage.createCashoutRequest({\n        userId,\n        withdrawalAddress,\n        amountGlory,\n        amountToken,\n        tokenType: tokenType || \"USDC\",\n        status: \"pending\"\n      });\n\n      // Create event log\n      await storage.createCashoutEvent({\n        cashoutRequestId: request.id,\n        fromStatus: \"created\",\n        toStatus: \"pending\",\n        actorUserId: userId,\n        notes: \"Cashout request created\"\n      });\n\n      res.json({ request });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Failed to create cashout request\" });\n    }\n  });\n\n  app.get(\"/api/cashout/requests\", authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    try {\n      const requests = await storage.getCashoutRequests({ userId: req.user!.id });\n      res.json({ requests });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch cashout requests\" });\n    }\n  });\n\n  app.get(\"/api/cashout/requests/:id\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const request = await storage.getCashoutRequest(req.params.id);\n      if (!request) {\n        return res.status(404).json({ error: \"Cashout request not found\" });\n      }\n\n      // Check if user owns the request or is admin\n      if (request.userId !== req.user!.id && req.user!.role !== \"admin\") {\n        return res.status(403).json({ error: \"Unauthorized\" });\n      }\n\n      const events = await storage.getCashoutEvents(request.id);\n      res.json({ request, events });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch cashout request\" });\n    }\n  });\n\n  // Contest routes\n  app.get(\"/api/contests\", async (req, res) => {\n    try {\n      const { status } = req.query;\n      const contests = await storage.getContests(status ? { status: status as string } : undefined);\n      \n      // Auto-end contests that have passed their endAt time\n      const now = new Date();\n      const updatedContests = await Promise.all(\n        contests.map(async (contest) => {\n          if (contest.status === \"active\" && new Date(contest.endAt) < now) {\n            const updated = await storage.updateContest(contest.id, { status: \"ended\" });\n            return updated || contest;\n          }\n          return contest;\n        })\n      );\n      \n      // Filter out contests that were auto-ended if user requested a specific status\n      const filteredContests = status \n        ? updatedContests.filter(contest => contest.status === status)\n        : updatedContests;\n      \n      // Flatten prizeDistribution from config for frontend\n      const contestsWithPrizes = filteredContests.map(contest => ({\n        ...contest,\n        prizeDistribution: (contest.config as any)?.prizeDistribution || []\n      }));\n      \n      res.json(contestsWithPrizes);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch contests\" });\n    }\n  });\n\n  app.get(\"/api/contests/featured\", async (req, res) => {\n    try {\n      const contests = await storage.getContests({ status: \"active\" });\n      const featuredContest = contests.find(contest => contest.isFeatured === true);\n      \n      if (!featuredContest) {\n        return res.status(404).json({ error: \"No featured contest found\" });\n      }\n\n      // Auto-end if expired\n      const now = new Date();\n      if (new Date(featuredContest.endAt) < now) {\n        const updated = await storage.updateContest(featuredContest.id, { status: \"ended\" });\n        if (updated) {\n          return res.status(404).json({ error: \"Featured contest has ended\" });\n        }\n      }\n\n      res.json({\n        ...featuredContest,\n        prizeDistribution: (featuredContest.config as any)?.prizeDistribution || []\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch featured contest\" });\n    }\n  });\n\n  app.get(\"/api/contests/:id\", async (req, res) => {\n    try {\n      let contest = await storage.getContest(req.params.id);\n      if (!contest) {\n        return res.status(404).json({ error: \"Contest not found\" });\n      }\n\n      // Auto-end contest if it has passed its endAt time\n      const now = new Date();\n      if (contest.status === \"active\" && new Date(contest.endAt) < now) {\n        const updated = await storage.updateContest(contest.id, { status: \"ended\" });\n        contest = updated || contest;\n      }\n\n      // Get top 10 submissions for this contest\n      const topSubmissions = await storage.getTopSubmissionsByContest(contest.id, 10);\n      \n      res.json({\n        ...contest,\n        prizeDistribution: (contest.config as any)?.prizeDistribution || [],\n        topSubmissions\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch contest\" });\n    }\n  });\n\n  app.post(\"/api/admin/contests\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const contestData = insertContestSchema.parse(req.body);\n      const contest = await storage.createContest(contestData);\n\n      // Log admin action\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"CREATE_CONTEST\",\n        meta: { contestId: contest.id, title: contest.title }\n      });\n\n      res.status(201).json(contest);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid input\" });\n    }\n  });\n\n  app.patch(\"/api/admin/contests/:id\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      let updateData = { ...req.body };\n      \n      // Convert date strings to Date objects for Drizzle\n      if (updateData.startAt) {\n        updateData.startAt = new Date(updateData.startAt);\n      }\n      if (updateData.endAt) {\n        updateData.endAt = new Date(updateData.endAt);\n      }\n      \n      // If no cover image is provided or it's explicitly set to null/empty, use top voted submission\n      if (!updateData.coverImageUrl || updateData.coverImageUrl === '') {\n        const topSubmissions = await storage.getTopSubmissionsByContest(req.params.id, 1);\n        if (topSubmissions.length > 0 && topSubmissions[0].type === 'image') {\n          updateData.coverImageUrl = topSubmissions[0].mediaUrl;\n        }\n      }\n      \n      const updatedContest = await storage.updateContest(req.params.id, updateData);\n      if (!updatedContest) {\n        return res.status(404).json({ error: \"Contest not found\" });\n      }\n\n      // Reschedule automatic end if endAt was updated and contest is active\n      if (updateData.endAt && updatedContest.status === \"active\") {\n        contestScheduler.rescheduleContest(updatedContest.id, updatedContest.endAt);\n      }\n\n      // Log admin action\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"UPDATE_CONTEST\",\n        meta: { contestId: updatedContest.id, updates: req.body }\n      });\n\n      res.json(updatedContest);\n    } catch (error) {\n      console.error(\"Error updating contest:\", error);\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid input\" });\n    }\n  });\n\n  app.patch(\"/api/admin/contests/:id/activate\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const contest = await storage.getContest(req.params.id);\n      if (!contest) {\n        return res.status(404).json({ error: \"Contest not found\" });\n      }\n\n      if (contest.status !== \"draft\") {\n        return res.status(400).json({ error: \"Only draft contests can be activated\" });\n      }\n\n      // Update contest status to active\n      const updatedContest = await storage.updateContest(contest.id, { status: \"active\" });\n\n      // Schedule automatic end for this contest\n      if (updatedContest && updatedContest.endAt) {\n        contestScheduler.scheduleContestEnd(updatedContest.id, updatedContest.endAt);\n      }\n\n      // Log admin action\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"ACTIVATE_CONTEST\",\n        meta: { contestId: contest.id, title: contest.title }\n      });\n\n      res.json({ message: \"Contest activated successfully\", contest: updatedContest });\n    } catch (error) {\n      console.error(\"Error activating contest:\", error);\n      res.status(500).json({ \n        error: \"Failed to activate contest\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  app.post(\"/api/admin/contests/:id/end\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const contest = await storage.getContest(req.params.id);\n      if (!contest) {\n        return res.status(404).json({ error: \"Contest not found\" });\n      }\n\n      if (contest.status !== \"active\") {\n        return res.status(400).json({ error: \"Contest is not active\" });\n      }\n\n      // Cancel any scheduled automatic distribution\n      contestScheduler.cancelJob(contest.id);\n\n      // Distribute rewards using transaction-like approach\n      await storage.distributeContestRewards(contest.id);\n\n      // Log admin action\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"END_CONTEST\",\n        meta: { contestId: contest.id, prizePool: contest.prizeGlory }\n      });\n\n      res.json({ message: \"Contest ended and rewards distributed successfully\" });\n    } catch (error) {\n      console.error(\"Error ending contest:\", error);\n      res.status(500).json({ \n        error: \"Failed to end contest and distribute rewards\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  app.delete(\"/api/admin/contests/:id\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const contest = await storage.getContest(req.params.id);\n      if (!contest) {\n        return res.status(404).json({ error: \"Contest not found\" });\n      }\n\n      await storage.deleteContest(req.params.id);\n\n      // Log admin action\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"DELETE_CONTEST\",\n        meta: { contestId: contest.id, title: contest.title }\n      });\n\n      res.json({ message: \"Contest deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting contest:\", error);\n      res.status(500).json({ \n        error: \"Failed to delete contest\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Bulk activate contests\n  app.patch(\"/api/admin/contests/bulk/activate\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { contestIds } = z.object({ contestIds: z.array(z.string()).min(1) }).parse(req.body);\n      \n      let updatedCount = 0;\n      const updatedContests = [];\n      \n      for (const contestId of contestIds) {\n        const contest = await storage.getContest(contestId);\n        if (contest && contest.status === \"draft\") {\n          const updated = await storage.updateContest(contestId, { status: \"active\" });\n          if (updated) {\n            updatedCount++;\n            updatedContests.push({ id: updated.id, title: updated.title });\n            // Schedule automatic end for each activated contest\n            if (updated.endAt) {\n              contestScheduler.scheduleContestEnd(updated.id, updated.endAt);\n            }\n          }\n        }\n      }\n\n      // Log admin action\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"BULK_ACTIVATE_CONTESTS\",\n        meta: { contestIds, updatedContests, updatedCount }\n      });\n\n      res.json({ success: true, updatedCount, message: `Successfully activated ${updatedCount} contests` });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid input\" });\n    }\n  });\n\n  // Bulk end and distribute contests\n  app.post(\"/api/admin/contests/bulk/end\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { contestIds } = z.object({ contestIds: z.array(z.string()).min(1) }).parse(req.body);\n      \n      let endedCount = 0;\n      const endedContests = [];\n      const errors = [];\n      \n      for (const contestId of contestIds) {\n        try {\n          const contest = await storage.getContest(contestId);\n          if (contest && contest.status === \"active\") {\n            // Cancel any scheduled automatic distribution\n            contestScheduler.cancelJob(contestId);\n            \n            await storage.distributeContestRewards(contestId);\n            endedCount++;\n            endedContests.push({ id: contest.id, title: contest.title, prizeGlory: contest.prizeGlory });\n          }\n        } catch (error) {\n          errors.push({ contestId, error: error instanceof Error ? error.message : \"Unknown error\" });\n        }\n      }\n\n      // Log admin action\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"BULK_END_CONTESTS\",\n        meta: { contestIds, endedContests, endedCount, errors }\n      });\n\n      res.json({ \n        success: true, \n        endedCount, \n        message: `Successfully ended ${endedCount} contests and distributed rewards`,\n        errors: errors.length > 0 ? errors : undefined\n      });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid input\" });\n    }\n  });\n\n  // Bulk delete contests\n  app.delete(\"/api/admin/contests/bulk\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { contestIds } = z.object({ contestIds: z.array(z.string()).min(1) }).parse(req.body);\n      \n      let deletedCount = 0;\n      const deletedContests = [];\n      \n      for (const contestId of contestIds) {\n        const contest = await storage.getContest(contestId);\n        if (contest) {\n          await storage.deleteContest(contestId);\n          deletedCount++;\n          deletedContests.push({ id: contest.id, title: contest.title });\n        }\n      }\n\n      // Log admin action\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"BULK_DELETE_CONTESTS\",\n        meta: { contestIds, deletedContests, deletedCount }\n      });\n\n      res.json({ success: true, deletedCount, message: `Successfully deleted ${deletedCount} contests` });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid input\" });\n    }\n  });\n\n  // Submission routes - optional auth (public can see approved, users can see approved + their own pending)\n  app.get(\"/api/submissions\", async (req: AuthRequest, res) => {\n    try {\n      // Try to authenticate but don't require it\n      const authToken = req.cookies.authToken;\n      let isUserAdmin = false;\n      let currentUserId: string | undefined;\n      \n      if (authToken) {\n        try {\n          const decoded = jwt.verify(authToken, process.env.SESSION_SECRET!) as any;\n          isUserAdmin = decoded.role === \"admin\";\n          currentUserId = decoded.userId;\n        } catch (error) {\n          // Token invalid, treat as unauthenticated\n        }\n      }\n      \n      const { contestId, userId, status, tag, page, limit } = req.query;\n      \n      // Parse pagination parameters\n      const pageNum = page ? parseInt(page as string, 10) : 1;\n      const limitNum = limit ? parseInt(limit as string, 10) : 20;\n      \n      // Validate pagination parameters\n      const validPage = Math.max(1, pageNum);\n      const validLimit = Math.min(Math.max(1, limitNum), 100); // Max 100 items per page\n      \n      // Admins can see all submissions with any status filter\n      if (isUserAdmin) {\n        const submissions = await storage.getSubmissions({\n          contestId: contestId as string | undefined,\n          userId: userId as string | undefined,\n          status: status as string | undefined,\n          tag: tag as string | undefined,\n          page: validPage,\n          limit: validLimit\n        });\n        return res.json(submissions);\n      }\n      \n      // Regular users see approved submissions + their own submissions (any status)\n      const approvedSubmissions = await storage.getSubmissions({\n        contestId: contestId as string | undefined,\n        userId: userId as string | undefined,\n        status: \"approved\",\n        tag: tag as string | undefined,\n        page: validPage,\n        limit: validLimit\n      });\n      \n      // If user is authenticated, also get their own pending/rejected submissions\n      if (currentUserId) {\n        const ownSubmissions = await storage.getSubmissions({\n          contestId: contestId as string | undefined,\n          userId: currentUserId,\n          status: undefined, // Get all statuses for own submissions\n          tag: tag as string | undefined,\n          page: 1,\n          limit: 1000 // Get all user's own submissions without limit\n        });\n        \n        // Merge and deduplicate (approved submissions might already be in the list)\n        const submissionMap = new Map();\n        [...approvedSubmissions, ...ownSubmissions].forEach(sub => {\n          submissionMap.set(sub.id, sub);\n        });\n        \n        // Return merged submissions without additional slicing\n        return res.json(Array.from(submissionMap.values()));\n      }\n      \n      // Unauthenticated users only see approved\n      res.json(approvedSubmissions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch submissions\" });\n    }\n  });\n\n  // Simple file upload endpoint for cover images, etc.\n  app.post(\"/api/upload\", authenticateToken, upload.single(\"file\"), async (req: AuthRequest, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"File is required\" });\n      }\n\n      // Upload file and return URL\n      const uploadResult = await uploadFile(req.file);\n      res.status(200).json({ \n        url: uploadResult.url,\n        thumbnailUrl: uploadResult.thumbnailUrl \n      });\n    } catch (error) {\n      console.error(\"File upload error:\", error);\n      res.status(500).json({ error: \"Failed to upload file\" });\n    }\n  });\n\n  app.post(\"/api/submissions\", authenticateToken, requireApproved, upload.single(\"file\"), async (req: AuthRequest, res) => {\n    try {\n      const { \n        contestId, \n        title, \n        description, \n        type, \n        mediaUrl, \n        thumbnailUrl, \n        paymentTxHash,\n        category,\n        aiModel,\n        prompt,\n        tags,\n        generationId,\n        promptForSale,\n        promptPrice,\n        promptCurrency\n      } = req.body;\n      \n      // Check if either file or mediaUrl is provided (gallery selection)\n      if (!req.file && !mediaUrl) {\n        return res.status(400).json({ error: \"File or mediaUrl is required\" });\n      }\n\n      if (!title || !type) {\n        return res.status(400).json({ error: \"Title and type are required\" });\n      }\n\n      // Contest validation only if contestId is provided\n      let contest = null;\n      if (contestId) {\n        contest = await storage.getContest(contestId);\n        if (!contest) {\n          return res.status(404).json({ error: \"Contest not found\" });\n        }\n\n        if (contest.status !== \"active\") {\n          return res.status(400).json({ error: \"Contest is not accepting submissions\" });\n        }\n\n        // Check contest timing for submissions\n        const now = new Date();\n        if (now < contest.startAt) {\n          return res.status(400).json({ error: \"Contest has not started yet\" });\n        }\n        if (now > contest.endAt) {\n          return res.status(400).json({ error: \"Contest has ended\" });\n        }\n\n        // Check submission deadline from contest config\n        const config = contest.config as any;\n        if (config && config.submissionEndAt) {\n          if (now > new Date(config.submissionEndAt)) {\n            return res.status(400).json({ error: \"Submission deadline has passed\" });\n          }\n        }\n\n        // Validate contest type - check if submission type matches contest allowed type\n        if (config && config.contestType) {\n          const contestType = config.contestType.toLowerCase();\n          const submissionType = type.toLowerCase();\n          \n          if (contestType === 'image' && submissionType !== 'image') {\n            return res.status(400).json({ error: \"This contest only accepts image submissions\" });\n          }\n          if (contestType === 'video' && submissionType !== 'video') {\n            return res.status(400).json({ error: \"This contest only accepts video submissions\" });\n          }\n        }\n\n        // Validate max submissions per user\n        if (config && config.maxSubmissions) {\n          const userSubmissionsCount = await storage.getUserSubmissionsInContest(req.user!.id, contestId);\n          if (userSubmissionsCount >= config.maxSubmissions) {\n            return res.status(400).json({ \n              error: `You have reached the maximum of ${config.maxSubmissions} submission(s) for this contest` \n            });\n          }\n        }\n\n        // Validate file size limit (if uploading new file)\n        if (req.file && config && config.fileSizeLimit) {\n          const fileSizeMB = req.file.size / (1024 * 1024);\n          if (fileSizeMB > config.fileSizeLimit) {\n            return res.status(400).json({ \n              error: `File size exceeds the limit of ${config.fileSizeLimit}MB for this contest` \n            });\n          }\n        }\n\n        // Wallet payment validation for contests requiring crypto payments\n        if (config && config.entryFee && config.entryFeeAmount) {\n          // Smart fallback: if no payment methods configured, allow both balance and wallet for crypto contests\n          const isStandardCrypto = config.entryFeeCurrency && ['SOL', 'USDC'].includes(config.entryFeeCurrency);\n          const defaultMethods = isStandardCrypto ? ['balance', 'wallet'] : ['balance'];\n          const paymentMethods = config.entryFeePaymentMethods || defaultMethods;\n          \n          const allowsBalance = paymentMethods.includes('balance');\n          const allowsWallet = paymentMethods.includes('wallet');\n\n          // If wallet is the only payment method, require verified transaction\n          if (allowsWallet && !allowsBalance) {\n            if (!paymentTxHash) {\n              return res.status(400).json({ \n                error: \"This contest requires wallet payment. Please complete the payment with your Solana wallet.\" \n              });\n            }\n\n            // Verify the transaction exists and is valid\n            const txRecord = await storage.getGloryTransactionByHash(paymentTxHash);\n            if (!txRecord) {\n              return res.status(400).json({ \n                error: \"Payment transaction not verified. Please ensure your payment is confirmed on the blockchain.\" \n              });\n            }\n\n            // Verify transaction is for this contest and user\n            if (txRecord.userId !== req.user!.id || txRecord.contestId !== contestId) {\n              return res.status(400).json({ \n                error: \"Payment transaction verification failed. Transaction does not match contest or user.\" \n              });\n            }\n          }\n          // If balance payment is allowed, check balance (skip if wallet payment provided)\n          else if (allowsBalance && !paymentTxHash) {\n            const user = await storage.getUser(req.user!.id);\n            if (!user) {\n              return res.status(404).json({ error: \"User not found\" });\n            }\n\n            const currency = config.entryFeeCurrency || \"GLORY\";\n            let balance = user.gloryBalance;\n            if (currency === \"SOL\") balance = user.solBalance;\n            else if (currency === \"USDC\") balance = user.usdcBalance;\n\n            if (balance < config.entryFeeAmount) {\n              return res.status(400).json({ \n                error: `Insufficient ${currency} balance. Entry fee is ${config.entryFeeAmount} ${currency}, you have ${balance} ${currency}` \n              });\n            }\n          }\n        }\n      }\n\n      let finalMediaUrl: string;\n      let finalThumbnailUrl: string | null = null;\n      let cloudinaryPublicId: string | null = null;\n      let cloudinaryResourceType: string | null = null;\n      let isGalleryReuse = false;\n\n      // Upload new file or use existing mediaUrl from gallery\n      if (req.file) {\n        const uploadResult = await uploadFile(req.file);\n        finalMediaUrl = uploadResult.url;\n        finalThumbnailUrl = uploadResult.thumbnailUrl || null;\n        cloudinaryPublicId = uploadResult.cloudinaryPublicId || null;\n        cloudinaryResourceType = uploadResult.cloudinaryResourceType || null;\n      } else {\n        // Security: Validate URL belongs to allowed domains and user's storage path\n        const supabaseUrl = process.env.SUPABASE_URL;\n        const cloudinaryCloudName = process.env.CLOUDINARY_CLOUD_NAME;\n        \n        const isSupabase = mediaUrl.includes(supabaseUrl!) && \n                          mediaUrl.includes('pro-edit-images') &&\n                          mediaUrl.includes(req.user!.id);\n        \n        const isCloudinaryAI = mediaUrl.includes('cloudinary.com') && \n                              mediaUrl.includes(cloudinaryCloudName!) &&\n                              mediaUrl.includes('5best-ai-generated');\n        \n        // Verify ownership before copying from temporary storage\n        if (isSupabase) {\n          const pathMatch = mediaUrl.match(/pro-edit-images\\/([^/]+)/);\n          if (!pathMatch || pathMatch[1] !== req.user!.id) {\n            return res.status(403).json({ error: \"Unauthorized: Image does not belong to you\" });\n          }\n        } else if (isCloudinaryAI) {\n          const generations = await storage.getAiGenerations(req.user!.id);\n          const ownsImage = generations.some(gen => gen.imageUrl === mediaUrl);\n          if (!ownsImage) {\n            return res.status(403).json({ error: \"Unauthorized: Image does not belong to you\" });\n          }\n        }\n        \n        if (isSupabase) {\n          // Copy from temporary Supabase to permanent bucket\n          const timestamp = Date.now();\n          const extension = mediaUrl.split('.').pop()?.split('?')[0] || 'png';\n          const destPath = `${req.user!.id}/submissions/${timestamp}.${extension}`;\n          \n          const { url } = await copySupabaseFile(mediaUrl, destPath);\n          finalMediaUrl = url;\n          finalThumbnailUrl = url; // Use Supabase URL directly, no Cloudinary thumbnail needed\n          isGalleryReuse = false;\n        } else if (isCloudinaryAI) {\n          // Copy AI image from temporary folder to permanent folder\n          const { copyCloudinaryFile } = await import(\"./supabase\");\n          const copyResult = await copyCloudinaryFile(mediaUrl, req.user!.id);\n          finalMediaUrl = copyResult.url;\n          finalThumbnailUrl = copyResult.thumbnailUrl;\n          cloudinaryPublicId = copyResult.publicId;\n          cloudinaryResourceType = copyResult.resourceType;\n          isGalleryReuse = false;\n        } else {\n          // Using existing image from permanent gallery - don't delete shared asset\n          finalMediaUrl = mediaUrl;\n          finalThumbnailUrl = thumbnailUrl || null;\n          isGalleryReuse = true;\n          // Note: cloudinaryPublicId stays null to prevent deletion of shared asset\n        }\n      }\n\n      // Capture entry fee at submission time to preserve original amount\n      const config = contest ? (contest.config as any) : null;\n      const entryFeeAmount = config?.entryFee && config?.entryFeeAmount ? String(config.entryFeeAmount) : null;\n      const entryFeeCurrency = entryFeeAmount ? (config?.entryFeeCurrency || \"GLORY\") : null;\n\n      // Parse tags if they're a JSON string (from FormData)\n      let parsedTags: string[] = [];\n      if (tags) {\n        try {\n          parsedTags = typeof tags === 'string' ? JSON.parse(tags) : tags;\n        } catch {\n          parsedTags = [];\n        }\n      }\n\n      // Normalize promptForSale to boolean\n      const isPromptForSale = promptForSale === 'true' || promptForSale === true;\n\n      // Create submission\n      const submission = await storage.createSubmission({\n        userId: req.user!.id,\n        contestId: contestId || null,\n        contestName: contest ? contest.title : null, // Preserve contest name for historical reference\n        type,\n        title,\n        description: description || \"\",\n        mediaUrl: finalMediaUrl,\n        thumbnailUrl: finalThumbnailUrl,\n        cloudinaryPublicId,\n        cloudinaryResourceType,\n        status: \"pending\", // Requires admin approval\n        entryFeeAmount, // Store entry fee amount at submission time\n        entryFeeCurrency, // Store entry fee currency at submission time\n        category: category || null,\n        aiModel: aiModel || null,\n        prompt: prompt || null,\n        generationId: generationId || null,\n        tags: parsedTags,\n        promptForSale: isPromptForSale,\n        promptPrice: isPromptForSale ? (promptPrice || null) : null,\n        promptCurrency: isPromptForSale ? (promptCurrency || 'GLORY') : null\n      });\n\n      // Deduct entry fee AFTER submission is successfully created\n      if (contest && (contest.config as any)?.entryFee && (contest.config as any)?.entryFeeAmount) {\n        const config = contest.config as any;\n        const currency = config.entryFeeCurrency || \"GLORY\";\n        \n        // Deduct from user balance when paying from balance (no paymentTxHash)\n        // If paymentTxHash exists, payment was made via Solana wallet and already verified\n        if (!paymentTxHash) {\n          // createGloryTransaction automatically updates the user balance\n          await storage.createGloryTransaction({\n            userId: req.user!.id,\n            delta: -config.entryFeeAmount,\n            currency,\n            reason: `Entry fee for contest: ${contest.title}`,\n            contestId: contestId || null,\n            submissionId: submission.id\n          });\n        }\n      }\n\n      res.status(201).json(submission);\n    } catch (error) {\n      console.error(\"Submission creation error:\", error);\n      res.status(500).json({ error: \"Failed to create submission\" });\n    }\n  });\n\n  // Save AI-generated image to permanent storage and create submission\n  app.post(\"/api/submissions/save-from-ai\", authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    try {\n      const { imageUrl, title, description } = req.body;\n      \n      if (!imageUrl || !title) {\n        return res.status(400).json({ error: \"imageUrl and title are required\" });\n      }\n\n      const userId = req.user!.id;\n      \n      // Security: Validate URL belongs to allowed domains and user's storage path\n      const supabaseUrl = process.env.SUPABASE_URL;\n      const cloudinaryCloudName = process.env.CLOUDINARY_CLOUD_NAME;\n      \n      const isSupabase = imageUrl.includes(supabaseUrl!) && \n                        imageUrl.includes('pro-edit-images') &&\n                        imageUrl.includes(userId); // Must be user's own folder\n      \n      const isCloudinaryAI = imageUrl.includes('cloudinary.com') && \n                            imageUrl.includes(cloudinaryCloudName!) &&\n                            imageUrl.includes('5best-ai-generated');\n      \n      if (!isSupabase && !isCloudinaryAI) {\n        return res.status(403).json({ error: \"Invalid image URL or unauthorized access\" });\n      }\n      \n      // Additional validation: Verify the image belongs to this user\n      if (isSupabase) {\n        // Extract path and verify it starts with userId\n        const pathMatch = imageUrl.match(/pro-edit-images\\/([^/]+)/);\n        if (!pathMatch || pathMatch[1] !== userId) {\n          return res.status(403).json({ error: \"Unauthorized: Image does not belong to you\" });\n        }\n      } else if (isCloudinaryAI) {\n        // For Cloudinary AI images, verify user owns a generation with this URL\n        const generations = await storage.getAiGenerations(userId);\n        const ownsImage = generations.some(gen => gen.imageUrl === imageUrl);\n        if (!ownsImage) {\n          return res.status(403).json({ error: \"Unauthorized: Image does not belong to you\" });\n        }\n      }\n\n      let permanentUrl: string;\n      let thumbnailUrl: string | null = null;\n      let cloudinaryPublicId: string | null = null;\n      let cloudinaryResourceType: string | null = null;\n\n      if (isSupabase) {\n        // Copy from temporary Supabase bucket to permanent bucket\n        const timestamp = Date.now();\n        const extension = imageUrl.split('.').pop()?.split('?')[0] || 'png';\n        const destPath = `${userId}/submissions/${timestamp}.${extension}`;\n        \n        const { url } = await copySupabaseFile(imageUrl, destPath);\n        permanentUrl = url;\n        \n        // Use Supabase URL directly as thumbnail\n        thumbnailUrl = url;\n      } else {\n        // Copy AI image from temporary folder to permanent folder\n        const { copyCloudinaryFile } = await import(\"./supabase\");\n        const copyResult = await copyCloudinaryFile(imageUrl, userId);\n        permanentUrl = copyResult.url;\n        thumbnailUrl = copyResult.thumbnailUrl;\n        cloudinaryPublicId = copyResult.publicId;\n        cloudinaryResourceType = copyResult.resourceType;\n      }\n\n      // Create submission without contestId and generationId\n      const submission = await storage.createSubmission({\n        userId,\n        contestId: null, // No contest - this is for My Submissions\n        contestName: null,\n        type: \"image\",\n        title,\n        description: description || \"\",\n        mediaUrl: permanentUrl,\n        thumbnailUrl,\n        cloudinaryPublicId,\n        cloudinaryResourceType,\n        status: \"approved\", // Auto-approve since it's user's own gallery\n        entryFeeAmount: null,\n        entryFeeCurrency: null\n      });\n\n      res.status(201).json({ \n        message: \"Image saved to My Submissions\",\n        submission \n      });\n    } catch (error) {\n      console.error(\"Error saving AI image:\", error);\n      res.status(500).json({ error: \"Failed to save image\" });\n    }\n  });\n\n  // Get single submission by ID (public with optional auth)\n  app.get(\"/api/submissions/:id\", async (req: AuthRequest, res) => {\n    try {\n      // Try to authenticate but don't require it\n      const authToken = req.cookies.authToken;\n      let isUserAdmin = false;\n      let currentUserId: string | undefined;\n      \n      if (authToken) {\n        try {\n          const decoded = jwt.verify(authToken, process.env.SESSION_SECRET!) as any;\n          isUserAdmin = decoded.role === \"admin\";\n          currentUserId = decoded.userId;\n        } catch (error) {\n          // Token invalid, treat as unauthenticated\n        }\n      }\n\n      const submission = await storage.getSubmission(req.params.id);\n      \n      if (!submission) {\n        return res.status(404).json({ error: \"Submission not found\" });\n      }\n\n      // Check access permissions\n      const isOwnSubmission = currentUserId === submission.userId;\n      const isApproved = submission.status === \"approved\";\n\n      // Allow access if: admin, own submission, or approved submission\n      if (!isUserAdmin && !isOwnSubmission && !isApproved) {\n        return res.status(404).json({ error: \"Submission not found\" });\n      }\n\n      // Get user votes if authenticated\n      let hasVoted = false;\n      let hasPurchasedPrompt = false;\n      if (currentUserId) {\n        const vote = await storage.getVote(currentUserId, submission.id);\n        hasVoted = !!vote;\n        \n        // Check if user has purchased this prompt\n        if (submission.promptForSale) {\n          hasPurchasedPrompt = await storage.checkIfPromptPurchased(currentUserId, submission.id);\n        }\n      }\n\n      // Get user and contest info\n      const user = await storage.getUser(submission.userId);\n      let contest = null;\n      if (submission.contestId) {\n        contest = await storage.getContest(submission.contestId);\n      }\n\n      const enrichedSubmission = {\n        ...submission,\n        hasVoted,\n        hasPurchasedPrompt,\n        voteCount: submission.votesCount,\n        user: user ? {\n          id: user.id,\n          username: user.username\n        } : null,\n        contest: contest ? {\n          id: contest.id,\n          title: contest.title,\n          slug: contest.slug\n        } : null\n      };\n\n      res.json(enrichedSubmission);\n    } catch (error) {\n      console.error(\"Error fetching submission:\", error);\n      res.status(500).json({ error: \"Failed to fetch submission\" });\n    }\n  });\n\n  // User update own submission\n  app.patch(\"/api/submissions/:id\", authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    try {\n      const submission = await storage.getSubmission(req.params.id);\n      if (!submission) {\n        return res.status(404).json({ error: \"Submission not found\" });\n      }\n\n      // Check if user owns the submission\n      if (submission.userId !== req.user!.id) {\n        return res.status(403).json({ error: \"Not authorized to update this submission\" });\n      }\n\n      // Validate update data\n      const updateSchema = z.object({\n        title: z.string().min(1).max(255).optional(),\n        description: z.string().max(5000).optional(),\n        tags: z.array(z.string()).optional(),\n      });\n\n      const validatedData = updateSchema.parse(req.body);\n      const updatedSubmission = await storage.updateSubmission(req.params.id, validatedData);\n      res.json(updatedSubmission);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid input\", details: error.errors });\n      }\n      console.error(\"Error updating submission:\", error);\n      res.status(500).json({ error: \"Failed to update submission\" });\n    }\n  });\n\n  // User delete own submission\n  app.delete(\"/api/submissions/:id\", authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    try {\n      const submission = await storage.getSubmission(req.params.id);\n      if (!submission) {\n        return res.status(404).json({ error: \"Submission not found\" });\n      }\n\n      // Check if user owns the submission\n      if (submission.userId !== req.user!.id) {\n        return res.status(403).json({ error: \"Not authorized to delete this submission\" });\n      }\n\n      // Delete the submission media files if they exist\n      if (submission.mediaUrl) {\n        // Check if legacy submission (Cloudinary URL but no stored publicId)\n        const isLegacy = submission.mediaUrl.includes('cloudinary.com') && !submission.cloudinaryPublicId;\n        \n        await deleteFile(\n          submission.mediaUrl, \n          submission.cloudinaryPublicId || undefined,\n          submission.cloudinaryResourceType || undefined,\n          isLegacy\n        ).catch(err => console.error(\"Failed to delete media:\", err));\n      }\n\n      await storage.deleteSubmission(req.params.id);\n      res.json({ message: \"Submission deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting submission:\", error);\n      res.status(500).json({ error: \"Failed to delete submission\" });\n    }\n  });\n\n  // Admin get all submissions\n  app.get(\"/api/admin/submissions\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { contestId, userId, status, page, limit } = req.query;\n      \n      const filters: any = {};\n      if (contestId) filters.contestId = contestId as string;\n      if (userId) filters.userId = userId as string;\n      if (status && status !== 'all') filters.status = status as string;\n      if (page) filters.page = parseInt(page as string, 10);\n      if (limit) filters.limit = parseInt(limit as string, 10);\n      \n      const submissions = await storage.getSubmissions(filters);\n      res.json(submissions);\n    } catch (error) {\n      console.error(\"Error fetching admin submissions:\", error);\n      res.status(500).json({ error: \"Failed to fetch submissions\" });\n    }\n  });\n\n  app.patch(\"/api/admin/submissions/:id\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { status } = updateSubmissionStatusSchema.parse(req.body);\n      const updatedSubmission = await storage.updateSubmission(req.params.id, { status });\n      \n      if (!updatedSubmission) {\n        return res.status(404).json({ error: \"Submission not found\" });\n      }\n\n      // Refund entry fee if submission is rejected\n      if (status === \"rejected\") {\n        await refundEntryFee(req.params.id);\n      }\n\n      // Log admin action\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"UPDATE_SUBMISSION_STATUS\",\n        meta: { submissionId: updatedSubmission.id, status, userId: updatedSubmission.userId }\n      });\n\n      res.json(updatedSubmission);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid input\" });\n    }\n  });\n\n  app.delete(\"/api/admin/submissions/:id\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const submission = await storage.getSubmission(req.params.id);\n      if (!submission) {\n        return res.status(404).json({ error: \"Submission not found\" });\n      }\n\n      // Delete the file from storage (Cloudinary or local)\n      const isLegacy = submission.mediaUrl.includes('cloudinary.com') && !submission.cloudinaryPublicId;\n      \n      await deleteFile(\n        submission.mediaUrl,\n        submission.cloudinaryPublicId || undefined,\n        submission.cloudinaryResourceType || undefined,\n        isLegacy\n      );\n\n      // Delete from database\n      await storage.deleteSubmission(req.params.id);\n\n      // Log admin action\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"DELETE_SUBMISSION\",\n        meta: { submissionId: submission.id, userId: submission.userId }\n      });\n\n      res.json({ message: \"Submission deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting submission:\", error);\n      res.status(500).json({ \n        error: \"Failed to delete submission\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Bulk approve submissions\n  app.patch(\"/api/admin/submissions/bulk/approve\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { submissionIds } = bulkSubmissionIdsSchema.parse(req.body);\n      \n      let count = 0;\n      for (const id of submissionIds) {\n        const updated = await storage.updateSubmission(id, { status: \"approved\" });\n        if (updated) {\n          count++;\n          await storage.createAuditLog({\n            actorUserId: req.user!.id,\n            action: \"UPDATE_SUBMISSION_STATUS\",\n            meta: { submissionId: id, status: \"approved\", userId: updated.userId }\n          });\n        }\n      }\n      \n      res.json({ count, message: `${count} submission(s) approved` });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid input\" });\n    }\n  });\n\n  // Bulk reject submissions\n  app.patch(\"/api/admin/submissions/bulk/reject\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { submissionIds } = bulkSubmissionIdsSchema.parse(req.body);\n      \n      let count = 0;\n      for (const id of submissionIds) {\n        const updated = await storage.updateSubmission(id, { status: \"rejected\" });\n        if (updated) {\n          count++;\n          // Refund entry fee\n          await refundEntryFee(id);\n          \n          await storage.createAuditLog({\n            actorUserId: req.user!.id,\n            action: \"UPDATE_SUBMISSION_STATUS\",\n            meta: { submissionId: id, status: \"rejected\", userId: updated.userId }\n          });\n        }\n      }\n      \n      res.json({ count, message: `${count} submission(s) rejected` });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid input\" });\n    }\n  });\n\n  // Bulk delete submissions\n  app.delete(\"/api/admin/submissions/bulk\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { submissionIds } = bulkSubmissionIdsSchema.parse(req.body);\n      \n      let count = 0;\n      for (const id of submissionIds) {\n        const submission = await storage.getSubmission(id);\n        if (submission) {\n          // Delete files from storage (Cloudinary or local)\n          const isLegacy = submission.mediaUrl.includes('cloudinary.com') && !submission.cloudinaryPublicId;\n          \n          await deleteFile(\n            submission.mediaUrl,\n            submission.cloudinaryPublicId || undefined,\n            submission.cloudinaryResourceType || undefined,\n            isLegacy\n          );\n          \n          // Delete from database\n          await storage.deleteSubmission(id);\n          \n          // Log admin action\n          await storage.createAuditLog({\n            actorUserId: req.user!.id,\n            action: \"DELETE_SUBMISSION\",\n            meta: { submissionId: id, userId: submission.userId }\n          });\n          \n          count++;\n        }\n      }\n      \n      res.json({ count, message: `${count} submission(s) deleted` });\n    } catch (error) {\n      console.error(\"Error deleting submissions:\", error);\n      res.status(500).json({ \n        error: \"Failed to delete submissions\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Admin cleanup broken submissions\n  app.post(\"/api/admin/cleanup-broken-submissions\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const allSubmissions = await storage.getSubmissions({ status: \"approved\" });\n      const brokenSubmissions: string[] = [];\n      \n      // Check each submission's media URL\n      for (const submission of allSubmissions) {\n        try {\n          // Try to fetch the URL to see if it exists\n          const response = await fetch(submission.mediaUrl, { method: 'HEAD' });\n          if (!response.ok) {\n            brokenSubmissions.push(submission.id);\n          }\n        } catch (error) {\n          // URL is broken or unreachable\n          brokenSubmissions.push(submission.id);\n        }\n      }\n      \n      // Delete broken submissions\n      let deletedCount = 0;\n      for (const id of brokenSubmissions) {\n        const submission = await storage.getSubmission(id);\n        if (submission) {\n          await storage.deleteSubmission(id);\n          await storage.createAuditLog({\n            actorUserId: req.user!.id,\n            action: \"DELETE_SUBMISSION\",\n            meta: { submissionId: id, userId: submission.userId, reason: \"broken_media_url\" }\n          });\n          deletedCount++;\n        }\n      }\n      \n      res.json({ \n        message: `Cleanup completed: ${deletedCount} broken submission(s) removed`,\n        deletedCount,\n        brokenSubmissionIds: brokenSubmissions\n      });\n    } catch (error) {\n      console.error(\"Error during cleanup:\", error);\n      res.status(500).json({ \n        error: \"Failed to cleanup broken submissions\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // User delete their own submission\n  app.delete(\"/api/submissions/:id\", authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    try {\n      const submission = await storage.getSubmission(req.params.id);\n      if (!submission) {\n        return res.status(404).json({ error: \"Submission not found\" });\n      }\n\n      // Check if user owns this submission\n      if (submission.userId !== req.user!.id) {\n        return res.status(403).json({ error: \"You can only delete your own submissions\" });\n      }\n\n      // Delete the file from storage (Cloudinary or local)\n      const isLegacy = submission.mediaUrl.includes('cloudinary.com') && !submission.cloudinaryPublicId;\n      \n      await deleteFile(\n        submission.mediaUrl,\n        submission.cloudinaryPublicId || undefined,\n        submission.cloudinaryResourceType || undefined,\n        isLegacy\n      );\n\n      // Delete from database\n      await storage.deleteSubmission(req.params.id);\n\n      res.json({ message: \"Submission deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting submission:\", error);\n      res.status(500).json({ \n        error: \"Failed to delete submission\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Voting routes\n  app.post(\"/api/votes\", authenticateOptional, async (req: AuthRequest, res) => {\n    try {\n      const { submissionId } = voteSubmissionSchema.parse(req.body);\n      \n      // Check if we need a user ID for voting\n      let userId: string;\n      if (req.user) {\n        userId = req.user.id;\n      } else {\n        // For anonymous voting, use IP address as identifier\n        const clientIP = req.ip || req.connection.remoteAddress || 'anonymous';\n        userId = `anonymous:${clientIP}`;\n      }\n\n      // Check if submission exists\n      const submission = await storage.getSubmission(submissionId);\n      if (!submission) {\n        return res.status(404).json({ error: \"Submission not found\" });\n      }\n\n      if (submission.status !== \"approved\") {\n        return res.status(400).json({ error: \"Cannot vote on unapproved submission\" });\n      }\n\n      // Check if user is voting for their own submission (only for authenticated users)\n      if (req.user && submission.userId === req.user.id) {\n        return res.status(400).json({ error: \"Cannot vote for your own submission\" });\n      }\n\n      // Get contest to check voting rules and timing\n      let contest = null;\n      if (submission.contestId) {\n        contest = await storage.getContest(submission.contestId);\n        if (!contest) {\n          return res.status(404).json({ error: \"Contest not found\" });\n        }\n\n        // Check if contest is active\n        if (contest.status !== \"active\") {\n          return res.status(400).json({ error: \"Contest is not active\" });\n        }\n\n        // Check contest timing\n        const now = new Date();\n        if (now < contest.startAt) {\n          return res.status(400).json({ error: \"Contest has not started yet\" });\n        }\n        if (now > contest.endAt) {\n          return res.status(400).json({ error: \"Contest has ended\" });\n        }\n\n        // Check voting timing from contest config\n        const config = contest.config as any;\n        if (config) {\n          if (config.votingStartAt && now < new Date(config.votingStartAt)) {\n            return res.status(400).json({ error: \"Voting has not started yet\" });\n          }\n          if (config.votingEndAt && now > new Date(config.votingEndAt)) {\n            return res.status(400).json({ error: \"Voting period has ended\" });\n          }\n          if (config.submissionEndAt && config.submissionEndAt !== config.votingEndAt && now > new Date(config.submissionEndAt)) {\n            // Allow voting even after submission deadline if voting end is different\n          }\n\n          // Check voting methods restrictions\n          if (config.votingMethods && config.votingMethods.length > 0) {\n            let canVote = false;\n            \n            // Check if public voting is allowed (anonymous users can vote)\n            if (config.votingMethods.includes('public') && !req.user) {\n              canVote = true;\n            } \n            // Check if logged users voting is allowed\n            else if (config.votingMethods.includes('logged_users') && req.user) {\n              canVote = true;\n            } \n            // Check if jury voting is allowed (requires authentication)\n            else if (config.votingMethods.includes('jury') && req.user && config.juryMembers && config.juryMembers.includes(req.user.id)) {\n              canVote = true;\n            }\n            \n            if (!canVote) {\n              if (!req.user) {\n                return res.status(401).json({ \n                  error: \"This contest requires authentication to vote\" \n                });\n              } else {\n                return res.status(403).json({ \n                  error: \"You are not authorized to vote in this contest\" \n                });\n              }\n            }\n          }\n\n          // Check jury voting restrictions (only if jury is the ONLY voting method)\n          if (config.votingMethods && config.votingMethods.length === 1 && config.votingMethods.includes('jury')) {\n            // If ONLY jury voting is enabled, check if user is in jury list\n            if (config.juryMembers && Array.isArray(config.juryMembers)) {\n              if (!req.user || !config.juryMembers.includes(req.user.id)) {\n                return res.status(403).json({ \n                  error: \"Only jury members can vote in this contest\" \n                });\n              }\n            }\n          }\n        }\n\n        // Check contest-specific voting frequency rules\n        if (config && config.periodDurationHours) {\n          const periodStart = new Date(now.getTime() - (config.periodDurationHours * 60 * 60 * 1000));\n          \n          // 1. Check if user already voted for THIS submission in period\n          const votesForThisSubmission = await storage.getVoteCountForSubmissionInPeriod(userId, submissionId, periodStart);\n          if (votesForThisSubmission >= 1) {\n            return res.status(400).json({ \n              error: `You have already voted for this submission in the last ${config.periodDurationHours} hours`,\n              nextVoteAllowed: new Date(now.getTime() + (config.periodDurationHours * 60 * 60 * 1000))\n            });\n          }\n          \n          // 2. Check if user reached vote limit for CONTEST in period (if limit > 0)\n          if (config.votesPerUserPerPeriod > 0) {\n            const totalVotesInPeriod = await storage.getUserTotalVotesInContestInPeriod(userId, submission.contestId!, periodStart);\n            \n            if (totalVotesInPeriod >= config.votesPerUserPerPeriod) {\n              return res.status(400).json({ \n                error: `You can only vote ${config.votesPerUserPerPeriod} time(s) in this contest every ${config.periodDurationHours} hours`\n              });\n            }\n          }\n        }\n\n        // Check total votes limit for contest\n        if (config && config.totalVotesPerUser && config.totalVotesPerUser > 0) {\n          const totalVotesInContest = await storage.getUserTotalVotesInContest(userId, submission.contestId!);\n          \n          if (totalVotesInContest >= config.totalVotesPerUser) {\n            return res.status(400).json({ \n              error: `You have reached the maximum of ${config.totalVotesPerUser} votes for this contest`\n            });\n          }\n        }\n      }\n\n      // Note: Multiple votes per submission are now allowed based on contest votesPerUserPerPeriod config\n      // The period-based check above enforces the voting frequency rules\n\n      // Check general rate limit (30 votes per hour per user) - keeping as backup\n      const rateLimitKey = `vote:${userId}`;\n      if (!votingRateLimiter.isAllowed(rateLimitKey)) {\n        return res.status(429).json({ \n          error: \"Rate limit exceeded. Maximum 30 votes per hour.\",\n          resetTime: votingRateLimiter.getResetTime(rateLimitKey)\n        });\n      }\n\n      // Create vote\n      const vote = await storage.createVote({ userId, submissionId });\n\n      // Calculate remaining information for response\n      let remainingInfo: any = {\n        remainingVotes: votingRateLimiter.getRemainingRequests(rateLimitKey)\n      };\n\n      if (contest && submission.contestId) {\n        const config = contest.config as any;\n        if (config && config.totalVotesPerUser && config.totalVotesPerUser > 0) {\n          const totalVotesInContest = await storage.getUserTotalVotesInContest(userId, submission.contestId);\n          remainingInfo.remainingContestVotes = config.totalVotesPerUser - totalVotesInContest;\n        }\n      }\n\n      res.status(201).json({ \n        message: \"Vote recorded successfully\",\n        ...remainingInfo\n      });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid input\" });\n    }\n  });\n\n  // Get voting status for a user and submission/contest\n  app.get(\"/api/votes/status\", authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    try {\n      const { submissionId, contestId } = req.query;\n      const userId = req.user!.id;\n\n      if (!submissionId && !contestId) {\n        return res.status(400).json({ error: \"Either submissionId or contestId is required\" });\n      }\n\n      let contest = null;\n      let submission = null;\n\n      if (submissionId) {\n        submission = await storage.getSubmission(submissionId as string);\n        if (!submission) {\n          return res.status(404).json({ error: \"Submission not found\" });\n        }\n        if (submission.contestId) {\n          contest = await storage.getContest(submission.contestId);\n        }\n      } else if (contestId) {\n        contest = await storage.getContest(contestId as string);\n        if (!contest) {\n          return res.status(404).json({ error: \"Contest not found\" });\n        }\n      }\n\n      const now = new Date();\n      const response: any = {\n        canVote: true,\n        reasons: [],\n        votingStatus: {\n          generalRateLimit: votingRateLimiter.getRemainingRequests(`vote:${userId}`)\n        }\n      };\n\n      // Check general conditions\n      if (submission && submission.userId === userId) {\n        response.canVote = false;\n        response.reasons.push(\"Cannot vote for your own submission\");\n      }\n\n      if (submission && submission.status !== \"approved\") {\n        response.canVote = false;\n        response.reasons.push(\"Submission is not approved for voting\");\n      }\n\n      // Check contest-specific conditions\n      if (contest) {\n        if (contest.status !== \"active\") {\n          response.canVote = false;\n          response.reasons.push(\"Contest is not active\");\n        }\n\n        if (now < contest.startAt) {\n          response.canVote = false;\n          response.reasons.push(\"Contest has not started yet\");\n        }\n\n        if (now > contest.endAt) {\n          response.canVote = false;\n          response.reasons.push(\"Contest has ended\");\n        }\n\n        const config = contest.config as any;\n        if (config) {\n          // Check voting period\n          if (config.votingStartAt && now < new Date(config.votingStartAt)) {\n            response.canVote = false;\n            response.reasons.push(\"Voting has not started yet\");\n            response.votingStartsAt = config.votingStartAt;\n          }\n\n          if (config.votingEndAt && now > new Date(config.votingEndAt)) {\n            response.canVote = false;\n            response.reasons.push(\"Voting period has ended\");\n          }\n\n          // Check voting frequency limits\n          if (submissionId && config.votesPerUserPerPeriod && config.periodDurationHours) {\n            const periodStart = new Date(now.getTime() - (config.periodDurationHours * 60 * 60 * 1000));\n            const votesInPeriod = await storage.getVoteCountForSubmissionInPeriod(userId, submissionId as string, periodStart);\n            \n            response.votingStatus.periodInfo = {\n              votesInPeriod,\n              maxVotesPerPeriod: config.votesPerUserPerPeriod,\n              periodDurationHours: config.periodDurationHours,\n              canVoteInPeriod: votesInPeriod < config.votesPerUserPerPeriod\n            };\n\n            if (votesInPeriod >= config.votesPerUserPerPeriod) {\n              response.canVote = false;\n              response.reasons.push(`Maximum ${config.votesPerUserPerPeriod} votes per ${config.periodDurationHours} hours reached for this submission`);\n              response.nextVoteAllowed = new Date(now.getTime() + (config.periodDurationHours * 60 * 60 * 1000));\n            }\n          }\n\n          // Check total votes limit\n          if (config.totalVotesPerUser && config.totalVotesPerUser > 0) {\n            const totalVotesInContest = await storage.getUserTotalVotesInContest(userId, contest.id);\n            \n            response.votingStatus.contestInfo = {\n              totalVotesInContest,\n              maxTotalVotes: config.totalVotesPerUser,\n              remainingVotes: Math.max(0, config.totalVotesPerUser - totalVotesInContest)\n            };\n\n            if (totalVotesInContest >= config.totalVotesPerUser) {\n              response.canVote = false;\n              response.reasons.push(`Maximum ${config.totalVotesPerUser} total votes reached for this contest`);\n            }\n          }\n        }\n      }\n\n      // Check if already voted for this specific submission\n      if (submissionId) {\n        const existingVote = await storage.getVote(userId, submissionId as string);\n        if (existingVote) {\n          response.canVote = false;\n          response.reasons.push(\"Already voted for this submission\");\n          response.votedAt = existingVote.createdAt;\n        }\n      }\n\n      res.json(response);\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to get voting status\" });\n    }\n  });\n\n  // User management routes\n  app.get(\"/api/admin/users\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { status, role } = req.query;\n      const users = await storage.getUsersWithFilters({\n        status: status as string,\n        role: role as string\n      });\n\n      res.json(users);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch users\" });\n    }\n  });\n\n  app.patch(\"/api/admin/users/:id\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { status } = updateUserStatusSchema.parse(req.body);\n      const updatedUser = await storage.updateUser(req.params.id, { status });\n      \n      if (!updatedUser) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      // Log admin action\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"UPDATE_USER_STATUS\",\n        meta: { targetUserId: updatedUser.id, status, username: updatedUser.username }\n      });\n\n      res.json(updatedUser);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid input\" });\n    }\n  });\n\n  // Bulk approve users route\n  app.patch(\"/api/admin/users/bulk/approve\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { userIds } = z.object({ userIds: z.array(z.string()).min(1) }).parse(req.body);\n      \n      let updatedCount = 0;\n      const updatedUsers = [];\n      \n      for (const userId of userIds) {\n        const user = await storage.updateUser(userId, { status: \"approved\" });\n        if (user) {\n          updatedCount++;\n          updatedUsers.push({ id: user.id, username: user.username, email: user.email });\n        }\n      }\n\n      // Log admin action\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"BULK_APPROVE_USERS\",\n        meta: { userIds, updatedUsers, updatedCount }\n      });\n\n      res.json({ success: true, updatedCount, message: `Successfully approved ${updatedCount} users` });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid input\" });\n    }\n  });\n\n  // Bulk delete users route\n  app.delete(\"/api/admin/users/bulk\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n\n    \n    try {\n      // Ensure we always send JSON responses\n      res.setHeader('Content-Type', 'application/json');\n      \n      const { userIds } = req.body;\n      \n      if (!Array.isArray(userIds) || userIds.length === 0) {\n        return res.status(400).json({ error: \"User IDs array is required\" });\n      }\n\n      // Check if storage methods exist\n      if (typeof storage.getUsersByIds !== 'function') {\n        console.error(\"ERROR: storage.getUsersByIds is not a function\");\n        return res.status(500).json({ error: \"Storage method getUsersByIds not implemented\" });\n      }\n\n      if (typeof storage.bulkDeleteUsers !== 'function') {\n        console.error(\"ERROR: storage.bulkDeleteUsers is not a function\");\n        return res.status(500).json({ error: \"Storage method bulkDeleteUsers not implemented\" });\n      }\n\n      // Get user details before deletion for audit logging\n      const usersToDelete = await storage.getUsersByIds(userIds);\n      \n      if (usersToDelete.length === 0) {\n        return res.status(404).json({ error: \"No users found to delete\" });\n      }\n\n      // Delete users and all associated data\n      const deletedCount = await storage.bulkDeleteUsers(userIds);\n\n      // Log the bulk deletion\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"BULK_DELETE_USERS\",\n        meta: {\n          deletedUserIds: userIds,\n          deletedUsers: usersToDelete.map(u => ({\n            id: u.id,\n            username: u.username,\n            email: u.email\n          })),\n          deletedCount\n        }\n      });\n\n\n      \n      res.json({ \n        success: true, \n        deletedCount,\n        message: `Successfully deleted ${deletedCount} users and all associated data`\n      });\n\n    } catch (error) {\n      \n      // Ensure we send JSON error response\n      res.setHeader('Content-Type', 'application/json');\n      res.status(500).json({ error: \"Failed to delete users\", details: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // Update user balance route (supports GLORY, SOL, USDC)\n  app.patch(\"/api/admin/users/:id/balance\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { amount, operation, currency = \"GLORY\" } = req.body;\n      const userId = req.params.id;\n      \n      // Generate unique request ID to track duplicates\n      const requestId = `${Date.now()}-${Math.random()}`;\n      \n\n      \n      // Additional protection: Global rate limit per admin user (max 1 balance operation per 3 seconds)\n      const adminRateLimitKey = `admin-balance:${req.user!.id}`;\n      const lastAdminRequest = recentGloryRequests.get(adminRateLimitKey);\n      if (lastAdminRequest && (Date.now() - lastAdminRequest) < 3000) {\n        return res.status(429).json({ error: \"Please wait before making another balance change.\" });\n      }\n      \n      // Create request signature to detect duplicates\n      const requestSignature = `${userId}-${amount}-${operation}-${currency}`;\n      const now = Date.now();\n      const lastRequest = recentGloryRequests.get(requestSignature);\n      \n      // If same request within 5 seconds, reject as duplicate (increased from 2 seconds)\n      if (lastRequest && (now - lastRequest) < 5000) {\n        return res.status(429).json({ error: \"Duplicate request detected. Please wait before trying again.\" });\n      }\n      \n      // Store this request and admin rate limit\n      recentGloryRequests.set(requestSignature, now);\n      recentGloryRequests.set(adminRateLimitKey, now);\n      \n      // Clean up old entries (older than 10 seconds)\n      const keysToDelete: string[] = [];\n      recentGloryRequests.forEach((timestamp, key) => {\n        if (now - timestamp > 10000) {\n          keysToDelete.push(key);\n        }\n      });\n      keysToDelete.forEach(key => recentGloryRequests.delete(key));\n      \n\n      \n      if (typeof amount !== 'number' || amount < 0 || isNaN(amount)) {\n        return res.status(400).json({ error: \"Valid amount (including 0) is required\" });\n      }\n      \n      if (!['set', 'add', 'subtract'].includes(operation)) {\n        return res.status(400).json({ error: \"Invalid operation. Must be 'set', 'add', or 'subtract'\" });\n      }\n\n      // Get current user\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n\n\n      let newBalance: number;\n      let delta: number;\n      let reason: string;\n      let currentBalance = user.gloryBalance;\n      \n      if (currency === \"SOL\") currentBalance = user.solBalance;\n      else if (currency === \"USDC\") currentBalance = user.usdcBalance;\n\n      switch (operation) {\n        case 'set':\n          newBalance = amount;\n          delta = amount - currentBalance;\n          reason = `Admin set balance to ${amount} ${currency}`;\n\n          break;\n        case 'add':\n          newBalance = currentBalance + amount;\n          delta = amount;\n          reason = `Admin added ${amount} ${currency}`;\n\n          break;\n        case 'subtract':\n          newBalance = Math.max(0, currentBalance - amount);\n          delta = -(Math.min(amount, currentBalance));\n          reason = `Admin subtracted ${Math.min(amount, currentBalance)} ${currency}`;\n\n          break;\n        default:\n          return res.status(400).json({ error: \"Invalid operation\" });\n      }\n\n      // Create transaction record which will also update user balance\n      if (delta !== 0) {\n        await storage.createGloryTransaction({\n          userId,\n          delta,\n          currency,\n          reason,\n          contestId: null,\n          submissionId: null\n        });\n      }\n\n      // Get updated user to return latest balance\n      const updatedUser = await storage.getUser(userId);\n      if (!updatedUser) {\n        return res.status(500).json({ error: \"Failed to get updated user balance\" });\n      }\n\n      // Get final balance based on currency\n      let finalBalance = updatedUser.gloryBalance;\n      if (currency === \"SOL\") finalBalance = updatedUser.solBalance;\n      else if (currency === \"USDC\") finalBalance = updatedUser.usdcBalance;\n\n      // Log admin action\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"UPDATE_USER_BALANCE\",\n        meta: { \n          targetUserId: userId, \n          operation,\n          amount,\n          currency,\n          oldBalance: currentBalance,\n          newBalance: finalBalance,\n          delta\n        }\n      });\n\n\n\n      res.json({ \n        success: true,\n        newBalance: finalBalance,\n        delta,\n        operation,\n        currency,\n        message: `${currency} balance ${operation === 'set' ? 'set to' : operation === 'add' ? 'increased by' : 'decreased by'} ${amount}`,\n        userData: {\n          id: updatedUser.id,\n          username: updatedUser.username,\n          gloryBalance: updatedUser.gloryBalance,\n          solBalance: updatedUser.solBalance,\n          usdcBalance: updatedUser.usdcBalance\n        }\n      });\n    } catch (error) {\n      console.error(\"Error updating GLORY balance:\", error);\n      res.status(500).json({ error: \"Failed to update GLORY balance\" });\n    }\n  });\n\n\n\n\n\n  // Admin cashout management routes\n  app.get(\"/api/admin/cashout/requests\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { status } = req.query;\n      const requests = await storage.getCashoutRequests(\n        status ? { status: status as string } : undefined\n      );\n      res.json({ requests });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch cashout requests\" });\n    }\n  });\n\n  app.patch(\"/api/admin/cashout/requests/:id\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { status, rejectionReason, txHash } = updateCashoutStatusSchema.parse(req.body);\n      const requestId = req.params.id;\n      const adminId = req.user!.id;\n\n      // Get the current request\n      const request = await storage.getCashoutRequest(requestId);\n      if (!request) {\n        return res.status(404).json({ error: \"Cashout request not found\" });\n      }\n\n      const oldStatus = request.status;\n\n      // Validate txHash is required for \"sent\" and \"confirmed\" statuses\n      if ((status === \"sent\" || status === \"confirmed\") && !txHash) {\n        return res.status(400).json({ error: `Transaction hash is required for status: ${status}` });\n      }\n\n      // Update the request\n      const updatedRequest = await storage.updateCashoutRequest(requestId, {\n        status,\n        adminId,\n        rejectionReason: status === \"rejected\" ? rejectionReason : undefined,\n        txHash: status === \"sent\" || status === \"confirmed\" ? txHash : undefined\n      });\n\n      if (!updatedRequest) {\n        return res.status(404).json({ error: \"Cashout request not found\" });\n      }\n\n      // Create event log\n      await storage.createCashoutEvent({\n        cashoutRequestId: requestId,\n        fromStatus: oldStatus,\n        toStatus: status,\n        actorUserId: adminId,\n        notes: rejectionReason || txHash || `Status updated to ${status}`\n      });\n\n      // Handle GLORY balance changes\n      if (status === \"approved\" && oldStatus === \"pending\") {\n        // Deduct GLORY when approving pending request\n        await storage.createGloryTransaction({\n          userId: request.userId,\n          delta: -request.amountGlory,\n          reason: `Cashout request approved`,\n          contestId: null,\n          submissionId: null\n        });\n      } else if ((status === \"rejected\" || status === \"failed\") && (oldStatus === \"approved\" || oldStatus === \"processing\" || oldStatus === \"sent\")) {\n        // Refund GLORY if an approved/processing/sent request is rejected or failed\n        await storage.createGloryTransaction({\n          userId: request.userId,\n          delta: request.amountGlory,\n          reason: `Cashout request ${status} - GLORY refunded`,\n          contestId: null,\n          submissionId: null\n        });\n      }\n\n      // Log admin action\n      await storage.createAuditLog({\n        actorUserId: adminId,\n        action: \"UPDATE_CASHOUT_STATUS\",\n        meta: { \n          cashoutRequestId: requestId, \n          oldStatus, \n          newStatus: status,\n          userId: request.userId,\n          amountGlory: request.amountGlory,\n          txHash: txHash || null\n        }\n      });\n\n      res.json({ request: updatedRequest });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Failed to update cashout request\" });\n    }\n  });\n\n  app.post(\"/api/admin/cashout/approve\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { requestId } = approveCashoutSchema.parse(req.body);\n      const adminId = req.user!.id;\n\n      const request = await storage.getCashoutRequest(requestId);\n      if (!request) {\n        return res.status(404).json({ error: \"Cashout request not found\" });\n      }\n\n      if (request.status !== \"pending\") {\n        return res.status(400).json({ error: \"Only pending requests can be approved\" });\n      }\n\n      const updatedRequest = await storage.updateCashoutRequest(requestId, {\n        status: \"approved\",\n        adminId\n      });\n\n      await storage.createCashoutEvent({\n        cashoutRequestId: requestId,\n        fromStatus: \"pending\",\n        toStatus: \"approved\",\n        actorUserId: adminId,\n        notes: \"Request approved by admin\"\n      });\n\n      await storage.createGloryTransaction({\n        userId: request.userId,\n        delta: -request.amountGlory,\n        reason: `Cashout request approved`,\n        contestId: null,\n        submissionId: null\n      });\n\n      await storage.createAuditLog({\n        actorUserId: adminId,\n        action: \"APPROVE_CASHOUT\",\n        meta: { \n          cashoutRequestId: requestId,\n          userId: request.userId,\n          amountGlory: request.amountGlory\n        }\n      });\n\n      res.json({ request: updatedRequest });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Failed to approve cashout request\" });\n    }\n  });\n\n  app.post(\"/api/admin/cashout/reject\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { requestId, rejectionReason } = rejectCashoutSchema.parse(req.body);\n      const adminId = req.user!.id;\n\n      const request = await storage.getCashoutRequest(requestId);\n      if (!request) {\n        return res.status(404).json({ error: \"Cashout request not found\" });\n      }\n\n      if (request.status !== \"pending\") {\n        return res.status(400).json({ error: \"Only pending requests can be rejected\" });\n      }\n\n      const updatedRequest = await storage.updateCashoutRequest(requestId, {\n        status: \"rejected\",\n        adminId,\n        rejectionReason\n      });\n\n      await storage.createCashoutEvent({\n        cashoutRequestId: requestId,\n        fromStatus: \"pending\",\n        toStatus: \"rejected\",\n        actorUserId: adminId,\n        notes: rejectionReason || \"Request rejected by admin\"\n      });\n\n      await storage.createAuditLog({\n        actorUserId: adminId,\n        action: \"REJECT_CASHOUT\",\n        meta: { \n          cashoutRequestId: requestId,\n          userId: request.userId,\n          amountGlory: request.amountGlory,\n          reason: rejectionReason\n        }\n      });\n\n      res.json({ request: updatedRequest });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Failed to reject cashout request\" });\n    }\n  });\n\n  app.post(\"/api/admin/cashout/bulk-approve\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { requestIds } = bulkCashoutIdsSchema.parse(req.body);\n      const adminId = req.user!.id;\n\n      let approvedCount = 0;\n      const errors: string[] = [];\n\n      for (const requestId of requestIds) {\n        try {\n          const request = await storage.getCashoutRequest(requestId);\n          if (!request) {\n            errors.push(`Request ${requestId} not found`);\n            continue;\n          }\n\n          if (request.status !== \"pending\") {\n            errors.push(`Request ${requestId} is not pending`);\n            continue;\n          }\n\n          await storage.updateCashoutRequest(requestId, {\n            status: \"approved\",\n            adminId\n          });\n\n          await storage.createCashoutEvent({\n            cashoutRequestId: requestId,\n            fromStatus: \"pending\",\n            toStatus: \"approved\",\n            actorUserId: adminId,\n            notes: \"Request approved by admin (bulk operation)\"\n          });\n\n          await storage.createGloryTransaction({\n            userId: request.userId,\n            delta: -request.amountGlory,\n            reason: `Cashout request approved`,\n            contestId: null,\n            submissionId: null\n          });\n\n          await storage.createAuditLog({\n            actorUserId: adminId,\n            action: \"APPROVE_CASHOUT\",\n            meta: { \n              cashoutRequestId: requestId,\n              userId: request.userId,\n              amountGlory: request.amountGlory,\n              bulkOperation: true\n            }\n          });\n\n          approvedCount++;\n        } catch (error) {\n          errors.push(`Failed to approve request ${requestId}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n      }\n\n      res.json({ \n        approvedCount,\n        totalRequested: requestIds.length,\n        errors: errors.length > 0 ? errors : undefined\n      });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Failed to bulk approve cashout requests\" });\n    }\n  });\n\n  app.post(\"/api/admin/cashout/bulk-reject\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { requestIds, rejectionReason } = bulkRejectCashoutSchema.parse(req.body);\n      const adminId = req.user!.id;\n\n      let rejectedCount = 0;\n      const errors: string[] = [];\n\n      for (const requestId of requestIds) {\n        try {\n          const request = await storage.getCashoutRequest(requestId);\n          if (!request) {\n            errors.push(`Request ${requestId} not found`);\n            continue;\n          }\n\n          if (request.status !== \"pending\") {\n            errors.push(`Request ${requestId} is not pending`);\n            continue;\n          }\n\n          await storage.updateCashoutRequest(requestId, {\n            status: \"rejected\",\n            adminId,\n            rejectionReason\n          });\n\n          await storage.createCashoutEvent({\n            cashoutRequestId: requestId,\n            fromStatus: \"pending\",\n            toStatus: \"rejected\",\n            actorUserId: adminId,\n            notes: rejectionReason || \"Request rejected by admin (bulk operation)\"\n          });\n\n          await storage.createAuditLog({\n            actorUserId: adminId,\n            action: \"REJECT_CASHOUT\",\n            meta: { \n              cashoutRequestId: requestId,\n              userId: request.userId,\n              amountGlory: request.amountGlory,\n              reason: rejectionReason,\n              bulkOperation: true\n            }\n          });\n\n          rejectedCount++;\n        } catch (error) {\n          errors.push(`Failed to reject request ${requestId}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n      }\n\n      res.json({ \n        rejectedCount,\n        totalRequested: requestIds.length,\n        errors: errors.length > 0 ? errors : undefined\n      });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Failed to bulk reject cashout requests\" });\n    }\n  });\n\n  // Transaction history route (supports currency filter)\n  app.get(\"/api/glory-ledger\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const { currency } = req.query;\n      const transactions = await storage.getGloryTransactions(\n        req.user!.id, \n        currency as string | undefined\n      );\n      res.json(transactions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch transactions\" });\n    }\n  });\n\n  app.delete(\"/api/glory-ledger\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      // Clear all glory transactions for the user without affecting balance\n      await storage.clearGloryTransactions(req.user!.id);\n\n      res.json({ message: \"All GLORY history cleared successfully\" });\n    } catch (error) {\n      console.error(\"Error clearing glory history:\", error);\n      res.status(500).json({ error: \"Failed to clear GLORY history\" });\n    }\n  });\n\n  // Prompt Marketplace routes\n  app.post(\"/api/prompts/purchase/:submissionId\", authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    try {\n      const { submissionId } = req.params;\n      const userId = req.user!.id;\n\n      const purchase = await storage.purchasePrompt(userId, submissionId);\n      \n      res.json({ \n        success: true,\n        purchase \n      });\n    } catch (error) {\n      console.error(\"Prompt purchase error:\", error);\n      res.status(400).json({ \n        error: error instanceof Error ? error.message : \"Failed to purchase prompt\" \n      });\n    }\n  });\n\n  app.get(\"/api/prompts/purchased\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const purchases = await storage.getPurchasedPrompts(userId);\n      \n      res.json(purchases);\n    } catch (error) {\n      console.error(\"Get purchased prompts error:\", error);\n      res.status(500).json({ error: \"Failed to fetch purchased prompts\" });\n    }\n  });\n\n  app.get(\"/api/prompts/purchased/submissions\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const purchases = await storage.getPurchasedPrompts(userId);\n      \n      // Fetch full submission details for each purchase\n      const submissionsPromises = purchases.map(async (purchase) => {\n        const submission = await storage.getSubmission(purchase.submissionId);\n        if (!submission) return null;\n        \n        // Get user details\n        const submitter = await storage.getUser(submission.userId);\n        \n        return {\n          ...submission,\n          user: submitter ? {\n            id: submitter.id,\n            username: submitter.username\n          } : null,\n          hasPurchasedPrompt: true, // Always true for purchased prompts\n          purchaseDate: purchase.createdAt,\n          purchasePrice: purchase.price,\n          purchaseCurrency: purchase.currency\n        };\n      });\n      \n      const submissions = (await Promise.all(submissionsPromises)).filter(Boolean);\n      \n      res.json(submissions);\n    } catch (error) {\n      console.error(\"Get purchased submissions error:\", error);\n      res.status(500).json({ error: \"Failed to fetch purchased submissions\" });\n    }\n  });\n\n  // Audit logs route\n  app.get(\"/api/admin/audit-logs\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { limit } = req.query;\n      const logs = await storage.getAuditLogs(limit ? parseInt(limit as string) : undefined);\n      res.json(logs);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch audit logs\" });\n    }\n  });\n\n  app.delete(\"/api/admin/audit-logs\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      await storage.clearAuditLogs();\n      \n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"CLEAR_AUDIT_LOGS\",\n        meta: { clearedAt: new Date().toISOString() }\n      });\n      \n      res.json({ message: \"All audit logs cleared successfully\" });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to clear audit logs\" });\n    }\n  });\n\n  // Site Settings routes (Admin only)\n  app.get(\"/api/admin/settings\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const settings = await storage.getSiteSettings();\n      res.json(settings);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch site settings\" });\n    }\n  });\n\n  app.patch(\"/api/admin/settings\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      // Validate the request body using partial schema for updates\n      const updateSchema = insertSiteSettingsSchema.partial();\n      const updates = updateSchema.parse(req.body);\n      \n      const settings = await storage.updateSiteSettings(updates);\n      \n      // Log the change in audit log\n      await storage.createAuditLog({\n        actorUserId: req.user!.id,\n        action: \"UPDATE_SITE_SETTINGS\",\n        meta: { updates }\n      });\n      \n      res.json(settings);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid request data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update site settings\" });\n    }\n  });\n\n  // Public endpoint to check if site is in private mode (no auth required)\n  app.get(\"/api/settings/private-mode\", async (req, res) => {\n    try {\n      const settings = await storage.getSiteSettings();\n      res.json({ privateMode: settings.privateMode });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch private mode status\" });\n    }\n  });\n\n  // Public endpoint to get platform wallet address (for payment flows)\n  app.get(\"/api/settings/platform-wallet\", async (req, res) => {\n    try {\n      const settings = await storage.getSiteSettings();\n      res.json({ platformWalletAddress: settings.platformWalletAddress || null });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch platform wallet address\" });\n    }\n  });\n\n  // Placeholder for video thumbnails in local mode\n  app.get(\"/api/placeholder/video-thumbnail\", (req, res) => {\n    // Return a simple SVG placeholder for video thumbnails\n    const svg = `\n      <svg width=\"400\" height=\"400\" xmlns=\"http://www.w3.org/2000/svg\">\n        <rect width=\"100%\" height=\"100%\" fill=\"#1a1a1a\"/>\n        <circle cx=\"200\" cy=\"200\" r=\"60\" fill=\"#7C3CEC\" opacity=\"0.8\"/>\n        <polygon points=\"180,170 180,230 230,200\" fill=\"white\"/>\n        <text x=\"200\" y=\"280\" text-anchor=\"middle\" fill=\"#666\" font-family=\"Arial\" font-size=\"16\">Video Thumbnail</text>\n      </svg>\n    `;\n    \n    res.setHeader('Content-Type', 'image/svg+xml');\n    res.send(svg);\n  });\n\n  // AI Generation routes\n  const { generateImage, AI_MODELS } = await import(\"./ai-service\");\n  \n  // Get available AI models and their configurations\n  app.get(\"/api/ai/models\", (req, res) => {\n    const models = Object.values(AI_MODELS).map(model => ({\n      id: model.id,\n      name: model.name,\n      description: model.description,\n      costPerImage: model.costPerImage,\n      \n      // All capability flags\n      supportsAspectRatio: model.supportsAspectRatio,\n      supportsCustomDimensions: model.supportsCustomDimensions,\n      supportsResolution: model.supportsResolution,\n      supportsOutputFormat: model.supportsOutputFormat,\n      supportsOutputQuality: model.supportsOutputQuality,\n      supportsNegativePrompt: model.supportsNegativePrompt,\n      supportsImageInput: model.supportsImageInput,\n      supportsMask: model.supportsMask,\n      supportsSeed: model.supportsSeed,\n      supportsStyleType: model.supportsStyleType,\n      supportsStylePreset: model.supportsStylePreset,\n      supportsMagicPrompt: model.supportsMagicPrompt,\n      supportsStyleReferenceImages: model.supportsStyleReferenceImages,\n      supportsPromptUpsampling: model.supportsPromptUpsampling,\n      supportsSafetyTolerance: model.supportsSafetyTolerance,\n      supportsCfg: model.supportsCfg,\n      supportsPromptStrength: model.supportsPromptStrength,\n      supportsLeonardoStyle: model.supportsLeonardoStyle,\n      supportsContrast: model.supportsContrast,\n      supportsGenerationMode: model.supportsGenerationMode,\n      supportsPromptEnhance: model.supportsPromptEnhance,\n      supportsNumImages: model.supportsNumImages,\n    }));\n    res.json(models);\n  });\n\n  // Get pricing settings for all models and upscaling\n  app.get(\"/api/pricing\", async (req, res) => {\n    try {\n      const allPricing = await storage.getAllPricingSettings();\n      const pricingObject: Record<string, number> = {};\n      allPricing.forEach((value, key) => {\n        pricingObject[key] = value;\n      });\n      res.json(pricingObject);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch pricing\" });\n    }\n  });\n  \n  // AI generation rate limiter (30 generations per hour per user)\n  const aiGenerationRateLimiter = async (req: AuthRequest): Promise<boolean> => {\n    if (!req.user) return false;\n    \n    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n    const recentGenerations = await storage.getAiGenerations(req.user.id, 1000); // Get more to count in last hour\n    const generationsInLastHour = recentGenerations.filter(g => new Date(g.createdAt) > oneHourAgo);\n    \n    return generationsInLastHour.length < 30; // Max 30 per hour\n  };\n  \n  // Generate image validation schema\n  const generateImageSchema = z.object({\n    prompt: z.string().min(3, \"Prompt must be at least 3 characters\").max(1000, \"Prompt too long\"),\n    model: z.enum([\"ideogram-v3\", \"nano-banana\", \"flux-1.1-pro\", \"sd-3.5-large\", \"leonardo-lucid\"]).optional(),\n    seed: z.number().int().optional(),\n    \n    // Dimension options\n    aspectRatio: z.string().optional(),\n    width: z.number().min(256).max(1440).optional(),\n    height: z.number().min(256).max(1440).optional(),\n    resolution: z.string().optional(),\n    \n    // Output options\n    outputFormat: z.enum([\"webp\", \"png\", \"jpg\"]).optional(),\n    outputQuality: z.number().min(0).max(100).optional(),\n    \n    // Prompt modifiers\n    negativePrompt: z.string().max(500).optional(),\n    promptUpsampling: z.boolean().optional(),\n    promptEnhance: z.boolean().optional(),\n    magicPromptOption: z.enum([\"Auto\", \"On\", \"Off\"]).optional(),\n    \n    // Image input\n    imageInput: z.union([z.string(), z.array(z.string())]).optional(),\n    mask: z.string().optional(),\n    \n    // Style options (Ideogram)\n    styleType: z.string().optional(),\n    stylePreset: z.string().optional(),\n    styleReferenceImages: z.array(z.string()).optional(),\n    \n    // Leonardo options\n    leonardoStyle: z.string().optional(),\n    contrast: z.enum([\"low\", \"medium\", \"high\"]).optional(),\n    generationMode: z.enum([\"standard\", \"ultra\"]).optional(),\n    numImages: z.number().min(1).max(8).optional(),\n    \n    // Flux options\n    safetyTolerance: z.number().min(1).max(6).optional(),\n    \n    // Stable Diffusion options\n    cfg: z.number().min(1).max(10).optional(),\n    promptStrength: z.number().min(0).max(1).optional(),\n  });\n\n  // Map model IDs to pricing keys\n  const modelToPricingKey = (modelId: string): string => {\n    const mapping: Record<string, string> = {\n      \"leonardo-lucid\": \"leonardo\",\n      \"ideogram-v3\": \"ideogram-v3\",\n      \"nano-banana\": \"nano-banana\",\n      \"flux-1.1-pro\": \"flux-1.1-pro\",\n      \"sd-3.5-large\": \"sd-3.5-large\",\n    };\n    return mapping[modelId] || modelId;\n  };\n\n  app.post(\"/api/ai/generate\", authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    // Check rate limit\n    const canGenerate = await aiGenerationRateLimiter(req);\n    if (!canGenerate) {\n      return res.status(429).json({ error: \"Rate limit exceeded. Maximum 30 generations per hour.\" });\n    }\n    try {\n      const params = generateImageSchema.parse(req.body);\n      const userId = req.user!.id;\n      const modelId = params.model || \"flux-1.1-pro\";\n\n      // Auto-refresh subscription credits if period has expired\n      try {\n        await storage.refreshSubscriptionIfNeeded(userId);\n      } catch (error) {\n        console.error(\"Failed to refresh subscription in AI generation:\", error);\n      }\n\n      // Check tier-based model access\n      const hasModelAccess = await storage.canUserAccessModel(userId, modelId);\n      if (!hasModelAccess) {\n        return res.status(403).json({ \n          error: \"Your subscription tier does not have access to this AI model. Please upgrade your plan to use this model.\",\n          model: modelId\n        });\n      }\n\n      // Get model cost from pricing settings using pricing key\n      const pricingKey = modelToPricingKey(modelId);\n      const modelCost = await storage.getPricingSetting(pricingKey);\n      if (!modelCost) {\n        return res.status(500).json({ error: \"Model pricing not configured\" });\n      }\n\n      // Calculate total cost (multiply by numImages if provided)\n      const numImages = params.numImages || 1;\n      const totalCost = modelCost * numImages;\n\n      // Check if user has enough credits\n      const userCredits = await storage.getUserCredits(userId);\n      if (userCredits < totalCost) {\n        return res.status(402).json({ \n          error: \"Insufficient credits\",\n          required: totalCost,\n          current: userCredits\n        });\n      }\n\n      console.log(`Generating AI image for user ${userId}:`, params.prompt);\n\n      // Deduct credits BEFORE generation\n      const deducted = await storage.deductCredits(userId, totalCost);\n      if (!deducted) {\n        return res.status(402).json({ error: \"Failed to deduct credits\" });\n      }\n\n      try {\n        // Generate image(s) using Replicate (returns array)\n        const results = await generateImage({ ...params, userId });\n\n        // Guard against empty results\n        if (!results || results.length === 0) {\n          await storage.addCredits(userId, totalCost);\n          throw new Error(\"No images were generated\");\n        }\n\n        // If we got fewer images than requested, refund the difference\n        const actualCost = modelCost * results.length;\n        if (actualCost < totalCost) {\n          const refundAmount = totalCost - actualCost;\n          await storage.addCredits(userId, refundAmount);\n        }\n\n        // Calculate credits per image based on actual results\n        const creditsPerImage = modelCost;\n\n        // Save all generations to database\n        const generations = await Promise.all(\n          results.map(result => \n            storage.createAiGeneration({\n              userId,\n              prompt: params.prompt,\n              model: result.parameters.model,\n              imageUrl: result.url,\n              thumbnailUrl: result.thumbnailUrl,\n              parameters: result.parameters,\n              cloudinaryPublicId: result.cloudinaryPublicId,\n              storageBucket: result.storageBucket,\n              status: \"generated\",\n              creditsUsed: creditsPerImage\n            })\n          )\n        );\n\n        // Return all generated images using data from database records\n        res.json({ \n          images: generations.map(gen => ({\n            id: gen.id,\n            imageUrl: gen.imageUrl,\n            cloudinaryUrl: gen.imageUrl, // Already points to Cloudinary if upload succeeded\n            cloudinaryPublicId: gen.cloudinaryPublicId,\n            parameters: gen.parameters,\n          })),\n          creditsUsed: actualCost,\n          creditsRemaining: userCredits - actualCost\n        });\n      } catch (generationError) {\n        // Refund credits if generation failed\n        await storage.addCredits(userId, totalCost);\n        throw generationError;\n      }\n    } catch (error) {\n      console.error(\"AI generation error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid parameters\", details: error.errors });\n      }\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to generate image\" \n      });\n    }\n  });\n\n  app.get(\"/api/ai/generations\", authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const { limit = 20 } = req.query;\n      \n      const generations = await storage.getAiGenerations(userId, parseInt(limit as string));\n      res.json(generations);\n    } catch (error) {\n      console.error(\"Error fetching AI generations:\", error);\n      res.status(500).json({ error: \"Failed to fetch generations\" });\n    }\n  });\n\n  app.get(\"/api/ai/generations/:id\", authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user!.id;\n\n      const generation = await storage.getAiGeneration(id);\n      if (!generation) {\n        return res.status(404).json({ error: \"Generation not found\" });\n      }\n\n      if (generation.userId !== userId) {\n        return res.status(403).json({ error: \"Not authorized to access this generation\" });\n      }\n\n      res.json(generation);\n    } catch (error) {\n      console.error(\"Error fetching AI generation:\", error);\n      res.status(500).json({ error: \"Failed to fetch generation\" });\n    }\n  });\n\n  app.delete(\"/api/ai/generations/:id\", authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user!.id;\n\n      const generation = await storage.getAiGeneration(id);\n      if (!generation) {\n        return res.status(404).json({ error: \"Generation not found\" });\n      }\n\n      if (generation.userId !== userId) {\n        return res.status(403).json({ error: \"Not authorized to delete this generation\" });\n      }\n\n      await storage.deleteAiGeneration(id);\n      res.json({ message: \"Generation deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting AI generation:\", error);\n      res.status(500).json({ error: \"Failed to delete generation\" });\n    }\n  });\n\n  // Submit AI generation to contest\n  const submitToContestSchema = z.object({\n    contestId: z.string(),\n    title: z.string().min(1, \"Title is required\").max(255),\n    description: z.string().optional(),\n    tags: z.array(z.string()).optional()\n  });\n\n  app.post(\"/api/ai/generations/:id/submit-to-contest\", authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user!.id;\n      const params = submitToContestSchema.parse(req.body);\n\n      // Get AI generation\n      const generation = await storage.getAiGeneration(id);\n      if (!generation) {\n        return res.status(404).json({ error: \"AI generation not found\" });\n      }\n\n      if (generation.userId !== userId) {\n        return res.status(403).json({ error: \"Not authorized to submit this generation\" });\n      }\n\n      if (!generation.cloudinaryPublicId) {\n        return res.status(400).json({ error: \"Image not properly uploaded to storage\" });\n      }\n\n      // Get contest\n      const contest = await storage.getContest(params.contestId);\n      if (!contest) {\n        return res.status(404).json({ error: \"Contest not found\" });\n      }\n\n      if (contest.status !== \"active\") {\n        return res.status(400).json({ error: \"Contest is not active\" });\n      }\n\n      // Check contest type matches (AI images are always image type)\n      const config = contest.config as any;\n      if (config?.contestType && config.contestType !== \"image\") {\n        return res.status(400).json({ error: \"This contest does not accept images\" });\n      }\n\n      // Create submission from AI generation\n      const submission = await storage.createSubmission({\n        userId,\n        contestId: params.contestId,\n        contestName: contest.title,\n        type: \"image\",\n        title: params.title,\n        description: params.description,\n        mediaUrl: generation.imageUrl,\n        cloudinaryPublicId: generation.cloudinaryPublicId,\n        cloudinaryResourceType: \"image\",\n        tags: params.tags,\n        status: \"pending\" // Will need admin approval\n      });\n\n      // Note: AI generation status remains as \"generated\" - we don't update it\n      // The submission itself tracks the contest entry\n\n      res.json({ \n        message: \"Successfully submitted to contest\",\n        submission \n      });\n    } catch (error) {\n      console.error(\"Error submitting AI generation to contest:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid parameters\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to submit to contest\" });\n    }\n  });\n\n  // Admin pricing management\n  app.get(\"/api/admin/settings/pricing\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const allPricing = await storage.getAllPricingSettings();\n      const pricingObject: Record<string, number> = {};\n      allPricing.forEach((value, key) => {\n        pricingObject[key] = value;\n      });\n      res.json(pricingObject);\n    } catch (error) {\n      console.error(\"Error fetching pricing settings:\", error);\n      res.status(500).json({ error: \"Failed to fetch pricing settings\" });\n    }\n  });\n\n  app.put(\"/api/admin/settings/pricing/:key\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { key } = req.params;\n      const { value } = z.object({ value: z.number().min(0) }).parse(req.body);\n      \n      await storage.updatePricingSetting(key, value);\n      res.json({ message: \"Pricing updated successfully\", key, value });\n    } catch (error) {\n      console.error(\"Error updating pricing:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid value\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update pricing\" });\n    }\n  });\n\n  // Upscale AI generation image\n  const upscaleSchema = z.object({\n    generationId: z.string(),\n    scale: z.number().min(2).max(10).optional(),\n    faceEnhance: z.boolean().optional()\n  });\n\n  app.post(\"/api/ai/upscale\", authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const params = upscaleSchema.parse(req.body);\n\n      // Auto-refresh subscription credits if period has expired\n      try {\n        await storage.refreshSubscriptionIfNeeded(userId);\n      } catch (error) {\n        console.error(\"Failed to refresh subscription in upscale:\", error);\n      }\n\n      // Check tier-based upscale permission\n      const canUpscale = await storage.canUserUpscale(userId);\n      if (!canUpscale) {\n        return res.status(403).json({ \n          error: \"Your subscription tier does not have access to AI upscaling. Please upgrade your plan to use this feature.\"\n        });\n      }\n\n      // Get AI generation\n      const generation = await storage.getAiGeneration(params.generationId);\n      if (!generation) {\n        return res.status(404).json({ error: \"AI generation not found\" });\n      }\n\n      if (generation.userId !== userId) {\n        return res.status(403).json({ error: \"Not authorized to upscale this generation\" });\n      }\n\n      if (generation.isUpscaled) {\n        return res.status(400).json({ error: \"This image has already been upscaled\" });\n      }\n\n      // Get upscale cost from pricing settings\n      const upscaleCost = await storage.getPricingSetting(\"upscale\");\n      if (!upscaleCost) {\n        return res.status(500).json({ error: \"Upscaling pricing not configured\" });\n      }\n\n      // Check if user has enough credits\n      const userCredits = await storage.getUserCredits(userId);\n      if (userCredits < upscaleCost) {\n        return res.status(402).json({ \n          error: `Insufficient credits. Upscaling costs ${upscaleCost} credits. You have ${userCredits} credits.` \n        });\n      }\n\n      // Deduct credits before upscaling\n      await storage.deductCredits(userId, upscaleCost);\n      \n      let upscaledImageUrl: string;\n      let thumbnailUrl: string | undefined;\n      let cloudinaryPublicId: string | null | undefined;\n\n      try {\n        // Call upscaling service\n        const { upscaleImage } = await import(\"./ai-service\");\n        const result = await upscaleImage(generation.imageUrl, {\n          scale: params.scale,\n          faceEnhance: params.faceEnhance,\n          userId\n        });\n\n        upscaledImageUrl = result.url;\n        thumbnailUrl = result.thumbnailUrl;\n        cloudinaryPublicId = result.cloudinaryPublicId;\n\n        // Update generation record with upscaled image and its thumbnail\n        await storage.updateAiGeneration(params.generationId, {\n          editedImageUrl: upscaledImageUrl,\n          thumbnailUrl: thumbnailUrl, // Update thumbnail to point to upscaled version\n          isUpscaled: true,\n          creditsUsed: generation.creditsUsed + upscaleCost\n        });\n\n        const updatedCredits = await storage.getUserCredits(userId);\n\n        res.json({\n          message: \"Image upscaled successfully\",\n          upscaledImageUrl,\n          cloudinaryPublicId,\n          creditsUsed: upscaleCost,\n          creditsRemaining: updatedCredits\n        });\n      } catch (error) {\n        // Refund credits if upscaling failed\n        await storage.addCredits(userId, upscaleCost);\n        throw error;\n      }\n    } catch (error) {\n      console.error(\"Error upscaling image:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid parameters\", details: error.errors });\n      }\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to upscale image\" \n      });\n    }\n  });\n\n  // Save edited AI generation image\n  app.post(\"/api/ai/save-edited\", upload.single(\"image\"), authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const { generationId } = req.body;\n\n      // Check tier-based edit permission\n      const canEdit = await storage.canUserEdit(userId);\n      if (!canEdit) {\n        return res.status(403).json({ \n          error: \"Your subscription tier does not have access to image editing. Please upgrade your plan to use this feature.\"\n        });\n      }\n\n      if (!req.file) {\n        return res.status(400).json({ error: \"No image file provided\" });\n      }\n\n      if (!generationId) {\n        return res.status(400).json({ error: \"Generation ID is required\" });\n      }\n\n      // Get AI generation\n      const generation = await storage.getAiGeneration(generationId);\n      if (!generation) {\n        return res.status(404).json({ error: \"AI generation not found\" });\n      }\n\n      if (generation.userId !== userId) {\n        return res.status(403).json({ error: \"Not authorized to edit this generation\" });\n      }\n\n      // Upload edited image to Cloudinary\n      const uploadResult = await uploadFile(req.file);\n\n      // Update generation record\n      await storage.updateAiGeneration(generationId, {\n        editedImageUrl: uploadResult.url,\n        isEdited: true\n      });\n\n      res.json({\n        message: \"Edited image saved successfully\",\n        url: uploadResult.url,\n        cloudinaryPublicId: uploadResult.cloudinaryPublicId\n      });\n    } catch (error) {\n      console.error(\"Error saving edited image:\", error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to save edited image\" \n      });\n    }\n  });\n\n  // Proxy download endpoint to bypass CORS issues with external URLs (Replicate, etc.)\n  app.get(\"/api/proxy-download\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const { url } = req.query;\n      \n      if (!url || typeof url !== 'string') {\n        return res.status(400).json({ error: \"URL parameter is required\" });\n      }\n\n      console.log(\"Proxy download request for URL:\", url);\n\n      // Fetch the image from external URL\n      const response = await fetch(url);\n      \n      if (!response.ok) {\n        console.error(`Failed to fetch from ${url}: ${response.status} ${response.statusText}`);\n        return res.status(response.status).json({ \n          error: `Failed to fetch image: ${response.statusText}` \n        });\n      }\n\n      // Get content type and set appropriate headers\n      const contentType = response.headers.get('content-type') || 'application/octet-stream';\n      const contentLength = response.headers.get('content-length');\n      \n      console.log(`Fetched image: ${contentType}, size: ${contentLength || 'unknown'}`);\n      \n      // Prevent browser caching to avoid 304 Not Modified responses\n      res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n      res.setHeader('Pragma', 'no-cache');\n      res.setHeader('Expires', '0');\n      \n      res.setHeader('Content-Type', contentType);\n      res.setHeader('Content-Disposition', 'attachment');\n      if (contentLength) {\n        res.setHeader('Content-Length', contentLength);\n      }\n\n      // Stream the image data to the response\n      const buffer = await response.arrayBuffer();\n      console.log(`Sending buffer of size: ${buffer.byteLength} bytes`);\n      res.send(Buffer.from(buffer));\n    } catch (error) {\n      console.error(\"Proxy download error:\", error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to download image\" \n      });\n    }\n  });\n\n  // ============================================================================\n  // SUBSCRIPTION API ENDPOINTS\n  // ============================================================================\n\n  // Public Tier Endpoints\n  // GET /api/tiers - Get all active tiers (public, no auth required)\n  app.get(\"/api/tiers\", async (req, res) => {\n    try {\n      console.log(\"Fetching active subscription tiers\");\n      const tiers = await storage.getSubscriptionTiers(); // Returns only active tiers\n      res.json(tiers);\n    } catch (error) {\n      console.error(\"Error fetching subscription tiers:\", error);\n      res.status(500).json({ error: \"Failed to fetch subscription tiers\" });\n    }\n  });\n\n  // User Subscription Endpoints (authenticated)\n  // GET /api/subscription - Get current user's subscription with tier details\n  app.get(\"/api/subscription\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      console.log(`Fetching subscription for user: ${userId}`);\n      \n      const subscription = await storage.getUserSubscription(userId);\n      \n      if (!subscription) {\n        return res.json(null);\n      }\n      \n      res.json(subscription);\n    } catch (error) {\n      console.error(\"Error fetching user subscription:\", error);\n      res.status(500).json({ error: \"Failed to fetch subscription\" });\n    }\n  });\n\n  // POST /api/subscription/subscribe - Subscribe to a tier\n  app.post(\"/api/subscription/subscribe\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const { tierId, paymentMethod } = req.body;\n\n      // Validate input\n      if (!tierId || typeof tierId !== 'string') {\n        return res.status(400).json({ error: \"tierId is required\" });\n      }\n\n      if (!paymentMethod || ![\"stripe\", \"usdc\"].includes(paymentMethod)) {\n        return res.status(400).json({ error: \"paymentMethod must be 'stripe' or 'usdc'\" });\n      }\n\n      console.log(`User ${userId} subscribing to tier ${tierId} with payment method: ${paymentMethod}`);\n\n      // Check if tier exists\n      const tier = await storage.getSubscriptionTier(tierId);\n      if (!tier) {\n        return res.status(404).json({ error: \"Subscription tier not found\" });\n      }\n\n      if (!tier.isActive) {\n        return res.status(400).json({ error: \"This subscription tier is not currently available\" });\n      }\n\n      // Check if user already has an active subscription\n      const existingSubscription = await storage.getUserSubscription(userId);\n      if (existingSubscription && existingSubscription.status === \"active\") {\n        return res.status(400).json({ error: \"You already have an active subscription\" });\n      }\n\n      // Calculate subscription period (30 days)\n      const now = new Date();\n      const periodEnd = new Date(now);\n      periodEnd.setDate(periodEnd.getDate() + 30); // 30 days from now\n\n      console.log(`Creating subscription: period start=${now.toISOString()}, period end=${periodEnd.toISOString()}`);\n\n      // Create subscription (without payment processing for now)\n      const subscription = await storage.createUserSubscription({\n        userId,\n        tierId,\n        status: \"active\",\n        paymentMethod,\n        currentPeriodStart: now,\n        currentPeriodEnd: periodEnd,\n        creditsGranted: 0,\n        cancelAtPeriodEnd: false\n      });\n\n      console.log(`Subscription created successfully: ${subscription.id}`);\n\n      res.status(201).json(subscription);\n    } catch (error) {\n      console.error(\"Error creating subscription:\", error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to create subscription\" \n      });\n    }\n  });\n\n  // POST /api/subscription/purchase-crypto - Complete subscription purchase with crypto payment\n  const purchaseCryptoSubscriptionSchema = z.object({\n    reference: z.string(), // Base58 public key from Solana Pay\n    tierId: z.string().uuid(),\n    currency: z.enum([\"SOL\", \"USDC\"]),\n  });\n\n  app.post(\"/api/subscription/purchase-crypto\", authenticateToken, requireApproved, async (req: AuthRequest, res) => {\n    try {\n      console.log(\"🔍 [SUBSCRIPTION] Starting crypto subscription purchase:\", req.body);\n      \n      const { reference, tierId, currency } = req.body;\n      \n      const userId = req.user!.id;\n      console.log(\"👤 [SUBSCRIPTION] User ID:\", userId);\n\n      // Get user's connected wallet (optional - for additional verification)\n      const userWallet = await storage.getUserWallet(userId);\n      if (userWallet) {\n        console.log(\"💼 [SUBSCRIPTION] User wallet found:\", userWallet.address);\n      } else {\n        console.log(\"ℹ️ [SUBSCRIPTION] No wallet connected for user (will verify via blockchain only):\", userId);\n      }\n\n      // Get platform wallet address (server-side, not client-controlled!)\n      const siteSettings = await storage.getSiteSettings();\n      if (!siteSettings || !siteSettings.platformWalletAddress) {\n        console.error(\"❌ [SUBSCRIPTION] Platform wallet not configured!\");\n        return res.status(500).json({ error: \"Platform payment address not configured. Please contact support.\" });\n      }\n\n      const recipientAddress = siteSettings.platformWalletAddress;\n      console.log(\"🏦 [SUBSCRIPTION] Platform wallet:\", recipientAddress);\n\n      // Get tier details\n      const tier = await storage.getSubscriptionTier(tierId);\n      if (!tier) {\n        return res.status(404).json({ error: \"Subscription tier not found\" });\n      }\n\n      if (!tier.isActive) {\n        return res.status(400).json({ error: \"This subscription tier is not currently available\" });\n      }\n\n      // Convert cents to dollars for USDC verification\n      const expectedAmount = tier.priceUsd / 100;\n      console.log(\"💰 [SUBSCRIPTION] Expected amount:\", expectedAmount, currency, \"(cents:\", tier.priceUsd, \")\");\n\n      // Convert reference string to PublicKey\n      const referenceKey = new PublicKey(reference);\n      console.log(\"🔑 [SUBSCRIPTION] Reference key:\", reference);\n\n      // Find transaction using reference\n      console.log(\"🔎 [SUBSCRIPTION] Searching blockchain for reference...\");\n      let signatureInfo;\n      try {\n        signatureInfo = await findReference(solanaConnection, referenceKey);\n      } catch (error: any) {\n        // FindReferenceError is expected when transaction hasn't been sent yet\n        if (error.name === 'FindReferenceError' || error.message?.includes('not found')) {\n          console.log(\"⚠️ [SUBSCRIPTION] No transaction found for reference (polling...)\");\n          return res.json({ found: false, message: \"Payment not found yet. Please complete the transaction in your wallet.\" });\n        }\n        // Re-throw unexpected errors\n        throw error;\n      }\n      \n      if (!signatureInfo || !signatureInfo.signature) {\n        console.log(\"⚠️ [SUBSCRIPTION] No transaction found for reference\");\n        return res.json({ found: false, message: \"Payment not found yet. Please complete the transaction in your wallet.\" });\n      }\n\n      console.log(\"✅ [SUBSCRIPTION] Transaction found:\", signatureInfo.signature);\n\n      const signature = signatureInfo.signature;\n\n      // Check if transaction already processed\n      console.log(\"🔄 [SUBSCRIPTION] Checking if transaction already processed...\");\n      const existingTx = await storage.getGloryTransactionByHash(signature);\n      if (existingTx) {\n        console.log(\"ℹ️ [SUBSCRIPTION] Transaction already processed:\", signature);\n        return res.json({ \n          found: true, \n          alreadyProcessed: true,\n          success: true,\n          txHash: signature,\n          message: \"Payment already verified\" \n        });\n      }\n\n      // Verify transaction details (use USDC verification for SPL token)\n      console.log(\"🔍 [SUBSCRIPTION] Verifying USDC transaction details...\");\n      const { verifyUSDCTransaction } = await import('./solana.js');\n      const txResult = await verifyUSDCTransaction(signature, recipientAddress);\n      console.log(\"📊 [SUBSCRIPTION] USDC transaction verification result:\", txResult);\n\n      if (!txResult.confirmed) {\n        console.log(\"⚠️ [SUBSCRIPTION] Transaction not yet confirmed\");\n        return res.json({ found: false, message: \"Transaction found but not yet confirmed\" });\n      }\n\n      // Log payer information (for audit trail)\n      if (userWallet) {\n        console.log(\"👤 [SUBSCRIPTION] Connected wallet:\", userWallet.address);\n      }\n      console.log(\"💳 [SUBSCRIPTION] Payment from wallet:\", txResult.from);\n\n      // Verify amount (for USDC, amount is in token units, for SOL in SOL)\n      console.log(\"💰 [SUBSCRIPTION] Verifying amount:\", {\n        expected: expectedAmount,\n        actual: txResult.amount,\n        sufficient: txResult.amount && txResult.amount >= expectedAmount\n      });\n      if (!txResult.amount || txResult.amount < expectedAmount) {\n        console.log(\"❌ [SUBSCRIPTION] Insufficient amount!\");\n        return res.status(400).json({ \n          error: `Insufficient payment amount. Expected ${expectedAmount} ${currency}, received ${txResult.amount || 0} ${currency}` \n        });\n      }\n\n      console.log(\"🎯 [SUBSCRIPTION] Verifying recipient:\", {\n        expected: recipientAddress,\n        actual: txResult.to,\n        match: txResult.to === recipientAddress\n      });\n      if (txResult.to !== recipientAddress) {\n        console.log(\"❌ [SUBSCRIPTION] Recipient mismatch!\");\n        return res.status(400).json({ \n          error: \"Payment recipient address mismatch\" \n        });\n      }\n\n      console.log(\"✅ [SUBSCRIPTION] All verifications passed!\");\n\n      // Check if user already has subscription\n      const existingSubscription = await storage.getUserSubscription(userId);\n      \n      // Calculate subscription period (30 days from now)\n      const now = new Date();\n      const periodEnd = new Date(now);\n      periodEnd.setDate(periodEnd.getDate() + 30);\n\n      let subscription: UserSubscriptionWithTier;\n\n      if (existingSubscription && existingSubscription.id) {\n        // Update existing subscription\n        console.log(\"📝 [SUBSCRIPTION] Updating existing subscription...\");\n        await storage.updateUserSubscription(existingSubscription.id, {\n          tierId,\n          status: \"active\",\n          paymentMethod: currency.toLowerCase(),\n          currentPeriodStart: now,\n          currentPeriodEnd: periodEnd,\n          creditsGranted: tier.monthlyCredits,\n          creditsGrantedAt: now,\n          cancelAtPeriodEnd: false,\n          cancelledAt: null\n        });\n\n        // Fetch full subscription with tier\n        const fullSub = await storage.getUserSubscription(userId);\n        if (!fullSub) {\n          throw new Error(\"Failed to fetch updated subscription\");\n        }\n        subscription = fullSub;\n      } else {\n        // Create new subscription\n        console.log(\"📝 [SUBSCRIPTION] Creating new subscription...\");\n        const newSub = await storage.createUserSubscription({\n          userId,\n          tierId,\n          status: \"active\",\n          paymentMethod: currency.toLowerCase(),\n          currentPeriodStart: now,\n          currentPeriodEnd: periodEnd,\n          creditsGranted: tier.monthlyCredits,\n          creditsGrantedAt: now,\n          cancelAtPeriodEnd: false\n        });\n\n        // Fetch full subscription with tier\n        const fullSub = await storage.getUserSubscription(userId);\n        if (!fullSub) {\n          throw new Error(\"Failed to fetch created subscription\");\n        }\n        subscription = fullSub;\n      }\n\n      // Grant monthly credits to user\n      console.log(\"🎁 [SUBSCRIPTION] Granting credits to user...\");\n      await storage.grantMonthlyCredits(userId);\n\n      // Create subscription transaction record\n      console.log(\"💳 [SUBSCRIPTION] Creating transaction record...\");\n      await storage.createSubscriptionTransaction({\n        userId,\n        subscriptionId: subscription.id,\n        tierId,\n        amountCents: Math.round(expectedAmount * 100), // Convert to cents\n        currency: currency,\n        paymentMethod: currency.toLowerCase(),\n        paymentStatus: \"completed\",\n        txHash: signature,\n        metadata: {\n          reference,\n          from: txResult.from,\n          to: txResult.to,\n          amount: txResult.amount,\n          verifiedAt: now.toISOString(),\n          creditsGranted: tier.monthlyCredits\n        }\n      });\n\n      // Record transaction in glory ledger (for audit trail)\n      console.log(\"📝 [SUBSCRIPTION] Recording in glory ledger...\");\n      await storage.createGloryTransaction({\n        userId,\n        delta: 0, // Crypto payments don't affect GLORY balance\n        currency: currency,\n        reason: `Subscription purchase: ${tier.name} tier - ${expectedAmount} ${currency}`,\n        txHash: signature,\n        metadata: {\n          reference,\n          tierId,\n          subscriptionId: subscription.id,\n          from: txResult.from,\n          to: txResult.to,\n          amount: txResult.amount,\n          verifiedAt: now.toISOString(),\n        }\n      });\n\n      console.log(\"✅ [SUBSCRIPTION] Subscription purchase completed successfully!\", {\n        txHash: signature,\n        subscriptionId: subscription.id,\n        tierName: tier.name,\n        creditsGranted: tier.monthlyCredits\n      });\n\n      res.json({ \n        found: true,\n        alreadyProcessed: false,\n        success: true, \n        txHash: signature,\n        subscription,\n        transaction: {\n          signature,\n          amount: txResult.amount,\n          from: txResult.from,\n          to: txResult.to,\n        },\n        message: `Successfully subscribed to ${tier.name} tier! ${tier.monthlyCredits} credits granted.`\n      });\n    } catch (error) {\n      console.error(\"💥 [SUBSCRIPTION] Subscription purchase failed:\", error);\n      \n      // Handle specific errors\n      if (error instanceof Error) {\n        console.log(\"🔍 [SUBSCRIPTION] Error details:\", {\n          name: error.name,\n          message: error.message,\n          stack: error.stack?.slice(0, 200)\n        });\n        \n        if (error.message.includes(\"not found\")) {\n          return res.json({ found: false, message: \"Payment not found yet. Please complete the transaction.\" });\n        }\n      }\n      \n      res.status(400).json({ \n        error: error instanceof Error ? error.message : \"Failed to process subscription purchase\" \n      });\n    }\n  });\n\n  // DELETE /api/subscription/cancel - Cancel subscription at period end\n  app.delete(\"/api/subscription/cancel\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      console.log(`User ${userId} requesting subscription cancellation`);\n\n      // Get user's active subscription\n      const subscription = await storage.getUserSubscription(userId);\n      \n      if (!subscription) {\n        return res.status(404).json({ error: \"No active subscription found\" });\n      }\n\n      if (subscription.status !== \"active\") {\n        return res.status(400).json({ error: \"Subscription is not active\" });\n      }\n\n      if (subscription.cancelAtPeriodEnd) {\n        return res.status(400).json({ error: \"Subscription is already scheduled for cancellation\" });\n      }\n\n      // Cancel subscription at period end\n      await storage.cancelUserSubscription(subscription.id);\n      \n      console.log(`Subscription ${subscription.id} scheduled for cancellation at period end`);\n\n      res.json({ message: \"Subscription will be cancelled at period end\" });\n    } catch (error) {\n      console.error(\"Error cancelling subscription:\", error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to cancel subscription\" \n      });\n    }\n  });\n\n  // GET /api/subscription/transactions - Get user's payment history\n  app.get(\"/api/subscription/transactions\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      console.log(`Fetching subscription transactions for user: ${userId}`);\n\n      const transactions = await storage.getSubscriptionTransactions({ userId });\n      \n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching subscription transactions:\", error);\n      res.status(500).json({ error: \"Failed to fetch payment history\" });\n    }\n  });\n\n  // Admin Tier Management (authenticated + admin)\n  // GET /api/admin/tiers - Get all tiers including inactive (admin only)\n  app.get(\"/api/admin/tiers\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      console.log(\"Admin fetching all subscription tiers (including inactive)\");\n      // Query all tiers directly from database (including inactive)\n      const tiers = await db.query.subscriptionTiers.findMany({\n        orderBy: [subscriptionTiers.sortOrder]\n      });\n      res.json(tiers);\n    } catch (error) {\n      console.error(\"Error fetching all subscription tiers:\", error);\n      res.status(500).json({ error: \"Failed to fetch subscription tiers\" });\n    }\n  });\n\n  // PUT /api/admin/tiers/:id - Update tier configuration (admin only)\n  app.put(\"/api/admin/tiers/:id\", authenticateToken, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const tierId = req.params.id;\n      const updates = req.body;\n\n      console.log(`Admin updating tier ${tierId}:`, updates);\n\n      // Validate tier exists\n      const existingTier = await storage.getSubscriptionTier(tierId);\n      if (!existingTier) {\n        return res.status(404).json({ error: \"Subscription tier not found\" });\n      }\n\n      // Update tier\n      const updatedTier = await storage.updateSubscriptionTier(tierId, updates);\n      \n      if (!updatedTier) {\n        return res.status(500).json({ error: \"Failed to update tier\" });\n      }\n\n      console.log(`Tier ${tierId} updated successfully`);\n\n      res.json(updatedTier);\n    } catch (error) {\n      console.error(\"Error updating subscription tier:\", error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to update subscription tier\" \n      });\n    }\n  });\n\n  // =============================================================================\n  // PRO EDIT - AI-powered image enhancement\n  // =============================================================================\n\n  // POST /api/canvas/save-version - Save canvas as new version\n  app.post(\"/api/canvas/save-version\", upload.single(\"image\"), authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const { imageId } = req.body;\n\n      if (!req.file) {\n        return res.status(400).json({ error: \"No image file provided\" });\n      }\n\n      if (!imageId) {\n        return res.status(400).json({ error: \"Image ID is required\" });\n      }\n\n      // Upload to Cloudinary\n      const uploadResult = await uploadFile(req.file);\n\n      res.json({\n        message: \"Canvas version saved successfully\",\n        url: uploadResult.url,\n        cloudinaryPublicId: uploadResult.cloudinaryPublicId\n      });\n    } catch (error) {\n      console.error(\"[Canvas] Error saving canvas version:\", error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to save canvas version\" \n      });\n    }\n  });\n\n  // POST /api/edits - Create new edit job\n  app.post(\"/api/edits\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const { imageUrl, preset, submissionId, generationId } = req.body;\n\n      console.log(`[ProEdit] Creating edit job for user ${userId}, preset: ${preset}`);\n\n      // Validate preset\n      if (!replicate.isValidPreset(preset)) {\n        return res.status(400).json({ error: \"Invalid preset\" });\n      }\n\n      const presetInfo = replicate.getPresetInfo(preset);\n\n      // Check user has enough credits\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      if (user.imageCredits < presetInfo.credits) {\n        return res.status(402).json({ \n          error: \"Insufficient credits\",\n          required: presetInfo.credits,\n          available: user.imageCredits\n        });\n      }\n\n      // Deduct credits\n      await storage.updateUser(userId, {\n        imageCredits: user.imageCredits - presetInfo.credits\n      });\n\n      // Create image record (or get existing)\n      const image = await storage.createImage({\n        userId,\n        submissionId: submissionId || null,\n        generationId: generationId || null,\n        originalUrl: imageUrl,\n        currentVersionId: null\n      });\n\n      // Create Replicate prediction\n      // Force HTTPS for webhook URL (Replicate requires HTTPS)\n      const webhookUrl = `https://${req.get('host')}/api/replicate-webhook`;\n      console.log(`[ProEdit] Webhook URL: ${webhookUrl}`);\n      \n      const prediction = await replicate.createPrediction(\n        preset,\n        imageUrl,\n        {},\n        webhookUrl\n      );\n\n      // Create edit job (no inputVersionId - we only create the edited version)\n      const job = await storage.createEditJob({\n        userId,\n        imageId: image.id,\n        inputVersionId: null,\n        preset,\n        params: {},\n        status: 'running',\n        replicatePredictionId: prediction.id,\n        outputVersionId: null,\n        costCredits: presetInfo.credits\n      });\n\n      console.log(`[ProEdit] Job ${job.id} created, prediction: ${prediction.id}`);\n\n      res.json({\n        jobId: job.id,\n        imageId: image.id,\n        predictionId: prediction.id,\n        status: 'running',\n        creditsDeducted: presetInfo.credits,\n        remainingCredits: user.imageCredits - presetInfo.credits\n      });\n    } catch (error) {\n      console.error(\"[ProEdit] Error creating edit job:\", error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to create edit job\" \n      });\n    }\n  });\n\n  // GET /api/edit-jobs/:id - Get job status\n  app.get(\"/api/edit-jobs/:id\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const jobId = req.params.id;\n\n      const job = await storage.getEditJob(jobId);\n      \n      if (!job) {\n        return res.status(404).json({ error: \"Job not found\" });\n      }\n\n      // Verify ownership\n      if (job.userId !== userId && req.user!.role !== 'admin') {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n\n      // If job is still running, check Replicate status\n      if (job.status === 'running' && job.replicatePredictionId) {\n        const prediction = await replicate.getPrediction(job.replicatePredictionId);\n        \n        if (prediction.status === 'succeeded') {\n          // Get output URL (it's an array for some models)\n          const outputUrl = Array.isArray(prediction.output) \n            ? prediction.output[0] \n            : prediction.output;\n\n          // Create output version\n          const outputVersion = await storage.createImageVersion({\n            imageId: job.imageId,\n            url: outputUrl,\n            source: 'edit',\n            preset: job.preset,\n            params: job.params || {}\n          });\n\n          // Update job\n          await storage.updateEditJob(jobId, {\n            status: 'succeeded',\n            outputVersionId: outputVersion.id,\n            finishedAt: new Date()\n          });\n\n          // Update image current version\n          await storage.updateImage(job.imageId, {\n            currentVersionId: outputVersion.id\n          });\n\n          job.status = 'succeeded';\n          job.outputVersionId = outputVersion.id;\n          job.finishedAt = new Date();\n        } else if (prediction.status === 'failed') {\n          const errorMessage = (prediction.error as string) || 'Processing failed';\n          const MAX_RETRIES = 2;\n          \n          // Check if we should retry (same logic as webhook)\n          if (job.retryCount < MAX_RETRIES) {\n            console.log(`[ProEdit] Polling detected failure for job ${job.id} (retry ${job.retryCount + 1}/${MAX_RETRIES}):`, errorMessage);\n            \n            // Get image to retry with original URL\n            const image = await storage.getImage(job.imageId);\n            if (image) {\n              // Create new Replicate prediction for retry using original image URL\n              const webhookUrl = `https://${req.get('host')}/api/replicate-webhook`;\n              const newPrediction = await replicate.createPrediction(\n                job.preset as any,\n                image.originalUrl,\n                job.params || {},\n                webhookUrl\n              );\n              \n              // Update job with new prediction ID, increment retry count\n              await storage.updateEditJob(jobId, {\n                replicatePredictionId: newPrediction.id,\n                retryCount: job.retryCount + 1,\n                lastAttemptAt: new Date(),\n                error: `Previous attempt failed: ${errorMessage}. Retrying...`\n              });\n              \n              job.retryCount = job.retryCount + 1;\n              job.error = `Previous attempt failed: ${errorMessage}. Retrying...`;\n              \n              console.log(`[ProEdit] Job ${job.id} retrying with new prediction: ${newPrediction.id}`);\n            }\n          } else {\n            // Max retries reached, mark as permanently failed and refund\n            await storage.updateEditJob(jobId, {\n              status: 'failed',\n              error: `Failed after ${MAX_RETRIES} retries: ${errorMessage}`,\n              finishedAt: new Date()\n            });\n\n            // Refund credits since job failed permanently\n            await storage.refundAiCredits(\n              job.userId,\n              job.costCredits,\n              `Job ${job.id} failed permanently after ${MAX_RETRIES} retries (detected via polling)`,\n              job.id\n            );\n\n            job.status = 'failed';\n            job.error = `Failed after ${MAX_RETRIES} retries: ${errorMessage}`;\n            job.finishedAt = new Date();\n            \n            console.log(`[ProEdit] Job ${job.id} permanently failed after ${MAX_RETRIES} retries (polling)`);\n          }\n        }\n      }\n\n      // Fetch output version if available\n      let outputVersion = null;\n      if (job.outputVersionId) {\n        outputVersion = await storage.getImageVersion(job.outputVersionId);\n      }\n\n      // Fetch image to get original URL\n      const image = await storage.getImage(job.imageId);\n      if (!image) {\n        return res.status(404).json({ error: \"Image not found\" });\n      }\n\n      res.json({\n        ...job,\n        outputUrl: outputVersion?.url || null,\n        originalUrl: image.originalUrl\n      });\n    } catch (error) {\n      console.error(\"[ProEdit] Error fetching job status:\", error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to fetch job status\" \n      });\n    }\n  });\n\n  // GET /api/pro-edit/image-id - Get imageId for submission or generation\n  app.get(\"/api/pro-edit/image-id\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const { submissionId, generationId } = req.query;\n\n      if (!submissionId && !generationId) {\n        return res.status(400).json({ error: \"submissionId or generationId required\" });\n      }\n\n      // Find image by submissionId or generationId\n      let image = null;\n      if (submissionId) {\n        const imgs = await db.select()\n          .from(images)\n          .where(eq(images.submissionId, submissionId as string))\n          .limit(1);\n        image = imgs[0];\n      } else if (generationId) {\n        const imgs = await db.select()\n          .from(images)\n          .where(eq(images.generationId, generationId as string))\n          .limit(1);\n        image = imgs[0];\n      }\n\n      // If no image found, return null (not an error - just means no edits yet)\n      if (!image) {\n        return res.json({ imageId: null });\n      }\n\n      // Verify ownership\n      if (image.userId !== userId && req.user!.role !== 'admin') {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n\n      res.json({ imageId: image.id });\n    } catch (error) {\n      console.error(\"[ProEdit] Error fetching imageId:\", error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to fetch imageId\" \n      });\n    }\n  });\n\n  // GET /api/images/:imageId/versions - Get all versions for an image\n  app.get(\"/api/images/:imageId/versions\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const imageId = req.params.imageId;\n\n      // Get image to verify ownership\n      const image = await storage.getImage(imageId);\n      if (!image) {\n        return res.status(404).json({ error: \"Image not found\" });\n      }\n\n      // Verify ownership\n      if (image.userId !== userId && req.user!.role !== 'admin') {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n\n      // Get all versions for this image\n      const versions = await storage.getImageVersionsByImageId(imageId);\n\n      res.json({ versions });\n    } catch (error) {\n      console.error(\"[ProEdit] Error fetching image versions:\", error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to fetch versions\" \n      });\n    }\n  });\n\n  // GET /api/images/:imageId/current-url - Get current version URL for an image\n  app.get(\"/api/images/:imageId/current-url\", authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const imageId = req.params.imageId;\n\n      // Get image to verify ownership\n      const image = await storage.getImage(imageId);\n      if (!image) {\n        return res.status(404).json({ error: \"Image not found\" });\n      }\n\n      // Verify ownership\n      if (image.userId !== userId && req.user!.role !== 'admin') {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n\n      // Get current version\n      const currentVersion = await storage.getCurrentImageVersion(imageId);\n\n      // Return current version URL if exists, otherwise original URL\n      const currentUrl = currentVersion?.url || image.originalUrl;\n\n      res.json({ url: currentUrl, isCurrent: !!currentVersion });\n    } catch (error) {\n      console.error(\"[ProEdit] Error fetching current URL:\", error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to fetch current URL\" \n      });\n    }\n  });\n\n  // Timeout guard - check for stalled jobs periodically\n  const TIMEOUT_MINUTES = 10;\n  const checkStalledJobs = async () => {\n    try {\n      const timeoutThreshold = new Date(Date.now() - TIMEOUT_MINUTES * 60 * 1000);\n      \n      // Find jobs that are running but last attempt was too long ago\n      const stalledJobs = await db.select()\n        .from(editJobs)\n        .where(eq(editJobs.status, 'running'));\n      \n      for (const job of stalledJobs) {\n        // Check lastAttemptAt instead of createdAt to allow retries\n        if (new Date(job.lastAttemptAt) < timeoutThreshold) {\n          console.log(`[ProEdit] Timeout guard: Job ${job.id} exceeded ${TIMEOUT_MINUTES} minute limit since last attempt`);\n          \n          await storage.updateEditJob(job.id, {\n            status: 'failed',\n            error: `Timeout: Job exceeded ${TIMEOUT_MINUTES} minute processing limit`,\n            finishedAt: new Date()\n          });\n\n          // Refund credits since job timed out\n          await storage.refundAiCredits(\n            job.userId,\n            job.costCredits,\n            `Job ${job.id} timed out after ${TIMEOUT_MINUTES} minutes`,\n            job.id\n          );\n        }\n      }\n    } catch (error) {\n      console.error(\"[ProEdit] Error checking stalled jobs:\", error);\n    }\n  };\n\n  // Run timeout guard every 2 minutes\n  setInterval(checkStalledJobs, 2 * 60 * 1000);\n  // Run once on startup\n  checkStalledJobs();\n\n  // POST /api/replicate-webhook - Webhook from Replicate\n  app.post(\"/api/replicate-webhook\", async (req, res) => {\n    try {\n      const prediction = req.body;\n      console.log(`[ProEdit] Webhook received for prediction: ${prediction.id}, status: ${prediction.status}`);\n\n      // Find job by prediction ID\n      const jobs = await db.select()\n        .from(editJobs)\n        .where(eq(editJobs.replicatePredictionId, prediction.id))\n        .limit(1);\n\n      const job = jobs[0];\n      \n      if (!job) {\n        console.log(`[ProEdit] No job found for prediction: ${prediction.id}`);\n        return res.json({ received: true });\n      }\n\n      if (prediction.status === 'succeeded') {\n        // Get output URL from Replicate\n        const replicateOutputUrl = Array.isArray(prediction.output) \n          ? prediction.output[0] \n          : prediction.output;\n\n        console.log(`[ProEdit] Replicate output URL: ${replicateOutputUrl}`);\n\n        // Get image details\n        const image = await storage.getImage(job.imageId);\n        if (!image) {\n          throw new Error(`Image not found: ${job.imageId}`);\n        }\n\n        // Generate version ID\n        const versionId = `v${Date.now()}`;\n\n        // Upload to Supabase Storage\n        const { url: supabaseUrl } = await uploadImageToSupabase(\n          replicateOutputUrl,\n          image.userId,\n          job.imageId,\n          versionId\n        );\n\n        console.log(`[ProEdit] Uploaded to Supabase: ${supabaseUrl}`);\n\n        // Use Supabase URL directly as thumbnail (no Cloudinary upload needed)\n        const thumbnailUrl = supabaseUrl;\n        console.log(`[ProEdit] Thumbnail URL: ${thumbnailUrl}`);\n\n        // Create output version with Supabase URL and mark as current\n        // First unset all other versions for this image\n        await db.update(imageVersions)\n          .set({ isCurrent: false })\n          .where(eq(imageVersions.imageId, job.imageId));\n\n        // Then create the new version with isCurrent=true\n        const [outputVersion] = await db.insert(imageVersions).values({\n          imageId: job.imageId,\n          url: supabaseUrl,\n          thumbnailUrl: thumbnailUrl,\n          source: 'edit',\n          preset: job.preset,\n          params: job.params || {},\n          isCurrent: true\n        }).returning();\n\n        // Update job\n        await storage.updateEditJob(job.id, {\n          status: 'succeeded',\n          outputVersionId: outputVersion.id,\n          finishedAt: new Date()\n        });\n\n        // Update image current version\n        await storage.updateImage(job.imageId, {\n          currentVersionId: outputVersion.id\n        });\n\n        console.log(`[ProEdit] Job ${job.id} completed successfully`);\n      } else if (prediction.status === 'failed') {\n        const errorMessage = (prediction.error as string) || 'Processing failed';\n        const MAX_RETRIES = 2;\n        \n        // Check if we should retry\n        if (job.retryCount < MAX_RETRIES) {\n          console.log(`[ProEdit] Job ${job.id} failed (retry ${job.retryCount + 1}/${MAX_RETRIES}):`, errorMessage);\n          \n          // Get image to retry with original URL\n          const image = await storage.getImage(job.imageId);\n          if (!image) {\n            throw new Error(`Image not found: ${job.imageId}`);\n          }\n          \n          // Create new Replicate prediction for retry using original image URL\n          const webhookUrl = `https://${req.get('host')}/api/replicate-webhook`;\n          const newPrediction = await replicate.createPrediction(\n            job.preset as any,\n            image.originalUrl,\n            job.params || {},\n            webhookUrl\n          );\n          \n          // Update job with new prediction ID, increment retry count, and refresh timestamp\n          await storage.updateEditJob(job.id, {\n            replicatePredictionId: newPrediction.id,\n            retryCount: job.retryCount + 1,\n            lastAttemptAt: new Date(), // Refresh timestamp to prevent timeout guard from canceling retry\n            error: `Previous attempt failed: ${errorMessage}. Retrying...`\n          });\n          \n          console.log(`[ProEdit] Job ${job.id} retrying with new prediction: ${newPrediction.id}`);\n        } else {\n          // Max retries reached, mark as permanently failed\n          await storage.updateEditJob(job.id, {\n            status: 'failed',\n            error: `Failed after ${MAX_RETRIES} retries: ${errorMessage}`,\n            finishedAt: new Date()\n          });\n\n          // Refund credits since job failed permanently\n          await storage.refundAiCredits(\n            job.userId,\n            job.costCredits,\n            `Job ${job.id} failed permanently after ${MAX_RETRIES} retries`,\n            job.id\n          );\n\n          console.log(`[ProEdit] Job ${job.id} permanently failed after ${MAX_RETRIES} retries`);\n        }\n      }\n\n      res.json({ received: true });\n    } catch (error) {\n      console.error(\"[ProEdit] Webhook error:\", error);\n      res.status(500).json({ error: \"Webhook processing failed\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":173223},"client/src/pages/contest-detail.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useRoute, Link } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Search, FileText, Upload, Heart, Trophy, ChevronDown, ArrowLeft, Expand, Share2, X } from \"lucide-react\";\nimport { GlassButton } from \"@/components/GlassButton\";\nimport { ContestLightboxModal } from \"@/components/ContestLightboxModal\";\nimport { ContestRulesCard } from \"@/components/ContestRulesCard\";\nimport { UploadWizardModal } from \"@/components/UploadWizardModal\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatPrizeAmount } from \"@/lib/utils\";\n\nexport default function ContestDetailPage() {\n  const [match, params] = useRoute(\"/contest/:slug\");\n  const slug = params?.slug || \"\";\n  const { data: user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [selectedSubmission, setSelectedSubmission] = useState<any>(null);\n  const [isLightboxOpen, setIsLightboxOpen] = useState(false);\n  const [showRules, setShowRules] = useState(false);\n  const [showUploadWizard, setShowUploadWizard] = useState(false);\n  const [showAllPrizesModal, setShowAllPrizesModal] = useState(false);\n  const [sortBy, setSortBy] = useState(\"votes\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [activeCardId, setActiveCardId] = useState<string | null>(null);\n  const [isToolbarSticky, setIsToolbarSticky] = useState(false);\n  const toolbarRef = React.useRef<HTMLDivElement>(null);\n\n  // Fetch contest by slug\n  const { data: contests = [], isLoading: contestsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/contests\"]\n  });\n\n  const contest = contests.find((c: any) => c.slug === slug);\n\n  // Fetch submissions for this contest\n  const { data: submissions = [], isLoading: submissionsLoading } = useQuery({\n    queryKey: [\"/api/submissions\", contest?.id],\n    enabled: !!contest?.id,\n    queryFn: async () => {\n      if (!contest?.id) {\n        throw new Error(\"Contest ID is not available\");\n      }\n      // Debug logging disabled to reduce console spam\n      const response = await fetch(`/api/submissions?contestId=${contest.id}`, {\n        credentials: \"include\"\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch submissions\");\n      const data = await response.json();\n      return data;\n    }\n  });\n\n  // Fetch user's votes\n  const { data: userVotes = [] } = useQuery({\n    queryKey: [\"/api/votes/user\"],\n    enabled: !!user,\n    queryFn: async () => {\n      const response = await fetch(\"/api/votes/user\", { credentials: \"include\" });\n      if (!response.ok) return [];\n      return response.json();\n    }\n  });\n\n  // Vote mutation\n  const voteMutation = useMutation({\n    mutationFn: async (submissionId: string) => {\n      const response = await apiRequest(\"POST\", \"/api/votes\", { submissionId });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\", contest?.id] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/votes/user\"] });\n      toast({\n        title: \"Vote recorded!\",\n        description: \"Your vote has been counted\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Vote failed\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Buy prompt mutation\n  const buyPromptMutation = useMutation({\n    mutationFn: async (submissionId: string) => {\n      const response = await apiRequest(\"POST\", `/api/prompts/purchase/${submissionId}`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\", contest?.id] });\n      toast({\n        title: \"Prompt purchased!\",\n        description: \"The prompt is now visible to you.\",\n      });\n      // Refresh modal to show unlocked prompt\n      if (selectedSubmission) {\n        setIsLightboxOpen(false);\n        setTimeout(() => setIsLightboxOpen(true), 100);\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Purchase failed\",\n        description: error.message || \"Failed to purchase prompt. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Share functionality\n  const handleShare = (submission: any) => {\n    const shareUrl = `${window.location.origin}/submission/${submission.id}`;\n    \n    if (navigator.share) {\n      navigator.share({\n        title: submission.title,\n        text: `Check out this amazing submission: ${submission.title}`,\n        url: shareUrl,\n      }).catch((error) => {\n        console.log('Error sharing:', error);\n        fallbackShare(shareUrl);\n      });\n    } else {\n      fallbackShare(shareUrl);\n    }\n  };\n\n  const fallbackShare = (url: string) => {\n    navigator.clipboard.writeText(url).then(() => {\n      toast({\n        title: \"Link copied!\",\n        description: \"Submission link has been copied to clipboard.\",\n      });\n    }).catch(() => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy link to clipboard.\",\n        variant: \"destructive\",\n      });\n    });\n  };\n\n  const handleCardClick = (e: React.MouseEvent, submissionId: string) => {\n    // Only toggle on mobile (below lg breakpoint)\n    if (window.innerWidth < 1024) {\n      e.stopPropagation();\n      setActiveCardId(activeCardId === submissionId ? null : submissionId);\n    }\n  };\n\n  // Handle browser back button for All Prizes Modal (Dialog handles Escape automatically)\n  useEffect(() => {\n    if (!showAllPrizesModal) return;\n\n    const modalId = Date.now();\n\n    // Push unique history state when modal opens\n    window.history.pushState({ modal: 'allPrizes', modalId }, '');\n\n    // Handle browser back button\n    const handlePopState = () => {\n      // Close modal when going back in history\n      if (window.history.state?.modalId !== modalId) {\n        setShowAllPrizesModal(false);\n      }\n    };\n\n    window.addEventListener('popstate', handlePopState);\n\n    return () => {\n      window.removeEventListener('popstate', handlePopState);\n    };\n  }, [showAllPrizesModal]);\n\n  // Countdown timer\n  const [timeLeft, setTimeLeft] = useState({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n\n  useEffect(() => {\n    if (!contest?.endAt) return;\n\n    const calculateTimeLeft = () => {\n      if (contest.status === \"ended\") {\n        return { days: 0, hours: 0, minutes: 0, seconds: 0 };\n      }\n\n      const difference = new Date(contest.endAt).getTime() - Date.now();\n      if (difference <= 0) {\n        return { days: 0, hours: 0, minutes: 0, seconds: 0 };\n      }\n\n      return {\n        days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n        hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\n        minutes: Math.floor((difference / 1000 / 60) % 60),\n        seconds: Math.floor((difference / 1000) % 60)\n      };\n    };\n\n    setTimeLeft(calculateTimeLeft());\n    const timer = setInterval(() => setTimeLeft(calculateTimeLeft()), 1000);\n\n    return () => clearInterval(timer);\n  }, [contest]);\n\n  // Scroll to top on mount\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  // Sticky toolbar on scroll\n  useEffect(() => {\n    const handleScroll = () => {\n      if (!toolbarRef.current) return;\n      \n      const toolbarTop = toolbarRef.current.getBoundingClientRect().top;\n      const navbarHeight = 100; // navbar height\n      \n      // When toolbar reaches the top (navbar bottom), make it sticky\n      if (toolbarTop <= navbarHeight) {\n        setIsToolbarSticky(true);\n      } else {\n        setIsToolbarSticky(false);\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  // Process submissions with vote data (moved here to avoid hooks rule violation)\n  const submissionsWithVotes = submissions.map((sub: any) => ({\n    ...sub,\n    voteCount: sub.votesCount || 0,\n    hasVoted: userVotes.some((v: any) => v.submissionId === sub.id)\n  }));\n\n  // Debug logging (only log once to avoid spam) - moved here to be before early returns\n  React.useEffect(() => {\n    // Debug logging disabled to reduce console spam\n    // if (submissions.length > 0) {\n    //   console.log(\"🎯 Processing submissions:\", {\n    //     totalSubmissions: submissions.length,\n    //     submissionsWithVotes: submissionsWithVotes.length,\n    //     userIsLoggedIn: !!user,\n    //     userId: user?.id\n    //   });\n\n    //   // Log each submission status for debugging\n    //   submissionsWithVotes.forEach((sub: any) => {\n    //     console.log(`📝 Submission \"${sub.title}\" (${sub.id}) - Status: ${sub.status}, User: ${sub.userId}`);\n    //   });\n    // }\n  }, [submissions.length]); // Only run when submissions count changes\n\n  // Show loading state while contests are being fetched\n  if (contestsLoading) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center min-h-[60vh]\">\n        <div className=\"text-center\">\n          <div className=\"text-2xl font-bold text-white mb-2\">Loading contest...</div>\n          <div className=\"text-gray-400\">Please wait</div>\n        </div>\n      </div>\n    );\n  }\n\n  // Show not found if contests loaded but slug doesn't match\n  if (!contest) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center min-h-[60vh]\">\n        <div className=\"text-center\">\n          <div className=\"text-2xl font-bold text-white mb-2\">Contest not found</div>\n          <div className=\"text-gray-400 mb-6\">The contest you're looking for doesn't exist or has been removed.</div>\n          <Link href=\"/contests\">\n            <GlassButton variant=\"primary\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Contests\n            </GlassButton>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  // Top 5 submissions always sorted by votes (not affected by filters)\n  const topSubmissions = [...submissionsWithVotes]\n    .sort((a: any, b: any) => b.voteCount - a.voteCount)\n    .slice(0, 5);\n\n  // Other submissions (excluding top 5)\n  const topSubmissionIds = new Set(topSubmissions.map(s => s.id));\n  let otherSubmissions = submissionsWithVotes.filter((sub: any) => !topSubmissionIds.has(sub.id));\n\n  // Filter other submissions (search applies only to non-top-5)\n  if (searchTerm) {\n    otherSubmissions = otherSubmissions.filter((sub: any) =>\n      sub.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      sub.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      sub.tags?.some((tag: string) => tag.toLowerCase().includes(searchTerm.toLowerCase()))\n    );\n  }\n\n  // Sort other submissions based on selected sort option\n  const allSubmissions = [...otherSubmissions].sort((a: any, b: any) => {\n    if (sortBy === \"votes\") return b.voteCount - a.voteCount;\n    if (sortBy === \"recent\") return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n    if (sortBy === \"oldest\") return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();\n    return 0;\n  });\n\n  // Combined filtered submissions for \"no results\" check\n  const filteredSubmissions = [...topSubmissions, ...allSubmissions];\n\n  const handleVote = (submissionId: string) => {\n    if (!user) {\n      toast({\n        title: \"Login required\",\n        description: \"Please login to vote\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    voteMutation.mutate(submissionId);\n  };\n\n  const handleBuyPrompt = (submissionId: string) => {\n    if (!user) {\n      toast({\n        title: \"Login required\",\n        description: \"Please login to purchase prompts\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    buyPromptMutation.mutate(submissionId);\n  };\n\n  const handleShowUpload = () => {\n    if (!user) {\n      toast({\n        title: \"Login required\",\n        description: \"Please login to submit\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    setShowUploadWizard(true);\n  };\n\n  return (\n    <>\n      <div className=\"flex-1 px-4 py-6 pb-32 md:pb-6 sm:px-6 md:px-10 lg:px-20\">\n        <div className=\"mx-auto max-w-screen-xl\">\n          {/* Back Button */}\n          <Link href=\"/contests\" className=\"inline-flex items-center text-gray-400 hover:text-white mb-6 md:mb-8 transition-colors\" data-testid=\"link-back-contests\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Contests\n          </Link>\n\n          {/* Header Controls - Contest Type Selector, Timer, Prize Pool */}\n          <div className=\"mb-8 md:mb-12 flex flex-col items-center justify-between gap-6 md:gap-8\">\n            {/* Contest Type Selector and Upload Button */}\n            <div className=\"flex flex-col sm:flex-row items-center justify-center gap-3 md:gap-4 w-full\">\n              <div className=\"w-full max-w-sm text-center\">\n                <h1 className=\"text-xl sm:text-2xl font-bold text-white mb-2\" data-testid=\"text-contest-title\">\n                  {contest.title}\n                </h1>\n              </div>\n              <div className=\"flex flex-col sm:flex-row gap-3 md:gap-4 w-full sm:w-auto\">\n                <GlassButton\n                  onClick={handleShowUpload}\n                  className=\"flex flex-shrink-0 items-center justify-center gap-2 px-6 py-3 text-base font-bold w-full sm:w-auto\"\n                  data-testid=\"button-upload\"\n                >\n                  <Upload className=\"h-5 w-5\" />\n                  Upload\n                </GlassButton>\n                <GlassButton\n                  onClick={() => setShowRules(true)}\n                  variant=\"primary\"\n                  className=\"flex flex-shrink-0 items-center justify-center gap-2 px-6 py-3 text-base font-bold w-full sm:w-auto\"\n                  data-testid=\"button-show-rules\"\n                >\n                  <FileText className=\"h-5 w-5\" />\n                  Contest Rules\n                </GlassButton>\n              </div>\n            </div>\n\n            <div className=\"flex flex-col lg:flex-row w-full items-center justify-center gap-8\">\n              {/* Contest Timer */}\n              <div className=\"w-full max-w-lg rounded-xl bg-gradient-to-br from-primary/20 to-purple-600/20 p-3 sm:p-4 text-center border border-primary/30 backdrop-blur-sm\">\n                <p className=\"text-sm font-medium text-primary text-glow mb-3\">Contest Ends In:</p>\n                <div className=\"flex items-center justify-center gap-2 sm:gap-3\">\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"bg-black/30 rounded-lg px-2 py-1 min-w-[40px] backdrop-blur-sm border border-primary/20\">\n                      <span className=\"text-lg sm:text-xl font-bold text-white text-glow\">{String(timeLeft.days).padStart(2, '0')}</span>\n                    </div>\n                    <span className=\"text-xs text-gray-300 mt-1 font-medium\">Days</span>\n                  </div>\n                  <span className=\"text-lg sm:text-xl font-bold text-primary text-glow animate-pulse\">:</span>\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"bg-black/30 rounded-lg px-2 py-1 min-w-[40px] backdrop-blur-sm border border-primary/20\">\n                      <span className=\"text-lg sm:text-xl font-bold text-white text-glow\">{String(timeLeft.hours).padStart(2, '0')}</span>\n                    </div>\n                    <span className=\"text-xs text-gray-300 mt-1 font-medium\">Hours</span>\n                  </div>\n                  <span className=\"text-lg sm:text-xl font-bold text-primary text-glow animate-pulse\">:</span>\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"bg-black/30 rounded-lg px-2 py-1 min-w-[40px] backdrop-blur-sm border border-primary/20\">\n                      <span className=\"text-lg sm:text-xl font-bold text-white text-glow\">{String(timeLeft.minutes).padStart(2, '0')}</span>\n                    </div>\n                    <span className=\"text-xs text-gray-300 mt-1 font-medium\">Minutes</span>\n                  </div>\n                  <span className=\"text-lg sm:text-xl font-bold text-primary text-glow animate-pulse\">:</span>\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"bg-black/30 rounded-lg px-2 py-1 min-w-[40px] backdrop-blur-sm border border-primary/20\">\n                      <span className=\"text-lg sm:text-xl font-bold text-white text-glow\">{String(timeLeft.seconds).padStart(2, '0')}</span>\n                    </div>\n                    <span className=\"text-xs text-gray-300 mt-1 font-medium\">Seconds</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Prize Pool Section */}\n              <div className=\"w-full max-w-lg rounded-xl border-2 border-primary/30 bg-gradient-to-br from-primary/10 to-purple-600/10 p-3 sm:p-4 glow-border backdrop-blur-sm\">\n                <h3 className=\"mb-4 text-center text-xl sm:text-2xl font-bold text-white text-glow\">\n                  {formatPrizeAmount(contest.prizeGlory)} {((contest as any).config?.currency) || 'GLORY'}\n                </h3>\n                \n                {/* Dynamic Prize Distribution */}\n                {contest.prizeDistribution && contest.prizeDistribution.length > 0 ? (\n                  <>\n                    <div className={`grid gap-2 sm:gap-3 text-center ${\n                      contest.prizeDistribution.length <= 3 ? 'grid-cols-3' :\n                      contest.prizeDistribution.length === 4 ? 'grid-cols-4' :\n                      'grid-cols-5'\n                    }`}>\n                      {/* Show first 4 places if more than 5, otherwise show all up to 5 */}\n                      {contest.prizeDistribution.slice(0, contest.prizeDistribution.length > 5 ? 4 : 5).map((prize: any, index: number) => {\n                        const placeNumber = index + 1;\n                        const badgeColor = \n                          placeNumber === 1 ? 'from-yellow-400 to-yellow-600' :\n                          placeNumber === 2 ? 'from-gray-300 to-gray-500' :\n                          placeNumber === 3 ? 'from-orange-400 to-orange-600' :\n                          'from-blue-400 to-blue-600';\n                        \n                        return (\n                          <div \n                            key={index}\n                            className=\"flex flex-col items-center justify-center rounded-lg bg-primary/10 p-2 transition-all hover:bg-primary/20 hover:scale-105\"\n                          >\n                            <div className={`w-6 h-6 rounded-full bg-gradient-to-r ${badgeColor} flex items-center justify-center mb-1`}>\n                              <span className=\"text-xs font-bold text-black\">\n                                {placeNumber === 1 ? '1st' :\n                                 placeNumber === 2 ? '2nd' :\n                                 placeNumber === 3 ? '3rd' :\n                                 `${placeNumber}th`}\n                              </span>\n                            </div>\n                            <p className=\"text-xs font-bold text-white mb-1\">\n                              {typeof prize.value === 'number' \n                                ? formatPrizeAmount(prize.value)\n                                : formatPrizeAmount(Math.floor(contest.prizeGlory * (prize.percentage / 100)))\n                              }\n                            </p>\n                            <p className=\"text-xs text-primary font-medium\">{((contest as any).config?.currency) || 'GLORY'}</p>\n                          </div>\n                        );\n                      })}\n                      \n                      {/* Show \"+\" indicator if more than 5 places */}\n                      {contest.prizeDistribution.length > 5 && (\n                        <button\n                          onClick={() => setShowAllPrizesModal(true)}\n                          className=\"flex flex-col items-center justify-center rounded-lg bg-primary/10 p-2 transition-all hover:bg-primary/20 hover:scale-105 cursor-pointer\"\n                          data-testid=\"button-view-all-prizes\"\n                        >\n                          <div className=\"w-6 h-6 rounded-full bg-gradient-to-r from-purple-400 to-purple-600 flex items-center justify-center mb-1\">\n                            <span className=\"text-xs font-bold text-white\">+</span>\n                          </div>\n                          <p className=\"text-xs font-bold text-white mb-1\">\n                            {contest.prizeDistribution.length - 4}\n                          </p>\n                          <p className=\"text-xs text-primary font-medium\">More</p>\n                        </button>\n                      )}\n                    </div>\n                  </>\n                ) : (\n                  /* Fallback to default 3-place distribution */\n                  <div className=\"grid grid-cols-3 gap-2 sm:gap-3 text-center\">\n                    {/* 1st Place - 50% */}\n                    <div className=\"flex flex-col items-center justify-center rounded-lg bg-primary/10 p-2 transition-all hover:bg-primary/20 hover:scale-105\">\n                      <div className=\"w-6 h-6 rounded-full bg-gradient-to-r from-yellow-400 to-yellow-600 flex items-center justify-center mb-1\">\n                        <span className=\"text-xs font-bold text-black\">1st</span>\n                      </div>\n                      <p className=\"text-xs sm:text-sm font-bold text-white mb-1\">\n                        {formatPrizeAmount(Math.floor(contest.prizeGlory * 0.5))}\n                      </p>\n                      <p className=\"text-xs text-primary font-medium\">{((contest as any).config?.currency) || 'GLORY'}</p>\n                    </div>\n                    \n                    {/* 2nd Place - 30% */}\n                    <div className=\"flex flex-col items-center justify-center rounded-lg bg-primary/10 p-2 transition-all hover:bg-primary/20 hover:scale-105\">\n                      <div className=\"w-6 h-6 rounded-full bg-gradient-to-r from-gray-300 to-gray-500 flex items-center justify-center mb-1\">\n                        <span className=\"text-xs font-bold text-black\">2nd</span>\n                      </div>\n                      <p className=\"text-xs sm:text-sm font-bold text-white mb-1\">\n                        {formatPrizeAmount(Math.floor(contest.prizeGlory * 0.3))}\n                      </p>\n                      <p className=\"text-xs text-primary font-medium\">{((contest as any).config?.currency) || 'GLORY'}</p>\n                    </div>\n                    \n                    {/* 3rd Place - 20% */}\n                    <div className=\"flex flex-col items-center justify-center rounded-lg bg-primary/10 p-2 transition-all hover:bg-primary/20 hover:scale-105\">\n                      <div className=\"w-6 h-6 rounded-full bg-gradient-to-r from-orange-400 to-orange-600 flex items-center justify-center mb-1\">\n                        <span className=\"text-xs font-bold text-black\">3rd</span>\n                      </div>\n                      <p className=\"text-xs sm:text-sm font-bold text-white mb-1\">\n                        {formatPrizeAmount(Math.floor(contest.prizeGlory * 0.2))}\n                      </p>\n                      <p className=\"text-xs text-primary font-medium\">{((contest as any).config?.currency) || 'GLORY'}</p>\n                    </div>\n                  </div>\n                )}\n                \n                {/* Prize Distribution Summary */}\n                <div className=\"mt-3 pt-3 border-t border-primary/20\">\n                  <p className=\"text-xs text-center text-gray-300\">\n                    {contest.prizeDistribution ? contest.prizeDistribution.length : 3} Winners • Total Pool: {formatPrizeAmount(contest.prizeGlory)} {((contest as any).config?.currency) || 'GLORY'}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {submissionsLoading ? (\n            <div className=\"text-center text-white py-12\">Loading submissions...</div>\n          ) : submissionsWithVotes.length === 0 ? (\n            <div className=\"text-center text-gray-400 py-12 mt-12\">\n              <p>No submissions yet. Be the first to enter!</p>\n            </div>\n          ) : filteredSubmissions.length === 0 ? (\n            <div className=\"text-center text-gray-400 py-12 mt-8\">\n              <p>No results found for \"{searchTerm}\"</p>\n              <p className=\"text-sm mt-2\">Try a different search term</p>\n            </div>\n          ) : (\n            <>\n              {/* Top 5 Most Liked - Expanded Layout */}\n              {topSubmissions.length > 0 && (\n                <div className=\"mt-12\">\n                  <h3 className=\"mb-8 text-center text-3xl font-bold text-white text-glow\">\n                    <Trophy className=\"inline-block h-8 w-8 text-yellow-400 mr-2\" />\n                    Top 5 Most Liked\n                  </h3>\n                  \n                  {/* Expanded Layout */}\n                  <div className=\"flex flex-col items-center gap-6\">\n                    {/* First Place - Top position */}\n                    {topSubmissions[0] && (\n                      <div className=\"w-full max-w-sm\">\n                        <div className=\"relative group\" data-testid={`card-top-submission-${topSubmissions[0].id}`}>\n                          {/* Rank Badge */}\n                          <div className=\"absolute -top-3 -left-3 z-10 h-12 w-12 rounded-full bg-gradient-to-br from-yellow-400 to-orange-500 border-4 border-gray-900 flex items-center justify-center text-lg font-bold text-gray-900 glow\">\n                            1\n                          </div>\n\n                          <div className=\"rounded-xl overflow-hidden shadow-lg transition-all duration-300 hover:shadow-primary/20 hover:-translate-y-1\">\n                            <div className=\"relative overflow-hidden aspect-square\" onClick={(e) => handleCardClick(e, topSubmissions[0].id)}>\n                              <img\n                                src={topSubmissions[0].mediaUrl}\n                                alt={topSubmissions[0].title}\n                                className=\"w-full h-full object-cover transition-transform duration-500 group-hover:scale-110\"\n                                loading=\"lazy\"\n                              />\n                              \n                              {/* Dark Overlay */}\n                              <div className=\"absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-all duration-300\">\n                                {/* Action Buttons - Top Right */}\n                                <div className={`absolute top-2 sm:top-3 right-2 sm:right-3 flex flex-col items-center gap-1 sm:gap-2 ${activeCardId === topSubmissions[0].id ? 'opacity-100 lg:opacity-0' : 'opacity-0'} lg:group-hover:opacity-100 transition-opacity duration-300`}>\n                                  {/* Vote Button */}\n                                  <button\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      handleVote(topSubmissions[0].id);\n                                    }}\n                                    className={`p-2 rounded-full backdrop-blur-sm transition-all duration-300 ${\n                                      topSubmissions[0].hasVoted \n                                        ? 'bg-primary/90 text-white' \n                                        : 'bg-black/50 text-white hover:bg-primary/90'\n                                    }`}\n                                    data-testid={`button-vote-${topSubmissions[0].id}`}\n                                  >\n                                    <Heart className={`h-3 w-3 sm:h-4 sm:w-4 ${topSubmissions[0].hasVoted ? 'fill-current' : ''}`} />\n                                  </button>\n\n                                  {/* Share Button */}\n                                  <button\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      handleShare(topSubmissions[0]);\n                                    }}\n                                    className=\"p-2 rounded-full bg-black/50 text-white hover:bg-primary/90 backdrop-blur-sm transition-all duration-300\"\n                                    data-testid={`button-share-${topSubmissions[0].id}`}\n                                  >\n                                    <Share2 className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                                  </button>\n\n                                  {/* Expand Button */}\n                                  <button\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      setSelectedSubmission(topSubmissions[0]);\n                                      setIsLightboxOpen(true);\n                                    }}\n                                    className=\"p-2 rounded-full bg-black/50 text-white hover:bg-primary/90 backdrop-blur-sm transition-all duration-300\"\n                                    data-testid={`button-expand-${topSubmissions[0].id}`}\n                                  >\n                                    <Expand className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                                  </button>\n                                </div>\n                              </div>\n                              \n                              {/* Bottom Info Overlay */}\n                              <div className={`absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 via-black/60 to-transparent p-3 sm:p-4 ${activeCardId === topSubmissions[0].id ? 'opacity-100 lg:opacity-0' : 'opacity-0'} lg:group-hover:opacity-100 transition-all duration-300 transform translate-y-0 lg:translate-y-2 lg:group-hover:translate-y-0`}>\n                                <h3 className=\"text-base sm:text-lg font-bold text-white mb-1\">\n                                  {topSubmissions[0].title}\n                                </h3>\n                                <p className=\"text-xs sm:text-sm text-white/80 mb-2\">\n                                  by {topSubmissions[0].user?.username || 'Unknown'}\n                                </p>\n                                \n                                <div className=\"flex items-center gap-1 text-white/80\">\n                                  <Heart className={`h-3 w-3 ${topSubmissions[0].hasVoted ? 'fill-primary text-primary' : ''}`} />\n                                  <span className=\"text-sm\">{topSubmissions[0].voteCount} votes</span>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                    \n                    {/* Places 2-5 - Bottom row */}\n                    {topSubmissions.length > 1 && (\n                      <div className=\"w-full max-w-5xl\">\n                        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 justify-center\">\n                          {topSubmissions.slice(1, 5).map((submission: any, index: number) => {\n                            const placeNumber = index + 2;\n                            const badgeColor = \n                              placeNumber === 2 ? 'from-gray-300 to-gray-500' :\n                              placeNumber === 3 ? 'from-orange-400 to-orange-600' :\n                              'from-blue-400 to-blue-600';\n\n                            return (\n                              <div key={submission.id} className=\"w-full\">\n                                <div className=\"relative group\" data-testid={`card-top-submission-${submission.id}`}>\n                                  {/* Rank Badge */}\n                                  <div className=\"absolute -top-3 -left-3 z-10 h-10 w-10 rounded-full bg-gradient-to-br from-yellow-400 to-orange-500 border-3 border-gray-900 flex items-center justify-center text-sm font-bold text-gray-900 glow\">\n                                    {placeNumber}\n                                  </div>\n\n                                  <div className=\"rounded-xl overflow-hidden shadow-lg transition-all duration-300 hover:shadow-primary/20 hover:-translate-y-1\">\n                                    <div className=\"relative overflow-hidden aspect-square\" onClick={(e) => handleCardClick(e, submission.id)}>\n                                      <img\n                                        src={submission.mediaUrl}\n                                        alt={submission.title}\n                                        className=\"w-full h-full object-cover transition-transform duration-500 group-hover:scale-110\"\n                                        loading=\"lazy\"\n                                      />\n                                      \n                                      {/* Dark Overlay */}\n                                      <div className=\"absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-all duration-300\">\n                                        {/* Action Buttons - Top Right */}\n                                        <div className={`absolute top-2 right-2 flex flex-col items-center gap-1 ${activeCardId === submission.id ? 'opacity-100 lg:opacity-0' : 'opacity-0'} lg:group-hover:opacity-100 transition-opacity duration-300`}>\n                                          {/* Vote Button */}\n                                          <button\n                                            onClick={(e) => {\n                                              e.stopPropagation();\n                                              handleVote(submission.id);\n                                            }}\n                                            className={`p-1.5 rounded-full backdrop-blur-sm transition-all duration-300 ${\n                                              submission.hasVoted \n                                                ? 'bg-primary/90 text-white' \n                                                : 'bg-black/50 text-white hover:bg-primary/90'\n                                            }`}\n                                            data-testid={`button-vote-${submission.id}`}\n                                          >\n                                            <Heart className={`h-3 w-3 ${submission.hasVoted ? 'fill-current' : ''}`} />\n                                          </button>\n\n                                          {/* Share Button */}\n                                          <button\n                                            onClick={(e) => {\n                                              e.stopPropagation();\n                                              handleShare(submission);\n                                            }}\n                                            className=\"p-1.5 rounded-full bg-black/50 text-white hover:bg-primary/90 backdrop-blur-sm transition-all duration-300\"\n                                            data-testid={`button-share-${submission.id}`}\n                                          >\n                                            <Share2 className=\"h-3 w-3\" />\n                                          </button>\n\n                                          {/* Expand Button */}\n                                          <button\n                                            onClick={(e) => {\n                                              e.stopPropagation();\n                                              setSelectedSubmission(submission);\n                                              setIsLightboxOpen(true);\n                                            }}\n                                            className=\"p-1.5 rounded-full bg-black/50 text-white hover:bg-primary/90 backdrop-blur-sm transition-all duration-300\"\n                                            data-testid={`button-expand-${submission.id}`}\n                                          >\n                                            <Expand className=\"h-3 w-3\" />\n                                          </button>\n                                        </div>\n                                      </div>\n                                      \n                                      {/* Bottom Info Overlay */}\n                                      <div className={`absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 via-black/60 to-transparent p-2 sm:p-3 ${activeCardId === submission.id ? 'opacity-100 lg:opacity-0' : 'opacity-0'} lg:group-hover:opacity-100 transition-all duration-300 transform translate-y-0 lg:translate-y-2 lg:group-hover:translate-y-0`}>\n                                        <h3 className=\"text-sm font-bold text-white mb-1 truncate\">\n                                          {submission.title}\n                                        </h3>\n                                        <p className=\"text-xs text-white/80 mb-1 truncate\">\n                                          by {submission.user?.username || 'Unknown'}\n                                        </p>\n                                        \n                                        <div className=\"flex items-center gap-1 text-white/80\">\n                                          <Heart className={`h-2.5 w-2.5 ${submission.hasVoted ? 'fill-primary text-primary' : ''}`} />\n                                          <span className=\"text-xs\">{submission.voteCount} votes</span>\n                                        </div>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                            );\n                          })}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {/* Filter Toolbar - Applies only to All Submissions */}\n              {!submissionsLoading && allSubmissions.length > 0 && (\n                <div \n                  ref={toolbarRef}\n                  className={`mt-8 rounded-lg bg-background-dark/80 px-4 py-4 backdrop-blur-sm glow-border transition-all duration-200 ${\n                    isToolbarSticky ? 'sticky top-[100px] z-40' : ''\n                  }`}\n                >\n                  <div className=\"flex flex-wrap items-center justify-between gap-4\">\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"relative w-full sm:w-auto\">\n                        <select \n                          value={\n                            sortBy === \"votes\" ? \"Most Voted\" : \n                            sortBy === \"recent\" ? \"Newest\" : \n                            sortBy === \"oldest\" ? \"Oldest\" : \"Most Voted\"\n                          }\n                          onChange={(e) => {\n                            const value = e.target.value;\n                            if (value === \"Most Voted\") setSortBy(\"votes\");\n                            else if (value === \"Newest\") setSortBy(\"recent\");\n                            else if (value === \"Oldest\") setSortBy(\"oldest\");\n                          }}\n                          className=\"w-full appearance-none rounded-lg border-white/30 py-2 pl-3 pr-8 text-sm text-white placeholder-white/60 transition-all focus:border-white focus:ring-1 focus:ring-white sm:w-auto\"\n                          style={{ backgroundColor: '#171121' }}\n                        >\n                          <option style={{ backgroundColor: '#171121', color: 'white' }}>Most Voted</option>\n                          <option style={{ backgroundColor: '#171121', color: 'white' }}>Newest</option>\n                          <option style={{ backgroundColor: '#171121', color: 'white' }}>Oldest</option>\n                        </select>\n                        <span className=\"pointer-events-none absolute right-3 top-1/2 -translate-y-1/2 text-white/60\">\n                          <ChevronDown className=\"h-4 w-4\" />\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"flex w-full items-center gap-4 sm:w-auto\">\n                      <div className=\"relative w-full flex-1 max-w-xs sm:w-auto\">\n                        <span className=\"pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 text-white/60\">\n                          <Search className=\"h-5 w-5\" />\n                        </span>\n                        <input \n                          value={searchTerm}\n                          onChange={(e) => setSearchTerm(e.target.value)}\n                          className=\"w-full rounded-lg border-white/30 py-2 pl-10 pr-4 text-sm text-white placeholder-white/60 transition-all focus:border-white focus:ring-1 focus:ring-white\" \n                          placeholder=\"Search entries...\" \n                          type=\"search\"\n                          data-testid=\"input-search\"\n                          style={{ backgroundColor: '#171121' }}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* All Submissions */}\n              {allSubmissions.length > 0 && (\n                <div className=\"mt-8\">\n                  <h3 className=\"mb-6 text-2xl font-bold text-white\">All Submissions</h3>\n                  <div className=\"columns-1 sm:columns-2 md:columns-3 lg:columns-4 gap-6 space-y-6\">\n                    {allSubmissions.map((submission: any) => (\n                      <div\n                        key={submission.id}\n                        className=\"group break-inside-avoid mb-6\"\n                        data-testid={`card-submission-${submission.id}`}\n                      >\n                        <div className=\"rounded-xl overflow-hidden shadow-lg transition-all duration-300 hover:shadow-primary/20 hover:-translate-y-1\">\n                          <div className=\"relative overflow-hidden min-h-[240px]\" onClick={(e) => handleCardClick(e, submission.id)}>\n                            <img\n                              src={submission.mediaUrl}\n                              alt={submission.title}\n                              className=\"w-full h-auto min-h-[240px] object-cover transition-transform duration-500 group-hover:scale-110\"\n                              loading=\"lazy\"\n                            />\n                            \n                            {/* Hover Overlay */}\n                            <div className=\"absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-all duration-300\">\n                              {/* Action Buttons */}\n                              <div className={`absolute top-2 sm:top-3 right-2 sm:right-3 flex flex-col items-center gap-1 sm:gap-2 ${activeCardId === submission.id ? 'opacity-100 lg:opacity-0' : 'opacity-0'} lg:group-hover:opacity-100 transition-opacity duration-300`}>\n                                {/* Vote Button */}\n                                <button\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleVote(submission.id);\n                                  }}\n                                  className={`p-2 rounded-full transition-all duration-300 ${\n                                    submission.hasVoted \n                                      ? 'bg-primary text-white shadow-lg' \n                                      : 'bg-black/50 text-white hover:bg-primary/90 backdrop-blur-sm'\n                                  }`}\n                                  data-testid={`button-vote-${submission.id}`}\n                                >\n                                  <Heart className={`h-3 w-3 sm:h-4 sm:w-4 ${submission.hasVoted ? 'fill-current' : ''}`} />\n                                </button>\n                                \n                                {/* Share Button */}\n                                <button\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleShare(submission);\n                                  }}\n                                  className=\"p-2 rounded-full bg-black/50 text-white hover:bg-primary/90 backdrop-blur-sm transition-all duration-300\"\n                                  data-testid={`button-share-${submission.id}`}\n                                >\n                                  <Share2 className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                                </button>\n                                \n                                {/* Expand Button */}\n                                <button\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    setSelectedSubmission(submission);\n                                    setIsLightboxOpen(true);\n                                  }}\n                                  className=\"p-2 rounded-full bg-black/50 text-white hover:bg-primary/90 backdrop-blur-sm transition-all duration-300\"\n                                  data-testid={`button-expand-${submission.id}`}\n                                >\n                                  <Expand className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                                </button>\n                              </div>\n                            </div>\n                            \n                            {/* Bottom Info Overlay */}\n                            <div className={`absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 via-black/60 to-transparent p-3 sm:p-4 ${activeCardId === submission.id ? 'opacity-100 lg:opacity-0' : 'opacity-0'} lg:group-hover:opacity-100 transition-all duration-300 transform translate-y-0 lg:translate-y-2 lg:group-hover:translate-y-0`}>\n                              <h3 className=\"text-base font-semibold text-white mb-1\">\n                                {submission.title}\n                              </h3>\n                              <p className=\"text-xs sm:text-sm text-white/80 mb-2\">\n                                by {submission.user?.username || 'Unknown'}\n                              </p>\n                              \n                              <div className=\"flex items-center gap-1 text-white/80\">\n                                <Heart className={`h-3 w-3 ${submission.hasVoted ? 'fill-primary text-primary' : ''}`} />\n                                <span className=\"text-sm\">{submission.voteCount} votes</span>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n\n      {/* Modals */}\n      <ContestLightboxModal\n        isOpen={isLightboxOpen}\n        onClose={() => setIsLightboxOpen(false)}\n        submission={selectedSubmission}\n        onVote={(submissionId: string) => handleVote(submissionId)}\n        onBuyPrompt={(submissionId: string) => handleBuyPrompt(submissionId)}\n        onShare={() => selectedSubmission && handleShare(selectedSubmission)}\n      />\n\n      <ContestRulesCard\n        isOpen={showRules}\n        contest={contest}\n        onClose={() => setShowRules(false)}\n      />\n\n      <UploadWizardModal\n        isOpen={showUploadWizard}\n        onClose={() => setShowUploadWizard(false)}\n        preselectedContestId={contest.id}\n      />\n\n      {/* Prize Distribution Modal */}\n      <Dialog open={showAllPrizesModal} onOpenChange={setShowAllPrizesModal}>\n        <DialogContent className=\"bg-gradient-to-br from-slate-900/95 to-purple-900/95 border-primary/30 text-white max-w-md max-h-[80vh] overflow-hidden backdrop-blur-xl\">\n          <DialogHeader>\n            <DialogTitle className=\"text-2xl font-bold text-center text-white flex items-center justify-center gap-2\">\n              <Trophy className=\"h-6 w-6 text-yellow-400\" />\n              Prize Distribution\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"overflow-y-auto max-h-[60vh] pr-2 space-y-2\">\n            {contest?.prizeDistribution?.map((prize: any, index: number) => {\n              const placeNumber = index + 1;\n              const badgeColor = \n                placeNumber === 1 ? 'from-yellow-400 to-yellow-600' :\n                placeNumber === 2 ? 'from-gray-300 to-gray-500' :\n                placeNumber === 3 ? 'from-orange-400 to-orange-600' :\n                placeNumber === 4 ? 'from-blue-400 to-blue-600' :\n                placeNumber === 5 ? 'from-green-400 to-green-600' :\n                'from-purple-400 to-purple-600';\n\n              return (\n                <div \n                  key={index}\n                  className=\"flex items-center justify-between p-3 rounded-lg bg-primary/10 hover:bg-primary/20 transition-all\"\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <div className={`w-10 h-10 rounded-full bg-gradient-to-r ${badgeColor} flex items-center justify-center`}>\n                      <span className=\"text-sm font-bold text-black\">\n                        {placeNumber === 1 ? '1st' :\n                         placeNumber === 2 ? '2nd' :\n                         placeNumber === 3 ? '3rd' :\n                         `${placeNumber}th`}\n                      </span>\n                    </div>\n                    <span className=\"text-sm font-medium text-white/80\">Place</span>\n                  </div>\n                  \n                  <div className=\"text-right\">\n                    <p className=\"text-lg font-bold text-white\">\n                      {typeof prize.value === 'number' \n                        ? formatPrizeAmount(prize.value)\n                        : formatPrizeAmount(Math.floor(contest.prizeGlory * (prize.percentage / 100)))\n                      }\n                    </p>\n                    <p className=\"text-xs text-primary font-medium\">{((contest as any).config?.currency) || 'GLORY'}</p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n\n          <div className=\"pt-3 border-t border-primary/20 text-center\">\n            <p className=\"text-sm text-gray-300\">\n              Total Pool: <span className=\"font-bold text-white\">{formatPrizeAmount(contest?.prizeGlory)}</span> {((contest as any).config?.currency) || 'GLORY'}\n            </p>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n\n","size_bytes":51204},"client/src/pages/contests.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { ContestCard } from \"@/components/contest-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Trophy, Search, Filter, Calendar, Users } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function Contests() {\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: contests = [], isLoading } = useQuery({\n    queryKey: [\"/api/contests\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/contests\");\n      if (!response.ok) throw new Error(\"Failed to fetch contests\");\n      return response.json();\n    },\n  });\n\n  const filteredContests = contests.filter((contest: any) => {\n    const matchesStatus = statusFilter === \"all\" || contest.status === statusFilter;\n    const matchesSearch = contest.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         contest.description.toLowerCase().includes(searchQuery.toLowerCase());\n    return matchesStatus && matchesSearch;\n  });\n\n  const getStatusCounts = () => {\n    return {\n      all: contests.length,\n      active: contests.filter((c: any) => c.status === \"active\").length,\n      draft: contests.filter((c: any) => c.status === \"draft\").length,\n      ended: contests.filter((c: any) => c.status === \"ended\").length,\n    };\n  };\n\n  const statusCounts = getStatusCounts();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen py-16\" data-testid=\"contests-loading\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-muted rounded w-1/3 mb-4\"></div>\n            <div className=\"h-4 bg-muted rounded w-2/3 mb-8\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"h-64 bg-muted rounded-lg\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen py-8 pb-32 md:py-16 md:pb-16\" data-testid=\"contests-page\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"text-center mb-8 md:mb-12\">\n          <h2 className=\"text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white tracking-tight\" data-testid=\"contests-title\">\n            AI Art Contests\n          </h2>\n          <p className=\"mt-3 md:mt-4 text-sm sm:text-base md:text-lg text-gray-600 dark:text-gray-400 max-w-2xl mx-auto px-4\">\n            Participate in exciting AI art contests and showcase your creativity to win amazing prizes.\n          </p>\n        </div>\n\n        {/* Filters and Search */}\n        <div className=\"flex flex-col md:flex-row gap-3 md:gap-4 mb-6 md:mb-8\">\n          <div className=\"flex items-center gap-2 flex-wrap\">\n            <Button\n              variant={statusFilter === \"all\" ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setStatusFilter(\"all\")}\n              className={statusFilter === \"all\" ? \"gradient-glory\" : \"\"}\n              data-testid=\"filter-all\"\n            >\n              All ({statusCounts.all})\n            </Button>\n            <Button\n              variant={statusFilter === \"active\" ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setStatusFilter(\"active\")}\n              className={statusFilter === \"active\" ? \"bg-success text-success-foreground hover:bg-success/90\" : \"\"}\n              data-testid=\"filter-active\"\n            >\n              Active ({statusCounts.active})\n            </Button>\n            <Button\n              variant={statusFilter === \"draft\" ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setStatusFilter(\"draft\")}\n              className={statusFilter === \"draft\" ? \"bg-muted text-muted-foreground\" : \"\"}\n              data-testid=\"filter-draft\"\n            >\n              Draft ({statusCounts.draft})\n            </Button>\n            <Button\n              variant={statusFilter === \"ended\" ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setStatusFilter(\"ended\")}\n              className={statusFilter === \"ended\" ? \"bg-destructive text-destructive-foreground hover:bg-destructive/90\" : \"\"}\n              data-testid=\"filter-ended\"\n            >\n              Ended ({statusCounts.ended})\n            </Button>\n          </div>\n\n          <div className=\"relative flex-1 max-w-md\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search contests...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"search-contests\"\n            />\n          </div>\n        </div>\n\n        {/* Contests Grid */}\n        {filteredContests.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" data-testid=\"contests-grid\">\n            {filteredContests.map((contest: any) => (\n              <ContestCard key={contest.id} contest={contest} />\n            ))}\n          </div>\n        ) : contests.length === 0 ? (\n          <div className=\"text-center py-12\" data-testid=\"contests-empty\">\n            <div className=\"w-24 h-24 mx-auto mb-6 rounded-full bg-muted flex items-center justify-center\">\n              <Trophy className=\"w-12 h-12 text-muted-foreground\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2\">No contests yet</h3>\n            <p className=\"text-muted-foreground\">\n              Check back soon for exciting creative competitions!\n            </p>\n          </div>\n        ) : (\n          <div className=\"text-center py-12\" data-testid=\"contests-no-results\">\n            <div className=\"w-24 h-24 mx-auto mb-6 rounded-full bg-muted flex items-center justify-center\">\n              <Filter className=\"w-12 h-12 text-muted-foreground\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2\">No contests match your filters</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Try adjusting your search or filter criteria\n            </p>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setStatusFilter(\"all\");\n                setSearchQuery(\"\");\n              }}\n              data-testid=\"clear-filters\"\n            >\n              Clear Filters\n            </Button>\n          </div>\n        )}\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 md:gap-6 mt-8 md:mt-12\">\n          <div className=\"bg-background-light dark:bg-gray-900/40 rounded-xl p-6 text-center border border-gray-200 dark:border-gray-800\" data-testid=\"stat-total-prizes\">\n            <Trophy className=\"text-primary mx-auto mb-3\" size={32} />\n            <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n              {contests.reduce((total: number, contest: any) => total + (Number(contest.prizeGlory) || 0), 0).toLocaleString()}\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-400\">$GLORY in Prizes</p>\n          </div>\n          <div className=\"bg-background-light dark:bg-gray-900/40 rounded-xl p-6 text-center border border-gray-200 dark:border-gray-800\" data-testid=\"stat-active-contests\">\n            <Calendar className=\"text-primary mx-auto mb-3\" size={32} />\n            <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n              {statusCounts.active}\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-400\">Active Contests</p>\n          </div>\n          <div className=\"bg-background-light dark:bg-gray-900/40 rounded-xl p-6 text-center border border-gray-200 dark:border-gray-800\" data-testid=\"stat-total-participants\">\n            <Users className=\"text-primary mx-auto mb-3\" size={32} />\n            <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n              {contests.reduce((total: number, contest: any) => total + (Number((contest as any).submissionCount) || 0), 0).toLocaleString()}\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-400\">Total Participants</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8561},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/UploadSelectionModal.tsx":{"content":"import { X, Upload, Image as ImageIcon } from \"lucide-react\";\nimport { GlassButton } from \"./GlassButton\";\n\ninterface UploadSelectionModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSelectExisting: () => void;\n  onUploadNew: () => void;\n}\n\nexport function UploadSelectionModal({\n  isOpen,\n  onClose,\n  onSelectExisting,\n  onUploadNew\n}: UploadSelectionModalProps) {\n  if (!isOpen) return null;\n\n  return (\n    <div \n      className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/80 backdrop-blur-sm p-4\"\n      onClick={onClose}\n      data-testid=\"upload-selection-overlay\"\n    >\n      <div \n        className=\"relative max-w-md w-full bg-slate-900/90 backdrop-blur-xl rounded-2xl border border-white/10 shadow-2xl shadow-violet-600/20 p-6\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-2xl font-bold text-white\">Submit Entry</h2>\n          <button\n            onClick={onClose}\n            className=\"p-2 hover:bg-white/10 rounded-lg transition-colors\"\n            data-testid=\"button-close-upload-selection\"\n          >\n            <X className=\"h-6 w-6 text-slate-400\" />\n          </button>\n        </div>\n\n        {/* Options */}\n        <div className=\"space-y-4\">\n          <button\n            onClick={onUploadNew}\n            className=\"w-full p-6 bg-white/5 hover:bg-white/10 backdrop-blur-sm rounded-xl border border-white/10 hover:border-violet-500/50 transition-all group\"\n            data-testid=\"button-upload-new\"\n          >\n            <div className=\"flex flex-col items-center gap-3\">\n              <div className=\"p-4 rounded-full bg-violet-600/20 border border-violet-500/30 group-hover:bg-violet-600/30 transition-colors\">\n                <Upload className=\"h-8 w-8 text-violet-400\" />\n              </div>\n              <div>\n                <h3 className=\"text-lg font-bold text-white mb-1\">Upload New Artwork</h3>\n                <p className=\"text-sm text-slate-400\">Create a new submission for this contest</p>\n              </div>\n            </div>\n          </button>\n\n          <button\n            onClick={onSelectExisting}\n            className=\"w-full p-6 bg-white/5 hover:bg-white/10 backdrop-blur-sm rounded-xl border border-white/10 hover:border-violet-500/50 transition-all group\"\n            data-testid=\"button-select-existing\"\n          >\n            <div className=\"flex flex-col items-center gap-3\">\n              <div className=\"p-4 rounded-full bg-violet-600/20 border border-violet-500/30 group-hover:bg-violet-600/30 transition-colors\">\n                <ImageIcon className=\"h-8 w-8 text-violet-400\" />\n              </div>\n              <div>\n                <h3 className=\"text-lg font-bold text-white mb-1\">Select from Gallery</h3>\n                <p className=\"text-sm text-slate-400\">Choose from your existing artworks</p>\n              </div>\n            </div>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3031},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/wallet/CashoutRequest.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { GlassButton } from \"@/components/GlassButton\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { DollarSign, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nexport function CashoutRequest() {\n  const { toast } = useToast();\n  const [amount, setAmount] = useState(\"\");\n  const [currency, setCurrency] = useState<\"GLORY\" | \"SOL\" | \"USDC\">(\"GLORY\");\n  const [tokenType, setTokenType] = useState(\"USDC\");\n\n  const { data: userData } = useQuery<any>({ queryKey: [\"/api/me\"] });\n\n  const createRequestMutation = useMutation({\n    mutationFn: async () => {\n      if (!userData?.withdrawalAddress) {\n        throw new Error(\"Please set your withdrawal address in your profile first\");\n      }\n\n      const amountNum = parseFloat(amount);\n      if (isNaN(amountNum) || amountNum < 1000) {\n        throw new Error(`Minimum cashout amount is 1000 ${currency}`);\n      }\n\n      // apiRequest expects (method, url, data)\n      return apiRequest(\"POST\", \"/api/cashout/request\", {\n        withdrawalAddress: userData.withdrawalAddress,\n        amountGlory: currency === \"GLORY\" ? amountNum : 0,\n        tokenType,\n        currency,\n        amount: amountNum,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cashout/requests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n      setAmount(\"\");\n      toast({\n        title: \"Cashout Requested\",\n        description: \"Your cashout request has been submitted for admin approval.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Request Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createRequestMutation.mutate();\n  };\n\n  const gloryBalance = userData?.gloryBalance || 0;\n  const solBalance = userData?.solBalance || 0;\n  const usdcBalance = userData?.usdcBalance || 0;\n  const hasWithdrawalAddress = !!userData?.withdrawalAddress;\n\n  const getCurrentBalance = () => {\n    switch (currency) {\n      case \"SOL\":\n        return solBalance;\n      case \"USDC\":\n        return usdcBalance;\n      default:\n        return gloryBalance;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card data-testid=\"cashout-request-card\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <DollarSign className=\"h-5 w-5\" />\n            Withdraw\n          </CardTitle>\n          <CardDescription>\n            Request to withdraw your funds (minimum 1000)\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {!hasWithdrawalAddress ? (\n            <div className=\"p-4 rounded-lg bg-muted/50 text-center\">\n              <p className=\"text-sm text-muted-foreground\">\n                Please set your withdrawal address in your profile first to enable withdrawals\n              </p>\n            </div>\n          ) : (\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"currency\">Currency</Label>\n                <Select value={currency} onValueChange={(value) => setCurrency(value as \"GLORY\" | \"SOL\" | \"USDC\")}>\n                  <SelectTrigger id=\"currency\" data-testid=\"select-withdraw-currency\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"GLORY\">GLORY</SelectItem>\n                    <SelectItem value=\"SOL\">SOL</SelectItem>\n                    <SelectItem value=\"USDC\">USDC</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"amount\">Amount ({currency})</Label>\n                <div className=\"flex items-center gap-2\">\n                  <Input\n                    id=\"amount\"\n                    type=\"number\"\n                    placeholder=\"1000\"\n                    value={amount}\n                    onChange={(e) => setAmount(e.target.value)}\n                    min=\"1000\"\n                    step=\"0.01\"\n                    required\n                    data-testid=\"input-cashout-amount\"\n                  />\n                  <p className=\"text-sm text-muted-foreground whitespace-nowrap\">\n                    of {getCurrentBalance().toLocaleString()}\n                  </p>\n                </div>\n              </div>\n\n              <GlassButton\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={createRequestMutation.isPending || !hasWithdrawalAddress}\n                data-testid=\"button-submit-cashout\"\n              >\n                {createRequestMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Submitting...\n                  </>\n                ) : (\n                  \"Request Withdrawal\"\n                )}\n              </GlassButton>\n            </form>\n          )}\n        </CardContent>\n      </Card>\n\n    </div>\n  );\n}\n","size_bytes":5607},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/wallet/WalletConnect.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useWallet } from \"@/lib/wallet-provider\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Wallet, CheckCircle, XCircle, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface WalletData {\n  wallet?: {\n    id: string;\n    userId: string;\n    address: string;\n    provider: string;\n    status: string;\n    createdAt: string;\n  };\n}\n\nexport function WalletConnect() {\n  const { connected, connecting, publicKey, connect, disconnect, signMessage } = useWallet();\n  const { toast } = useToast();\n  const [isConnecting, setIsConnecting] = useState(false);\n  const shouldVerify = useRef(false);\n\n  const { data: walletData, isFetched } = useQuery<WalletData>({\n    queryKey: [\"/api/wallet/me\"],\n    enabled: !!publicKey,\n  });\n\n  const connectWalletMutation = useMutation({\n    mutationFn: async () => {\n      if (!connected || !publicKey) {\n        throw new Error(\"Wallet not connected\");\n      }\n\n      const message = `Sign this message to verify your wallet ownership.\\nWallet: ${publicKey}\\nTimestamp: ${Date.now()}`;\n      const signature = await signMessage(message);\n\n      const response = await apiRequest(\"POST\", \"/api/wallet/connect\", {\n        address: publicKey,\n        provider: \"phantom\",\n        signature,\n        message,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wallet/me\"] });\n      toast({\n        title: \"Wallet Connected\",\n        description: \"Your Solana wallet has been successfully verified and connected.\",\n      });\n      shouldVerify.current = false;\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Connection Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      shouldVerify.current = false;\n    },\n  });\n\n  useEffect(() => {\n    if (connected && publicKey && shouldVerify.current && isFetched && !walletData?.wallet) {\n      connectWalletMutation.mutate();\n    }\n  }, [connected, publicKey, walletData, isFetched, connectWalletMutation]);\n\n  const handleConnect = async () => {\n    try {\n      setIsConnecting(true);\n      shouldVerify.current = true;\n      await connect();\n    } catch (error: any) {\n      console.error(\"Error connecting wallet:\", error);\n      shouldVerify.current = false;\n      \n      // Don't show error toast if user rejected the connection\n      if (error?.code !== 4001) {\n        toast({\n          title: \"Connection Error\",\n          description: error?.message || \"Failed to connect wallet. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  const handleDisconnect = async () => {\n    await disconnect();\n    queryClient.invalidateQueries({ queryKey: [\"/api/wallet/me\"] });\n    toast({\n      title: \"Wallet Disconnected\",\n      description: \"Your wallet has been disconnected.\",\n    });\n  };\n\n  const isVerified = walletData?.wallet?.status === \"active\";\n\n  return (\n    <Card data-testid=\"wallet-connect-card\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Wallet className=\"h-5 w-5\" />\n              Solana Wallet\n            </CardTitle>\n            <CardDescription>\n              Connect your Solana wallet to cash out GLORY rewards\n            </CardDescription>\n          </div>\n          {connected && isVerified && (\n            <Badge variant=\"default\" className=\"bg-green-500/10 text-green-500 border-green-500/20\" data-testid=\"wallet-verified-badge\">\n              <CheckCircle className=\"h-3 w-3 mr-1\" />\n              Verified\n            </Badge>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {!connected ? (\n          <div className=\"space-y-4\">\n            <p className=\"text-sm text-muted-foreground\">\n              Connect your Phantom wallet to enable cashouts. Make sure you have the Phantom browser extension installed.\n            </p>\n            <Button\n              onClick={handleConnect}\n              disabled={isConnecting || connecting}\n              className=\"w-full\"\n              data-testid=\"button-connect-wallet\"\n            >\n              {isConnecting || connecting ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Connecting...\n                </>\n              ) : (\n                <>\n                  <Wallet className=\"h-4 w-4 mr-2\" />\n                  Connect Phantom Wallet\n                </>\n              )}\n            </Button>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            <div className=\"p-4 rounded-lg bg-muted/50\" data-testid=\"wallet-address\">\n              <p className=\"text-xs text-muted-foreground mb-1\">Connected Wallet</p>\n              <p className=\"font-mono text-sm break-all\">{publicKey}</p>\n            </div>\n\n            {isVerified ? (\n              <div className=\"flex items-center gap-2 text-sm text-green-500\">\n                <CheckCircle className=\"h-4 w-4\" />\n                <span>Wallet verified and ready for cashouts</span>\n              </div>\n            ) : connectWalletMutation.isPending ? (\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\n                <span>Verifying wallet...</span>\n              </div>\n            ) : (\n              <div className=\"flex items-center gap-2 text-sm text-yellow-500\">\n                <XCircle className=\"h-4 w-4\" />\n                <span>Wallet not verified</span>\n              </div>\n            )}\n\n            <Button\n              variant=\"outline\"\n              onClick={handleDisconnect}\n              className=\"w-full\"\n              data-testid=\"button-disconnect-wallet\"\n            >\n              Disconnect Wallet\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6377},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"server/utils/rewards.test.ts":{"content":"import { describe, it, expect } from \"vitest\";\nimport { calculateRewards, distributeRewards, getRankSuffix } from \"./rewards\";\n\ndescribe(\"Rewards Distribution\", () => {\n  it(\"should calculate correct percentages for 1000 GLORY\", () => {\n    const rewards = calculateRewards(1000);\n    \n    expect(rewards).toHaveLength(5);\n    expect(rewards[0].amount).toBe(400); // 40%\n    expect(rewards[1].amount).toBe(250); // 25%\n    expect(rewards[2].amount).toBe(150); // 15%\n    expect(rewards[3].amount).toBe(100); // 10%\n    expect(rewards[4].amount).toBe(100); // 10%\n  });\n\n  it(\"should handle rounding correctly\", () => {\n    const rewards = distributeRewards(1001);\n    const total = rewards.reduce((sum, reward) => sum + reward.amount, 0);\n    \n    expect(total).toBe(1001);\n    expect(rewards[0].amount).toBe(401); // First place gets remainder\n  });\n\n  it(\"should generate correct rank suffixes\", () => {\n    expect(getRankSuffix(1)).toBe(\"st\");\n    expect(getRankSuffix(2)).toBe(\"nd\");\n    expect(getRankSuffix(3)).toBe(\"rd\");\n    expect(getRankSuffix(4)).toBe(\"th\");\n    expect(getRankSuffix(11)).toBe(\"th\");\n    expect(getRankSuffix(21)).toBe(\"st\");\n  });\n\n  it(\"should maintain percentage accuracy\", () => {\n    const totalPrize = 2500;\n    const rewards = calculateRewards(totalPrize);\n    \n    expect(rewards[0].percentage).toBe(0.4);\n    expect(rewards[1].percentage).toBe(0.25);\n    expect(rewards[2].percentage).toBe(0.15);\n    expect(rewards[3].percentage).toBe(0.1);\n    expect(rewards[4].percentage).toBe(0.1);\n  });\n});\n","size_bytes":1534},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"server/utils/rewards.ts":{"content":"/**\n * Calculate and distribute GLORY rewards for contest winners\n * Distribution: 1st=40%, 2nd=25%, 3rd=15%, 4th=10%, 5th=10%\n */\n\ninterface RewardDistribution {\n  rank: number;\n  percentage: number;\n  amount: number;\n}\n\nexport function calculateRewards(totalPrize: number): RewardDistribution[] {\n  const percentages = [0.4, 0.25, 0.15, 0.1, 0.1]; // Top 5 distribution\n  \n  return percentages.map((percentage, index) => ({\n    rank: index + 1,\n    percentage,\n    amount: Math.floor(totalPrize * percentage),\n  }));\n}\n\nexport function distributeRewards(totalPrize: number): RewardDistribution[] {\n  const rewards = calculateRewards(totalPrize);\n  \n  // Ensure all prizes are distributed (handle rounding)\n  const totalDistributed = rewards.reduce((sum, reward) => sum + reward.amount, 0);\n  const remainder = totalPrize - totalDistributed;\n  \n  if (remainder > 0) {\n    // Add remainder to first place\n    rewards[0].amount += remainder;\n  }\n  \n  return rewards;\n}\n\nexport function getRankSuffix(rank: number): string {\n  const suffixes = [\"th\", \"st\", \"nd\", \"rd\"];\n  const remainder = rank % 100;\n  \n  return suffixes[(remainder - 20) % 10] || suffixes[remainder] || suffixes[0];\n}\n","size_bytes":1185},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/GlassButton.tsx":{"content":"import React from 'react';\n\ninterface GlassButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  children: React.ReactNode;\n  variant?: 'primary' | 'secondary';\n}\n\nexport function GlassButton({ \n  children, \n  className = '', \n  variant = 'primary',\n  ...props \n}: GlassButtonProps) {\n  const baseClasses = variant === 'primary' \n    ? 'glass glow-border btn-primary rounded-lg text-white font-bold px-6 py-3 text-base focus-ring'\n    : 'glass glow-border btn-secondary rounded-lg text-white font-bold px-6 py-3 text-base focus-ring';\n\n  return (\n    <button\n      className={`${baseClasses} ${className}`.trim()}\n      {...props}\n    >\n      <span className=\"relative z-10 flex items-center justify-center gap-2\">\n        {children}\n      </span>\n    </button>\n  );\n}","size_bytes":784},"client/src/pages/upload.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { UploadWizardModal } from \"@/components/UploadWizardModal\";\nimport { useAuth } from \"@/lib/auth\";\n\nexport default function Upload() {\n  const [, setLocation] = useLocation();\n  const { data: user } = useAuth();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [preselectedContestId, setPreselectedContestId] = useState<string | undefined>();\n\n  // Redirect if not authenticated\n  if (!user) {\n    setLocation(\"/login\");\n    return null;\n  }\n\n  // Get contest ID from URL and open modal\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const contestId = urlParams.get('contestId');\n    setPreselectedContestId(contestId || undefined);\n    setIsModalOpen(true);\n  }, []);\n\n  // Handle modal close - redirect back to contests\n  const handleClose = () => {\n    setIsModalOpen(false);\n    setLocation(\"/contests\");\n  };\n\n  return (\n    <div className=\"min-h-screen pb-32 md:pb-0\">\n      <UploadWizardModal\n        isOpen={isModalOpen}\n        onClose={handleClose}\n        preselectedContestId={preselectedContestId}\n      />\n    </div>\n  );\n}\n","size_bytes":1188},"server/index.ts":{"content":"import dotenv from \"dotenv\";\ndotenv.config();\n\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { ContestScheduler } from \"./contest-scheduler\";\nimport { AiCleanupScheduler } from \"./ai-cleanup-scheduler\";\nimport { seedSubscriptionTiers } from \"./seed-tiers\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n  \n  // Seed default subscription tiers on startup\n  await seedSubscriptionTiers();\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2491},"client/src/components/layout/navbar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth, useLogout, isAuthenticated, isAdmin } from \"@/lib/auth\";\nimport { useUserBalance } from \"@/hooks/useUserBalance\";\nimport { Button } from \"@/components/ui/button\";\nimport { GlassButton } from \"@/components/GlassButton\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Trophy, Upload, LogOut, User, Shield, Image, ChevronDown, Wallet, Sparkles, CreditCard, Compass } from \"lucide-react\";\nimport { WalletMultiButton } from '@solana/wallet-adapter-react-ui';\nimport { formatDecimalBalance } from \"@/lib/utils\";\n\nexport function Navbar() {\n  const { data: user } = useAuth();\n  useUserBalance(); // Keep for auto-refresh functionality\n  const logout = useLogout();\n  const [location, setLocation] = useLocation();\n\n  const handleLogout = () => {\n    logout.mutate();\n    setLocation(\"/\");\n  };\n\n  const getInitials = (username: string) => {\n    return username.substring(0, 2).toUpperCase();\n  };\n\n  return (\n    <nav className=\"sticky top-0 z-50 glass-effect border-b border-border\" data-testid=\"navbar\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo */}\n          <Link href=\"/\" className=\"flex items-center space-x-3\" data-testid=\"link-logo\">\n            <img \n              src=\"/logo.png\" \n              alt=\"5BEST.ai Logo\" \n              className=\"w-10 h-10 object-contain\"\n            />\n            <span className=\"text-2xl font-bold tracking-tight gradient-text\">5BEST.ai</span>\n          </Link>\n\n          {/* Center Navigation - Desktop */}\n          <div className=\"hidden md:flex items-center space-x-3 absolute left-1/2 transform -translate-x-1/2\">\n            <Link href=\"/pricing\" data-testid=\"link-pricing\">\n              <Button variant=\"ghost\" className=\"px-4 py-2\">\n                <CreditCard className=\"w-4 h-4 mr-2\" />\n                Pricing\n              </Button>\n            </Link>\n            <Link href=\"/contests\" data-testid=\"link-contests\">\n              <Button variant=\"ghost\" className=\"px-4 py-2\">Contests</Button>\n            </Link>\n            <Link href=\"/explore\" data-testid=\"link-explore\">\n              <Button variant=\"ghost\" className=\"px-4 py-2\">\n                <Compass className=\"w-4 h-4 mr-2\" />\n                Explore\n              </Button>\n            </Link>\n            {isAuthenticated(user) && (\n              <Link href=\"/ai-generator\" data-testid=\"link-ai-generator\">\n                <Button variant=\"ghost\" className=\"px-4 py-2\">\n                  <Sparkles className=\"w-4 h-4 mr-2\" />\n                  AI Studio\n                </Button>\n              </Link>\n            )}\n          </div>\n\n          {/* User Actions - Desktop Only */}\n          <div className=\"hidden md:flex items-center space-x-3\">\n            {isAuthenticated(user) && location === \"/pricing\" && (\n              <div className=\"wallet-adapter-button-trigger\" data-testid=\"wallet-button\">\n                <WalletMultiButton />\n              </div>\n            )}\n\n            {isAuthenticated(user) ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"w-10 h-10 rounded-full p-0\" data-testid=\"user-menu\">\n                    <Avatar className=\"w-10 h-10\">\n                      <AvatarFallback className=\"gradient-glory text-white font-bold\">\n                        {getInitials(user.username)}\n                      </AvatarFallback>\n                    </Avatar>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-56\">\n                  <div className=\"px-3 py-2\">\n                    <p className=\"text-sm font-medium\">{user.username}</p>\n                    <p className=\"text-xs text-muted-foreground\">{user.email}</p>\n                    <div className=\"flex items-center gap-2 mt-1\">\n                      <Badge \n                        variant={user.status === \"approved\" ? \"default\" : user.status === \"pending\" ? \"secondary\" : \"destructive\"}\n                        className=\"text-xs\"\n                        data-testid={`status-${user.status}`}\n                      >\n                        {user.status}\n                      </Badge>\n                      {isAdmin(user) && (\n                        <Badge variant=\"outline\" className=\"text-xs\" data-testid=\"admin-badge\">\n                          <Shield className=\"w-3 h-3 mr-1\" />\n                          Admin\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                  <DropdownMenuSeparator />\n                  <Link href=\"/profile\" data-testid=\"link-profile\">\n                    <DropdownMenuItem>\n                      <User className=\"w-4 h-4 mr-2\" />\n                      Profile\n                    </DropdownMenuItem>\n                  </Link>\n                  <Link href=\"/subscription\" data-testid=\"link-subscription\">\n                    <DropdownMenuItem>\n                      <CreditCard className=\"w-4 h-4 mr-2\" />\n                      Subscription\n                    </DropdownMenuItem>\n                  </Link>\n                  <Link href=\"/my-submissions\" data-testid=\"link-my-submissions\">\n                    <DropdownMenuItem>\n                      <Image className=\"w-4 h-4 mr-2\" />\n                      My Gallery\n                    </DropdownMenuItem>\n                  </Link>\n                  {isAdmin(user) && (\n                    <>\n                      <Link href=\"/admin\" data-testid=\"link-admin\">\n                        <DropdownMenuItem>\n                          <Shield className=\"w-4 h-4 mr-2\" />\n                          Admin Dashboard\n                        </DropdownMenuItem>\n                      </Link>\n                      <Link href=\"/admin/subscription-tiers\" data-testid=\"link-admin-tiers\">\n                        <DropdownMenuItem>\n                          <CreditCard className=\"w-4 h-4 mr-2\" />\n                          Subscription Tiers\n                        </DropdownMenuItem>\n                      </Link>\n                    </>\n                  )}\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={handleLogout} data-testid=\"button-logout\">\n                    <LogOut className=\"w-4 h-4 mr-2\" />\n                    Logout\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <div className=\"flex items-center space-x-2\">\n                <Link href=\"/login\" data-testid=\"link-login\">\n                  <Button variant=\"ghost\">Login</Button>\n                </Link>\n                <Link href=\"/register\" data-testid=\"link-register\">\n                  <GlassButton>Sign Up</GlassButton>\n                </Link>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":7231},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 min-h-[44px] md:min-h-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1925},"client/src/pages/admin/contest-detail.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useParams, useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { ArrowLeft, Edit, Trash2, Ban, Image as ImageIcon, Video, Crown, Calendar, Trophy, Users, CheckCircle, XCircle, AlertTriangle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth, isAdmin } from \"@/lib/auth\";\nimport { EditContestModal } from \"@/components/EditContestModal\";\nimport { formatPrizeAmount } from \"@/lib/utils\";\n\nexport default function AdminContestDetail() {\n  const { id } = useParams();\n  const { data: user, isLoading: authLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [isDeleteConfirmOpen, setIsDeleteConfirmOpen] = useState(false);\n  const [itemToDelete, setItemToDelete] = useState<{ type: 'contest' | 'submission'; id: string } | null>(null);\n  const [userToSuspend, setUserToSuspend] = useState<string | null>(null);\n\n  // All hooks must be called before any conditional returns\n  const { data: contest, isLoading: contestLoading } = useQuery({\n    queryKey: [\"/api/contests\", id],\n    queryFn: async () => {\n      const response = await fetch(`/api/contests/${id}`, { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch contest\");\n      return response.json();\n    },\n    enabled: !!user && isAdmin(user) && !authLoading, // Only fetch when authorized\n  });\n\n  const { data: submissions = [], isLoading: submissionsLoading } = useQuery({\n    queryKey: [\"/api/submissions\", { contestId: id }],\n    queryFn: async () => {\n      const response = await fetch(`/api/submissions?contestId=${id}`, { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch submissions\");\n      return response.json();\n    },\n    enabled: !!user && isAdmin(user) && !authLoading, // Only fetch when authorized\n  });\n\n  const updateContestMutation = useMutation({\n    mutationFn: async (formData: any) => {\n      // The EditContestModal already sends data in the correct format\n      // with startAt, endAt as ISO strings and config object containing all settings\n      const updateData: any = {\n        title: formData.title,\n        slug: formData.slug,\n        description: formData.description,\n        rules: formData.rules || formData.description,\n        prizeGlory: formData.prizeGlory,\n        startAt: formData.startAt,\n        endAt: formData.endAt,\n        status: formData.status,\n        config: formData.config,\n        coverImageUrl: formData.coverImageUrl || '',\n        isFeatured: formData.isFeatured || false\n      };\n\n      const response = await apiRequest(\"PATCH\", `/api/admin/contests/${id}`, updateData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contests\"] });\n      toast({\n        title: \"Contest updated\",\n        description: \"The contest has been successfully updated.\",\n      });\n      setIsEditModalOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update contest.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteContestMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"DELETE\", `/api/admin/contests/${id}`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contests\"] });\n      toast({\n        title: \"Contest deleted\",\n        description: \"The contest has been successfully deleted.\",\n      });\n      setLocation(\"/admin\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete contest.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteSubmissionMutation = useMutation({\n    mutationFn: async (submissionId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/admin/submissions/${submissionId}`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      toast({\n        title: \"Submission deleted\",\n        description: \"The submission has been successfully deleted.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete submission.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const suspendUserMutation = useMutation({\n    mutationFn: async ({ userId, suspendAssets }: { userId: string; suspendAssets: boolean }) => {\n      const response = await apiRequest(\"PATCH\", `/api/admin/users/${userId}`, { status: \"banned\" });\n      \n      if (suspendAssets) {\n        const userSubmissions = submissions.filter((s: any) => s.user.id === userId);\n        await Promise.all(\n          userSubmissions.map((s: any) =>\n            apiRequest(\"PATCH\", `/api/admin/submissions/${s.id}`, { status: \"rejected\" })\n          )\n        );\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"User suspended\",\n        description: \"The user has been suspended.\",\n      });\n      setUserToSuspend(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to suspend user.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // All hooks defined - now safe to do conditional returns\n  if (authLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user || !isAdmin(user)) {\n    setLocation(\"/admin\");\n    return null;\n  }\n\n  const handleEditContest = () => {\n    setIsEditModalOpen(true);\n  };\n\n  const handleSaveContest = (formData: any) => {\n    updateContestMutation.mutate(formData);\n  };\n\n  const handleDeleteItem = () => {\n    if (!itemToDelete) return;\n    \n    if (itemToDelete.type === 'contest') {\n      deleteContestMutation.mutate();\n    } else {\n      deleteSubmissionMutation.mutate(itemToDelete.id);\n    }\n    \n    setItemToDelete(null);\n  };\n\n  if (contestLoading || submissionsLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!contest) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <p className=\"text-muted-foreground\">Contest not found</p>\n          <Button onClick={() => setLocation(\"/admin\")} className=\"mt-4\" data-testid=\"button-back-to-admin\">\n            Back to Admin\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const getStatusBadge = (status: string) => {\n    const colors: Record<string, string> = {\n      active: \"bg-green-500/20 text-green-400 border-green-500/30\",\n      draft: \"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\",\n      ended: \"bg-gray-500/20 text-gray-400 border-gray-500/30\",\n      pending: \"bg-yellow-500/20 text-yellow-400\",\n      approved: \"bg-green-500/20 text-green-400\",\n      rejected: \"bg-red-500/20 text-red-400\"\n    };\n    \n    return (\n      <Badge className={colors[status] || \"bg-gray-500/20 text-gray-400\"}>\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  const participantMap = new Map();\n  submissions.forEach((submission: any) => {\n    if (!participantMap.has(submission.user.id)) {\n      participantMap.set(submission.user.id, {\n        id: submission.user.id,\n        username: submission.user.username,\n        submissions: []\n      });\n    }\n    participantMap.get(submission.user.id).submissions.push(submission);\n  });\n\n  const participants = Array.from(participantMap.values());\n\n  return (\n    <div className=\"container mx-auto py-8 px-4\">\n      <div className=\"mb-6\">\n        <Button\n          variant=\"ghost\"\n          onClick={() => setLocation(\"/admin\")}\n          className=\"mb-4\"\n          data-testid=\"button-back-to-admin-dashboard\"\n        >\n          <ArrowLeft className=\"mr-2 h-4 w-4\" />\n          Back to Dashboard\n        </Button>\n\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center gap-3 mb-2\">\n              <h1 className=\"text-3xl font-bold text-white\">{contest.title}</h1>\n              {getStatusBadge(contest.status)}\n            </div>\n            <p className=\"text-muted-foreground mb-4\">{contest.description}</p>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n              <Card className=\"glassmorphism border border-white/10\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center gap-2 text-yellow-400\">\n                    <Trophy className=\"h-5 w-5\" />\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Prize Pool</p>\n                      <p className=\"text-xl font-bold\">{formatPrizeAmount(contest.prizeGlory)}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"glassmorphism border border-white/10\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center gap-2 text-primary\">\n                    <Users className=\"h-5 w-5\" />\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Participants</p>\n                      <p className=\"text-xl font-bold\">{participants.length}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"glassmorphism border border-white/10\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center gap-2 text-blue-400\">\n                    <ImageIcon className=\"h-5 w-5\" />\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Submissions</p>\n                      <p className=\"text-xl font-bold\">{submissions.length}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"glassmorphism border border-white/10\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center gap-2 text-green-400\">\n                    <CheckCircle className=\"h-5 w-5\" />\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Approved</p>\n                      <p className=\"text-xl font-bold\">\n                        {submissions.filter((s: any) => s.status === 'approved').length}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n          \n          <div className=\"flex gap-2 ml-4\">\n            <Button onClick={handleEditContest} data-testid=\"button-edit-contest\">\n              <Edit className=\"mr-2 h-4 w-4\" />\n              Edit Contest\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={() => setItemToDelete({ type: 'contest', id: contest.id })}\n              data-testid=\"button-delete-contest\"\n            >\n              <Trash2 className=\"mr-2 h-4 w-4\" />\n              Delete Contest\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <Card className=\"glassmorphism border border-white/10\">\n        <CardHeader>\n          <CardTitle className=\"text-white\">Participants & Submissions</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {participants.length === 0 ? (\n            <p className=\"text-center text-muted-foreground py-8\">No participants yet</p>\n          ) : (\n            <div className=\"space-y-6\">\n              {participants.map((participant: any) => (\n                <div key={participant.id} className=\"border border-white/10 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"h-10 w-10 rounded-full bg-primary/20 flex items-center justify-center\">\n                        <span className=\"text-primary font-bold\">\n                          {participant.username.charAt(0).toUpperCase()}\n                        </span>\n                      </div>\n                      <div>\n                        <h3 className=\"font-semibold text-white\">{participant.username}</h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {participant.submissions.length} submission{participant.submissions.length !== 1 ? 's' : ''}\n                        </p>\n                      </div>\n                    </div>\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => setUserToSuspend(participant.id)}\n                      data-testid={`button-suspend-user-${participant.id}`}\n                    >\n                      <Ban className=\"mr-2 h-4 w-4\" />\n                      Suspend User\n                    </Button>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {participant.submissions.map((submission: any) => (\n                      <Card key={submission.id} className=\"bg-background-light/50 border-white/5\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"relative aspect-video mb-3 rounded-lg overflow-hidden bg-black/50\">\n                            {submission.type === 'image' ? (\n                              <img\n                                src={submission.mediaUrl}\n                                alt={submission.title}\n                                className=\"w-full h-full object-cover\"\n                              />\n                            ) : (\n                              <div className=\"flex items-center justify-center h-full\">\n                                <Video className=\"h-12 w-12 text-muted-foreground\" />\n                              </div>\n                            )}\n                          </div>\n                          \n                          <div className=\"flex items-start justify-between mb-2\">\n                            <div className=\"flex-1 min-w-0\">\n                              <h4 className=\"font-medium text-white truncate\">{submission.title}</h4>\n                              <p className=\"text-sm text-muted-foreground\">\n                                Votes: {submission.votesCount}\n                              </p>\n                            </div>\n                            {getStatusBadge(submission.status)}\n                          </div>\n                          \n                          {submission.description && (\n                            <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\">\n                              {submission.description}\n                            </p>\n                          )}\n                          \n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            className=\"w-full\"\n                            onClick={() => setItemToDelete({ type: 'submission', id: submission.id })}\n                            data-testid={`button-delete-submission-${submission.id}`}\n                          >\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            Delete Submission\n                          </Button>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <EditContestModal\n        isOpen={isEditModalOpen}\n        onClose={() => setIsEditModalOpen(false)}\n        onSubmit={handleSaveContest}\n        contest={contest}\n      />\n\n      <AlertDialog open={!!itemToDelete} onOpenChange={(open) => !open && setItemToDelete(null)}>\n        <AlertDialogContent className=\"glassmorphism border-white/10\">\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"text-white\">Are you sure?</AlertDialogTitle>\n            <AlertDialogDescription className=\"text-muted-foreground\">\n              {itemToDelete?.type === 'contest' \n                ? \"This will permanently delete the contest and all its data. This action cannot be undone.\"\n                : \"This will permanently delete this submission. This action cannot be undone.\"}\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleDeleteItem}\n              className=\"bg-destructive hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      <AlertDialog open={!!userToSuspend} onOpenChange={(open) => !open && setUserToSuspend(null)}>\n        <AlertDialogContent className=\"glassmorphism border-white/10\">\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"text-white\">Suspend User</AlertDialogTitle>\n            <AlertDialogDescription className=\"text-muted-foreground\">\n              Do you want to suspend this user and reject all their submissions?\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-suspend\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => userToSuspend && suspendUserMutation.mutate({ userId: userToSuspend, suspendAssets: false })}\n              data-testid=\"button-suspend-only\"\n            >\n              Suspend Only\n            </AlertDialogAction>\n            <AlertDialogAction\n              onClick={() => userToSuspend && suspendUserMutation.mutate({ userId: userToSuspend, suspendAssets: true })}\n              className=\"bg-destructive hover:bg-destructive/90\"\n              data-testid=\"button-suspend-and-reject\"\n            >\n              Suspend & Reject Assets\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":19907},"client/src/components/ui/glass-button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst glassButtonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-lg text-sm font-bold transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        primary: \"bg-primary text-white btn-primary shadow-lg shadow-primary/30\",\n        secondary: \"glass text-white btn-secondary\",\n        ghost: \"glass hover:bg-white/20\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 px-3\",\n        lg: \"h-11 px-6\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"primary\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface GlassButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof glassButtonVariants> {\n  asChild?: boolean\n}\n\nconst GlassButton = React.forwardRef<HTMLButtonElement, GlassButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(glassButtonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nGlassButton.displayName = \"GlassButton\"\n\nexport { GlassButton, glassButtonVariants }\n","size_bytes":1575},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/pages/auth/register.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { GlassButton } from \"@/components/GlassButton\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { registerSchema } from \"@shared/schema\";\nimport { useAuth } from \"@/lib/auth\";\nimport { Link } from \"wouter\";\nimport { Eye, EyeOff, UserPlus, Trophy, Check } from \"lucide-react\";\nimport type { z } from \"zod\";\n\ntype RegisterFormData = z.infer<typeof registerSchema>;\n\nexport default function Register() {\n  const [, setLocation] = useLocation();\n  const { refetch } = useAuth();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const form = useForm<RegisterFormData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      refetch();\n      setLocation(\"/\");\n    },\n  });\n\n  const onSubmit = (data: RegisterFormData) => {\n    registerMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-background px-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        <div className=\"text-center\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <div className=\"w-12 h-12 rounded-lg gradient-glory flex items-center justify-center\">\n              <Trophy className=\"text-white text-xl\" />\n            </div>\n            <span className=\"text-3xl font-bold tracking-tight\">5best</span>\n          </div>\n          <h1 className=\"text-2xl font-bold\">Join the community</h1>\n          <p className=\"text-muted-foreground\">Create your account and start competing</p>\n        </div>\n\n        <Card className=\"glass-effect border-border\">\n          <CardHeader className=\"space-y-1 pb-4\">\n            <CardTitle className=\"text-xl font-semibold\">Create Account</CardTitle>\n            <CardDescription>\n              Join thousands of creators competing for GLORY\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input\n                          data-testid=\"input-username\"\n                          {...field}\n                          placeholder=\"creator123\"\n                          className=\"bg-muted border-border focus:border-primary\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input\n                          data-testid=\"input-email\"\n                          {...field}\n                          type=\"email\"\n                          placeholder=\"your@email.com\"\n                          className=\"bg-muted border-border focus:border-primary\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            data-testid=\"input-password\"\n                            {...field}\n                            type={showPassword ? \"text\" : \"password\"}\n                            placeholder=\"Create a strong password\"\n                            className=\"bg-muted border-border focus:border-primary pr-10\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowPassword(!showPassword)}\n                          >\n                            {showPassword ? (\n                              <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {registerMutation.error && (\n                  <Alert variant=\"destructive\">\n                    <AlertDescription data-testid=\"error-message\">\n                      {registerMutation.error instanceof Error ? registerMutation.error.message : \"Registration failed\"}\n                    </AlertDescription>\n                  </Alert>\n                )}\n\n                <div className=\"bg-muted/50 rounded-lg p-4 space-y-2\">\n                  <div className=\"flex items-center space-x-2 text-sm\">\n                    <Check className=\"w-4 h-4 text-success\" />\n                    <span className=\"text-muted-foreground\">Account will be pending approval</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 text-sm\">\n                    <Check className=\"w-4 h-4 text-success\" />\n                    <span className=\"text-muted-foreground\">Start with 0 GLORY balance</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 text-sm\">\n                    <Check className=\"w-4 h-4 text-success\" />\n                    <span className=\"text-muted-foreground\">Upload submissions after approval</span>\n                  </div>\n                </div>\n\n                <GlassButton\n                  data-testid=\"button-submit\"\n                  type=\"submit\"\n                  className=\"w-full font-semibold\"\n                  disabled={registerMutation.isPending}\n                >\n                  {registerMutation.isPending ? (\n                    \"Creating account...\"\n                  ) : (\n                    <>\n                      <UserPlus className=\"w-4 h-4 mr-2\" />\n                      Create Account\n                    </>\n                  )}\n                </GlassButton>\n              </form>\n            </Form>\n\n            <div className=\"mt-6 text-center text-sm\">\n              <span className=\"text-muted-foreground\">Already have an account? </span>\n              <Link href=\"/login\">\n                <Button variant=\"link\" className=\"p-0 h-auto text-primary font-semibold\" data-testid=\"link-login\">\n                  Sign in\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8133},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"design_guidelines.md":{"content":"# Creative Contest Platform Design Guidelines\n\n## Design Approach\n\n**Reference-Based**: Drawing inspiration from **Dribbble** (masonry grids, creator focus) and **Behance** (immersive project showcases) with custom dark theme and glass morphism aesthetic.\n\n**Core Principles**: Bold visual hierarchy, content-first layouts, satisfying micro-interactions, celebration of creativity.\n\n---\n\n## Color System\n\n### Dark Mode Palette (Primary)\n- **Background Base**: 15 8% 12% (deep charcoal)\n- **Background Elevated**: 15 8% 16% (cards/modals)\n- **Background Subtle**: 15 8% 10% (page background)\n- **Primary Purple**: 265 78% 58% (vibrant purple - #7C3CEC)\n- **Purple Hover**: 265 78% 65%\n- **Text Primary**: 0 0% 98%\n- **Text Secondary**: 0 0% 70%\n- **Text Muted**: 0 0% 50%\n- **Border Subtle**: 0 0% 25%\n- **Success Green**: 142 76% 45% (voting confirmation)\n- **Warning Orange**: 25 95% 60% (contest deadlines)\n\n### Accent Application\nUse purple sparingly for maximum impact: CTAs, active votes, contest badges, live indicators, and winner highlights.\n\n---\n\n## Typography\n\n**Fonts**: \n- **Display/Headings**: 'Inter' (700, 800 weights) - sharp, modern\n- **Body/UI**: 'Inter' (400, 500, 600) - clean readability\n\n**Scale**:\n- Hero Headline: 4xl/5xl (bold 800)\n- Section Titles: 2xl/3xl (bold 700)\n- Card Titles: lg/xl (semibold 600)\n- Body Text: base (regular 400)\n- Captions/Meta: sm (medium 500)\n\n---\n\n## Layout System\n\n**Spacing Primitives**: Use Tailwind units of **4, 6, 8, 12, 16, 24** for consistency.\n\n**Container Strategy**:\n- Max-width: 7xl (1280px) for main content\n- Full-width for hero and featured contest banners\n- Grid gaps: 6-8 units for gallery layouts\n\n---\n\n## Glass Morphism Implementation\n\n**Recipe**:\n- Background: backdrop-blur-xl with bg-white/5 (dark mode)\n- Border: 1px solid white/10\n- Subtle shadow: shadow-2xl with purple glow (0 8px 32px rgba(124, 60, 236, 0.15))\n- Apply to: Navigation, modal overlays, voting cards, submission forms\n\n**Usage Context**: Overlay elements over images/gradients, contest cards, floating UI components.\n\n---\n\n## Core Components\n\n### Navigation\nTop navbar with glass effect, logo left, search center, user profile/upload right. Sticky on scroll with subtle blur increase.\n\n### Hero Section\nFull-bleed featured contest showcase: Large background image (winning submission or contest theme), glass morphism title card overlaying bottom-left, live contest countdown, primary CTA (\"Submit Entry\" button with purple gradient), secondary stats (entries count, time remaining).\n\n### Contest Grid\nMasonry layout (3-4 columns desktop, 2 tablet, 1 mobile): Each card shows thumbnail, title, entry count badge, voting heart icon, creator avatar. Hover: gentle scale (1.02) + purple glow border.\n\n### Submission Cards\nLarge image/video preview, glass morphism overlay footer with: creator info, vote count with animated heart button, view count, timestamp. Active voted state: filled purple heart with sparkle animation.\n\n### Voting Interface\nProminent heart button (lg size), vote count displayed adjacent, one-click voting with haptic-feel scale animation, voted state persists with color fill.\n\n### Contest Details Page\nHero contest banner, tabbed sections (Entries, Rules, Prizes, Timeline), entry submission grid below, filtering/sorting toolbar with glass effect.\n\n### Submission Form\nMulti-step modal with glass background: Upload area (drag-drop), title/description fields, tags/category selection, preview panel, submit button with loading state.\n\n### User Profiles\nCover image header, avatar with glass border, stats row (submissions, votes received, wins), grid of user submissions, follow button.\n\n### Leaderboard Component\nRanked list with: position badges (1st gold, 2nd silver, 3rd bronze), entry thumbnails, vote counts, creator names. Top 3 have elevated glass cards.\n\n---\n\n## Animations\n\n**Micro-interactions Only**:\n- Vote button: Scale pulse on click + heart fill animation\n- Card hover: Lift with subtle purple glow\n- Contest countdown: Number flip animation\n- Loading states: Skeleton screens with shimmer\n\n**Performance**: Use CSS transforms and opacity only. No complex scroll animations.\n\n---\n\n## Images Section\n\n### Hero Image\n**Placement**: Full-width hero section (80vh height)\n**Description**: Award-winning creative submission (photography/digital art) with vibrant colors and strong composition. Apply subtle gradient overlay (bottom to top, from background color to transparent) to ensure text readability.\n\n### Contest Thumbnails\n**Placement**: Throughout grid layouts and cards\n**Description**: User-submitted images/videos (16:9 or 4:5 ratios). Ensure proper lazy loading and thumbnail optimization.\n\n### Category Icons\n**Placement**: Contest category filters, submission type selectors\n**Description**: Photography camera, video play icon, digital art palette, design tools. Use heroicons library (outline variant, stroke-2).\n\n### Background Textures\n**Placement**: Subtle noise texture on body background\n**Description**: Fine grain overlay at 3% opacity for depth without distraction.\n\n### Profile Avatars\n**Placement**: Creator attributions, comments, leaderboards\n**Description**: Circular cropped user photos with purple ring border for winners/featured creators.\n\n---\n\n## Responsive Behavior\n\n- **Desktop (lg+)**: Multi-column grids (3-4), sidebar filters, expanded navigation\n- **Tablet (md)**: 2-column grids, collapsed sidebar to modal, maintained glass effects\n- **Mobile (base)**: Single column, bottom sheet modals, simplified navigation drawer, touch-optimized voting buttons (min 44px tap target)","size_bytes":5591},"server/db.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL is not set\");\n}\n\nconst sql = neon(process.env.DATABASE_URL);\nexport const db = drizzle(sql, { schema });\n","size_bytes":311},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/lib/theme.tsx":{"content":"import { createContext, useContext, useEffect } from \"react\";\n\ntype Theme = \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const theme: Theme = \"dark\";\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\");\n    root.classList.add(\"dark\");\n  }, []);\n\n  return (\n    <ThemeContext.Provider value={{ theme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":757},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function formatPrizeAmount(amount: string | number | null | undefined): string {\n  if (amount === null || amount === undefined) return '0';\n  \n  const num = typeof amount === 'string' ? parseFloat(amount) : amount;\n  \n  if (isNaN(num)) return '0';\n  \n  // Convert to string and remove trailing zeros after decimal point\n  const str = num.toString();\n  \n  // If it's a whole number (no decimal point or ends with .0, .00, etc)\n  if (str.includes('.')) {\n    return parseFloat(str).toString(); // This automatically removes trailing zeros\n  }\n  \n  return str;\n}\n","size_bytes":734},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/hooks/useUserBalance.ts":{"content":"import { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useEffect } from \"react\";\n\nexport function useUserBalance() {\n  const { data: user } = useAuth();\n  const queryClient = useQueryClient();\n\n  // Listen for focus events to refresh data when user switches back to tab\n  useEffect(() => {\n    const handleFocus = () => {\n      if (user) {\n        queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n      }\n    };\n\n    const handleVisibilityChange = () => {\n      if (!document.hidden && user) {\n        queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n      }\n    };\n\n    window.addEventListener('focus', handleFocus);\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    \n    return () => {\n      window.removeEventListener('focus', handleFocus);\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [user, queryClient]);\n\n  return {\n    balance: user?.gloryBalance || 0,\n    user\n  };\n}","size_bytes":1028},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --pg-primary: #7c3cec;\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(240, 10%, 3.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(240, 10%, 3.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(240, 10%, 3.9%);\n  --primary: hsl(270, 80%, 58%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(240, 4.8%, 95.9%);\n  --secondary-foreground: hsl(240, 5.9%, 10%);\n  --muted: hsl(240, 4.8%, 95.9%);\n  --muted-foreground: hsl(240, 3.8%, 46.1%);\n  --accent: hsl(270, 80%, 58%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --success: hsl(142, 76%, 36%);\n  --success-foreground: hsl(0, 0%, 100%);\n  --border: hsl(240, 5.9%, 90%);\n  --input: hsl(240, 5.9%, 90%);\n  --ring: hsl(270, 80%, 58%);\n  --radius: 0.5rem;\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', monospace;\n}\n\n.dark {\n  --background: 268 43% 10%;\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 4%, 9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(240, 4%, 9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(270, 80%, 58%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(240, 5%, 26%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 5%, 16%);\n  --muted-foreground: hsl(240, 5%, 64%);\n  --accent: hsl(270, 80%, 58%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --success: hsl(142, 76%, 36%);\n  --success-foreground: hsl(0, 0%, 100%);\n  --border: hsl(240, 5%, 26%);\n  --input: hsl(240, 5%, 26%);\n  --ring: hsl(270, 80%, 58%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply text-foreground antialiased;\n    background-color: #171121;\n    font-family: var(--font-sans);\n  }\n\n  html {\n    background-color: #171121;\n  }\n\n  #root {\n    background-color: #171121;\n    min-height: 100vh;\n  }\n\n  /* Custom Scrollbar Styles */\n  * {\n    scrollbar-width: thin;\n    scrollbar-color: rgba(124, 60, 236, 0.6) rgba(23, 17, 33, 0.4);\n  }\n\n  *::-webkit-scrollbar {\n    width: 10px;\n    height: 10px;\n  }\n\n  *::-webkit-scrollbar-track {\n    background: rgba(23, 17, 33, 0.4);\n    border-radius: 5px;\n  }\n\n  *::-webkit-scrollbar-thumb {\n    background: rgba(124, 60, 236, 0.6);\n    border-radius: 5px;\n    border: 2px solid rgba(23, 17, 33, 0.4);\n  }\n\n  *::-webkit-scrollbar-thumb:hover {\n    background: rgba(124, 60, 236, 0.8);\n    box-shadow: 0 0 6px rgba(124, 60, 236, 0.5);\n  }\n\n  *::-webkit-scrollbar-thumb:active {\n    background: rgba(124, 60, 236, 1);\n  }\n}\n\n@layer utilities {\n  /* Background utilities for the new color */\n  .bg-app {\n    background-color: #171121;\n  }\n\n  .bg-app-light {\n    background-color: rgba(23, 17, 33, 0.8);\n  }\n\n  .bg-app-lighter {\n    background-color: rgba(23, 17, 33, 0.5);\n  }\n\n  /* Glow Effects */\n  .glow {\n    box-shadow:\n      0 0 6px var(--pg-primary),\n      0 0 14px var(--pg-primary),\n      0 0 26px var(--pg-primary),\n      0 0 46px var(--pg-primary);\n  }\n\n  .glow-border {\n    box-shadow: 0 0 5px var(--pg-primary),\n      0 0 10px var(--pg-primary),\n      0 0 15px var(--pg-primary);\n  }\n\n  .text-glow {\n    text-shadow: 0 0 5px var(--pg-primary),\n      0 0 10px var(--pg-primary);\n  }\n\n  .hover\\:glow:hover {\n    box-shadow:\n      0 0 10px var(--pg-primary),\n      0 0 20px rgba(124, 60, 236, 0.5),\n      0 0 30px rgba(124, 60, 236, 0.2);\n  }\n\n  /* Glass Effects - Updated for new background */\n  .glass {\n    background: rgba(23, 17, 33, 0.6);\n    -webkit-backdrop-filter: blur(8px);\n    backdrop-filter: blur(8px);\n    border: 1px solid rgba(124, 60, 236, 0.25);\n  }\n\n  .glass-effect {\n    background: rgba(23, 17, 33, 0.5);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n\n  .glassmorphism {\n    background: rgba(23, 17, 33, 0.6);\n    backdrop-filter: blur(10px);\n    -webkit-backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.18);\n  }\n\n  /* Focus Ring */\n  .focus-ring:focus {\n    outline: none !important;\n    box-shadow:\n      0 0 0 2px rgba(255,255,255,0.2),\n      0 0 0 6px rgba(124,60,236,0.5);\n  }\n\n  /* Animations */\n  @keyframes fadeInUp {\n    from {\n      opacity: 0;\n      transform: translateY(30px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  @keyframes fadeInScale {\n    from {\n      opacity: 0;\n      transform: scale(0.95);\n    }\n    to {\n      opacity: 1;\n      transform: scale(1);\n    }\n  }\n\n  @keyframes pulse {\n    0%, 100% { transform: scale(1); }\n    50% { transform: scale(1.1); }\n  }\n\n  @keyframes boltPulse {\n    0%, 100% {\n      transform: scale(1);\n    }\n    50% {\n      transform: scale(1.05);\n    }\n  }\n\n  @keyframes shimmer {\n    0% {\n      background-position: -200% 0;\n    }\n    100% {\n      background-position: 200% 0;\n    }\n  }\n\n  @keyframes gradientShift {\n    0%, 100% {\n      background-position: 0% 50%;\n    }\n    50% {\n      background-position: 100% 50%;\n    }\n  }\n\n  .animate-fade-in-up {\n    animation: fadeInUp 0.8s ease-out forwards;\n  }\n\n  .animate-fade-in-scale {\n    animation: fadeInScale 0.6s ease-out forwards;\n  }\n\n  .animate-pulse-slow {\n    animation: boltPulse 3s ease-in-out infinite;\n  }\n\n  .shimmer-effect {\n    background: linear-gradient(\n      90deg,\n      transparent,\n      rgba(255, 255, 255, 0.1),\n      transparent\n    );\n    background-size: 200% 100%;\n    animation: shimmer 2s infinite;\n  }\n\n  /* Button Effects */\n  .btn-primary {\n    position: relative;\n    overflow: hidden;\n    transform: translateY(0);\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .btn-primary:hover {\n    transform: translateY(-2px);\n    box-shadow:\n      0 10px 25px rgba(124, 60, 236, 0.4),\n      0 0 20px rgba(124, 60, 236, 0.3);\n  }\n\n  .btn-primary::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(\n      90deg,\n      transparent,\n      rgba(255, 255, 255, 0.2),\n      transparent\n    );\n    transition: left 0.5s;\n  }\n\n  .btn-primary:hover::before {\n    left: 100%;\n  }\n\n  .btn-secondary {\n    position: relative;\n    overflow: hidden;\n    transform: translateY(0);\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    border: 1px solid rgba(124, 60, 236, 0.3);\n  }\n\n  .btn-secondary:hover {\n    transform: translateY(-2px);\n    border-color: rgba(124, 60, 236, 0.6);\n    box-shadow:\n      0 8px 20px rgba(124, 60, 236, 0.2),\n      inset 0 0 20px rgba(124, 60, 236, 0.1);\n  }\n\n  /* Wallet Button Glass Style */\n  .wallet-adapter-button-trigger {\n    background-color: transparent !important;\n  }\n\n  .wallet-adapter-button-trigger .wallet-adapter-button {\n    background: rgba(23, 17, 33, 0.6) !important;\n    backdrop-filter: blur(8px) !important;\n    -webkit-backdrop-filter: blur(8px) !important;\n    border: 1px solid rgba(124, 60, 236, 0.25) !important;\n    border-radius: 0.5rem !important;\n    padding: 0.75rem 1.5rem !important;\n    font-weight: 700 !important;\n    color: white !important;\n    box-shadow: 0 0 5px var(--pg-primary), 0 0 10px var(--pg-primary), 0 0 15px var(--pg-primary) !important;\n    position: relative !important;\n    overflow: hidden !important;\n    transform: translateY(0) !important;\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;\n  }\n\n  /* Remove all default Solana pseudo-elements */\n  .wallet-adapter-button-trigger .wallet-adapter-button::after {\n    display: none !important;\n    content: none !important;\n  }\n\n  .wallet-adapter-button-trigger::before,\n  .wallet-adapter-button-trigger::after {\n    display: none !important;\n    content: none !important;\n  }\n\n  .wallet-adapter-button-trigger .wallet-adapter-button:hover {\n    transform: translateY(-2px) !important;\n    box-shadow:\n      0 10px 25px rgba(124, 60, 236, 0.4),\n      0 0 20px rgba(124, 60, 236, 0.3) !important;\n  }\n\n  .wallet-adapter-button-trigger .wallet-adapter-button::before {\n    content: '' !important;\n    position: absolute !important;\n    top: 0 !important;\n    left: -100% !important;\n    width: 100% !important;\n    height: 100% !important;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent) !important;\n    transition: left 0.5s !important;\n    z-index: 1 !important;\n  }\n\n  .wallet-adapter-button-trigger .wallet-adapter-button:hover::before {\n    left: 100% !important;\n  }\n\n  /* Ensure button content is above shimmer */\n  .wallet-adapter-button-trigger .wallet-adapter-button > * {\n    position: relative !important;\n    z-index: 2 !important;\n  }\n\n  /* Group Hover Effects */\n  .group .group-hover\\:scale-110 {\n    transform: scale(1);\n    transition: transform 0.3s ease;\n  }\n  .group:hover .group-hover\\:scale-110 {\n    transform: scale(1.1);\n  }\n\n  .group .group-hover\\:opacity-100 {\n    opacity: 0;\n    transition: opacity 0.25s ease;\n  }\n  .group:hover .group-hover\\:opacity-100 {\n    opacity: 1;\n  }\n\n  .group .group-hover\\:opacity-0 {\n    opacity: 1;\n    transition: opacity 0.25s ease;\n  }\n  .group:hover .group-hover\\:opacity-0 {\n    opacity: 0;\n  }\n\n  /* Prompt Bar Animation */\n  .prompt-bar {\n    position: relative;\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .prompt-bar:focus-within {\n    transform: scale(1.02);\n    box-shadow:\n      0 0 0 1px rgba(124, 60, 236, 0.5),\n      0 10px 30px rgba(124, 60, 236, 0.2);\n  }\n\n  .prompt-bar::after {\n    content: '';\n    position: absolute;\n    bottom: 0;\n    left: 50%;\n    width: 0;\n    height: 2px;\n    background: linear-gradient(90deg, #7c3cec, #00f6ff);\n    transition: all 0.3s ease;\n    transform: translateX(-50%);\n  }\n\n  .prompt-bar:focus-within::after {\n    width: 100%;\n  }\n\n  /* Text Gradient */\n  .gradient-text {\n    background: linear-gradient(\n      45deg,\n      #ffffff,\n      #7c3cec,\n      #00f6ff,\n      #ffffff\n    );\n    background-size: 300% 300%;\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    animation: gradientShift 4s ease-in-out infinite;\n  }\n\n  .gradient-glory {\n    background: linear-gradient(135deg, hsl(270, 80%, 58%) 0%, hsl(280, 70%, 48%) 100%);\n  }\n\n  /* Line Clamp */\n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n  line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n\n  /* Animation Delays */\n  .delay-100 { animation-delay: 0.1s; }\n  .delay-200 { animation-delay: 0.2s; }\n  .delay-300 { animation-delay: 0.3s; }\n  .delay-400 { animation-delay: 0.4s; }\n  .delay-500 { animation-delay: 0.5s; }\n\n  /* Podium Styles */\n  .podium-1 {\n    height: 200px;\n    background: linear-gradient(135deg, hsl(45, 100%, 50%) 0%, hsl(45, 100%, 40%) 100%);\n  }\n\n  .podium-2 {\n    height: 160px;\n    background: linear-gradient(135deg, hsl(0, 0%, 75%) 0%, hsl(0, 0%, 65%) 100%);\n  }\n\n  .podium-3 {\n    height: 120px;\n    background: linear-gradient(135deg, hsl(28, 80%, 52%) 0%, hsl(28, 70%, 42%) 100%);\n  }\n\n  .vote-pulse {\n    animation: pulse 1s ease-in-out;\n  }\n\n  /* Pinterest-style Masonry Grid */\n  .masonry-grid {\n    columns: 2;\n    column-gap: 0.5rem;\n    padding: 0;\n  }\n\n  @media (min-width: 640px) {\n    .masonry-grid {\n      columns: 3;\n      column-gap: 0.5rem;\n    }\n  }\n\n  @media (min-width: 1024px) {\n    .masonry-grid {\n      columns: 4;\n      column-gap: 0.75rem;\n    }\n  }\n\n  @media (min-width: 1280px) {\n    .masonry-grid {\n      columns: 5;\n      column-gap: 0.75rem;\n    }\n  }\n\n  @media (min-width: 1536px) {\n    .masonry-grid {\n      columns: 6;\n      column-gap: 0.75rem;\n    }\n  }\n\n  @media (min-width: 1920px) {\n    .masonry-grid {\n      columns: 7;\n      column-gap: 0.75rem;\n    }\n  }\n\n  @media (min-width: 2560px) {\n    .masonry-grid {\n      columns: 8;\n      column-gap: 0.75rem;\n    }\n  }\n\n  .masonry-grid > * {\n    break-inside: avoid;\n    margin-bottom: 0.5rem;\n    width: 100%;\n    display: inline-block;\n    transition: transform 0.2s ease, opacity 0.3s ease;\n  }\n\n  .masonry-grid > *:hover {\n    transform: translateY(-2px);\n  }\n\n  /* Pinterest-style loading animation */\n  @keyframes pinterest-fade-in {\n    from {\n      opacity: 0;\n      transform: translateY(20px) scale(0.95);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0) scale(1);\n    }\n  }\n\n  .masonry-grid > * {\n    animation: pinterest-fade-in 0.6s ease-out forwards;\n  }\n\n  /* Stagger animation for items */\n  .masonry-grid > *:nth-child(1) { animation-delay: 0.1s; }\n  .masonry-grid > *:nth-child(2) { animation-delay: 0.2s; }\n  .masonry-grid > *:nth-child(3) { animation-delay: 0.3s; }\n  .masonry-grid > *:nth-child(4) { animation-delay: 0.4s; }\n  .masonry-grid > *:nth-child(5) { animation-delay: 0.5s; }\n  .masonry-grid > *:nth-child(6) { animation-delay: 0.6s; }\n  .masonry-grid > *:nth-child(7) { animation-delay: 0.7s; }\n  .masonry-grid > *:nth-child(8) { animation-delay: 0.8s; }\n\n  /* Wallet button - collapsed sidebar */\n  .wallet-adapter-button-trigger.sidebar-collapsed {\n    display: flex;\n    justify-content: center;\n  }\n\n  .wallet-adapter-button-trigger.sidebar-collapsed .wallet-adapter-button {\n    width: 40px !important;\n    min-width: 40px !important;\n    padding: 8px !important;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .wallet-adapter-button-trigger.sidebar-collapsed .wallet-adapter-button-start-icon {\n    margin: 0 !important;\n  }\n\n  .wallet-adapter-button-trigger.sidebar-collapsed .wallet-adapter-button > span:not(.wallet-adapter-button-start-icon) {\n    display: none;\n  }\n}\n","size_bytes":13716},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"server/middleware/auth.ts":{"content":"import jwt from \"jsonwebtoken\";\nimport { Request, Response, NextFunction } from \"express\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || process.env.SESSION_SECRET || \"fallback_secret_key\";\n\nexport interface AuthRequest extends Request {\n  user?: {\n    id: string;\n    email: string;\n    role: string;\n    status: string;\n  };\n}\n\nexport function authenticateToken(req: AuthRequest, res: Response, next: NextFunction) {\n  const token = req.cookies?.authToken;\n\n  if (!token) {\n    return res.status(401).json({ error: \"Access token required\" });\n  }\n\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as any;\n    req.user = decoded;\n    next();\n  } catch (error) {\n    return res.status(403).json({ error: \"Invalid or expired token\" });\n  }\n}\n\nexport function requireAdmin(req: AuthRequest, res: Response, next: NextFunction) {\n  if (!req.user) {\n    return res.status(401).json({ error: \"Authentication required\" });\n  }\n\n  if (req.user.role !== \"admin\") {\n    return res.status(403).json({ error: \"Admin access required\" });\n  }\n\n  next();\n}\n\nexport function requireApproved(req: AuthRequest, res: Response, next: NextFunction) {\n  if (!req.user) {\n    return res.status(401).json({ error: \"Authentication required\" });\n  }\n\n  if (req.user.status !== \"approved\") {\n    return res.status(403).json({ error: \"Account must be approved to perform this action\" });\n  }\n\n  next();\n}\n\nexport function generateToken(user: { id: string; email: string; role: string; status: string }) {\n  return jwt.sign(user, JWT_SECRET, { expiresIn: \"7d\" });\n}\n","size_bytes":1546},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 min-h-[44px] md:min-h-0 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":815},"client/src/components/EditContestModal.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { X, Upload, Plus, Minus, Calendar, Trophy, Users, Settings, Eye, FileText, Image as ImageIcon } from 'lucide-react';\n\ninterface EditContestModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (contestData: any) => void;\n  contest: any;\n}\n\nexport function EditContestModal({ isOpen, onClose, onSubmit, contest }: EditContestModalProps) {\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    contestType: 'Image',\n    category: '',\n    coverImage: null as File | string | null,\n    entryFee: false,\n    entryFeeAmount: undefined as number | undefined,\n    entryFeeCurrency: 'GLORY' as 'GLORY' | 'SOL' | 'USDC',\n    entryFeePaymentMethods: ['balance'] as ('balance' | 'wallet')[],\n    startDateOption: 'later' as 'now' | 'later',\n    startDate: '',\n    startTime: '',\n    endDate: '',\n    endTime: '',\n    submissionDeadline: '',\n    submissionDeadlineTime: '',\n    enableSubmissionDeadline: false,\n    votingStartOption: 'later' as 'now' | 'later',\n    votingStartDate: '',\n    votingEndDate: '',\n    votingEndTime: '',\n    prizePool: '',\n    currency: 'GLORY' as 'GLORY' | 'SOL' | 'USDC',\n    prizeDistribution: [\n      { place: 1, value: 0 },\n      { place: 2, value: 0 },\n      { place: 3, value: 0 }\n    ],\n    additionalRewards: [],\n    eligibility: 'all_users',\n    maxSubmissions: 3,\n    allowedMediaTypes: ['Images'],\n    fileSizeLimit: 50,\n    nsfwAllowed: false,\n    agreeToRules: true,\n    votingMethods: ['public'],\n    juryMembers: [] as string[],\n    votesPerUserPerPeriod: 0,\n    periodDurationHours: 24,\n    totalVotesPerUser: 0,\n    status: 'draft',\n    isFeatured: false\n  });\n\n  const [errors, setErrors] = useState<string[]>([]);\n  const [coverImagePreview, setCoverImagePreview] = useState<string>('');\n  const [showImageSelector, setShowImageSelector] = useState(false);\n\n  // Fetch approved users for jury selection\n  const { data: approvedUsers = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/users', { status: 'approved' }]\n  });\n\n  const { data: submissions = [] } = useQuery({\n    queryKey: ['/api/submissions', { forGallery: true }],\n    queryFn: async () => {\n      const response = await fetch('/api/submissions', { credentials: 'include' });\n      if (!response.ok) return [];\n      return response.json();\n    },\n    enabled: showImageSelector\n  });\n\n  useEffect(() => {\n    if (contest && isOpen) {\n      const config = contest.config || {};\n      \n      // Safely parse dates with validation\n      const startDate = contest.startAt ? new Date(contest.startAt) : new Date();\n      const endDate = contest.endAt ? new Date(contest.endAt) : new Date();\n      \n      // Validate dates - check if they're valid\n      const isValidStartDate = startDate instanceof Date && !isNaN(startDate.getTime());\n      const isValidEndDate = endDate instanceof Date && !isNaN(endDate.getTime());\n      \n      // Parse submission deadline from config\n      const submissionEndAt = config.submissionEndAt ? new Date(config.submissionEndAt) : null;\n      const isValidSubmissionEndAt = submissionEndAt && !isNaN(submissionEndAt.getTime());\n      \n      const votingStartAt = config.votingStartAt ? new Date(config.votingStartAt) : null;\n      const isValidVotingStartAt = votingStartAt && !isNaN(votingStartAt.getTime());\n      \n      setFormData({\n        title: contest.title || '',\n        description: contest.description || '',\n        contestType: config.contestType || 'Image',\n        category: config.category || '',\n        coverImage: contest.coverImageUrl || null,\n        entryFee: config.entryFee || false,\n        entryFeeAmount: config.entryFeeAmount,\n        entryFeeCurrency: config.entryFeeCurrency || 'GLORY',\n        entryFeePaymentMethods: config.entryFeePaymentMethods || ['balance'],\n        startDateOption: 'later',\n        startDate: isValidStartDate ? startDate.toISOString().split('T')[0] : '',\n        startTime: isValidStartDate ? startDate.toTimeString().slice(0, 5) : '',\n        endDate: isValidEndDate ? endDate.toISOString().split('T')[0] : '',\n        endTime: isValidEndDate ? endDate.toTimeString().slice(0, 5) : '',\n        submissionDeadline: isValidSubmissionEndAt ? submissionEndAt!.toISOString().split('T')[0] : '',\n        submissionDeadlineTime: isValidSubmissionEndAt ? submissionEndAt!.toTimeString().slice(0, 5) : '',\n        enableSubmissionDeadline: !!(isValidSubmissionEndAt && isValidEndDate && submissionEndAt!.getTime() !== endDate.getTime()),\n        votingStartOption: 'later',\n        votingStartDate: isValidVotingStartAt ? votingStartAt!.toISOString().split('T')[0] : '',\n        votingEndDate: isValidEndDate ? endDate.toISOString().split('T')[0] : '',\n        votingEndTime: isValidEndDate ? endDate.toTimeString().slice(0, 5) : '',\n        prizePool: String(contest.prizeGlory || 0),\n        currency: config.currency || 'GLORY',\n        prizeDistribution: config.prizeDistribution || [\n          { place: 1, value: 0 },\n          { place: 2, value: 0 },\n          { place: 3, value: 0 }\n        ],\n        additionalRewards: config.additionalRewards || [],\n        eligibility: config.eligibility || 'all_users',\n        maxSubmissions: config.maxSubmissions || 3,\n        allowedMediaTypes: config.allowedMediaTypes || ['Images'],\n        fileSizeLimit: config.fileSizeLimit || 50,\n        nsfwAllowed: config.nsfwAllowed || false,\n        agreeToRules: config.agreeToRules !== false,\n        votingMethods: config.votingMethods || ['public'],\n        juryMembers: config.juryMembers || [],\n        votesPerUserPerPeriod: config.votesPerUserPerPeriod || 1,\n        periodDurationHours: config.periodDurationHours || 24,\n        totalVotesPerUser: config.totalVotesPerUser || 0,\n        status: contest.status || 'draft',\n        isFeatured: contest.isFeatured || false\n      });\n      \n      if (contest.coverImageUrl) {\n        setCoverImagePreview(contest.coverImageUrl);\n      }\n    }\n  }, [contest, isOpen]);\n\n  if (!isOpen) return null;\n\n  const handleInputChange = (field: string, value: any) => {\n    setFormData(prev => {\n      const updates: any = { [field]: value };\n      \n      // Sync contest end time with voting end time\n      if (field === 'endTime') {\n        updates.votingEndTime = value;\n      }\n      if (field === 'endDate') {\n        updates.votingEndDate = value;\n      }\n      \n      // Auto-select payment methods when currency changes\n      if (field === 'entryFeeCurrency' && prev.entryFee) {\n        const isStandardCrypto = value && ['SOL', 'USDC'].includes(value);\n        const currentMethods = prev.entryFeePaymentMethods;\n        \n        if (isStandardCrypto && !currentMethods.includes('wallet')) {\n          console.log('🔄 Auto-adding wallet payment method for', value);\n          updates.entryFeePaymentMethods = ['balance', 'wallet'] as ('balance' | 'wallet')[];\n        } else if (!isStandardCrypto && currentMethods.includes('wallet')) {\n          console.log('🔄 Removing wallet payment for', value);\n          updates.entryFeePaymentMethods = ['balance'] as ('balance' | 'wallet')[];\n        }\n      }\n      \n      return { ...prev, ...updates };\n    });\n  };\n\n  const handleCoverImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      handleInputChange('coverImage', file);\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setCoverImagePreview(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleArrayToggle = (field: 'allowedMediaTypes' | 'votingMethods', value: string) => {\n    setFormData(prev => {\n      const currentValue = prev[field];\n      return {\n        ...prev,\n        [field]: currentValue.includes(value)\n          ? currentValue.filter(item => item !== value)\n          : [...currentValue, value]\n      };\n    });\n  };\n\n  const addPrizePlace = () => {\n    setFormData(prev => ({\n      ...prev,\n      prizeDistribution: [\n        ...prev.prizeDistribution,\n        { place: prev.prizeDistribution.length + 1, value: 0 }\n      ]\n    }));\n  };\n\n  const removePrizePlace = (index: number) => {\n    if (formData.prizeDistribution.length > 1) {\n      setFormData(prev => ({\n        ...prev,\n        prizeDistribution: prev.prizeDistribution.filter((_, i) => i !== index)\n      }));\n    }\n  };\n\n  const updatePrizeValue = (index: number, value: number) => {\n    setFormData(prev => ({\n      ...prev,\n      prizeDistribution: prev.prizeDistribution.map((prize, i) =>\n        i === index ? { ...prize, value } : prize\n      )\n    }));\n  };\n\n  // Unified validation function for all form fields\n  const validateFormData = (dataToValidate: typeof formData): string[] => {\n    const validationErrors: string[] = [];\n    \n    // Validate basic fields\n    if (!dataToValidate.title.trim()) {\n      validationErrors.push('Contest title is required');\n    }\n    if (!dataToValidate.description.trim()) {\n      validationErrors.push('Description is required');\n    }\n    \n    // Validate start date (if not \"now\")\n    if (dataToValidate.startDateOption !== 'now' && !dataToValidate.startDate) {\n      validationErrors.push('Start date is required');\n    }\n    \n    // Validate end date (always required)\n    if (!dataToValidate.votingEndDate) {\n      validationErrors.push('Contest end date is required');\n    }\n    \n    // Validate submission deadline (only if enabled)\n    if (dataToValidate.enableSubmissionDeadline && !dataToValidate.submissionDeadline) {\n      validationErrors.push('Submission deadline is required when enabled');\n    }\n    \n    // Validate voting start date (if not \"now\")\n    if (dataToValidate.votingStartOption !== 'now' && !dataToValidate.votingStartDate) {\n      validationErrors.push('Voting start date is required');\n    }\n    \n    // Chronological validation - skip for already active/started contests\n    const isContestActive = contest && (contest.status === 'active' || new Date(contest.startAt) <= new Date());\n    console.log('⏰ Contest validation check:', { \n      contestStatus: contest?.status, \n      startAt: contest?.startAt, \n      isActive: isContestActive,\n      skipValidation: isContestActive \n    });\n    \n    if (validationErrors.length === 0 && !isContestActive) {\n      // Build date objects for comparison\n      const startAt = dataToValidate.startDateOption === 'now' \n        ? new Date() \n        : new Date(`${dataToValidate.startDate}T${dataToValidate.startTime || '00:00'}`);\n      \n      const votingEndAt = new Date(\n        `${dataToValidate.votingEndDate}T${dataToValidate.votingEndTime || '23:59'}`\n      );\n      \n      const votingStartAt = dataToValidate.votingStartOption === 'now'\n        ? new Date()\n        : new Date(`${dataToValidate.votingStartDate}T00:00`);\n      \n      // Check: Contest start must be before voting end\n      if (startAt >= votingEndAt) {\n        validationErrors.push('Contest start time must be before voting end time');\n      }\n      \n      // Check: Voting start must be after or equal to contest start\n      if (votingStartAt < startAt) {\n        validationErrors.push('Voting cannot start before the contest starts');\n      }\n      \n      // Check: Voting start must be before voting end\n      if (votingStartAt >= votingEndAt) {\n        validationErrors.push('Voting start time must be before voting end time');\n      }\n      \n      // Check submission deadline if enabled\n      if (dataToValidate.enableSubmissionDeadline && dataToValidate.submissionDeadline) {\n        const submissionEndAt = new Date(\n          `${dataToValidate.submissionDeadline}T${dataToValidate.submissionDeadlineTime || '23:59'}`\n        );\n        \n        // Submission deadline must be after contest start\n        if (submissionEndAt <= startAt) {\n          validationErrors.push('Submission deadline must be after contest start time');\n        }\n        \n        // Submission deadline must be before or equal to voting end\n        if (submissionEndAt > votingEndAt) {\n          validationErrors.push('Submission deadline cannot be after voting end time');\n        }\n      }\n    }\n    \n    return validationErrors;\n  };\n\n  const handleSubmitWithData = async (dataToSubmit: typeof formData) => {\n    // Calculate total prize from distribution\n    const totalPrize = dataToSubmit.prizeDistribution.reduce((sum, prize) => sum + prize.value, 0);\n    \n    // Set contest start time with validation\n    let startAt: string;\n    if (dataToSubmit.startDateOption === 'now') {\n      startAt = new Date().toISOString();\n    } else {\n      const startDateObj = new Date(\n        `${dataToSubmit.startDate}T${dataToSubmit.startTime || '00:00'}`\n      );\n      if (isNaN(startDateObj.getTime())) {\n        setErrors(['Invalid start date']);\n        return;\n      }\n      startAt = startDateObj.toISOString();\n    }\n    \n    // Set contest end time with validation\n    const endDateStr = dataToSubmit.votingEndDate || dataToSubmit.endDate;\n    const endTimeStr = dataToSubmit.votingEndTime || dataToSubmit.endTime || '23:59';\n    const endDateObj = new Date(`${endDateStr}T${endTimeStr}`);\n    \n    if (isNaN(endDateObj.getTime())) {\n      setErrors(['Invalid end date']);\n      return;\n    }\n    const endAt = endDateObj.toISOString();\n    \n    // Process submission deadline logic\n    let submissionEndAt: string;\n    if (dataToSubmit.enableSubmissionDeadline && dataToSubmit.submissionDeadline) {\n      const submissionDeadlineObj = new Date(\n        `${dataToSubmit.submissionDeadline}T${dataToSubmit.submissionDeadlineTime || '23:59'}`\n      );\n      if (isNaN(submissionDeadlineObj.getTime())) {\n        setErrors(['Invalid submission deadline']);\n        return;\n      }\n      submissionEndAt = submissionDeadlineObj.toISOString();\n    } else {\n      submissionEndAt = endAt;\n    }\n    \n    // Set voting start time with validation\n    let votingStartAt: string;\n    if (dataToSubmit.votingStartOption === 'now') {\n      votingStartAt = new Date().toISOString();\n    } else if (dataToSubmit.votingStartDate) {\n      const votingStartObj = new Date(`${dataToSubmit.votingStartDate}T00:00`);\n      if (isNaN(votingStartObj.getTime())) {\n        setErrors(['Invalid voting start date']);\n        return;\n      }\n      votingStartAt = votingStartObj.toISOString();\n    } else {\n      votingStartAt = startAt; // Default to contest start\n    }\n    \n    // Create comprehensive contest config object with ALL settings\n    const contestConfig: any = {\n      // Voting rules\n      votesPerUserPerPeriod: dataToSubmit.votesPerUserPerPeriod,\n      periodDurationHours: dataToSubmit.periodDurationHours,\n      totalVotesPerUser: dataToSubmit.totalVotesPerUser,\n      votingMethods: dataToSubmit.votingMethods,\n      juryMembers: dataToSubmit.juryMembers || [],\n      \n      // Time settings\n      submissionEndAt,\n      votingStartAt,\n      votingEndAt: endAt,\n      \n      // Prize distribution\n      prizeDistribution: dataToSubmit.prizeDistribution,\n      additionalRewards: dataToSubmit.additionalRewards,\n      currency: dataToSubmit.currency,\n      \n      // Participation rules\n      eligibility: dataToSubmit.eligibility,\n      maxSubmissions: dataToSubmit.maxSubmissions,\n      allowedMediaTypes: dataToSubmit.allowedMediaTypes,\n      fileSizeLimit: dataToSubmit.fileSizeLimit,\n      nsfwAllowed: dataToSubmit.nsfwAllowed,\n      \n      // Entry fee\n      entryFee: dataToSubmit.entryFee,\n      entryFeeAmount: dataToSubmit.entryFeeAmount,\n      entryFeeCurrency: dataToSubmit.entryFeeCurrency || 'GLORY',\n      entryFeePaymentMethods: dataToSubmit.entryFeePaymentMethods,\n      \n      // Contest metadata\n      contestType: dataToSubmit.contestType,\n      category: dataToSubmit.category\n    };\n    \n    // Create clean form data object for submission\n    const finalFormData: any = {\n      title: dataToSubmit.title,\n      slug: contest.slug,\n      description: dataToSubmit.description,\n      rules: dataToSubmit.description || 'Standard contest rules apply.',\n      status: dataToSubmit.status,\n      prizeGlory: totalPrize,\n      startAt,\n      endAt,\n      config: contestConfig,\n      coverImageUrl: typeof dataToSubmit.coverImage === 'string' ? dataToSubmit.coverImage : '',\n      isFeatured: dataToSubmit.isFeatured || false\n    };\n    \n    // If coverImage is a File, upload it first\n    if (dataToSubmit.coverImage && dataToSubmit.coverImage instanceof File) {\n      const uploadFormData = new FormData();\n      uploadFormData.append('file', dataToSubmit.coverImage);\n      \n      try {\n        const response = await fetch('/api/upload', {\n          method: 'POST',\n          credentials: 'include',\n          body: uploadFormData\n        });\n        \n        if (!response.ok) {\n          setErrors(['Failed to upload cover image. Please try again.']);\n          return;\n        }\n        \n        const result = await response.json();\n        finalFormData.coverImageUrl = result.url;\n      } catch (error) {\n        console.error('Failed to upload cover image:', error);\n        setErrors(['Failed to upload cover image. Please check your connection and try again.']);\n        return;\n      }\n    }\n    \n    onSubmit(finalFormData);\n    onClose();\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4 overflow-y-auto\">\n      <div className=\"bg-white dark:bg-slate-900 rounded-2xl max-w-4xl w-full max-h-[95vh] my-4 shadow-2xl flex flex-col\">\n        <div className=\"flex items-center justify-between p-6 border-b border-slate-200 dark:border-slate-800\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 rounded-lg bg-violet-600/10 text-violet-700 dark:text-violet-300 border border-violet-300/40 dark:border-violet-700/40\">\n              <Trophy className=\"h-6 w-6\" />\n            </div>\n            <h1 className=\"text-2xl font-bold text-slate-900 dark:text-slate-100\">Edit Contest</h1>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"p-2 rounded-full hover:bg-slate-200 dark:hover:bg-slate-800 transition-colors\"\n            data-testid=\"button-close-edit-modal\"\n          >\n            <X size={20} />\n          </button>\n        </div>\n\n        <div className=\"flex-1 overflow-y-auto p-6\">\n          {/* Active Contest Info */}\n          {contest && (contest.status === 'active' || new Date(contest.startAt) <= new Date()) && (\n            <div className=\"mb-6 rounded-xl border border-blue-300/50 dark:border-blue-600/50 bg-blue-50 dark:bg-blue-950/30 p-4 text-sm text-blue-800 dark:text-blue-200\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <div className=\"h-2 w-2 bg-green-500 rounded-full animate-pulse\"></div>\n                <span className=\"font-semibold\">Active Contest</span>\n              </div>\n              <p>This contest is currently active. Time validations are relaxed to allow necessary updates without disrupting the ongoing contest.</p>\n            </div>\n          )}\n\n          {errors.length > 0 && (\n            <div className=\"mb-6 rounded-xl border border-red-300/50 dark:border-red-600/50 bg-red-50 dark:bg-red-950/30 p-4 text-sm text-red-800 dark:text-red-200\">\n              <ul className=\"list-disc ps-5 space-y-1\">\n                {errors.map((error, i) => (\n                  <li key={i}>{error}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n\n          <div className=\"space-y-8\">\n            {/* Basic Information */}\n            <section>\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center gap-2\">\n                <FileText className=\"h-5 w-5 text-violet-600\" />\n                Basic Information\n              </h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"md:col-span-2\">\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Contest Title *\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.title}\n                    onChange={(e) => handleInputChange('title', e.target.value)}\n                    placeholder=\"e.g. Weekly Cyberpunk Challenge\"\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    data-testid=\"input-contest-title\"\n                  />\n                </div>\n\n                <div className=\"md:col-span-2\">\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Description *\n                  </label>\n                  <textarea\n                    value={formData.description}\n                    onChange={(e) => handleInputChange('description', e.target.value)}\n                    rows={4}\n                    placeholder=\"Contest rules, requirements, theme details...\"\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    data-testid=\"input-contest-description\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Contest Type\n                  </label>\n                  <select\n                    value={formData.contestType}\n                    onChange={(e) => handleInputChange('contestType', e.target.value)}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    data-testid=\"select-contest-type\"\n                  >\n                    <option value=\"Image\">Image Contest</option>\n                    <option value=\"Video\">Video Contest</option>\n                    <option value=\"GIF\">GIF Contest</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Category / Theme\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.category}\n                    onChange={(e) => handleInputChange('category', e.target.value)}\n                    placeholder=\"e.g. Most Beautiful, Cyberpunk City\"\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    data-testid=\"input-category-theme\"\n                  />\n                </div>\n\n                <div className=\"md:col-span-2\">\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Cover Image\n                  </label>\n                  \n                  {coverImagePreview ? (\n                    <div className=\"relative group\">\n                      <img \n                        src={coverImagePreview} \n                        alt=\"Cover preview\" \n                        className=\"w-full h-48 object-cover rounded-xl\"\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => {\n                          setCoverImagePreview('');\n                          handleInputChange('coverImage', null);\n                        }}\n                        className=\"absolute top-2 right-2 p-2 bg-red-600 text-white rounded-lg opacity-0 group-hover:opacity-100 transition-opacity\"\n                        data-testid=\"button-remove-cover-image\"\n                      >\n                        Remove\n                      </button>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-2\">\n                      <label className=\"block\">\n                        <input\n                          type=\"file\"\n                          accept=\"image/*\"\n                          onChange={handleCoverImageUpload}\n                          className=\"hidden\"\n                          id=\"cover-image-upload-edit\"\n                          data-testid=\"input-cover-image-upload\"\n                        />\n                        <div className=\"border-2 border-dashed border-slate-300 dark:border-slate-700 rounded-xl p-4 text-center hover:border-violet-500 transition-colors cursor-pointer\">\n                          <Upload className=\"h-8 w-8 text-slate-400 mx-auto mb-2\" />\n                          <p className=\"text-sm text-slate-600 dark:text-slate-400\">Click to upload cover image</p>\n                          <p className=\"text-xs text-slate-500 mt-1\">Or choose from options below</p>\n                        </div>\n                      </label>\n                      \n                      <div className=\"grid grid-cols-2 gap-2\">\n                        <button\n                          type=\"button\"\n                          onClick={() => setShowImageSelector(true)}\n                          className=\"px-3 py-2 text-sm rounded-lg border border-slate-300 dark:border-slate-700 hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors\"\n                          data-testid=\"button-choose-from-gallery\"\n                        >\n                          Choose from Gallery\n                        </button>\n                        <button\n                          type=\"button\"\n                          onClick={async () => {\n                            const response = await fetch(`/api/submissions?contestId=${contest.id}`, { credentials: 'include' });\n                            if (response.ok) {\n                              const contestSubmissions = await response.json();\n                              const topVoted = contestSubmissions\n                                .filter((sub: any) => sub.status === 'approved' && sub.type === 'image')\n                                .sort((a: any, b: any) => b.votesCount - a.votesCount)[0];\n                              \n                              if (topVoted) {\n                                setCoverImagePreview(topVoted.mediaUrl);\n                                handleInputChange('coverImage', topVoted.mediaUrl);\n                              }\n                            }\n                          }}\n                          className=\"px-3 py-2 text-sm rounded-lg border border-slate-300 dark:border-slate-700 hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors\"\n                          data-testid=\"button-use-top-voted-image\"\n                        >\n                          Use Top Voted Image\n                        </button>\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"flex items-center\">\n                  <label className=\"flex items-center gap-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.entryFee}\n                      onChange={(e) => handleInputChange('entryFee', e.target.checked)}\n                      className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                      data-testid=\"checkbox-entry-fee\"\n                    />\n                    <span className=\"text-sm text-slate-800 dark:text-slate-200\">Entry Fee Required</span>\n                  </label>\n                </div>\n\n                {formData.entryFee && (\n                  <div className=\"space-y-3\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                        Entry Fee Currency\n                      </label>\n                      <select\n                        value={formData.entryFeeCurrency}\n                        onChange={(e) => handleInputChange('entryFeeCurrency', e.target.value as 'GLORY' | 'SOL' | 'USDC')}\n                        className=\"w-full px-3 py-2 bg-white dark:bg-slate-800 border border-slate-300 dark:border-slate-700 rounded-lg text-sm text-slate-900 dark:text-slate-100\"\n                        data-testid=\"select-entry-fee-currency\"\n                      >\n                        <option value=\"GLORY\">GLORY</option>\n                        <option value=\"SOL\">SOL</option>\n                        <option value=\"USDC\">USDC</option>\n                      </select>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                        Entry Fee Amount *\n                      </label>\n                      <input\n                        type=\"number\"\n                        min=\"0\"\n                        step=\"0.01\"\n                        value={formData.entryFeeAmount ?? \"\"}\n                        onChange={(e) => handleInputChange('entryFeeAmount', e.target.value ? Number(e.target.value) : undefined)}\n                        placeholder=\"e.g. 5.00\"\n                        className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                        data-testid=\"input-entry-fee-amount\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-2\">\n                        Payment Methods *\n                      </label>\n                      <div className=\"space-y-2\">\n                        <label className=\"flex items-center gap-2\">\n                          <input\n                            type=\"checkbox\"\n                            checked={formData.entryFeePaymentMethods.includes('balance')}\n                            onChange={(e) => {\n                              const methods = e.target.checked\n                                ? [...formData.entryFeePaymentMethods.filter(m => m !== 'balance'), 'balance']\n                                : formData.entryFeePaymentMethods.filter(m => m !== 'balance');\n                              handleInputChange('entryFeePaymentMethods', methods);\n                            }}\n                            className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                          />\n                          <span className=\"text-sm text-slate-800 dark:text-slate-200\">Platform Balance</span>\n                        </label>\n                        <label className=\"flex items-center gap-2\">\n                          <input\n                            type=\"checkbox\"\n                            checked={formData.entryFeePaymentMethods.includes('wallet')}\n                            onChange={(e) => {\n                              const methods = e.target.checked\n                                ? [...formData.entryFeePaymentMethods.filter(m => m !== 'wallet'), 'wallet']\n                                : formData.entryFeePaymentMethods.filter(m => m !== 'wallet');\n                              handleInputChange('entryFeePaymentMethods', methods);\n                            }}\n                            className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                          />\n                          <span className=\"text-sm text-slate-800 dark:text-slate-200\">Connected Wallet</span>\n                        </label>\n                      </div>\n                      <p className=\"text-xs text-slate-500 dark:text-slate-400 mt-1\">\n                        Select at least one payment method. Wallet payment allows users to pay directly from their connected Solana wallet.\n                      </p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </section>\n\n            {/* Time Settings */}\n            <section>\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center gap-2\">\n                <Calendar className=\"h-5 w-5 text-violet-600\" />\n                Time Settings\n              </h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Contest Start Date *\n                  </label>\n                  <input\n                    type=\"date\"\n                    value={formData.startDate}\n                    onChange={(e) => handleInputChange('startDate', e.target.value)}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    data-testid=\"input-start-date\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Contest Start Time\n                  </label>\n                  <input\n                    type=\"time\"\n                    value={formData.startTime}\n                    onChange={(e) => handleInputChange('startTime', e.target.value)}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    data-testid=\"input-start-time\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Contest End Date *\n                  </label>\n                  <input\n                    type=\"date\"\n                    value={formData.endDate}\n                    onChange={(e) => handleInputChange('endDate', e.target.value)}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    data-testid=\"input-end-date\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Contest End Time\n                  </label>\n                  <input\n                    type=\"time\"\n                    value={formData.endTime}\n                    onChange={(e) => handleInputChange('endTime', e.target.value)}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    data-testid=\"input-end-time\"\n                  />\n                </div>\n              </div>\n            </section>\n\n            {/* Prizes */}\n            <section>\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center gap-2\">\n                <Trophy className=\"h-5 w-5 text-violet-600\" />\n                Prizes\n              </h3>\n\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                      Prize Pool *\n                    </label>\n                    <input\n                      type=\"number\"\n                      step=\"any\"\n                      min=\"0\"\n                      value={formData.prizePool}\n                      onChange={(e) => handleInputChange('prizePool', e.target.value)}\n                      placeholder=\"10 or 0.0000005\"\n                      className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                      data-testid=\"input-prize-pool\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                      Currency\n                    </label>\n                    <select\n                      value={formData.currency}\n                      onChange={(e) => handleInputChange('currency', e.target.value as 'GLORY' | 'SOL' | 'USDC')}\n                      className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                      data-testid=\"select-currency\"\n                    >\n                      <option value=\"GLORY\">GLORY</option>\n                      <option value=\"SOL\">SOL</option>\n                      <option value=\"USDC\">USDC</option>\n                    </select>\n                  </div>\n                </div>\n\n                <div>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <label className=\"text-sm font-medium text-slate-800 dark:text-slate-200\">\n                      Prize Distribution\n                    </label>\n                    <button\n                      type=\"button\"\n                      onClick={addPrizePlace}\n                      className=\"flex items-center gap-1 text-xs px-2 py-1 rounded-lg bg-violet-600/10 text-violet-700 hover:bg-violet-600/20\"\n                      data-testid=\"button-add-prize-place\"\n                    >\n                      <Plus className=\"h-3 w-3\" />\n                      Add Place\n                    </button>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    {formData.prizeDistribution.map((prize, index) => (\n                      <div key={index} className=\"flex items-center gap-2\">\n                        <span className=\"text-sm font-medium text-slate-700 dark:text-slate-200 w-16\">\n                          {prize.place}. place\n                        </span>\n                        <input\n                          type=\"number\"\n                          step=\"any\"\n                          value={prize.value}\n                          onChange={(e) => updatePrizeValue(index, parseFloat(e.target.value) || 0)}\n                          className=\"flex-1 rounded-lg border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-1 text-sm outline-none focus:ring-2 focus:ring-violet-500\"\n                          min=\"0\"\n                          data-testid={`input-prize-place-${index}`}\n                        />\n                        <span className=\"text-sm text-slate-500\">\n                          {formData.currency}\n                        </span>\n                        {formData.prizeDistribution.length > 1 && (\n                          <button\n                            type=\"button\"\n                            onClick={() => removePrizePlace(index)}\n                            className=\"p-1 rounded text-red-600 hover:bg-red-50 dark:hover:bg-red-950/30\"\n                            data-testid={`button-remove-prize-${index}`}\n                          >\n                            <Minus className=\"h-4 w-4\" />\n                          </button>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n\n                  <div className=\"text-xs text-slate-500 mt-1\">\n                    Total: {formData.prizeDistribution.reduce((sum, prize) => sum + prize.value, 0)}\n                    {` ${formData.currency}`}\n                  </div>\n                </div>\n              </div>\n            </section>\n\n            {/* Participation Rules */}\n            <section>\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center gap-2\">\n                <Users className=\"h-5 w-5 text-violet-600\" />\n                Participation Rules\n              </h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Eligibility\n                  </label>\n                  <select\n                    value={formData.eligibility}\n                    onChange={(e) => handleInputChange('eligibility', e.target.value)}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    data-testid=\"select-eligibility\"\n                  >\n                    <option value=\"all_users\">All Users</option>\n                    <option value=\"token_holders\">Token Holders Only</option>\n                    <option value=\"verified_users\">Verified Users Only</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Max Submissions per User\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={formData.maxSubmissions}\n                    onChange={(e) => handleInputChange('maxSubmissions', parseInt(e.target.value) || 1)}\n                    min=\"1\"\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    data-testid=\"input-max-submissions\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    File Size Limit (MB)\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={formData.fileSizeLimit}\n                    onChange={(e) => handleInputChange('fileSizeLimit', parseInt(e.target.value) || 50)}\n                    min=\"1\"\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    data-testid=\"input-file-size-limit\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200\">\n                    Allowed Media Types\n                  </label>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {['Images', 'Videos', 'GIFs'].map((type) => (\n                      <label key={type} className=\"flex items-center gap-2\">\n                        <input\n                          type=\"checkbox\"\n                          checked={formData.allowedMediaTypes.includes(type)}\n                          onChange={() => handleArrayToggle('allowedMediaTypes', type)}\n                          className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                          data-testid={`checkbox-media-type-${type.toLowerCase()}`}\n                        />\n                        <span className=\"text-sm text-slate-800 dark:text-slate-200\">{type}</span>\n                      </label>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"md:col-span-2 space-y-2\">\n                  <label className=\"flex items-center gap-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.nsfwAllowed}\n                      onChange={(e) => handleInputChange('nsfwAllowed', e.target.checked)}\n                      className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                      data-testid=\"checkbox-nsfw-allowed\"\n                    />\n                    <span className=\"text-sm text-slate-800 dark:text-slate-200\">NSFW Content Allowed</span>\n                  </label>\n                </div>\n              </div>\n            </section>\n\n            {/* Voting Settings */}\n            <section>\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center gap-2\">\n                <Eye className=\"h-5 w-5 text-violet-600\" />\n                Voting Settings\n              </h3>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Voting Methods\n                  </label>\n                  <div className=\"space-y-2\">\n                    {[\n                      { value: 'public', label: 'Public Voting' },\n                      { value: 'logged_users', label: 'Logged Users Only' },\n                      { value: 'jury', label: 'Jury Voting' }\n                    ].map((method) => (\n                      <label key={method.value} className=\"flex items-center gap-2\">\n                        <input\n                          type=\"checkbox\"\n                          checked={formData.votingMethods.includes(method.value)}\n                          onChange={() => handleArrayToggle('votingMethods', method.value)}\n                          className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                          data-testid={`checkbox-voting-method-${method.value}`}\n                        />\n                        <span className=\"text-sm text-slate-800 dark:text-slate-200\">{method.label}</span>\n                      </label>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Jury Members Selection - shown only when jury voting is enabled */}\n                {formData.votingMethods.includes('jury') && (\n                  <div className=\"border-t border-slate-200 dark:border-slate-800 pt-4\">\n                    <h4 className=\"text-md font-medium text-slate-800 dark:text-slate-200 mb-2\">\n                      Jury Members\n                    </h4>\n                    <p className=\"text-xs text-slate-500 mb-3\">\n                      Select users who can vote as jury members. {formData.votingMethods.length === 1 ? 'Only jury members can vote.' : 'Jury members can vote alongside public voters.'}\n                    </p>\n                    \n                    {approvedUsers.length === 0 ? (\n                      <p className=\"text-sm text-slate-500 italic\">No approved users available for jury selection.</p>\n                    ) : (\n                      <div className=\"max-h-48 overflow-y-auto border border-slate-300/60 dark:border-slate-700/60 rounded-xl p-3 space-y-2\">\n                        {approvedUsers.map((user: any) => (\n                          <label key={user.id} className=\"flex items-center gap-2 hover:bg-slate-100 dark:hover:bg-slate-800 p-2 rounded-lg cursor-pointer\">\n                            <input\n                              type=\"checkbox\"\n                              checked={formData.juryMembers.includes(user.id)}\n                              onChange={(e) => {\n                                if (e.target.checked) {\n                                  handleInputChange('juryMembers', [...formData.juryMembers, user.id]);\n                                } else {\n                                  handleInputChange('juryMembers', formData.juryMembers.filter(id => id !== user.id));\n                                }\n                              }}\n                              className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                              data-testid={`checkbox-jury-${user.id}`}\n                            />\n                            <span className=\"text-sm text-slate-800 dark:text-slate-200\">{user.username}</span>\n                            <span className=\"text-xs text-slate-500\">({user.email})</span>\n                          </label>\n                        ))}\n                      </div>\n                    )}\n                    \n                    {formData.juryMembers.length > 0 && (\n                      <p className=\"text-xs text-slate-600 dark:text-slate-400 mt-2\">\n                        Selected: {formData.juryMembers.length} jury member(s)\n                      </p>\n                    )}\n                  </div>\n                )}\n\n                <div className=\"border-t border-slate-200 dark:border-slate-800 pt-4\">\n                  <h4 className=\"text-md font-medium text-slate-800 dark:text-slate-200 mb-3\">Voting Frequency</h4>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                        Votes per user per period\n                      </label>\n                      <input\n                        type=\"number\"\n                        value={formData.votesPerUserPerPeriod}\n                        onChange={(e) => handleInputChange('votesPerUserPerPeriod', parseInt(e.target.value) || 0)}\n                        min=\"0\"\n                        className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                        data-testid=\"input-vote-limit-per-period\"\n                      />\n                      <p className=\"text-xs text-slate-500 mt-1\">\n                        {formData.votesPerUserPerPeriod === 0 ? 'Unlimited votes (user can vote once per submission)' : `Max ${formData.votesPerUserPerPeriod} votes per period`}\n                      </p>\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                        Period duration (hours)\n                      </label>\n                      <input\n                        type=\"number\"\n                        value={formData.periodDurationHours}\n                        onChange={(e) => handleInputChange('periodDurationHours', parseInt(e.target.value) || 12)}\n                        min=\"1\"\n                        max=\"168\"\n                        className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                        data-testid=\"input-vote-period-hours\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                        Total votes per user\n                      </label>\n                      <input\n                        type=\"number\"\n                        value={formData.totalVotesPerUser}\n                        onChange={(e) => handleInputChange('totalVotesPerUser', parseInt(e.target.value) || 0)}\n                        min=\"0\"\n                        className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                        data-testid=\"input-total-vote-limit\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </section>\n\n            {/* Admin Settings */}\n            <section>\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center gap-2\">\n                <Settings className=\"h-5 w-5 text-violet-600\" />\n                Admin Settings\n              </h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Contest Status\n                  </label>\n                  <select\n                    value={\n                      formData.status === 'active' ? 'publish' : \n                      formData.status === 'archived' ? 'archive' : \n                      formData.status === 'ended' ? 'ended' : \n                      'draft'\n                    }\n                    onChange={(e) => {\n                      const statusMap: Record<string, string> = {\n                        'draft': 'draft',\n                        'publish': 'active',\n                        'ended': 'ended',\n                        'archive': 'archived'\n                      };\n                      handleInputChange('status', statusMap[e.target.value]);\n                    }}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    data-testid=\"select-status\"\n                  >\n                    <option value=\"draft\">Draft (requires admin approval)</option>\n                    <option value=\"publish\">Publish (live immediately)</option>\n                    <option value=\"ended\">Ended</option>\n                    <option value=\"archive\">Archive</option>\n                  </select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label className=\"flex items-center gap-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.isFeatured}\n                      onChange={(e) => handleInputChange('isFeatured', e.target.checked)}\n                      className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                      data-testid=\"checkbox-featured\"\n                    />\n                    <span className=\"text-sm text-slate-800 dark:text-slate-200\">Featured Contest</span>\n                  </label>\n                </div>\n              </div>\n            </section>\n          </div>\n        </div>\n\n        <div className=\"flex items-center justify-between gap-3 p-6 border-t border-slate-200 dark:border-slate-800\">\n          <button\n            onClick={onClose}\n            className=\"px-6 py-2 rounded-xl border border-slate-300/60 dark:border-slate-700/60 text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors\"\n            data-testid=\"button-cancel-edit\"\n          >\n            Cancel\n          </button>\n\n          <button\n            onClick={async () => {\n              // Use unified validation function\n              const validationErrors = validateFormData(formData);\n              \n              setErrors(validationErrors);\n              \n              if (validationErrors.length === 0) {\n                await handleSubmitWithData(formData);\n              }\n            }}\n            className=\"px-6 py-2 rounded-xl bg-violet-600 text-white hover:bg-violet-700 transition-colors font-semibold\"\n            data-testid=\"button-save-contest\"\n          >\n            Save Changes\n          </button>\n        </div>\n      </div>\n\n      {/* Image Gallery Selector Modal */}\n      {showImageSelector && (\n        <div className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-[60] flex items-center justify-center p-4\">\n          <div className=\"bg-white dark:bg-slate-900 rounded-2xl max-w-6xl w-full max-h-[80vh] shadow-2xl flex flex-col\">\n            <div className=\"flex items-center justify-between p-6 border-b border-slate-200 dark:border-slate-800\">\n              <div className=\"flex items-center gap-3\">\n                <ImageIcon className=\"h-6 w-6 text-violet-600\" />\n                <h2 className=\"text-xl font-bold text-slate-900 dark:text-slate-100\">Select Cover Image</h2>\n              </div>\n              <button\n                onClick={() => setShowImageSelector(false)}\n                className=\"p-2 rounded-full hover:bg-slate-200 dark:hover:bg-slate-800 transition-colors\"\n                data-testid=\"button-close-gallery-modal\"\n              >\n                <X size={20} />\n              </button>\n            </div>\n\n            <div className=\"flex-1 overflow-y-auto p-6\">\n              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n                {submissions\n                  .filter((sub: any) => sub.status === 'approved' && sub.type === 'image')\n                  .map((submission: any) => (\n                    <button\n                      key={submission.id}\n                      type=\"button\"\n                      onClick={() => {\n                        setCoverImagePreview(submission.mediaUrl);\n                        handleInputChange('coverImage', submission.mediaUrl);\n                        setShowImageSelector(false);\n                      }}\n                      className=\"group relative aspect-square rounded-xl overflow-hidden border-2 border-transparent hover:border-violet-500 transition-all\"\n                      data-testid={`button-gallery-image-${submission.id}`}\n                    >\n                      <img\n                        src={submission.mediaUrl}\n                        alt={submission.title}\n                        className=\"w-full h-full object-cover\"\n                      />\n                      <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\">\n                        <div className=\"absolute bottom-0 left-0 right-0 p-3\">\n                          <p className=\"text-white text-sm font-medium truncate\">{submission.title}</p>\n                          <p className=\"text-white/80 text-xs\">{submission.votesCount} votes</p>\n                        </div>\n                      </div>\n                    </button>\n                  ))}\n              </div>\n\n              {submissions.filter((sub: any) => sub.status === 'approved' && sub.type === 'image').length === 0 && (\n                <div className=\"text-center py-12\">\n                  <ImageIcon className=\"h-16 w-16 text-slate-400 mx-auto mb-4\" />\n                  <p className=\"text-slate-600 dark:text-slate-400\">No approved images available</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":58998},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/submission-card.tsx":{"content":"import { Heart, User, Trophy, Play, Share2, Expand } from \"lucide-react\";\nimport { Card, CardContent } from \"./ui/card\";\nimport { Badge } from \"./ui/badge\";\nimport { Button } from \"./ui/button\";\nimport { GlassButton } from \"./ui/glass-button\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"../lib/queryClient\";\nimport { useAuth, isAuthenticated, isApproved } from \"../lib/auth\";\nimport { useToast } from \"../hooks/use-toast\";\nimport { useState } from \"react\";\nimport { cloudinaryPresets } from \"../lib/cloudinary\";\n\ninterface SubmissionCardProps {\n  submission: {\n    id: string;\n    title: string;\n    type: \"image\" | \"video\";\n    mediaUrl: string;\n    thumbnailUrl?: string;\n    votesCount: number;\n    user: {\n      id: string;\n      username: string;\n    };\n    contest: {\n      id: string;\n      title: string;\n    };\n  };\n  showVoting?: boolean;\n  rank?: number;\n  className?: string;\n  onExpand?: () => void;\n}\n\nexport function SubmissionCard({\n  submission,\n  showVoting = true,\n  rank,\n  className = \"\",\n  onExpand,\n}: SubmissionCardProps) {\n  const { data: user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [hasVoted, setHasVoted] = useState(false);\n  const [showActionsMobile, setShowActionsMobile] = useState(false);\n\n  // Pinterest-style height variations based on submission ID\n  const getCardHeight = () => {\n    const variations = ['h-60', 'h-72', 'h-80', 'h-64', 'h-96', 'h-56'];\n    const index = parseInt(submission.id.slice(-1), 16) % variations.length;\n    return variations[index];\n  };\n\n  const voteMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/votes\", {\n        submissionId: submission.id,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      setHasVoted(true);\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      toast({\n        title: \"Vote recorded!\",\n        description: \"Your vote has been counted successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to vote. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleVote = () => {\n    if (!isAuthenticated(user)) {\n      toast({\n        title: \"Authentication required\",\n        description: \"Please log in to vote on submissions.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!isApproved(user)) {\n      toast({\n        title: \"Account approval required\",\n        description: \"Your account must be approved to vote.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (user.id === submission.user.id) {\n      toast({\n        title: \"Cannot vote\",\n        description: \"You cannot vote on your own submission.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    voteMutation.mutate();\n  };\n\n  const handleShare = () => {\n    const shareUrl = `${window.location.origin}/submission/${submission.id}`;\n    \n    if (navigator.share) {\n      navigator.share({\n        title: submission.title,\n        text: `Check out this amazing submission: ${submission.title}`,\n        url: shareUrl,\n      }).catch(() => {\n        fallbackShare(shareUrl);\n      });\n    } else {\n      fallbackShare(shareUrl);\n    }\n  };\n\n  const fallbackShare = (url: string) => {\n    navigator.clipboard.writeText(url).then(() => {\n      toast({\n        title: \"Link copied!\",\n        description: \"Submission link has been copied to clipboard.\",\n      });\n    }).catch(() => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy link to clipboard.\",\n        variant: \"destructive\",\n      });\n    });\n  };\n\n  const handleCardClick = (e: React.MouseEvent) => {\n    // Only toggle on mobile (below lg breakpoint)\n    if (window.innerWidth < 1024) {\n      e.stopPropagation();\n      setShowActionsMobile(!showActionsMobile);\n    }\n  };\n\n  // Apply Cloudinary transformations for responsive images\n  let displayUrl = submission.type === \"video\"\n    ? submission.thumbnailUrl || submission.mediaUrl\n    : submission.mediaUrl;\n  \n  // Only apply thumbnail preset for images or video thumbnails (not raw video URLs)\n  const isImage = submission.type === \"image\" || \n    (submission.type === \"video\" && submission.thumbnailUrl);\n  \n  if (isImage) {\n    displayUrl = cloudinaryPresets.thumbnail(displayUrl);\n  }\n\n  return (\n    <Card\n      className={`group relative overflow-hidden hover:border-primary/50 transition-all duration-300 rounded-2xl shadow-lg hover:shadow-xl ${className}`}\n      data-testid={`submission-card-${submission.id}`}\n    >\n      <div className={`relative overflow-hidden rounded-t-2xl ${getCardHeight()}`} onClick={handleCardClick}>\n        <img\n          src={displayUrl}\n          alt={submission.title}\n          className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n          loading=\"lazy\"\n        />\n\n        {/* Hover Overlay */}\n        <div className=\"absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-all duration-300\">\n          <div className={`absolute top-2 sm:top-3 right-2 sm:right-3 flex flex-row items-center gap-1 sm:gap-2 ${showActionsMobile ? 'opacity-100 lg:opacity-0' : 'opacity-0'} lg:group-hover:opacity-100 transition-opacity duration-300`}>\n            <GlassButton \n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"h-8 w-8 sm:h-10 sm:w-10 rounded-full\"\n              onClick={(e) => {\n                e.stopPropagation();\n                handleVote();\n              }}\n              disabled={voteMutation.isPending || hasVoted}\n              data-testid={`button-vote-${submission.id}`}\n            >\n              <Heart className={`h-3 w-3 sm:h-4 sm:w-4 ${hasVoted ? \"fill-current\" : \"\"}`} />\n            </GlassButton>\n            <GlassButton \n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"h-8 w-8 sm:h-10 sm:w-10 rounded-full\"\n              onClick={(e) => {\n                e.stopPropagation();\n                handleShare();\n              }}\n              data-testid={`button-share-${submission.id}`}\n            >\n              <Share2 className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n            </GlassButton>\n            <GlassButton \n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"h-8 w-8 sm:h-10 sm:w-10 rounded-full\"\n              onClick={(e) => {\n                e.stopPropagation();\n                if (onExpand) onExpand();\n              }}\n              data-testid={`button-expand-${submission.id}`}\n            >\n              <Expand className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n            </GlassButton>\n          </div>\n        </div>\n\n        {/* Rank badge */}\n        {rank && (\n          <div className=\"absolute top-3 left-3 z-10\">\n            <Badge\n              className=\"gradient-glory text-xs font-bold text-white\"\n              data-testid={`rank-badge-${rank}`}\n            >\n              #{rank}\n            </Badge>\n          </div>\n        )}\n\n        {/* Video play overlay */}\n        {submission.type === \"video\" && (\n          <div className=\"absolute inset-0 flex items-center justify-center bg-black/20\">\n            <div className=\"w-16 h-16 rounded-full bg-primary/90 flex items-center justify-center\">\n              <Play className=\"w-6 h-6 text-white ml-1\" />\n            </div>\n          </div>\n        )}\n      </div>\n\n      <CardContent className={`absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/90 via-black/70 to-transparent ${showActionsMobile ? 'opacity-100 lg:opacity-0' : 'opacity-0'} lg:group-hover:opacity-100 transition-opacity duration-300 rounded-b-2xl`}>\n        <h3\n          className=\"font-semibold text-lg mb-2 line-clamp-1 text-white drop-shadow-lg\"\n          data-testid={`submission-title-${submission.id}`}\n        >\n          {submission.title}\n        </h3>\n\n        <div className=\"flex items-center justify-between text-sm mb-3\">\n          <div className=\"flex items-center space-x-2 text-gray-200\">\n            <User className=\"w-3 h-3\" />\n            <span data-testid={`submission-author-${submission.id}`}>\n              @{submission.user.username}\n            </span>\n          </div>\n        </div>\n\n        {showVoting && (\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2 text-gray-200 text-xs\">\n              <Trophy className=\"w-3 h-3\" />\n              <span className=\"truncate max-w-24\">{submission.contest.title}</span>\n            </div>\n\n            <div className=\"flex items-center space-x-2 text-gray-200 text-xs bg-black/30 rounded-full px-2 py-1\">\n              <Heart className=\"w-3 h-3\" />\n              <span\n                className=\"font-semibold\"\n                data-testid={`votes-count-${submission.id}`}\n              >\n                {submission.votesCount}\n              </span>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9127},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 min-h-[44px] md:min-h-0 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5766},"client/src/components/UploadWizardModal.tsx":{"content":"import { useCallback, useMemo, useRef, useState, useEffect } from \"react\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  UploadCloud,\n  Image as ImageIcon,\n  Tag,\n  X,\n  ChevronRight,\n  ChevronLeft,\n  Trophy,\n  Info,\n  CheckCircle2,\n  Search,\n  Wallet,\n} from \"lucide-react\";\nimport { debugLog } from \"../utils/debug\";\n\n// Global flag to control debug logging - set to false to reduce console spam\nconst DEBUG_ENABLED = false;\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { SolanaPayment } from \"@/components/payment/SolanaPayment\";\nimport { formatPrizeAmount } from \"@/lib/utils\";\n\nconst CATEGORIES = [\n  \"Art\",\n  \"Portrait\",\n  \"Landscape\",\n  \"Sci-Fi\",\n  \"Fantasy\",\n  \"Abstract\",\n  \"Realistic\",\n  \"Funny\",\n  \"Surreal\",\n  \"Other\",\n];\n\ninterface UploadWizardModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  preselectedContestId?: string;\n  aiSubmissionMode?: {\n    imageUrl: string;\n    cloudinaryPublicId: string;\n    prompt: string;\n    model?: string;\n  };\n}\n\nexport function UploadWizardModal({ isOpen, onClose, preselectedContestId, aiSubmissionMode }: UploadWizardModalProps) {\n  const { data: user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Form state\n  const [file, setFile] = useState<File | null>(null);\n  const [selectedGalleryImage, setSelectedGalleryImage] = useState<{url: string, type: string, thumbnailUrl?: string, cloudinaryPublicId?: string} | null>(null);\n  const [uploadMode, setUploadMode] = useState<'new' | 'gallery'>('new');\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [category, setCategory] = useState(CATEGORIES[0]);\n  const [tags, setTags] = useState<string[]>([]);\n  const [tagInput, setTagInput] = useState(\"\");\n  const [aiModel, setAiModel] = useState(\"\");\n  const [prompt, setPrompt] = useState(\"\");\n  const [selectedContest, setSelectedContest] = useState<string>(\"\");\n  const [agreedToRules, setAgreedToRules] = useState(false);\n  const [agreedToTerms, setAgreedToTerms] = useState(false);\n  \n  // Marketplace state\n  const [promptForSale, setPromptForSale] = useState(false);\n  const [promptPrice, setPromptPrice] = useState(\"\");\n  const [promptCurrency, setPromptCurrency] = useState<'SOL' | 'USDC' | 'GLORY'>('USDC');\n\n  // Wizard\n  const [step, setStep] = useState<1 | 2 | 3>(1);\n  const [submitting, setSubmitting] = useState(false);\n  const [errors, setErrors] = useState<string[]>([]);\n  \n  // Payment state for wallet payments\n  const [paymentMethod, setPaymentMethod] = useState<'balance' | 'wallet'>('balance');\n  const [showPayment, setShowPayment] = useState(false);\n  const [paymentTxHash, setPaymentTxHash] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const lastDebugLog = useRef<string>(''); // For throttling debug logs\n  const appliedAiModeRef = useRef<string | null>(null); // Track applied AI cloudinaryPublicId\n\n  const isVideo = useMemo(\n    () => (file ? file.type.startsWith(\"video/\") : false),\n    [file]\n  );\n  const previewURL = useMemo(\n    () => (file ? URL.createObjectURL(file) : null),\n    [file]\n  );\n\n  // Fetch active contests\n  const { data: contests = [] } = useQuery<any[]>({\n    queryKey: [\"/api/contests\"],\n  });\n\n  const activeContests = contests.filter((c: any) => c.status === \"active\");\n\n  // Fetch platform wallet address from settings\n  const { data: platformSettings } = useQuery<{ platformWalletAddress?: string | null }>({\n    queryKey: [\"/api/settings/platform-wallet\"],\n  });\n\n  // Fetch user's submissions for gallery\n  const { data: allSubmissions = [] } = useQuery<any[]>({\n    queryKey: [\"/api/submissions\"],\n    enabled: !!user?.id,\n  });\n\n  // Filter to only show current user's approved submissions\n  const userSubmissions = allSubmissions.filter((sub: any) => sub.userId === user?.id && sub.status === \"approved\");\n\n  // Refresh submissions when modal opens to ensure fresh data\n  useEffect(() => {\n    if (isOpen) {\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n    }\n  }, [isOpen, queryClient]);\n\n  // Pre-select contest if provided\n  useEffect(() => {\n    if (preselectedContestId && activeContests.some((c: any) => c.id === preselectedContestId)) {\n      setSelectedContest(preselectedContestId);\n    }\n  }, [preselectedContestId, activeContests]);\n\n  // Auto-populate prompt and AI model from AI submission mode\n  useEffect(() => {\n    if (aiSubmissionMode) {\n      setPrompt(aiSubmissionMode.prompt || \"\");\n      setAiModel(aiSubmissionMode.model || \"\");\n    }\n  }, [aiSubmissionMode]);\n\n  // Get optimal payment method based on contest config and user balance\n  const getOptimalPaymentMethod = useCallback(() => {\n    // Create unique key for this call to avoid spam\n    const debugKey = `${selectedContest}-${user?.id}-${user?.solBalance}`;\n    const shouldLog = false; // Disabled to reduce console spam\n    \n    if (shouldLog) {\n      console.log('🔍 getOptimalPaymentMethod called with:', { selectedContest, user: !!user });\n      lastDebugLog.current = debugKey;\n    }\n    \n    if (!selectedContest || selectedContest === \"my-gallery\" || !user) {\n      if (shouldLog) console.log('⚠️ Early return: no contest or user');\n      return 'balance';\n    }\n\n    const contest = activeContests.find((c: any) => c.id === selectedContest);\n    if (shouldLog) console.log('📋 Found contest:', contest?.title, contest?.config);\n    const contestConfig = contest?.config || {};\n    \n    if (!contestConfig.entryFee) {\n      if (shouldLog) console.log('⚠️ No entry fee configured');\n      return 'balance';\n    }\n\n    // Smart fallback: if no payment methods configured, determine based on currency\n    const isStandardCrypto = contestConfig.entryFeeCurrency && ['SOL', 'USDC'].includes(contestConfig.entryFeeCurrency);\n    const defaultMethods = isStandardCrypto ? ['balance', 'wallet'] : ['balance'];\n    const paymentMethods = contestConfig.entryFeePaymentMethods || defaultMethods;\n    \n    if (shouldLog) {\n      console.log('🎯 Using payment methods:', { \n        configured: contestConfig.entryFeePaymentMethods, \n        fallback: defaultMethods,\n        final: paymentMethods \n      });\n    }\n\n    const allowsBalance = paymentMethods.includes('balance');\n    const allowsWallet = paymentMethods.includes('wallet');\n    const entryFeeAmount = contestConfig.entryFeeAmount || 0;\n    const entryFeeCurrency = contestConfig.entryFeeCurrency || 'GLORY';\n    \n    if (shouldLog) {\n      console.log('🎯 Contest payment config:', {\n        entryFeePaymentMethods: contestConfig.entryFeePaymentMethods,\n        allowsBalance,\n        allowsWallet,\n        entryFeeAmount,\n        entryFeeCurrency\n      });\n    }\n    \n    // Get user's balance for the entry fee currency\n    const getUserBalance = () => {\n      switch (entryFeeCurrency) {\n        case 'SOL': return user.solBalance || 0;\n        case 'USDC': return user.usdcBalance || 0;\n        case 'GLORY':\n        default: return user.gloryBalance || 0;\n      }\n    };\n    \n    const userBalance = getUserBalance();\n    const hasInsufficientBalance = userBalance < entryFeeAmount;\n    \n    if (shouldLog) {\n      console.log('💰 Balance analysis:', {\n        entryFeeCurrency,\n        entryFeeAmount,\n        userBalance,\n        hasInsufficientBalance,\n        userBalances: { sol: user.solBalance, usdc: user.usdcBalance, glory: user.gloryBalance }\n      });\n    }\n    \n    // Smart payment method selection:\n    if (allowsWallet && !allowsBalance) {\n      if (shouldLog) console.log('🔒 Contest only allows wallet payment');\n      return 'wallet';\n    } else if (allowsBalance && !allowsWallet) {\n      if (shouldLog) console.log('🔒 Contest only allows balance payment');\n      return 'balance';\n    } else if (allowsBalance && allowsWallet) {\n      // Both methods available - choose based on balance\n      if (hasInsufficientBalance) {\n        if (shouldLog) console.log('💳 Auto-selecting wallet payment due to insufficient balance');\n        return 'wallet';\n      } else {\n        if (shouldLog) console.log('🏦 Using balance payment - sufficient funds available');\n        return 'balance';\n      }\n    }\n    \n    if (shouldLog) console.log('⚠️ Fallback to balance payment');\n    return 'balance';\n  }, [selectedContest, activeContests, user]);\n\n  // Initialize payment method only once when contest is selected\n  useEffect(() => {\n    if (selectedContest && selectedContest !== \"my-gallery\") {\n      const optimalMethod = getOptimalPaymentMethod();\n      setPaymentMethod(optimalMethod);\n    }\n  }, [selectedContest]); // Only run when contest changes, not when user manually changes payment method\n\n  // Sync AI submission mode when modal opens (only once per unique AI image)\n  useEffect(() => {\n    if (isOpen && aiSubmissionMode) {\n      // Only apply if we haven't already applied this specific AI image\n      if (appliedAiModeRef.current !== aiSubmissionMode.cloudinaryPublicId) {\n        setSelectedGalleryImage({\n          url: aiSubmissionMode.imageUrl,\n          type: 'image',\n          cloudinaryPublicId: aiSubmissionMode.cloudinaryPublicId\n        });\n        setUploadMode('gallery');\n        setStep(2);\n        setTitle(\"\"); // Let user fill in title\n        setDescription(\"\"); // Let user fill in description\n        appliedAiModeRef.current = aiSubmissionMode.cloudinaryPublicId;\n      }\n    }\n  }, [isOpen, aiSubmissionMode]);\n\n  // Reset form when modal closes\n  useEffect(() => {\n    if (!isOpen) {\n      setFile(null);\n      setSelectedGalleryImage(null);\n      setUploadMode('new');\n      setTitle(\"\");\n      setDescription(\"\");\n      setCategory(CATEGORIES[0]);\n      setTags([]);\n      setTagInput(\"\");\n      setSelectedContest(preselectedContestId || \"\");\n      setAgreedToRules(false);\n      setAgreedToTerms(false);\n      setStep(1);\n      setErrors([]);\n      setPaymentMethod('balance');\n      setShowPayment(false);\n      setPaymentTxHash(null);\n      appliedAiModeRef.current = null; // Reset AI mode tracking\n    }\n  }, [isOpen, preselectedContestId]);\n\n  // Handle browser back button and Escape key\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const modalId = Date.now();\n\n    // Push unique history state when modal opens\n    window.history.pushState({ modal: 'upload', modalId }, '');\n\n    // Handle Escape key\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        onClose();\n      }\n    };\n\n    // Handle browser back button\n    const handlePopState = () => {\n      // Only close if the current state matches our modal\n      if (window.history.state?.modalId !== modalId) {\n        onClose();\n      }\n    };\n\n    window.addEventListener('keydown', handleEscape);\n    window.addEventListener('popstate', handlePopState);\n\n    return () => {\n      window.removeEventListener('keydown', handleEscape);\n      window.removeEventListener('popstate', handlePopState);\n    };\n  }, [isOpen, onClose]);\n\n  const onDropFiles = useCallback((dropped: FileList | null) => {\n    if (!dropped || dropped.length === 0) return;\n    const f = dropped[0];\n    if (\n      f.type.startsWith(\"image/\") ||\n      f.type.startsWith(\"video/\") ||\n      /\\.(jpg|jpeg|png|webp|gif|mp4|mov|webm)$/i.test(f.name)\n    ) {\n      setFile(f);\n    } else {\n      setErrors([\"Unsupported file type. Use image or video formats.\"]);\n    }\n  }, []);\n\n  const resetErrors = () => setErrors([]);\n\n  const validateStep = (s: 1 | 2 | 3) => {\n    const newErrors: string[] = [];\n    if (s === 1) {\n      if (uploadMode === 'new' && !file) newErrors.push(\"Please select a file to upload.\");\n      if (uploadMode === 'gallery' && !selectedGalleryImage) newErrors.push(\"Please select an image from your gallery.\");\n    }\n    if (s === 2) {\n      if (!title.trim()) newErrors.push(\"Title is required.\");\n      if (!description.trim()) newErrors.push(\"Description is required.\");\n    }\n    if (s === 3) {\n      if (!selectedContest) newErrors.push(\"Please select a destination.\");\n      // Contest rules only required if submitting to a contest (not My Gallery)\n      if (selectedContest && selectedContest !== \"my-gallery\" && !agreedToRules) {\n        newErrors.push(\"You must agree to contest rules.\");\n      }\n      if (!agreedToTerms) newErrors.push(\"You must agree to the terms and conditions.\");\n    }\n    setErrors(newErrors);\n    return newErrors.length === 0;\n  };\n\n  const goNext = () => {\n    resetErrors();\n    if (validateStep(step)) {\n      if (step < 3) setStep((p) => (p + 1) as 1 | 2 | 3);\n    }\n  };\n\n  const goPrev = () => {\n    resetErrors();\n    if (step > 1) setStep((p) => (p - 1) as 1 | 2 | 3);\n  };\n\n  const handleTagAdd = (value: string) => {\n    const t = value.trim();\n    if (!t) return;\n    if (tags.includes(t)) return;\n    if (tags.length >= 10) return;\n    setTags((prev) => [...prev, t]);\n    setTagInput(\"\");\n  };\n\n  const removeTag = (t: string) => {\n    setTags((prev) => prev.filter((x) => x !== t));\n  };\n\n  // Submit submission with optional payment txHash\n  const submitSubmission = async (txHash?: string) => {\n    setSubmitting(true);\n    try {\n      if (uploadMode === 'new' && file) {\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        // Only add contestId if not uploading to My Gallery\n        if (selectedContest !== \"my-gallery\") {\n          formData.append(\"contestId\", selectedContest);\n        }\n        formData.append(\"title\", title);\n        formData.append(\"description\", description);\n        formData.append(\"type\", file.type.startsWith(\"video/\") ? \"video\" : \"image\");\n        \n        // New fields\n        if (category) formData.append(\"category\", category);\n        if (aiModel) formData.append(\"aiModel\", aiModel);\n        if (prompt) formData.append(\"prompt\", prompt);\n        if (tags.length > 0) formData.append(\"tags\", JSON.stringify(tags));\n        if (promptForSale) {\n          formData.append(\"promptForSale\", \"true\");\n          if (promptPrice) formData.append(\"promptPrice\", promptPrice);\n          formData.append(\"promptCurrency\", promptCurrency);\n        }\n        \n        if (txHash) {\n          formData.append(\"paymentTxHash\", txHash);\n        }\n\n        const response = await fetch(\"/api/submissions\", {\n          method: \"POST\",\n          credentials: \"include\",\n          body: formData,\n        });\n\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.error || \"Failed to submit\");\n        }\n      } else if (uploadMode === 'gallery' && selectedGalleryImage) {\n        const submissionData: any = {\n          title,\n          description,\n          type: selectedGalleryImage.type,\n          mediaUrl: selectedGalleryImage.url,\n          thumbnailUrl: selectedGalleryImage.thumbnailUrl,\n          cloudinaryPublicId: selectedGalleryImage.cloudinaryPublicId,\n          cloudinaryResourceType: selectedGalleryImage.type === 'video' ? 'video' : 'image',\n          status: \"pending\",\n        };\n        \n        // Only add contestId if not uploading to My Gallery\n        if (selectedContest !== \"my-gallery\") {\n          submissionData.contestId = selectedContest;\n        }\n        \n        // New fields\n        if (category) submissionData.category = category;\n        if (aiModel) submissionData.aiModel = aiModel;\n        if (prompt) submissionData.prompt = prompt;\n        if (tags.length > 0) submissionData.tags = tags;\n        if (promptForSale) {\n          submissionData.promptForSale = true;\n          if (promptPrice) submissionData.promptPrice = promptPrice;\n          submissionData.promptCurrency = promptCurrency;\n        }\n        \n        if (txHash) {\n          submissionData.paymentTxHash = txHash;\n        }\n\n        const response = await fetch(\"/api/submissions\", {\n          method: \"POST\",\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(submissionData),\n        });\n\n        if (!response.ok) {\n          const error = await response.json();\n          console.error(\"💥 Submission failed:\", error);\n          \n          // Show user-friendly error message\n          toast({\n            title: \"Submission Failed\",\n            description: error.error || \"Failed to submit. Please try again.\",\n            variant: \"destructive\",\n          });\n          \n          throw new Error(error.error || \"Failed to submit\");\n        }\n      }\n\n      toast({\n        title: \"Success!\",\n        description: \"Your submission has been uploaded and is pending approval\",\n      });\n\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      setShowPayment(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Upload Failed\",\n        description: error instanceof Error ? error.message : \"Please try again\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const handleSubmit = async () => {\n    // Disabled debug logging to reduce console spam\n    // if (process.env.NODE_ENV === 'development') {\n    //   console.log('🚀 handleSubmit called');\n    // }\n    resetErrors();\n    const allGood = validateStep(1) && validateStep(2) && validateStep(3);\n    if (!allGood) return;\n\n    if (uploadMode === 'new' && !file) return;\n    if (uploadMode === 'gallery' && !selectedGalleryImage) return;\n\n    if (DEBUG_ENABLED) {\n      console.log('🔍 Current payment method before check:', paymentMethod);\n    }\n    \n    // Re-check optimal payment method right before submission\n    const optimalMethod = getOptimalPaymentMethod();\n    if (DEBUG_ENABLED) {\n      console.log('💡 Optimal method determined:', optimalMethod);\n    }\n    \n    if (optimalMethod !== paymentMethod) {\n      if (DEBUG_ENABLED) {\n        console.log('🔄 Last-minute payment method correction:', paymentMethod, '→', optimalMethod);\n      }\n      setPaymentMethod(optimalMethod);\n      \n      // If switching to wallet payment, show payment modal and return\n      if (optimalMethod === 'wallet') {\n        if (DEBUG_ENABLED) {\n          console.log('💳 Switching to wallet - showing payment modal');\n        }\n        setShowPayment(true);\n        return;\n      }\n    } else {\n      if (DEBUG_ENABLED) {\n        console.log('✅ Payment method already optimal:', paymentMethod);\n      }\n    }\n\n    // Check if wallet payment is required\n    if (selectedContest && selectedContest !== \"my-gallery\") {\n      const contest = activeContests.find((c: any) => c.id === selectedContest);\n      const contestConfig = contest?.config || {};\n      \n      if (contestConfig.entryFee && contestConfig.entryFeeAmount && paymentMethod === 'wallet') {\n        // If payment not completed yet, show payment dialog\n        if (!paymentTxHash) {\n          if (DEBUG_ENABLED) {\n            console.log('💳 Showing payment modal for wallet payment');\n          }\n          setShowPayment(true);\n          return;\n        }\n        if (DEBUG_ENABLED) {\n          console.log('✅ Payment completed, proceeding with txHash:', paymentTxHash);\n        }\n      }\n    }\n\n    // Submit with optional txHash from wallet payment\n    await submitSubmission(paymentTxHash || undefined);\n  };\n\n  // Handle successful payment\n  const handlePaymentSuccess = async (txHash: string) => {\n    setPaymentTxHash(txHash);\n    await submitSubmission(txHash);\n  };\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return (\n    <div \n      className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/80 backdrop-blur-sm p-4\"\n      onClick={onClose}\n    >\n      <div \n        className=\"relative w-full mx-auto max-w-5xl max-h-[90vh] overflow-y-auto pb-24 md:pb-0\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        <div className=\"rounded-2xl border border-violet-200/40 dark:border-violet-800/40 shadow-xl overflow-hidden bg-white/70 dark:bg-slate-900/60 backdrop-blur\">\n          {/* Header */}\n          <div className=\"relative p-6 sm:p-8\">\n            <div className=\"pointer-events-none absolute inset-0 bg-gradient-to-br from-indigo-50 via-violet-50 to-slate-50 dark:from-indigo-950/20 dark:via-violet-950/20 dark:to-slate-950\" />\n            <div className=\"relative flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3\">\n              <div>\n                <h2 className=\"text-2xl sm:text-3xl font-semibold tracking-tight text-slate-900 dark:text-slate-100\">\n                  Submit Your Work\n                </h2>\n                <p className=\"text-sm text-slate-600 dark:text-slate-300 mt-1\">\n                  Upload your creative work and compete for rewards\n                </p>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                <WizardSteps step={step} />\n                <button\n                  onClick={onClose}\n                  className=\"p-2 hover:bg-white/10 rounded-lg transition-colors\"\n                  data-testid=\"button-close-wizard\"\n                >\n                  <X className=\"h-6 w-6 text-slate-400\" />\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* Body */}\n          <div className=\"p-6 pt-0 sm:p-8 sm:pt-0\">\n            {errors.length > 0 && (\n              <div className=\"mb-6 rounded-xl border border-red-300/50 dark:border-red-600/50 bg-red-50 dark:bg-red-950/30 p-4 text-sm text-red-800 dark:text-red-200\">\n                <ul className=\"list-disc ps-5 space-y-1\">\n                  {errors.map((e, i) => (\n                    <li key={i}>{e}</li>\n                  ))}\n                </ul>\n              </div>\n            )}\n\n            {step === 1 && (\n              <div>\n                <div className=\"flex gap-2 mb-6\">\n                  <button\n                    onClick={() => {\n                      setUploadMode('new');\n                      setSelectedGalleryImage(null);\n                    }}\n                    className={`flex-1 px-4 py-3 rounded-xl font-medium transition-colors ${\n                      uploadMode === 'new'\n                        ? 'bg-violet-600 text-white'\n                        : 'bg-slate-100 dark:bg-slate-800 text-slate-700 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700'\n                    }`}\n                    data-testid=\"button-upload-new\"\n                  >\n                    <UploadCloud className=\"h-4 w-4 inline mr-2\" />\n                    Upload New\n                  </button>\n                  <button\n                    onClick={() => {\n                      setUploadMode('gallery');\n                      setFile(null);\n                    }}\n                    className={`flex-1 px-4 py-3 rounded-xl font-medium transition-colors ${\n                      uploadMode === 'gallery'\n                        ? 'bg-violet-600 text-white'\n                        : 'bg-slate-100 dark:bg-slate-800 text-slate-700 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700'\n                    }`}\n                    data-testid=\"button-from-gallery\"\n                  >\n                    <ImageIcon className=\"h-4 w-4 inline mr-2\" />\n                    From Gallery\n                  </button>\n                </div>\n\n                {uploadMode === 'new' ? (\n                  <StepUpload\n                    file={file}\n                    isVideo={isVideo}\n                    previewURL={previewURL}\n                    onPickFile={() => fileInputRef.current?.click()}\n                    onDropFiles={onDropFiles}\n                    fileInputRef={fileInputRef}\n                    setFile={setFile}\n                  />\n                ) : (\n                  <GallerySelector\n                    userSubmissions={userSubmissions}\n                    selectedImage={selectedGalleryImage}\n                    onSelectImage={setSelectedGalleryImage}\n                  />\n                )}\n              </div>\n            )}\n\n            {step === 2 && (\n              <StepDetails\n                title={title}\n                setTitle={setTitle}\n                description={description}\n                setDescription={setDescription}\n                category={category}\n                setCategory={setCategory}\n                tags={tags}\n                tagInput={tagInput}\n                setTagInput={setTagInput}\n                onAddTag={handleTagAdd}\n                onRemoveTag={removeTag}\n                aiModel={aiModel}\n                setAiModel={setAiModel}\n                prompt={prompt}\n                setPrompt={setPrompt}\n                isFromAiGenerator={!!aiSubmissionMode}\n              />\n            )}\n\n            {step === 3 && (\n              <StepContest\n                contests={activeContests}\n                selectedContest={selectedContest}\n                setSelectedContest={setSelectedContest}\n                agreedToRules={agreedToRules}\n                setAgreedToRules={setAgreedToRules}\n                agreedToTerms={agreedToTerms}\n                setAgreedToTerms={setAgreedToTerms}\n                user={user}\n                paymentMethod={paymentMethod}\n                setPaymentMethod={setPaymentMethod}\n                promptForSale={promptForSale}\n                setPromptForSale={setPromptForSale}\n                promptPrice={promptPrice}\n                setPromptPrice={setPromptPrice}\n                promptCurrency={promptCurrency}\n                setPromptCurrency={setPromptCurrency}\n              />\n            )}\n          </div>\n\n          {/* Footer / Nav */}\n          <div className=\"flex items-center justify-between gap-3 p-6 sm:p-8 border-t border-slate-200/60 dark:border-slate-800/60 bg-white/60 dark:bg-slate-900/60\">\n            <button\n              onClick={goPrev}\n              disabled={step === 1}\n              className=\"inline-flex items-center gap-2 rounded-xl px-4 py-2 border border-slate-300/60 dark:border-slate-700/60 text-slate-700 dark:text-slate-200 hover:bg-slate-50 dark:hover:bg-slate-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n              data-testid=\"button-back\"\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n              Back\n            </button>\n\n            {step < 3 ? (\n              <button\n                onClick={goNext}\n                className=\"inline-flex items-center gap-2 rounded-xl px-5 py-2.5 bg-violet-600 hover:bg-violet-700 text-white shadow-md shadow-violet-600/20\"\n                data-testid=\"button-next\"\n              >\n                Next\n                <ChevronRight className=\"h-4 w-4\" />\n              </button>\n            ) : (\n              <button\n                onClick={handleSubmit}\n                disabled={submitting}\n                className=\"inline-flex items-center gap-2 rounded-xl px-5 py-2.5 bg-indigo-600 hover:bg-indigo-700 text-white shadow-md shadow-indigo-600/20 disabled:opacity-60\"\n                data-testid=\"button-submit\"\n              >\n                {submitting ? \"Submitting...\" : \"Submit\"}\n                <CheckCircle2 className=\"h-4 w-4\" />\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n      \n      {/* Payment Overlay */}\n      {showPayment && selectedContest && selectedContest !== \"my-gallery\" && (\n        <div className=\"absolute inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4 z-10\">\n          <div className=\"w-full max-w-md\">\n            <SolanaPayment\n              amount={(activeContests.find((c: any) => c.id === selectedContest)?.config as any)?.entryFeeAmount || 0}\n              currency={(activeContests.find((c: any) => c.id === selectedContest)?.config as any)?.entryFeeCurrency || 'SOL'}\n              recipient={platformSettings?.platformWalletAddress || ''}\n              label={activeContests.find((c: any) => c.id === selectedContest)?.title || 'Contest Entry'}\n              message={`Entry fee for ${activeContests.find((c: any) => c.id === selectedContest)?.title}`}\n              customTokenMint={(activeContests.find((c: any) => c.id === selectedContest)?.config as any)?.customTokenMint}\n              customTokenDecimals={(activeContests.find((c: any) => c.id === selectedContest)?.config as any)?.customTokenDecimals}\n              userId={user?.id || ''}\n              contestId={selectedContest}\n              onSuccess={handlePaymentSuccess}\n              onCancel={() => setShowPayment(false)}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Subcomponents\n\nfunction WizardSteps({ step }: { step: 1 | 2 | 3 }) {\n  const steps = [\n    { id: 1, label: \"Upload\" },\n    { id: 2, label: \"Details\" },\n    { id: 3, label: \"Contest\" },\n  ];\n  return (\n    <div className=\"flex items-center gap-2\">\n      {steps.map((s) => {\n        const active = step === (s.id as 1 | 2 | 3);\n        return (\n          <div\n            key={s.id}\n            className={[\n              \"px-3 py-1.5 rounded-full text-xs font-medium border\",\n              active\n                ? \"bg-violet-600 text-white border-violet-600\"\n                : \"bg-white/70 dark:bg-slate-900/70 text-slate-700 dark:text-slate-200 border-slate-300/60 dark:border-slate-700/60\",\n            ].join(\" \")}\n          >\n            {s.label}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nfunction StepUpload({\n  file,\n  isVideo,\n  previewURL,\n  onPickFile,\n  onDropFiles,\n  fileInputRef,\n  setFile,\n}: {\n  file: File | null;\n  isVideo: boolean;\n  previewURL: string | null;\n  onPickFile: () => void;\n  onDropFiles: (files: FileList | null) => void;\n  fileInputRef: React.RefObject<HTMLInputElement>;\n  setFile: (f: File | null) => void;\n}) {\n  const [dragOver, setDragOver] = useState(false);\n\n  return (\n    <div>\n      <div\n        onDragOver={(e) => {\n          e.preventDefault();\n          setDragOver(true);\n        }}\n        onDragLeave={() => setDragOver(false)}\n        onDrop={(e) => {\n          e.preventDefault();\n          setDragOver(false);\n          onDropFiles(e.dataTransfer.files);\n        }}\n        className={[\n          \"relative w-full border-2 border-dashed rounded-2xl overflow-hidden cursor-pointer\",\n          dragOver\n            ? \"border-violet-500 bg-violet-50/60 dark:bg-violet-950/20\"\n            : \"border-slate-300/60 dark:border-slate-700/60 bg-white/60 dark:bg-slate-900/60\",\n        ].join(\" \")}\n        onClick={onPickFile}\n        data-testid=\"upload-drop-zone\"\n      >\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          className=\"hidden\"\n          accept=\"image/*,video/*\"\n          onChange={(e) => onDropFiles(e.target.files)}\n          data-testid=\"input-file\"\n        />\n\n        {!file ? (\n          <div className=\"flex flex-col items-center justify-center py-14 text-center\">\n            <UploadCloud className=\"h-10 w-10 text-violet-600 mb-3\" />\n            <h3 className=\"text-lg font-medium text-slate-900 dark:text-slate-100\">\n              Drag & drop your image or video\n            </h3>\n            <p className=\"text-sm text-slate-600 dark:text-slate-300 mt-1\">\n              JPG, PNG, WEBP, GIF, MP4 (max 100MB)\n            </p>\n            <div className=\"mt-4 inline-flex items-center gap-2 rounded-xl px-4 py-2 bg-violet-600 text-white hover:bg-violet-700\">\n              <ImageIcon className=\"h-4 w-4\" />\n              <span>Browse files</span>\n            </div>\n          </div>\n        ) : (\n          <div className=\"relative\">\n            <div className=\"aspect-video w-full bg-slate-100 dark:bg-slate-800\">\n              {isVideo ? (\n                <video\n                  src={previewURL ?? undefined}\n                  className=\"h-full w-full object-contain\"\n                  controls\n                />\n              ) : (\n                <img\n                  src={previewURL ?? \"\"}\n                  alt=\"preview\"\n                  className=\"h-full w-full object-contain\"\n                />\n              )}\n            </div>\n\n            <div className=\"absolute top-3 right-3 flex gap-2\">\n              <button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onPickFile();\n                }}\n                className=\"rounded-xl px-3 py-1.5 text-xs bg-white/90 dark:bg-slate-900/90 border border-slate-300/60 dark:border-slate-700/60 text-slate-700 dark:text-slate-200 hover:bg-slate-50 dark:hover:bg-slate-800\"\n                data-testid=\"button-change-file\"\n              >\n                Change\n              </button>\n              <button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  setFile(null);\n                }}\n                className=\"rounded-xl p-1.5 bg-white/90 dark:bg-slate-900/90 border border-slate-300/60 dark:border-slate-700/60 hover:bg-slate-50 dark:hover:bg-slate-800\"\n                data-testid=\"button-remove-file\"\n              >\n                <X className=\"h-4 w-4\" />\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"mt-4 flex items-center gap-3 text-xs text-slate-600 dark:text-slate-300\">\n        <Info className=\"h-4 w-4\" />\n        <span>\n          Tip: Use high-resolution assets. For videos, keep under 60 seconds for best performance.\n        </span>\n      </div>\n    </div>\n  );\n}\n\nfunction StepDetails({\n  title,\n  setTitle,\n  description,\n  setDescription,\n  category,\n  setCategory,\n  tags,\n  tagInput,\n  setTagInput,\n  onAddTag,\n  onRemoveTag,\n  aiModel,\n  setAiModel,\n  prompt,\n  setPrompt,\n  isFromAiGenerator,\n}: {\n  title: string;\n  setTitle: (v: string) => void;\n  description: string;\n  setDescription: (v: string) => void;\n  category: string;\n  setCategory: (v: string) => void;\n  tags: string[];\n  tagInput: string;\n  setTagInput: (v: string) => void;\n  onAddTag: (v: string) => void;\n  onRemoveTag: (t: string) => void;\n  aiModel: string;\n  setAiModel: (v: string) => void;\n  prompt: string;\n  setPrompt: (v: string) => void;\n  isFromAiGenerator: boolean;\n}) {\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-5 gap-6\">\n      <div className=\"lg:col-span-3\">\n        <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n          Title *\n        </label>\n        <input\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          placeholder=\"Name your masterpiece\"\n          className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n          data-testid=\"input-title\"\n        />\n\n        <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mt-4 mb-1\">\n          Description *\n        </label>\n        <textarea\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n          rows={6}\n          placeholder=\"Tell the story, technique, settings...\"\n          className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n          data-testid=\"input-description\"\n        />\n      </div>\n\n      <div className=\"lg:col-span-2\">\n        <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n          Category *\n        </label>\n        <select\n          value={category}\n          onChange={(e) => setCategory(e.target.value)}\n          className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n          data-testid=\"select-category\"\n        >\n          {CATEGORIES.map((c) => (\n            <option key={c} value={c}>\n              {c}\n            </option>\n          ))}\n        </select>\n\n        <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mt-4 mb-1\">\n          Tags (up to 10)\n        </label>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"relative flex-1\">\n            <Tag className=\"h-4 w-4 absolute left-3 top-1/2 -translate-y-1/2 text-slate-500\" />\n            <input\n              value={tagInput}\n              onChange={(e) => setTagInput(e.target.value)}\n              onKeyDown={(e) => {\n                if (e.key === \"Enter\") {\n                  e.preventDefault();\n                  onAddTag(tagInput);\n                }\n              }}\n              placeholder=\"Press Enter to add\"\n              className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 ps-9 pe-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n              data-testid=\"input-tag\"\n            />\n          </div>\n          <button\n            onClick={() => onAddTag(tagInput)}\n            className=\"rounded-xl px-3 py-2 bg-violet-600 text-white hover:bg-violet-700\"\n            data-testid=\"button-add-tag\"\n          >\n            Add\n          </button>\n        </div>\n\n        {tags.length > 0 && (\n          <div className=\"mt-2 flex flex-wrap gap-2\">\n            {tags.map((t) => (\n              <span\n                key={t}\n                className=\"inline-flex items-center gap-1 rounded-full border border-violet-300/60 dark:border-violet-700/60 bg-violet-50/70 dark:bg-violet-950/20 px-3 py-1 text-xs text-violet-800 dark:text-violet-200\"\n              >\n                {t}\n                <button\n                  onClick={() => onRemoveTag(t)}\n                  className=\"p-0.5 hover:text-violet-600 dark:hover:text-violet-300\"\n                  data-testid={`button-remove-tag-${t}`}\n                >\n                  <X className=\"h-3 w-3\" />\n                </button>\n              </span>\n            ))}\n          </div>\n        )}\n\n        {/* AI Model */}\n        <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mt-6 mb-1\">\n          AI Model {isFromAiGenerator && <span className=\"text-xs text-slate-500\">(auto-filled)</span>}\n        </label>\n        <input\n          value={aiModel}\n          onChange={(e) => setAiModel(e.target.value)}\n          placeholder=\"e.g., DALL-E 3, Midjourney, Stable Diffusion\"\n          disabled={isFromAiGenerator}\n          className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500 disabled:opacity-60 disabled:cursor-not-allowed\"\n          data-testid=\"input-ai-model\"\n        />\n\n        {/* Prompt */}\n        <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mt-4 mb-1\">\n          Prompt {isFromAiGenerator && <span className=\"text-xs text-slate-500\">(auto-filled)</span>}\n        </label>\n        <textarea\n          value={prompt}\n          onChange={(e) => setPrompt(e.target.value)}\n          rows={4}\n          placeholder=\"Enter the prompt used to create this image...\"\n          disabled={isFromAiGenerator}\n          className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500 disabled:opacity-60 disabled:cursor-not-allowed\"\n          data-testid=\"input-prompt\"\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction StepContest({\n  contests,\n  selectedContest,\n  setSelectedContest,\n  agreedToRules,\n  setAgreedToRules,\n  agreedToTerms,\n  setAgreedToTerms,\n  user,\n  paymentMethod,\n  setPaymentMethod,\n  promptForSale,\n  setPromptForSale,\n  promptPrice,\n  setPromptPrice,\n  promptCurrency,\n  setPromptCurrency,\n}: {\n  contests: any[];\n  selectedContest: string;\n  setSelectedContest: (v: string) => void;\n  agreedToRules: boolean;\n  setAgreedToRules: (b: boolean) => void;\n  agreedToTerms: boolean;\n  setAgreedToTerms: (b: boolean) => void;\n  user: any;\n  paymentMethod: 'balance' | 'wallet';\n  setPaymentMethod: (method: 'balance' | 'wallet') => void;\n  promptForSale: boolean;\n  setPromptForSale: (b: boolean) => void;\n  promptPrice: string;\n  setPromptPrice: (v: string) => void;\n  promptCurrency: 'SOL' | 'USDC' | 'GLORY';\n  setPromptCurrency: (c: 'SOL' | 'USDC' | 'GLORY') => void;\n}) {\n  const selectedContestData = contests.find((c) => c.id === selectedContest);\n  const contestConfig = selectedContestData?.config || {};\n  const hasEntryFee = contestConfig.entryFee === true && contestConfig.entryFeeAmount > 0;\n  const entryFeeCurrency = contestConfig.entryFeeCurrency || 'GLORY';\n  const entryFeeAmount = contestConfig.entryFeeAmount || 0;\n  \n  // Get user's balance for the entry fee currency\n  const getUserBalance = () => {\n    if (!user) return 0;\n    switch (entryFeeCurrency) {\n      case 'SOL':\n        return user.solBalance || 0;\n      case 'USDC':\n        return user.usdcBalance || 0;\n      case 'GLORY':\n      default:\n        return user.gloryBalance || 0;\n    }\n  };\n  \n  const userBalance = getUserBalance();\n  const hasInsufficientBalance = hasEntryFee && userBalance < entryFeeAmount;\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-3 rounded-xl border border-violet-300/60 dark:border-violet-700/60 bg-violet-50/70 dark:bg-violet-950/20 p-4\">\n        <Trophy className=\"h-6 w-6 text-violet-600 dark:text-violet-400\" />\n        <div>\n          <h3 className=\"text-sm font-medium text-violet-900 dark:text-violet-100\">\n            Contest Submission\n          </h3>\n          <p className=\"text-xs text-violet-700 dark:text-violet-300 mt-0.5\">\n            Submit your work to compete for rewards\n          </p>\n        </div>\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n          Destination *\n        </label>\n        <select\n          value={selectedContest}\n          onChange={(e) => setSelectedContest(e.target.value)}\n          className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n          data-testid=\"select-contest\"\n        >\n          <option value=\"\">Choose destination</option>\n          <option value=\"my-gallery\">Only in My Gallery</option>\n          {contests.map((c) => (\n            <option key={c.id} value={c.id}>\n              {c.title} - {formatPrizeAmount(c.prizeGlory)} {c.config?.currency || 'GLORY'}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {/* Entry Fee Display */}\n      {hasEntryFee && selectedContest && selectedContest !== \"my-gallery\" && (\n        <div className=\"flex items-center justify-center py-6\">\n          <div className=\"text-center\">\n            <div className=\"text-sm font-medium text-slate-600 dark:text-slate-400 mb-2\">\n              Entry Fee\n            </div>\n            <div className=\"text-3xl font-bold text-violet-600 dark:text-violet-400\">\n              {formatPrizeAmount(entryFeeAmount)} {entryFeeCurrency}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Payment Method Selection */}\n      {hasEntryFee && selectedContest && selectedContest !== \"my-gallery\" && (\n        contestConfig.entryFeePaymentMethods?.includes('wallet') ? (\n          <div className=\"space-y-3\">\n            <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200\">\n              Payment Method *\n            </label>\n            <div className=\"space-y-2\">\n              {contestConfig.entryFeePaymentMethods.includes('balance') && !hasInsufficientBalance && (\n                <label className=\"flex items-center gap-3 p-3 rounded-lg border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 cursor-pointer hover:bg-slate-50 dark:hover:bg-slate-800/60 transition-colors\">\n                  <input\n                    type=\"radio\"\n                    name=\"paymentMethod\"\n                    value=\"balance\"\n                    checked={paymentMethod === 'balance'}\n                    onChange={() => setPaymentMethod('balance')}\n                    className=\"h-4 w-4 text-violet-600 focus:ring-violet-500\"\n                    data-testid=\"radio-payment-balance\"\n                  />\n                  <div className=\"flex-1\">\n                    <div className=\"text-sm font-medium text-slate-800 dark:text-slate-200\">\n                      Pay from Balance\n                    </div>\n                    <div className=\"text-xs text-slate-600 dark:text-slate-400\">\n                      Your {entryFeeCurrency} balance: {formatPrizeAmount(userBalance)}\n                    </div>\n                  </div>\n                </label>\n              )}\n              \n              <label className=\"flex items-center gap-3 p-3 rounded-lg border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 cursor-pointer hover:bg-slate-50 dark:hover:bg-slate-800/60 transition-colors\">\n                <input\n                  type=\"radio\"\n                  name=\"paymentMethod\"\n                  value=\"wallet\"\n                  checked={paymentMethod === 'wallet'}\n                  onChange={() => setPaymentMethod('wallet')}\n                  className=\"h-4 w-4 text-violet-600 focus:ring-violet-500\"\n                  data-testid=\"radio-payment-wallet\"\n                />\n                <div className=\"flex-1 flex items-center gap-2\">\n                  <Wallet className=\"h-4 w-4 text-violet-600 dark:text-violet-400\" />\n                  <div>\n                    <div className=\"text-sm font-medium text-slate-800 dark:text-slate-200\">\n                      Pay with Solana Wallet\n                    </div>\n                    <div className=\"text-xs text-slate-600 dark:text-slate-400\">\n                      Pay directly with SOL/USDC/tokens\n                    </div>\n                  </div>\n                </div>\n              </label>\n            </div>\n          </div>\n        ) : null\n      )}\n\n      {/* Marketplace Section */}\n      <div className=\"space-y-4 pt-4 border-t border-slate-300/60 dark:border-slate-700/60\">\n        <h3 className=\"text-sm font-medium text-slate-800 dark:text-slate-200\">\n          Marketplace\n        </h3>\n        \n        <label className=\"flex items-start gap-3\">\n          <input\n            type=\"checkbox\"\n            checked={promptForSale}\n            onChange={(e) => setPromptForSale(e.target.checked)}\n            className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500 mt-0.5\"\n            data-testid=\"checkbox-prompt-for-sale\"\n          />\n          <div className=\"text-sm\">\n            <span className=\"text-slate-800 dark:text-slate-200\">\n              Sell this prompt\n            </span>\n            <p className=\"text-xs text-slate-600 dark:text-slate-300 mt-1\">\n              Allow others to purchase the prompt used to create this image\n            </p>\n          </div>\n        </label>\n\n        {promptForSale && (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 mt-4 p-4 rounded-lg bg-slate-50 dark:bg-slate-800/50\">\n            <div>\n              <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                Price *\n              </label>\n              <input\n                type=\"number\"\n                step=\"0.000001\"\n                min=\"0\"\n                value={promptPrice}\n                onChange={(e) => setPromptPrice(e.target.value)}\n                placeholder=\"0.00\"\n                className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                data-testid=\"input-prompt-price\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                Currency *\n              </label>\n              <select\n                value={promptCurrency}\n                onChange={(e) => setPromptCurrency(e.target.value as 'SOL' | 'USDC' | 'GLORY')}\n                className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                data-testid=\"select-prompt-currency\"\n              >\n                <option value=\"USDC\">USDC</option>\n                <option value=\"SOL\">SOL</option>\n                <option value=\"GLORY\">GLORY</option>\n              </select>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"space-y-4 pt-4 border-t border-slate-300/60 dark:border-slate-700/60\">\n        <h3 className=\"text-sm font-medium text-slate-800 dark:text-slate-200\">\n          Agreements\n        </h3>\n\n        {selectedContest && selectedContest !== \"my-gallery\" && (\n          <label className=\"flex items-start gap-3\">\n            <input\n              type=\"checkbox\"\n              checked={agreedToRules}\n              onChange={(e) => setAgreedToRules(e.target.checked)}\n              className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500 mt-0.5\"\n              data-testid=\"checkbox-rules\"\n            />\n            <div className=\"text-sm\">\n              <span className=\"text-slate-800 dark:text-slate-200\">\n                I agree to the contest rules and confirm I own the rights to this content *\n              </span>\n              <p className=\"text-xs text-slate-600 dark:text-slate-300 mt-1\">\n                Top submissions receive rewards based on contest prize distribution\n              </p>\n            </div>\n          </label>\n        )}\n\n        <label className=\"flex items-start gap-3\">\n          <input\n            type=\"checkbox\"\n            checked={agreedToTerms}\n            onChange={(e) => setAgreedToTerms(e.target.checked)}\n            className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500 mt-0.5\"\n            data-testid=\"checkbox-terms\"\n          />\n          <div className=\"text-sm\">\n            <span className=\"text-slate-800 dark:text-slate-200\">\n              I agree to the{\" \"}\n              <a href=\"/terms\" className=\"text-violet-600 hover:text-violet-700 underline\">\n                Terms of Service\n              </a>{\" \"}\n              and{\" \"}\n              <a href=\"/privacy\" className=\"text-violet-600 hover:text-violet-700 underline\">\n                Privacy Policy\n              </a>\n              {\" \"}*\n            </span>\n          </div>\n        </label>\n      </div>\n    </div>\n  );\n}\n\nfunction GallerySelector({\n  userSubmissions,\n  selectedImage,\n  onSelectImage,\n}: {\n  userSubmissions: any[];\n  selectedImage: {url: string, type: string, thumbnailUrl?: string} | null;\n  onSelectImage: (img: {url: string, type: string, thumbnailUrl?: string} | null) => void;\n}) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  if (userSubmissions.length === 0) {\n    return (\n      <div className=\"text-center py-12 bg-white/60 dark:bg-slate-900/60 rounded-xl border border-slate-300/60 dark:border-slate-700/60\">\n        <ImageIcon className=\"h-12 w-12 mx-auto text-slate-400 mb-3\" />\n        <p className=\"text-sm text-slate-600 dark:text-slate-300\">\n          No approved submissions in your gallery yet.\n        </p>\n        <p className=\"text-xs text-slate-500 dark:text-slate-400 mt-1\">\n          Upload new artwork to build your gallery.\n        </p>\n      </div>\n    );\n  }\n\n  // Filter submissions by search term (title and tags)\n  const filteredSubmissions = userSubmissions.filter((sub: any) => {\n    if (!searchTerm) return true;\n    const searchLower = searchTerm.toLowerCase();\n    const matchesTitle = sub.title?.toLowerCase().includes(searchLower);\n    const matchesTags = sub.tags?.some((tag: string) => tag.toLowerCase().includes(searchLower));\n    return matchesTitle || matchesTags;\n  });\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Search Bar */}\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-slate-400\" />\n        <input\n          type=\"text\"\n          placeholder=\"Search by title or tags...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          className=\"w-full pl-10 pr-4 py-2 rounded-lg border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-800 text-slate-900 dark:text-slate-100 placeholder-slate-400 focus:ring-2 focus:ring-violet-500 focus:border-violet-500 transition-colors\"\n          data-testid=\"input-gallery-search\"\n        />\n      </div>\n\n      {/* Gallery Grid */}\n      {filteredSubmissions.length === 0 ? (\n        <div className=\"text-center py-8 text-slate-500 dark:text-slate-400\">\n          No submissions match your search.\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4\">\n          {filteredSubmissions.map((sub: any) => (\n            <div\n              key={sub.id}\n              onClick={() => onSelectImage({\n                url: sub.mediaUrl,\n                type: sub.type,\n                thumbnailUrl: sub.thumbnailUrl\n              })}\n              className={[\n                \"relative aspect-square rounded-xl overflow-hidden cursor-pointer transition-all\",\n                selectedImage?.url === sub.mediaUrl\n                  ? \"ring-4 ring-violet-500 scale-105\"\n                  : \"hover:scale-105 border-2 border-slate-300/60 dark:border-slate-700/60\"\n              ].join(\" \")}\n              data-testid={`gallery-image-${sub.id}`}\n            >\n              <img\n                src={sub.thumbnailUrl || sub.mediaUrl}\n                alt={sub.title}\n                className=\"w-full h-full object-cover\"\n                loading=\"lazy\"\n              />\n              {selectedImage?.url === sub.mediaUrl && (\n                <div className=\"absolute inset-0 bg-violet-600/20 flex items-center justify-center\">\n                  <CheckCircle2 className=\"h-8 w-8 text-white\" />\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":54182},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/pages/profile.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { GlassButton } from \"@/components/GlassButton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Trophy, User, Calendar, Eye, EyeOff, Upload, Settings, Clock, CheckCircle, XCircle, Edit2, Share2, Trash2, Medal, DollarSign, Copy, Camera, Save, X as XIcon, Search, ShoppingCart } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth, isAuthenticated } from \"@/lib/auth\";\nimport { useUserBalance } from \"@/hooks/useUserBalance\";\nimport { CashoutRequest } from \"@/components/wallet/CashoutRequest\";\nimport { WalletConnect } from \"@/components/wallet/WalletConnect\";\nimport { EditSubmissionModal } from \"@/components/EditSubmissionModal\";\nimport { UploadWizardModal } from \"@/components/UploadWizardModal\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState, useEffect } from \"react\";\nimport { formatDecimalBalance } from \"@/lib/utils\";\n\nexport default function Profile() {\n  const { data: user } = useAuth();\n  const { balance } = useUserBalance();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [editModalOpen, setEditModalOpen] = useState(false);\n  const [selectedSubmission, setSelectedSubmission] = useState<any>(null);\n  const [withdrawModalOpen, setWithdrawModalOpen] = useState(false);\n  const [uploadModalOpen, setUploadModalOpen] = useState(false);\n  const [editingUsername, setEditingUsername] = useState(false);\n  const [newUsername, setNewUsername] = useState(\"\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [currencyFilter, setCurrencyFilter] = useState<\"all\" | \"GLORY\" | \"SOL\" | \"USDC\">(\"all\");\n  const [withdrawalAddress, setWithdrawalAddress] = useState(user?.withdrawalAddress || \"\");\n  const [editingWithdrawalAddress, setEditingWithdrawalAddress] = useState(false);\n\n  // Sync withdrawal address state with user data\n  useEffect(() => {\n    if (user?.withdrawalAddress !== undefined) {\n      setWithdrawalAddress(user.withdrawalAddress || \"\");\n    }\n  }, [user?.withdrawalAddress]);\n\n  // Redirect if not authenticated\n  if (!isAuthenticated(user)) {\n    setLocation(\"/login\");\n    return null;\n  }\n\n  // Fetch user's submissions using dedicated endpoint\n  const { data: submissions = [] } = useQuery({\n    queryKey: [\"/api/me/submissions\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/me/submissions`);\n      if (!response.ok) throw new Error(\"Failed to fetch submissions\");\n      return response.json();\n    },\n  });\n\n  // Fetch active contests to filter submissions\n  const { data: activeContests = [] } = useQuery({\n    queryKey: [\"/api/contests\", { status: \"active\" }],\n    queryFn: async () => {\n      const response = await fetch(\"/api/contests?status=active\");\n      if (!response.ok) throw new Error(\"Failed to fetch contests\");\n      return response.json();\n    },\n  });\n\n  // Filter submissions to only those in active contests\n  const activeContestSubmissions = submissions.filter((sub: any) => \n    sub.contestId && activeContests.some((c: any) => c.id === sub.contestId)\n  );\n\n  // Fetch all approved submissions for ranking calculation\n  const { data: allApprovedSubmissions = [] } = useQuery({\n    queryKey: [\"/api/submissions\", { status: \"approved\" }],\n    queryFn: async () => {\n      const response = await fetch(\"/api/submissions?status=approved\");\n      if (!response.ok) throw new Error(\"Failed to fetch approved submissions\");\n      return response.json();\n    },\n  });\n\n  // Calculate rank for each submission in its contest (using all contest submissions)\n  const submissionsWithRank = activeContestSubmissions.map((submission: any) => {\n    if (submission.status !== \"approved\") {\n      return { ...submission, rank: null };\n    }\n\n    // Get all approved submissions for this contest, not just user's\n    const contestSubmissions = allApprovedSubmissions\n      .filter((s: any) => s.contestId === submission.contestId)\n      .sort((a: any, b: any) => b.votesCount - a.votesCount);\n    \n    const rank = contestSubmissions.findIndex((s: any) => s.id === submission.id) + 1;\n    return { ...submission, rank: rank > 0 ? rank : null };\n  });\n\n  const { data: gloryHistory = [] } = useQuery({\n    queryKey: [\"/api/glory-ledger\", currencyFilter],\n    queryFn: async () => {\n      const url = currencyFilter === \"all\" \n        ? \"/api/glory-ledger\" \n        : `/api/glory-ledger?currency=${currencyFilter}`;\n      const response = await fetch(url, { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch transaction history\");\n      return response.json();\n    },\n  });\n\n  // Fetch purchased prompts with submission details\n  const { data: purchasedPrompts = [] } = useQuery({\n    queryKey: [\"/api/prompts/purchased/submissions\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/prompts/purchased/submissions\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch purchased prompts\");\n      return response.json();\n    },\n  });\n\n  const getInitials = (username: string) => {\n    return username.substring(0, 2).toUpperCase();\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return \"bg-success/20 text-success border-success/30\";\n      case \"pending\":\n        return \"bg-muted text-muted-foreground border-border\";\n      case \"rejected\":\n        return \"bg-destructive/20 text-destructive border-destructive/30\";\n      default:\n        return \"bg-muted text-muted-foreground border-border\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case \"pending\":\n        return <Clock className=\"w-4 h-4\" />;\n      case \"rejected\":\n        return <XCircle className=\"w-4 h-4\" />;\n      default:\n        return <Clock className=\"w-4 h-4\" />;\n    }\n  };\n\n  const approvedSubmissions = submissions.filter((s: any) => s.status === \"approved\");\n  const totalVotes = approvedSubmissions.reduce((sum: number, s: any) => sum + s.votesCount, 0);\n\n  // Update submission mutation\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return await apiRequest(\"PATCH\", `/api/submissions/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      toast({ title: \"Success\", description: \"Submission updated successfully\" });\n      setEditModalOpen(false);\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update submission\", variant: \"destructive\" });\n    },\n  });\n\n  // Delete submission mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/submissions/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      toast({ title: \"Success\", description: \"Submission deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete submission\", variant: \"destructive\" });\n    },\n  });\n\n  // Clear all glory history mutation\n  const clearGloryHistoryMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"DELETE\", `/api/glory-ledger`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/glory-ledger\"] });\n      toast({ title: \"Success\", description: \"All GLORY history cleared successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to clear GLORY history\", variant: \"destructive\" });\n    },\n  });\n\n  // Handle edit submission\n  const handleEdit = (submission: any) => {\n    setSelectedSubmission(submission);\n    setEditModalOpen(true);\n  };\n\n  // Handle save from edit modal\n  const handleSaveEdit = (data: { title: string; description: string; tags: string[] }) => {\n    if (selectedSubmission) {\n      updateMutation.mutate({ id: selectedSubmission.id, data });\n    }\n  };\n\n  // Handle delete with confirmation\n  const handleDelete = (submissionId: string) => {\n    if (confirm(\"Are you sure you want to delete this submission? This action cannot be undone.\")) {\n      deleteMutation.mutate(submissionId);\n    }\n  };\n\n  // Handle share\n  const handleShare = (submission: any) => {\n    const shareUrl = `${window.location.origin}/submission/${submission.id}`;\n    \n    if (navigator.share) {\n      navigator.share({\n        title: submission.title,\n        text: `Check out my submission: ${submission.title}`,\n        url: shareUrl,\n      }).catch(() => {\n        fallbackShare(shareUrl);\n      });\n    } else {\n      fallbackShare(shareUrl);\n    }\n  };\n\n  // Fallback share (copy to clipboard)\n  const fallbackShare = (url: string) => {\n    navigator.clipboard.writeText(url).then(() => {\n      toast({ title: \"Link copied!\", description: \"Submission link copied to clipboard\" });\n    }).catch(() => {\n      toast({ title: \"Error\", description: \"Failed to copy link\", variant: \"destructive\" });\n    });\n  };\n\n  // Handle clear all glory history with confirmation\n  const handleClearGloryHistory = () => {\n    if (confirm(\"Are you sure you want to clear all GLORY history? Your current balance will remain unchanged.\")) {\n      clearGloryHistoryMutation.mutate();\n    }\n  };\n\n  // Update username mutation\n  const updateUsernameMutation = useMutation({\n    mutationFn: async (username: string) => {\n      return await apiRequest(\"PATCH\", \"/api/me\", { username });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n      setEditingUsername(false);\n      toast({ title: \"Success\", description: \"Username updated successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to update username\", variant: \"destructive\" });\n    },\n  });\n\n  // Upload avatar mutation\n  const uploadAvatarMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append(\"avatar\", file);\n      const response = await fetch(\"/api/me/avatar\", {\n        method: \"POST\",\n        body: formData,\n      });\n      if (!response.ok) throw new Error(\"Failed to upload avatar\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n      toast({ title: \"Success\", description: \"Avatar updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to upload avatar\", variant: \"destructive\" });\n    },\n  });\n\n  // Delete profile mutation\n  const deleteProfileMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"DELETE\", \"/api/me\");\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Profile deleted successfully\" });\n      setLocation(\"/login\");\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete profile\", variant: \"destructive\" });\n    },\n  });\n\n  // Update withdrawal address mutation\n  const updateWithdrawalAddressMutation = useMutation({\n    mutationFn: async (address: string) => {\n      return await apiRequest(\"PATCH\", \"/api/users/withdrawal-address\", { address });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n      setEditingWithdrawalAddress(false);\n      toast({ title: \"Success\", description: \"Withdrawal address saved successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to save withdrawal address\", variant: \"destructive\" });\n    },\n  });\n\n  // Handle username save\n  const handleSaveUsername = () => {\n    if (!newUsername.trim() || newUsername.trim().length < 3) {\n      toast({ title: \"Error\", description: \"Username must be at least 3 characters\", variant: \"destructive\" });\n      return;\n    }\n    updateUsernameMutation.mutate(newUsername);\n  };\n\n  // Handle withdrawal address save\n  const handleSaveWithdrawalAddress = () => {\n    if (!withdrawalAddress.trim()) {\n      toast({ title: \"Error\", description: \"Please enter a withdrawal address\", variant: \"destructive\" });\n      return;\n    }\n    if (withdrawalAddress.trim().length < 32 || withdrawalAddress.trim().length > 44) {\n      toast({ title: \"Error\", description: \"Invalid Solana address (must be 32-44 characters)\", variant: \"destructive\" });\n      return;\n    }\n    updateWithdrawalAddressMutation.mutate(withdrawalAddress.trim());\n  };\n\n  // Handle avatar upload\n  const handleAvatarUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      if (!file.type.startsWith(\"image/\")) {\n        toast({ title: \"Error\", description: \"Please select an image file\", variant: \"destructive\" });\n        return;\n      }\n      uploadAvatarMutation.mutate(file);\n    }\n  };\n\n  // Handle delete profile\n  const handleDeleteProfile = () => {\n    if (confirm(\"Are you sure you want to delete your profile? This action cannot be undone and will delete all your data including submissions, votes, and GLORY balance.\")) {\n      deleteProfileMutation.mutate();\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen py-16 pb-32 md:pb-16\" data-testid=\"profile-page\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          \n          {/* Profile Sidebar */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"sticky top-20\" data-testid=\"profile-sidebar\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-center mb-6\">\n                  <div className=\"relative inline-block group mb-4\">\n                    <Avatar className=\"w-24 h-24\">\n                      {user.avatarUrl ? (\n                        <img src={user.avatarUrl} alt={user.username} className=\"w-full h-full object-cover\" />\n                      ) : (\n                        <AvatarFallback className=\"gradient-glory text-white text-4xl font-bold\">\n                          {getInitials(user.username)}\n                        </AvatarFallback>\n                      )}\n                    </Avatar>\n                    <label className=\"absolute inset-0 flex items-center justify-center bg-black/50 rounded-full opacity-0 group-hover:opacity-100 transition-opacity cursor-pointer\">\n                      <Camera className=\"w-6 h-6 text-white\" />\n                      <input\n                        type=\"file\"\n                        accept=\"image/*\"\n                        className=\"hidden\"\n                        onChange={handleAvatarUpload}\n                        disabled={uploadAvatarMutation.isPending}\n                        data-testid=\"input-avatar-upload\"\n                      />\n                    </label>\n                  </div>\n                  <h2 className=\"text-2xl font-bold mb-1\" data-testid=\"profile-username\">\n                    {user.username}\n                  </h2>\n                  <p className=\"text-muted-foreground text-sm mb-4\" data-testid=\"profile-email\">\n                    {user.email}\n                  </p>\n                  <Badge className={getStatusColor(user.status)} data-testid=\"profile-status\">\n                    {getStatusIcon(user.status)}\n                    <span className=\"ml-1\">{user.status.charAt(0).toUpperCase() + user.status.slice(1)}</span>\n                  </Badge>\n                </div>\n\n                {/* Balance Display */}\n                <div className=\"gradient-glory rounded-xl p-6 mb-6\" data-testid=\"balance-display\">\n                  <div className=\"text-white/80 text-sm mb-3 text-center\">Your Balances</div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-white/80 text-sm\">GLORY</span>\n                      <span className=\"text-white text-xl font-bold\" data-testid=\"balance-glory-profile\">\n                        {user.gloryBalance.toLocaleString()}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-white/80 text-sm\">SOL</span>\n                      <span className=\"text-white text-xl font-bold\" data-testid=\"balance-sol-profile\">\n                        {formatDecimalBalance(user.solBalance)}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-white/80 text-sm\">USDC</span>\n                      <span className=\"text-white text-xl font-bold\" data-testid=\"balance-usdc-profile\">\n                        {formatDecimalBalance(user.usdcBalance)}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Quick Stats */}\n                <div className=\"space-y-3 mb-6\">\n                  <div className=\"flex items-center justify-between py-2 border-b border-border\">\n                    <span className=\"text-muted-foreground text-sm\">Total Submissions</span>\n                    <span className=\"font-semibold\" data-testid=\"total-submissions\">\n                      {submissions.length}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between py-2 border-b border-border\">\n                    <span className=\"text-muted-foreground text-sm\">Votes Received</span>\n                    <span className=\"font-semibold\" data-testid=\"total-votes\">\n                      {totalVotes}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between py-2\">\n                    <span className=\"text-muted-foreground text-sm\">Member Since</span>\n                    <span className=\"font-semibold text-sm\" data-testid=\"member-since\">\n                      {new Date(user.createdAt).toLocaleDateString()}\n                    </span>\n                  </div>\n                </div>\n\n                {/* Actions */}\n                <div className=\"space-y-2\">\n                  <Button \n                    className=\"w-full gradient-glory hover:opacity-90 transition-opacity\"\n                    onClick={() => setUploadModalOpen(true)}\n                    data-testid=\"upload-button\"\n                  >\n                    <Upload className=\"w-4 h-4 mr-2\" />\n                    Upload New Entry\n                  </Button>\n                  <GlassButton\n                    className=\"w-full\"\n                    onClick={() => setWithdrawModalOpen(true)}\n                    data-testid=\"button-withdraw\"\n                  >\n                    <DollarSign className=\"w-4 h-4 mr-2\" />\n                    Withdraw\n                  </GlassButton>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Profile Content */}\n          <div className=\"lg:col-span-2\">\n            <Tabs defaultValue=\"submissions\" className=\"space-y-4\" data-testid=\"profile-tabs\">\n              <TabsList className=\"grid w-full grid-cols-2 md:grid-cols-4\">\n                <TabsTrigger value=\"submissions\" className=\"gap-2\" data-testid=\"tab-submissions\">\n                  <Upload className=\"w-4 h-4\" />\n                  <span className=\"hidden md:inline\">My Submissions</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"purchased\" className=\"gap-2\" data-testid=\"tab-purchased\">\n                  <ShoppingCart className=\"w-4 h-4\" />\n                  <span className=\"hidden md:inline\">Purchased Prompts</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"glory\" className=\"gap-2\" data-testid=\"tab-transactions\">\n                  <Medal className=\"w-4 h-4\" />\n                  <span className=\"hidden md:inline\">Transaction History</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"settings\" className=\"gap-2\" data-testid=\"tab-settings\">\n                  <Settings className=\"w-4 h-4\" />\n                  <span className=\"hidden md:inline\">Settings</span>\n                </TabsTrigger>\n              </TabsList>\n\n              {/* Submissions Tab */}\n              <TabsContent value=\"submissions\" className=\"space-y-4\" data-testid=\"submissions-tab\">\n                {/* Search Bar */}\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Search by title or tags...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-search-submissions\"\n                  />\n                </div>\n                \n\n                {submissionsWithRank.filter((sub: any) => {\n                  if (!searchQuery.trim()) return true;\n                  const query = searchQuery.toLowerCase();\n                  return (\n                    sub.title?.toLowerCase().includes(query) ||\n                    sub.tags?.some((tag: string) => tag.toLowerCase().includes(query))\n                  );\n                }).length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {submissionsWithRank.filter((sub: any) => {\n                      if (!searchQuery.trim()) return true;\n                      const query = searchQuery.toLowerCase();\n                      return (\n                        sub.title?.toLowerCase().includes(query) ||\n                        sub.tags?.some((tag: string) => tag.toLowerCase().includes(query))\n                      );\n                    }).map((submission: any) => (\n                      <Card key={submission.id} className={`hover:border-primary/50 transition-colors ${submission.status === \"rejected\" ? \"opacity-75\" : \"\"}`} data-testid={`submission-item-${submission.id}`}>\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex flex-col sm:flex-row gap-4\">\n                            <div className=\"sm:w-48 aspect-square flex-shrink-0 rounded-lg overflow-hidden bg-muted\">\n                              <img \n                                src={submission.type === \"video\" ? submission.thumbnailUrl || submission.mediaUrl : submission.mediaUrl}\n                                alt={submission.title}\n                                className=\"w-full h-full object-cover\"\n                                onError={(e) => {\n                                  const target = e.target as HTMLImageElement;\n                                  target.src = 'data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"400\" height=\"400\"%3E%3Crect fill=\"%23334155\" width=\"400\" height=\"400\"/%3E%3Ctext fill=\"%239ca3af\" font-family=\"system-ui\" font-size=\"48\" x=\"50%25\" y=\"50%25\" text-anchor=\"middle\" dominant-baseline=\"middle\"%3E%3Ctspan x=\"50%25\" dy=\"-20\"%3E' + (submission.type === 'video' ? '🎬' : '🖼️') + '%3C/tspan%3E%3Ctspan x=\"50%25\" dy=\"60\" font-size=\"16\"%3EImage not available%3C/tspan%3E%3C/text%3E%3C/svg%3E';\n                                  target.onerror = null;\n                                }}\n                              />\n                            </div>\n                            <div className=\"flex-1 flex flex-col justify-between\">\n                              <div>\n                                <div className=\"flex items-start justify-between mb-2\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <h3 className=\"font-bold text-lg\" data-testid={`submission-title-${submission.id}`}>\n                                      {submission.title}\n                                    </h3>\n                                    {submission.rank && submission.rank <= 5 && submission.status === \"approved\" && (\n                                      <Badge className=\"gradient-glory text-white\" data-testid={`rank-badge-${submission.id}`}>\n                                        <Medal className=\"w-3 h-3 mr-1\" />\n                                        #{submission.rank}\n                                      </Badge>\n                                    )}\n                                  </div>\n                                  <Badge className={getStatusColor(submission.status)} data-testid={`submission-status-${submission.id}`}>\n                                    {getStatusIcon(submission.status)}\n                                    <span className=\"ml-1\">{submission.status.charAt(0).toUpperCase() + submission.status.slice(1)}</span>\n                                  </Badge>\n                                </div>\n                                {submission.description && (\n                                  <p className=\"text-muted-foreground text-sm mb-3 line-clamp-2\" data-testid={`submission-description-${submission.id}`}>\n                                    {submission.description}\n                                  </p>\n                                )}\n                                {submission.tags && submission.tags.length > 0 && (\n                                  <div className=\"flex flex-wrap gap-1 mb-3\">\n                                    {submission.tags.map((tag: string, idx: number) => (\n                                      <Badge key={idx} variant=\"outline\" className=\"text-xs\">\n                                        {tag}\n                                      </Badge>\n                                    ))}\n                                  </div>\n                                )}\n                              </div>\n                              <div className=\"flex items-center justify-between\">\n                                <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                                  <div className=\"flex items-center space-x-1\">\n                                    <Trophy className=\"w-4 h-4\" />\n                                    <span data-testid={`submission-contest-${submission.id}`}>\n                                      {submission.contest.title}\n                                    </span>\n                                  </div>\n                                  {submission.status === \"approved\" && (\n                                    <div className=\"flex items-center space-x-1 font-semibold text-primary\">\n                                      <Trophy className=\"w-4 h-4\" />\n                                      <span data-testid={`submission-votes-${submission.id}`}>\n                                        {submission.votesCount} votes\n                                      </span>\n                                    </div>\n                                  )}\n                                </div>\n                                <div className=\"flex items-center gap-2\">\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => handleEdit(submission)}\n                                    data-testid={`button-edit-${submission.id}`}\n                                  >\n                                    <Edit2 className=\"w-4 h-4\" />\n                                  </Button>\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => handleShare(submission)}\n                                    data-testid={`button-share-${submission.id}`}\n                                  >\n                                    <Share2 className=\"w-4 h-4\" />\n                                  </Button>\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => handleDelete(submission.id)}\n                                    data-testid={`button-delete-${submission.id}`}\n                                  >\n                                    <Trash2 className=\"w-4 h-4 text-destructive\" />\n                                  </Button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"no-submissions\">\n                    <div className=\"w-24 h-24 mx-auto mb-6 rounded-full bg-muted flex items-center justify-center\">\n                      {searchQuery ? (\n                        <Search className=\"w-12 h-12 text-muted-foreground\" />\n                      ) : (\n                        <Trophy className=\"w-12 h-12 text-muted-foreground\" />\n                      )}\n                    </div>\n                    <h3 className=\"text-xl font-semibold mb-2\">\n                      {searchQuery ? \"No results found\" : \"No active contest submissions\"}\n                    </h3>\n                    <p className=\"text-muted-foreground mb-6\">\n                      {searchQuery \n                        ? `No submissions match \"${searchQuery}\". Try a different search term.`\n                        : \"You don't have any submissions in active contests. Start competing!\"\n                      }\n                    </p>\n                    {!searchQuery && (\n                      <Link href=\"/contests\" data-testid=\"browse-contests-button\">\n                        <GlassButton>\n                          Browse Active Contests\n                          <Trophy className=\"w-4 h-4 ml-2\" />\n                        </GlassButton>\n                      </Link>\n                    )}\n                  </div>\n                )}\n              </TabsContent>\n\n              {/* Purchased Prompts Tab */}\n              <TabsContent value=\"purchased\" className=\"space-y-4\" data-testid=\"purchased-tab\">\n                {purchasedPrompts.length > 0 ? (\n                  <div className=\"masonry-grid\">\n                    {purchasedPrompts.map((submission: any) => (\n                      <Card \n                        key={submission.id} \n                        className=\"group overflow-hidden hover:shadow-xl hover:shadow-violet-500/10 transition-all duration-300 cursor-pointer\"\n                        onClick={() => {\n                          setSelectedSubmission(submission);\n                          setEditModalOpen(false);\n                        }}\n                        data-testid={`purchased-submission-${submission.id}`}\n                      >\n                        <div className=\"relative aspect-square\">\n                          <img\n                            src={submission.thumbnailUrl || submission.mediaUrl}\n                            alt={submission.title}\n                            className=\"w-full h-full object-cover transition-transform duration-300 group-hover:scale-105\"\n                          />\n                          <div className=\"absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                          \n                          {/* Purchased Badge */}\n                          <div className=\"absolute top-3 right-3\">\n                            <Badge className=\"bg-green-600 hover:bg-green-600\">\n                              <CheckCircle className=\"w-3 h-3 mr-1\" />\n                              Owned\n                            </Badge>\n                          </div>\n\n                          {/* Info on hover */}\n                          <div className=\"absolute bottom-0 left-0 right-0 p-4 translate-y-full group-hover:translate-y-0 transition-transform duration-300\">\n                            <h3 className=\"text-white font-semibold mb-1 line-clamp-1\">\n                              {submission.title}\n                            </h3>\n                            <div className=\"flex items-center justify-between text-xs text-gray-300\">\n                              <span>by @{submission.user?.username || 'Unknown'}</span>\n                              {submission.purchasePrice && submission.purchaseCurrency && (\n                                <span className=\"bg-white/20 px-2 py-0.5 rounded\">\n                                  {parseFloat(submission.purchasePrice).toString()} {submission.purchaseCurrency}\n                                </span>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"no-purchased-prompts\">\n                    <div className=\"w-24 h-24 mx-auto mb-6 rounded-full bg-muted flex items-center justify-center\">\n                      <ShoppingCart className=\"w-12 h-12 text-muted-foreground\" />\n                    </div>\n                    <h3 className=\"text-xl font-semibold mb-2\">\n                      No purchased prompts yet\n                    </h3>\n                    <p className=\"text-muted-foreground mb-6\">\n                      Browse the Explore page to find amazing AI prompts for sale!\n                    </p>\n                    <Link href=\"/explore\" data-testid=\"browse-explore-button\">\n                      <GlassButton>\n                        Explore Marketplace\n                        <ShoppingCart className=\"w-4 h-4 ml-2\" />\n                      </GlassButton>\n                    </Link>\n                  </div>\n                )}\n              </TabsContent>\n\n              {/* Transaction History Tab */}\n              <TabsContent value=\"glory\" className=\"space-y-4\" data-testid=\"transactions-tab\">\n                {/* Always show filter */}\n                <div className=\"flex justify-between items-center gap-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <label htmlFor=\"currency-filter\" className=\"text-sm font-medium text-muted-foreground\">Currency:</label>\n                    <Select value={currencyFilter} onValueChange={(value) => setCurrencyFilter(value as \"all\" | \"GLORY\" | \"SOL\" | \"USDC\")}>\n                      <SelectTrigger id=\"currency-filter\" className=\"w-[180px]\" data-testid=\"select-currency-filter\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Currencies</SelectItem>\n                        <SelectItem value=\"GLORY\">GLORY</SelectItem>\n                        <SelectItem value=\"SOL\">SOL</SelectItem>\n                        <SelectItem value=\"USDC\">USDC</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  {gloryHistory.length > 0 && (\n                    <Button\n                      variant=\"destructive\"\n                      onClick={handleClearGloryHistory}\n                      disabled={clearGloryHistoryMutation.isPending}\n                      data-testid=\"button-clear-history\"\n                    >\n                      <Trash2 className=\"w-4 h-4 mr-2\" />\n                      Clear All History\n                    </Button>\n                  )}\n                </div>\n                \n                {gloryHistory.length > 0 ? (\n                  <Card>\n                      <CardContent className=\"p-0\">\n                        {/* Desktop Table View */}\n                        <div className=\"overflow-x-auto hidden md:block\">\n                          <table className=\"w-full\" data-testid=\"glory-history-table\">\n                            <thead className=\"bg-muted\">\n                              <tr>\n                                <th className=\"px-2 md:px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                                  Date\n                                </th>\n                                <th className=\"px-2 md:px-6 py-3 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                                  Transaction\n                                </th>\n                                <th className=\"px-2 md:px-6 py-3 text-right text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                                  Amount\n                                </th>\n                              </tr>\n                            </thead>\n                            <tbody className=\"divide-y divide-border\">\n                              {gloryHistory.map((transaction: any, index: number) => {\n                                const date = new Date(transaction.createdAt);\n                                const shortDate = `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear().toString().slice(-2)}`;\n                                \n                                return (\n                                  <tr key={transaction.id} data-testid={`glory-transaction-${index}`}>\n                                    <td className=\"px-2 md:px-6 py-3 whitespace-nowrap text-xs md:text-sm text-muted-foreground\">\n                                      {shortDate}\n                                    </td>\n                                    <td className=\"px-2 md:px-6 py-3\">\n                                      <div className=\"font-medium text-sm md:text-base\" data-testid={`transaction-reason-${index}`}>\n                                        {transaction.reason}\n                                      </div>\n                                      {transaction.contestId && (\n                                        <div className=\"text-muted-foreground text-xs\">\n                                          Contest reward\n                                        </div>\n                                      )}\n                                    </td>\n                                    <td className=\"px-2 md:px-6 py-3 whitespace-nowrap text-right\">\n                                      <span \n                                        className={`font-semibold font-mono text-xs md:text-sm ${transaction.delta > 0 ? \"text-success\" : \"text-destructive\"}`}\n                                        data-testid={`transaction-amount-${index}`}\n                                      >\n                                        {transaction.delta > 0 ? \"+\" : \"\"}{formatDecimalBalance(transaction.delta)} {transaction.currency || \"GLORY\"}\n                                      </span>\n                                    </td>\n                                  </tr>\n                                );\n                              })}\n                            </tbody>\n                          </table>\n                        </div>\n\n                        {/* Mobile Card View */}\n                        <div className=\"md:hidden divide-y divide-border\">\n                          {gloryHistory.map((transaction: any, index: number) => {\n                            const date = new Date(transaction.createdAt);\n                            const shortDate = `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear().toString().slice(-2)}`;\n                            \n                            return (\n                              <div key={transaction.id} className=\"p-4 hover:bg-muted/30 transition-colors\" data-testid={`glory-transaction-card-${index}`}>\n                                <div className=\"flex items-start justify-between mb-2\">\n                                  <div className=\"flex-1\">\n                                    <div className=\"font-medium text-sm mb-1\">\n                                      {transaction.reason}\n                                    </div>\n                                    {transaction.contestId && (\n                                      <div className=\"text-muted-foreground text-xs\">\n                                        Contest reward\n                                      </div>\n                                    )}\n                                  </div>\n                                  <span \n                                    className={`font-semibold font-mono text-sm ${transaction.delta > 0 ? \"text-success\" : \"text-destructive\"}`}\n                                  >\n                                    {transaction.delta > 0 ? \"+\" : \"\"}{formatDecimalBalance(transaction.delta)} {transaction.currency || \"GLORY\"}\n                                  </span>\n                                </div>\n                                <div className=\"text-xs text-muted-foreground\">\n                                  {shortDate}\n                                </div>\n                              </div>\n                            );\n                          })}\n                        </div>\n                      </CardContent>\n                    </Card>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"no-transactions\">\n                    <div className=\"w-24 h-24 mx-auto mb-6 rounded-full bg-muted flex items-center justify-center\">\n                      <Trophy className=\"w-12 h-12 text-muted-foreground\" />\n                    </div>\n                    <h3 className=\"text-xl font-semibold mb-2\">\n                      {currencyFilter === \"all\" ? \"No transactions yet\" : `No ${currencyFilter} transactions yet`}\n                    </h3>\n                    <p className=\"text-muted-foreground\">\n                      Start participating in contests to earn rewards!\n                    </p>\n                  </div>\n                )}\n              </TabsContent>\n\n              {/* Settings Tab */}\n              <TabsContent value=\"settings\" className=\"space-y-6\" data-testid=\"settings-tab\">\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-lg font-semibold mb-4\">Account Information</h3>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <label className=\"text-sm font-medium\">Username</label>\n                        {editingUsername ? (\n                          <div className=\"flex gap-2 mt-2\">\n                            <Input\n                              value={newUsername}\n                              onChange={(e) => setNewUsername(e.target.value)}\n                              placeholder=\"Enter new username\"\n                              data-testid=\"input-new-username\"\n                            />\n                            <Button\n                              size=\"sm\"\n                              onClick={handleSaveUsername}\n                              disabled={updateUsernameMutation.isPending}\n                              data-testid=\"button-save-username\"\n                            >\n                              <Save className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => {\n                                setEditingUsername(false);\n                                setNewUsername(\"\");\n                              }}\n                              data-testid=\"button-cancel-username\"\n                            >\n                              <XIcon className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        ) : (\n                          <div className=\"flex items-center gap-2 mt-2\">\n                            <p className=\"text-muted-foreground\">{user.username}</p>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => {\n                                setEditingUsername(true);\n                                setNewUsername(user.username);\n                              }}\n                              data-testid=\"button-edit-username\"\n                            >\n                              <Edit2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        )}\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium\">Email</label>\n                        <p className=\"text-muted-foreground\">{user.email}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium\">Account Status</label>\n                        <div className=\"mt-1\">\n                          <Badge className={getStatusColor(user.status)}>\n                            {getStatusIcon(user.status)}\n                            <span className=\"ml-1\">{user.status.charAt(0).toUpperCase() + user.status.slice(1)}</span>\n                          </Badge>\n                        </div>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium\">Role</label>\n                        <p className=\"text-muted-foreground capitalize\">{user.role}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium\">Member Since</label>\n                        <p className=\"text-muted-foreground\">{new Date(user.createdAt).toLocaleDateString()}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Wallet Connection */}\n                <WalletConnect />\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-lg font-semibold mb-4\">Withdrawal Address</h3>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      Enter your Solana wallet address where you want to receive withdrawals\n                    </p>\n                    {editingWithdrawalAddress ? (\n                      <div className=\"space-y-4\">\n                        <Input\n                          placeholder=\"Enter Solana wallet address (32-44 characters)\"\n                          value={withdrawalAddress}\n                          onChange={(e) => setWithdrawalAddress(e.target.value)}\n                          data-testid=\"input-withdrawal-address\"\n                        />\n                        <div className=\"flex gap-2\">\n                          <Button\n                            onClick={handleSaveWithdrawalAddress}\n                            disabled={updateWithdrawalAddressMutation.isPending}\n                            data-testid=\"button-save-withdrawal-address\"\n                          >\n                            <Save className=\"w-4 h-4 mr-2\" />\n                            Save Address\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            onClick={() => {\n                              setEditingWithdrawalAddress(false);\n                              setWithdrawalAddress(user?.withdrawalAddress || \"\");\n                            }}\n                            data-testid=\"button-cancel-withdrawal-address\"\n                          >\n                            <XIcon className=\"w-4 h-4 mr-2\" />\n                            Cancel\n                          </Button>\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"flex items-center gap-2\">\n                        {user?.withdrawalAddress ? (\n                          <p className=\"text-muted-foreground font-mono text-sm truncate flex-1\">\n                            {user.withdrawalAddress}\n                          </p>\n                        ) : (\n                          <p className=\"text-muted-foreground italic\">No withdrawal address set</p>\n                        )}\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={() => {\n                            setEditingWithdrawalAddress(true);\n                            setWithdrawalAddress(user?.withdrawalAddress || \"\");\n                          }}\n                          data-testid=\"button-edit-withdrawal-address\"\n                        >\n                          <Edit2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-destructive\">\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-lg font-semibold mb-2 text-destructive\">Danger Zone</h3>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      Once you delete your profile, there is no going back. This will permanently delete your account, submissions, votes, and GLORY balance.\n                    </p>\n                    <Button\n                      variant=\"destructive\"\n                      onClick={handleDeleteProfile}\n                      disabled={deleteProfileMutation.isPending}\n                      data-testid=\"button-delete-profile\"\n                    >\n                      <Trash2 className=\"w-4 h-4 mr-2\" />\n                      Delete Profile\n                    </Button>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </div>\n      </div>\n\n      {/* Edit Submission Modal */}\n      <EditSubmissionModal\n        isOpen={editModalOpen}\n        onClose={() => setEditModalOpen(false)}\n        onSubmit={handleSaveEdit}\n        submission={selectedSubmission || { id: '', title: '', description: '', tags: [] }}\n      />\n\n      {/* Upload Wizard Modal */}\n      <UploadWizardModal\n        isOpen={uploadModalOpen}\n        onClose={() => {\n          setUploadModalOpen(false);\n          queryClient.invalidateQueries({ queryKey: ['/api/me/submissions'] });\n        }}\n      />\n\n      {/* Withdraw Glory Modal */}\n      <Dialog open={withdrawModalOpen} onOpenChange={setWithdrawModalOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <DollarSign className=\"h-5 w-5\" />\n              Cash Out GLORY\n            </DialogTitle>\n            <DialogDescription>\n              Convert your GLORY points to USDC on Solana\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-6 mt-4\">\n            <CashoutRequest />\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":51937},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer min-h-[44px] min-w-[44px] md:min-h-[16px] md:min-w-[16px] h-11 w-11 md:h-4 md:w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-5 w-5 md:h-4 md:w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1144},"client/src/components/CreateContestModal.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { X, Upload, Plus, Minus, Calendar, Trophy, Users, Settings, Eye, FileText, Image as ImageIcon } from 'lucide-react';\n\ninterface CreateContestModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (contestData: any) => void;\n}\n\nexport function CreateContestModal({ isOpen, onClose, onSubmit }: CreateContestModalProps) {\n  const [formData, setFormData] = useState({\n    // Basic fields\n    title: '',\n    description: '',\n    contestType: 'Image',\n    category: '',\n    coverImage: null as File | null,\n    entryFee: false,\n    entryFeeAmount: undefined as number | undefined,\n    entryFeeCurrency: 'GLORY' as 'GLORY' | 'SOL' | 'USDC',\n    entryFeePaymentMethods: ['balance'] as ('balance' | 'wallet')[],\n\n    // Time settings\n    startDateOption: 'later' as 'now' | 'later',\n    startDate: '',\n    startTime: '',\n    endDate: '',\n    endTime: '',\n    \n    // NEW: Submission deadline (optional)\n    submissionDeadline: '',\n    submissionDeadlineTime: '',\n    enableSubmissionDeadline: false,\n    \n    votingStartOption: 'later' as 'now' | 'later',\n    votingStartDate: '',\n    votingEndDate: '',\n    votingEndTime: '',\n\n    // Prizes\n    prizePool: '',\n    currency: 'GLORY' as 'GLORY' | 'SOL' | 'USDC',\n    prizeDistribution: [\n      { place: 1, value: 0 },\n      { place: 2, value: 0 },\n      { place: 3, value: 0 }\n    ],\n    additionalRewards: [],\n\n    // Participation rules\n    eligibility: 'all_users',\n    maxSubmissions: 3,\n    allowedMediaTypes: ['Images'],\n    fileSizeLimit: 50,\n    nsfwAllowed: false,\n    agreeToRules: true,\n\n    // Voting\n    votingMethods: ['public'],\n    juryMembers: [] as string[],\n\n    // Voting frequency\n    votesPerUserPerPeriod: 1,\n    periodDurationHours: 24,\n    totalVotesPerUser: 0,\n\n    // Admin settings\n    status: 'draft',\n    featured: false\n  });\n\n  const [errors, setErrors] = useState<string[]>([]);\n  const [coverImagePreview, setCoverImagePreview] = useState<string>('');\n  const [showImageSelector, setShowImageSelector] = useState(false);\n\n  // Fetch approved users for jury selection\n  const { data: approvedUsers = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/users', { status: 'approved' }]\n  });\n\n  const { data: submissions = [] } = useQuery({\n    queryKey: ['/api/submissions', { forGallery: true }],\n    queryFn: async () => {\n      const response = await fetch('/api/submissions', { credentials: 'include' });\n      if (!response.ok) return [];\n      return response.json();\n    },\n    enabled: showImageSelector\n  });\n\n  // Reset form when modal opens\n  useEffect(() => {\n    if (isOpen) {\n      setFormData({\n        title: '',\n        description: '',\n        contestType: 'Image',\n        category: '',\n        coverImage: null,\n        entryFee: false,\n        entryFeeAmount: undefined,\n        entryFeeCurrency: 'GLORY',\n        entryFeePaymentMethods: ['balance'],\n        startDateOption: 'later',\n        startDate: '',\n        startTime: '',\n        endDate: '',\n        endTime: '',\n        submissionDeadline: '',\n        submissionDeadlineTime: '',\n        enableSubmissionDeadline: false,\n        votingStartOption: 'later',\n        votingStartDate: '',\n        votingEndDate: '',\n        votingEndTime: '',\n        prizePool: '',\n        currency: 'GLORY',\n        prizeDistribution: [\n          { place: 1, value: 0 },\n          { place: 2, value: 0 },\n          { place: 3, value: 0 }\n        ],\n        additionalRewards: [],\n        eligibility: 'all_users',\n        maxSubmissions: 3,\n        allowedMediaTypes: ['Images'],\n        fileSizeLimit: 50,\n        nsfwAllowed: false,\n        agreeToRules: true,\n        votingMethods: ['public'],\n        juryMembers: [] as string[],\n        votesPerUserPerPeriod: 1,\n        periodDurationHours: 24,\n        totalVotesPerUser: 0,\n        status: 'draft',\n        featured: false\n      });\n      setCoverImagePreview('');\n      setErrors([]);\n    }\n  }, [isOpen]);\n\n  if (!isOpen) return null;\n\n  const handleInputChange = (field: string, value: any) => {\n    setFormData(prev => {\n      const updates: any = { [field]: value };\n      \n      // Auto-select payment methods when currency changes\n      if (field === 'entryFeeCurrency' && prev.entryFee) {\n        const isStandardCrypto = value && ['SOL', 'USDC'].includes(value);\n        const currentMethods = prev.entryFeePaymentMethods;\n        const isDefaultBalance = currentMethods.length === 1 && currentMethods[0] === 'balance';\n        \n        if (isStandardCrypto && isDefaultBalance) {\n          console.log('🔄 Auto-selecting payment methods for', value, ': [balance, wallet]');\n          updates.entryFeePaymentMethods = ['balance', 'wallet'] as ('balance' | 'wallet')[];\n        } else if (!isStandardCrypto && currentMethods.includes('wallet')) {\n          console.log('🔄 Removing wallet payment for', value);\n          updates.entryFeePaymentMethods = ['balance'] as ('balance' | 'wallet')[];\n        }\n      }\n      \n      return { ...prev, ...updates };\n    });\n  };\n\n  const handleCoverImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      handleInputChange('coverImage', file);\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setCoverImagePreview(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleArrayToggle = (field: 'allowedMediaTypes' | 'votingMethods', value: string) => {\n    setFormData(prev => {\n      const currentValue = prev[field];\n      return {\n        ...prev,\n        [field]: currentValue.includes(value)\n          ? currentValue.filter(item => item !== value)\n          : [...currentValue, value]\n      };\n    });\n  };\n\n  const addPrizePlace = () => {\n    setFormData(prev => {\n      const currentDistribution = prev.prizeDistribution || [];\n      return {\n        ...prev,\n        prizeDistribution: [\n          ...currentDistribution,\n          { place: currentDistribution.length + 1, value: 0 }\n        ]\n      };\n    });\n  };\n\n  const removePrizePlace = (index: number) => {\n    const currentDistribution = formData.prizeDistribution || [];\n    if (currentDistribution.length > 1) {\n      setFormData(prev => ({\n        ...prev,\n        prizeDistribution: (prev.prizeDistribution || []).filter((_, i) => i !== index)\n      }));\n    }\n  };\n\n  const updatePrizeValue = (index: number, value: number) => {\n    setFormData(prev => ({\n      ...prev,\n      prizeDistribution: (prev.prizeDistribution || []).map((prize, i) =>\n        i === index ? { ...prize, value } : prize\n      )\n    }));\n  };\n\n  // Unified validation function for all form fields\n  const validateFormData = (dataToValidate: typeof formData): string[] => {\n    const validationErrors: string[] = [];\n    \n    // Validate basic fields\n    if (!dataToValidate.title.trim()) {\n      validationErrors.push('Contest title is required');\n    }\n    if (!dataToValidate.description.trim()) {\n      validationErrors.push('Description is required');\n    }\n    \n    // Validate start date (if not \"now\")\n    if (dataToValidate.startDateOption !== 'now' && !dataToValidate.startDate) {\n      validationErrors.push('Start date is required');\n    }\n    \n    // Validate end date (always required)\n    if (!dataToValidate.votingEndDate) {\n      validationErrors.push('Contest end date is required');\n    }\n    \n    // Validate submission deadline (only if enabled)\n    if (dataToValidate.enableSubmissionDeadline && !dataToValidate.submissionDeadline) {\n      validationErrors.push('Submission deadline is required when enabled');\n    }\n    \n    // Validate voting start date (if not \"now\")\n    if (dataToValidate.votingStartOption !== 'now' && !dataToValidate.votingStartDate) {\n      validationErrors.push('Voting start date is required');\n    }\n    \n    // Chronological validation - only if all required dates are present\n    if (validationErrors.length === 0) {\n      // Build date objects for comparison\n      const startAt = dataToValidate.startDateOption === 'now' \n        ? new Date() \n        : new Date(`${dataToValidate.startDate}T${dataToValidate.startTime || '00:00'}`);\n      \n      const votingEndAt = new Date(\n        `${dataToValidate.votingEndDate}T${dataToValidate.votingEndTime || '23:59'}`\n      );\n      \n      const votingStartAt = dataToValidate.votingStartOption === 'now'\n        ? new Date()\n        : new Date(`${dataToValidate.votingStartDate}T00:00`);\n      \n      // Check: Contest start must be before voting end\n      if (startAt >= votingEndAt) {\n        validationErrors.push('Contest start time must be before voting end time');\n      }\n      \n      // Check: Voting start must be after or equal to contest start\n      if (votingStartAt < startAt) {\n        validationErrors.push('Voting cannot start before the contest starts');\n      }\n      \n      // Check: Voting start must be before voting end\n      if (votingStartAt >= votingEndAt) {\n        validationErrors.push('Voting start time must be before voting end time');\n      }\n      \n      // Check submission deadline if enabled\n      if (dataToValidate.enableSubmissionDeadline && dataToValidate.submissionDeadline) {\n        const submissionEndAt = new Date(\n          `${dataToValidate.submissionDeadline}T${dataToValidate.submissionDeadlineTime || '23:59'}`\n        );\n        \n        // Submission deadline must be after contest start\n        if (submissionEndAt <= startAt) {\n          validationErrors.push('Submission deadline must be after contest start time');\n        }\n        \n        // Submission deadline must be before or equal to voting end\n        if (submissionEndAt > votingEndAt) {\n          validationErrors.push('Submission deadline cannot be after voting end time');\n        }\n      }\n    }\n    \n    return validationErrors;\n  };\n\n  const handleSubmitWithData = async (dataToSubmit: typeof formData) => {\n    \n    // Generate unique slug from title\n    const baseSlug = dataToSubmit.title\n      .toLowerCase()\n      .trim()\n      .replace(/[^a-z0-9]+/g, '-')\n      .replace(/(^-|-$)/g, '');\n    const timestamp = Date.now().toString(36);\n    const slug = `${baseSlug}-${timestamp}`;\n    \n    // Calculate total prize from distribution (with safety check)\n    const totalPrize = (dataToSubmit.prizeDistribution || []).reduce((sum, prize) => sum + prize.value, 0);\n    \n    // Set contest start time\n    let startAt: string;\n    if (dataToSubmit.startDateOption === 'now') {\n      startAt = new Date().toISOString();\n    } else {\n      startAt = new Date(\n        `${dataToSubmit.startDate}T${dataToSubmit.startTime || '00:00'}`\n      ).toISOString();\n    }\n    \n    // Set contest end time (this is also voting end time)\n    const endAt = new Date(\n      `${dataToSubmit.votingEndDate}T${dataToSubmit.votingEndTime || '23:59'}`\n    ).toISOString();\n    \n    // Process submission deadline logic\n    let submissionEndAt: string;\n    if (dataToSubmit.enableSubmissionDeadline && dataToSubmit.submissionDeadline) {\n      // Use custom submission deadline\n      submissionEndAt = new Date(\n        `${dataToSubmit.submissionDeadline}T${dataToSubmit.submissionDeadlineTime || '23:59'}`\n      ).toISOString();\n    } else {\n      // Use contest end date as submission deadline\n      submissionEndAt = endAt;\n    }\n    \n    // Set voting start time\n    let votingStartAt: string;\n    if (dataToSubmit.votingStartOption === 'now') {\n      votingStartAt = new Date().toISOString();\n    } else {\n      votingStartAt = new Date(\n        `${dataToSubmit.votingStartDate}T00:00`\n      ).toISOString();\n    }\n    \n    // Create comprehensive contest config object with ALL settings\n    const contestConfig: any = {\n      // Voting rules\n      votesPerUserPerPeriod: dataToSubmit.votesPerUserPerPeriod,\n      periodDurationHours: dataToSubmit.periodDurationHours,\n      totalVotesPerUser: dataToSubmit.totalVotesPerUser,\n      votingMethods: dataToSubmit.votingMethods,\n      juryMembers: dataToSubmit.juryMembers || [],\n      \n      // Time settings\n      submissionEndAt,\n      votingStartAt,\n      votingEndAt: endAt,\n      \n      // Prize distribution (with safety checks)\n      prizeDistribution: dataToSubmit.prizeDistribution || [],\n      additionalRewards: dataToSubmit.additionalRewards || [],\n      currency: dataToSubmit.currency,\n      \n      // Participation rules\n      eligibility: dataToSubmit.eligibility,\n      maxSubmissions: dataToSubmit.maxSubmissions,\n      allowedMediaTypes: dataToSubmit.allowedMediaTypes,\n      fileSizeLimit: dataToSubmit.fileSizeLimit,\n      nsfwAllowed: dataToSubmit.nsfwAllowed,\n      \n      // Entry fee\n      entryFee: dataToSubmit.entryFee,\n      entryFeeAmount: dataToSubmit.entryFeeAmount,\n      entryFeeCurrency: dataToSubmit.entryFeeCurrency || 'GLORY',\n      entryFeePaymentMethods: dataToSubmit.entryFeePaymentMethods,\n      \n      // Contest metadata\n      contestType: dataToSubmit.contestType,\n      category: dataToSubmit.category,\n      featured: dataToSubmit.featured\n    };\n    \n    // Create clean form data object for submission\n    const finalFormData = {\n      title: dataToSubmit.title,\n      slug,\n      description: dataToSubmit.description,\n      rules: dataToSubmit.description || 'Standard contest rules apply.',\n      status: dataToSubmit.status,\n      prizeGlory: totalPrize,\n      startAt,\n      endAt,\n      config: contestConfig,\n      coverImageUrl: '' // Will be set after image upload if needed\n    };\n    \n    // If coverImage is a File, upload it first\n    if (dataToSubmit.coverImage && dataToSubmit.coverImage instanceof File) {\n      const uploadFormData = new FormData();\n      uploadFormData.append('file', dataToSubmit.coverImage);\n      \n      try {\n        const response = await fetch('/api/upload', {\n          method: 'POST',\n          credentials: 'include',\n          body: uploadFormData\n        });\n        \n        if (!response.ok) {\n          setErrors(['Failed to upload cover image. Please try again.']);\n          return;\n        }\n        \n        const result = await response.json();\n        finalFormData.coverImageUrl = result.url;\n      } catch (error) {\n        console.error('Failed to upload cover image:', error);\n        setErrors(['Failed to upload cover image. Please check your connection and try again.']);\n        return;\n      }\n    }\n    \n    \n    onSubmit(finalFormData);\n    onClose();\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4 overflow-y-auto\">\n      <div className=\"bg-white dark:bg-slate-900 rounded-2xl max-w-4xl w-full max-h-[95vh] my-4 shadow-2xl flex flex-col\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-slate-200 dark:border-slate-800\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 rounded-lg bg-violet-600/10 text-violet-700 dark:text-violet-300 border border-violet-300/40 dark:border-violet-700/40\">\n              <Trophy className=\"h-6 w-6\" />\n            </div>\n            <h1 className=\"text-2xl font-bold text-slate-900 dark:text-slate-100\">Create New Contest</h1>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"p-2 rounded-full hover:bg-slate-200 dark:hover:bg-slate-800 transition-colors\"\n          >\n            <X size={20} />\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1 overflow-y-auto p-6\">\n          {/* Errors */}\n          {errors.length > 0 && (\n            <div className=\"mb-6 rounded-xl border border-red-300/50 dark:border-red-600/50 bg-red-50 dark:bg-red-950/30 p-4 text-sm text-red-800 dark:text-red-200\">\n              <ul className=\"list-disc ps-5 space-y-1\">\n                {errors.map((error, i) => (\n                  <li key={i}>{error}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n\n          <div className=\"space-y-8\">\n            {/* Basic Information */}\n            <section>\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center gap-2\">\n                <FileText className=\"h-5 w-5 text-violet-600\" />\n                Basic Information\n              </h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"md:col-span-2\">\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Contest Title *\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.title}\n                    onChange={(e) => handleInputChange('title', e.target.value)}\n                    placeholder=\"e.g. Weekly Cyberpunk Challenge\"\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                  />\n                </div>\n\n                <div className=\"md:col-span-2\">\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Description *\n                  </label>\n                  <textarea\n                    value={formData.description}\n                    onChange={(e) => handleInputChange('description', e.target.value)}\n                    rows={4}\n                    placeholder=\"Contest rules, requirements, theme details...\"\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Contest Type\n                  </label>\n                  <select\n                    value={formData.contestType}\n                    onChange={(e) => handleInputChange('contestType', e.target.value)}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                  >\n                    <option value=\"Image\">Image Contest</option>\n                    <option value=\"Video\">Video Contest</option>\n                    <option value=\"GIF\">GIF Contest</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Category / Theme\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.category}\n                    onChange={(e) => handleInputChange('category', e.target.value)}\n                    placeholder=\"e.g. Most Beautiful, Cyberpunk City\"\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                  />\n                </div>\n\n                <div className=\"md:col-span-2\">\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Cover Image\n                  </label>\n                  \n                  {coverImagePreview ? (\n                    <div className=\"relative group\">\n                      <img \n                        src={coverImagePreview} \n                        alt=\"Cover preview\" \n                        className=\"w-full h-48 object-cover rounded-xl\"\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => {\n                          setCoverImagePreview('');\n                          handleInputChange('coverImage', null);\n                        }}\n                        className=\"absolute top-2 right-2 p-2 bg-red-600 text-white rounded-lg opacity-0 group-hover:opacity-100 transition-opacity\"\n                        data-testid=\"button-remove-cover-image\"\n                      >\n                        Remove\n                      </button>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-2\">\n                      <label className=\"block\">\n                        <input\n                          type=\"file\"\n                          accept=\"image/*\"\n                          onChange={handleCoverImageUpload}\n                          className=\"hidden\"\n                          id=\"cover-image-upload\"\n                          data-testid=\"input-cover-image-upload\"\n                        />\n                        <div className=\"border-2 border-dashed border-slate-300 dark:border-slate-700 rounded-xl p-4 text-center hover:border-violet-500 transition-colors cursor-pointer\">\n                          <Upload className=\"h-8 w-8 text-slate-400 mx-auto mb-2\" />\n                          <p className=\"text-sm text-slate-600 dark:text-slate-400\">Click to upload cover image</p>\n                          <p className=\"text-xs text-slate-500 mt-1\">Or choose from options below</p>\n                        </div>\n                      </label>\n                      \n                      <div className=\"grid grid-cols-2 gap-2\">\n                        <button\n                          type=\"button\"\n                          onClick={() => setShowImageSelector(true)}\n                          className=\"px-3 py-2 text-sm rounded-lg border border-slate-300 dark:border-slate-700 hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors\"\n                          data-testid=\"button-choose-from-gallery\"\n                        >\n                          Choose from Gallery\n                        </button>\n                        <button\n                          type=\"button\"\n                          onClick={async () => {\n                            const response = await fetch('/api/submissions', { credentials: 'include' });\n                            if (response.ok) {\n                              const allSubmissions = await response.json();\n                              const topVoted = allSubmissions\n                                .filter((sub: any) => sub.status === 'approved' && sub.type === 'image')\n                                .sort((a: any, b: any) => b.votesCount - a.votesCount)[0];\n                              \n                              if (topVoted) {\n                                setCoverImagePreview(topVoted.mediaUrl);\n                                handleInputChange('coverImage', topVoted.mediaUrl);\n                              }\n                            }\n                          }}\n                          className=\"px-3 py-2 text-sm rounded-lg border border-slate-300 dark:border-slate-700 hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors\"\n                          data-testid=\"button-use-top-voted-image\"\n                        >\n                          Use Top Voted Image\n                        </button>\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"flex items-center\">\n                  <label className=\"flex items-center gap-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.entryFee}\n                      onChange={(e) => handleInputChange('entryFee', e.target.checked)}\n                      className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                    />\n                    <span className=\"text-sm text-slate-800 dark:text-slate-200\">Entry Fee Required</span>\n                  </label>\n                </div>\n\n                {formData.entryFee && (\n                  <div className=\"space-y-3\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                        Entry Fee Currency\n                      </label>\n                      <select\n                        value={formData.entryFeeCurrency}\n                        onChange={(e) => handleInputChange('entryFeeCurrency', e.target.value as 'GLORY' | 'SOL' | 'USDC')}\n                        className=\"w-full px-3 py-2 bg-white dark:bg-slate-800 border border-slate-300 dark:border-slate-700 rounded-lg text-sm text-slate-900 dark:text-slate-100\"\n                        data-testid=\"select-entry-fee-currency\"\n                      >\n                        <option value=\"GLORY\">GLORY</option>\n                        <option value=\"SOL\">SOL</option>\n                        <option value=\"USDC\">USDC</option>\n                      </select>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                        Entry Fee Amount *\n                      </label>\n                      <input\n                        type=\"number\"\n                        min=\"0\"\n                        step=\"0.01\"\n                        value={formData.entryFeeAmount ?? \"\"}\n                        onChange={(e) => handleInputChange('entryFeeAmount', e.target.value ? Number(e.target.value) : undefined)}\n                        placeholder=\"e.g. 5.00\"\n                        className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-2\">\n                        Payment Methods *\n                      </label>\n                      <div className=\"space-y-2\">\n                        <label className=\"flex items-center gap-2\">\n                          <input\n                            type=\"checkbox\"\n                            checked={formData.entryFeePaymentMethods.includes('balance')}\n                            onChange={(e) => {\n                              const methods = e.target.checked\n                                ? [...formData.entryFeePaymentMethods.filter(m => m !== 'balance'), 'balance']\n                                : formData.entryFeePaymentMethods.filter(m => m !== 'balance');\n                              handleInputChange('entryFeePaymentMethods', methods);\n                            }}\n                            className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                          />\n                          <span className=\"text-sm text-slate-800 dark:text-slate-200\">Platform Balance</span>\n                        </label>\n                        <label className=\"flex items-center gap-2\">\n                          <input\n                            type=\"checkbox\"\n                            checked={formData.entryFeePaymentMethods.includes('wallet')}\n                            onChange={(e) => {\n                              const methods = e.target.checked\n                                ? [...formData.entryFeePaymentMethods.filter(m => m !== 'wallet'), 'wallet']\n                                : formData.entryFeePaymentMethods.filter(m => m !== 'wallet');\n                              handleInputChange('entryFeePaymentMethods', methods);\n                            }}\n                            className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                          />\n                          <span className=\"text-sm text-slate-800 dark:text-slate-200\">Connected Wallet</span>\n                        </label>\n                      </div>\n                      <p className=\"text-xs text-slate-500 dark:text-slate-400 mt-1\">\n                        Select at least one payment method. Wallet payment allows users to pay directly from their connected Solana wallet.\n                      </p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </section>\n\n            {/* Time Settings */}\n            <section>\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center gap-2\">\n                <Calendar className=\"h-5 w-5 text-violet-600\" />\n                Time Settings\n              </h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Contest Start Date *\n                  </label>\n                  <div className=\"mb-2\">\n                    <label className=\"flex items-center gap-2\">\n                      <input\n                        type=\"radio\"\n                        name=\"startDateOption\"\n                        value=\"now\"\n                        checked={formData.startDateOption === 'now'}\n                        onChange={(e) => handleInputChange('startDateOption', e.target.value)}\n                        className=\"h-4 w-4 text-violet-600 focus:ring-violet-500\"\n                      />\n                      <span className=\"text-sm text-slate-800 dark:text-slate-200\">Start Now</span>\n                    </label>\n                  </div>\n                  <div className=\"mb-2\">\n                    <label className=\"flex items-center gap-2\">\n                      <input\n                        type=\"radio\"\n                        name=\"startDateOption\"\n                        value=\"later\"\n                        checked={formData.startDateOption === 'later'}\n                        onChange={(e) => handleInputChange('startDateOption', e.target.value)}\n                        className=\"h-4 w-4 text-violet-600 focus:ring-violet-500\"\n                      />\n                      <span className=\"text-sm text-slate-800 dark:text-slate-200\">Start Later</span>\n                    </label>\n                  </div>\n                  <input\n                    type=\"date\"\n                    value={formData.startDate}\n                    onChange={(e) => handleInputChange('startDate', e.target.value)}\n                    disabled={formData.startDateOption === 'now'}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Contest Start Time\n                  </label>\n                  <input\n                    type=\"time\"\n                    value={formData.startTime}\n                    onChange={(e) => handleInputChange('startTime', e.target.value)}\n                    disabled={formData.startDateOption === 'now'}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Contest End Date *\n                  </label>\n                  <input\n                    type=\"date\"\n                    value={formData.votingEndDate}\n                    onChange={(e) => handleInputChange('votingEndDate', e.target.value)}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                  />\n                  <p className=\"text-xs text-slate-500 mt-1\">This is when both submissions and voting end</p>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Contest End Time\n                  </label>\n                  <input\n                    type=\"time\"\n                    value={formData.votingEndTime}\n                    onChange={(e) => handleInputChange('votingEndTime', e.target.value)}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                  />\n                </div>\n\n                {/* NEW: Submission Deadline Section */}\n                <div className=\"md:col-span-2 border-t border-slate-200 dark:border-slate-800 pt-4\">\n                  <div className=\"flex items-center gap-2 mb-3\">\n                    <label className=\"flex items-center gap-2\">\n                      <input\n                        type=\"checkbox\"\n                        checked={formData.enableSubmissionDeadline}\n                        onChange={(e) => handleInputChange('enableSubmissionDeadline', e.target.checked)}\n                        className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                      />\n                      <span className=\"text-sm font-medium text-slate-800 dark:text-slate-200\">\n                        Set Custom Submission Deadline\n                      </span>\n                    </label>\n                  </div>\n                  \n                  <p className=\"text-xs text-slate-500 mb-3\">\n                    {formData.enableSubmissionDeadline \n                      ? \"Submissions will close at the custom deadline below\" \n                      : \"Submissions will be accepted until the contest ends\"\n                    }\n                  </p>\n\n                  {formData.enableSubmissionDeadline && (\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                          Submission Deadline Date *\n                        </label>\n                        <input\n                          type=\"date\"\n                          value={formData.submissionDeadline}\n                          onChange={(e) => handleInputChange('submissionDeadline', e.target.value)}\n                          className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                        />\n                      </div>\n\n                      <div>\n                        <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                          Submission Deadline Time\n                        </label>\n                        <input\n                          type=\"time\"\n                          value={formData.submissionDeadlineTime}\n                          onChange={(e) => handleInputChange('submissionDeadlineTime', e.target.value)}\n                          className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                        />\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Voting Start Date *\n                  </label>\n                  <div className=\"mb-2\">\n                    <label className=\"flex items-center gap-2\">\n                      <input\n                        type=\"radio\"\n                        name=\"votingStartOption\"\n                        value=\"now\"\n                        checked={formData.votingStartOption === 'now'}\n                        onChange={(e) => handleInputChange('votingStartOption', e.target.value)}\n                        className=\"h-4 w-4 text-violet-600 focus:ring-violet-500\"\n                      />\n                      <span className=\"text-sm text-slate-800 dark:text-slate-200\">Start Voting Now</span>\n                    </label>\n                  </div>\n                  <div className=\"mb-2\">\n                    <label className=\"flex items-center gap-2\">\n                      <input\n                        type=\"radio\"\n                        name=\"votingStartOption\"\n                        value=\"later\"\n                        checked={formData.votingStartOption === 'later'}\n                        onChange={(e) => handleInputChange('votingStartOption', e.target.value)}\n                        className=\"h-4 w-4 text-violet-600 focus:ring-violet-500\"\n                      />\n                      <span className=\"text-sm text-slate-800 dark:text-slate-200\">Start Voting Later</span>\n                    </label>\n                  </div>\n                  <input\n                    type=\"date\"\n                    value={formData.votingStartDate}\n                    onChange={(e) => handleInputChange('votingStartDate', e.target.value)}\n                    disabled={formData.votingStartOption === 'now'}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                  />\n                  <p className=\"text-xs text-slate-500 mt-1\">Voting ends when the contest ends</p>\n                </div>\n              </div>\n            </section>\n\n            {/* Prizes */}\n            <section>\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center gap-2\">\n                <Trophy className=\"h-5 w-5 text-violet-600\" />\n                Prizes\n              </h3>\n\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                      Prize Pool *\n                    </label>\n                    <input\n                      type=\"number\"\n                      value={formData.prizePool}\n                      onChange={(e) => handleInputChange('prizePool', e.target.value)}\n                      placeholder=\"10000\"\n                      className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                      Currency\n                    </label>\n                    <select\n                      value={formData.currency}\n                      onChange={(e) => handleInputChange('currency', e.target.value as 'GLORY' | 'SOL' | 'USDC')}\n                      className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    >\n                      <option value=\"GLORY\">GLORY</option>\n                      <option value=\"SOL\">SOL</option>\n                      <option value=\"USDC\">USDC</option>\n                    </select>\n                  </div>\n                </div>\n\n\n                <div>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <label className=\"text-sm font-medium text-slate-800 dark:text-slate-200\">\n                      Prize Distribution\n                    </label>\n                    <button\n                      type=\"button\"\n                      onClick={addPrizePlace}\n                      className=\"flex items-center gap-1 text-xs px-2 py-1 rounded-lg bg-violet-600/10 text-violet-700 hover:bg-violet-600/20\"\n                    >\n                      <Plus className=\"h-3 w-3\" />\n                      Add Place\n                    </button>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    {(formData.prizeDistribution || []).map((prize, index) => (\n                      <div key={index} className=\"flex items-center gap-2\">\n                        <span className=\"text-sm font-medium text-slate-700 dark:text-slate-200 w-16\">\n                          {prize.place}. place\n                        </span>\n                        <input\n                          type=\"number\"\n                          value={prize.value}\n                          onChange={(e) => updatePrizeValue(index, parseInt(e.target.value) || 0)}\n                          className=\"flex-1 rounded-lg border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-1 text-sm outline-none focus:ring-2 focus:ring-violet-500\"\n                          min=\"0\"\n                        />\n                        <span className=\"text-sm text-slate-500\">\n                          {formData.currency}\n                        </span>\n                        {(formData.prizeDistribution || []).length > 1 && (\n                          <button\n                            type=\"button\"\n                            onClick={() => removePrizePlace(index)}\n                            className=\"p-1 rounded text-red-600 hover:bg-red-50 dark:hover:bg-red-950/30\"\n                          >\n                            <Minus className=\"h-4 w-4\" />\n                          </button>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n\n                  <div className=\"text-xs text-slate-500 mt-1\">\n                    Total: {(formData.prizeDistribution || []).reduce((sum, prize) => sum + prize.value, 0)}\n                    {` ${formData.currency}`}\n                  </div>\n                </div>\n              </div>\n            </section>\n\n            {/* Participation Rules */}\n            <section>\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center gap-2\">\n                <Users className=\"h-5 w-5 text-violet-600\" />\n                Participation Rules\n              </h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Eligibility\n                  </label>\n                  <select\n                    value={formData.eligibility}\n                    onChange={(e) => handleInputChange('eligibility', e.target.value)}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                  >\n                    <option value=\"all_users\">All Users</option>\n                    <option value=\"token_holders\">Token Holders Only</option>\n                    <option value=\"verified_users\">Verified Users Only</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Max Submissions per User\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={formData.maxSubmissions}\n                    onChange={(e) => handleInputChange('maxSubmissions', parseInt(e.target.value) || 1)}\n                    min=\"1\"\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    File Size Limit (MB)\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={formData.fileSizeLimit}\n                    onChange={(e) => handleInputChange('fileSizeLimit', parseInt(e.target.value) || 50)}\n                    min=\"1\"\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200\">\n                    Allowed Media Types\n                  </label>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {['Images', 'Videos', 'GIFs'].map((type) => (\n                      <label key={type} className=\"flex items-center gap-2\">\n                        <input\n                          type=\"checkbox\"\n                          checked={formData.allowedMediaTypes.includes(type)}\n                          onChange={() => handleArrayToggle('allowedMediaTypes', type)}\n                          className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                        />\n                        <span className=\"text-sm text-slate-800 dark:text-slate-200\">{type}</span>\n                      </label>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"md:col-span-2 space-y-2\">\n                  <label className=\"flex items-center gap-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.nsfwAllowed}\n                      onChange={(e) => handleInputChange('nsfwAllowed', e.target.checked)}\n                      className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                    />\n                    <span className=\"text-sm text-slate-800 dark:text-slate-200\">NSFW Content Allowed</span>\n                  </label>\n                </div>\n              </div>\n            </section>\n\n            {/* Voting */}\n            <section>\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center gap-2\">\n                <Eye className=\"h-5 w-5 text-violet-600\" />\n                Voting Settings\n              </h3>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Voting Methods\n                  </label>\n                  <div className=\"space-y-2\">\n                    {[\n                      { value: 'public', label: 'Public Voting' },\n                      { value: 'logged_users', label: 'Logged Users Only' },\n                      { value: 'jury', label: 'Jury Voting' }\n                    ].map((method) => (\n                      <label key={method.value} className=\"flex items-center gap-2\">\n                        <input\n                          type=\"checkbox\"\n                          checked={formData.votingMethods.includes(method.value)}\n                          onChange={() => handleArrayToggle('votingMethods', method.value)}\n                          className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                        />\n                        <span className=\"text-sm text-slate-800 dark:text-slate-200\">{method.label}</span>\n                      </label>\n                    ))}\n                  </div>\n                  <p className=\"text-xs text-slate-500 mt-1\">\n                    Select one or more voting methods. Multiple methods can run simultaneously.\n                  </p>\n                </div>\n\n                {/* Jury Members Selection - shown only when jury voting is enabled */}\n                {formData.votingMethods.includes('jury') && (\n                  <div className=\"border-t border-slate-200 dark:border-slate-800 pt-4\">\n                    <h4 className=\"text-md font-medium text-slate-800 dark:text-slate-200 mb-2\">\n                      Jury Members\n                    </h4>\n                    <p className=\"text-xs text-slate-500 mb-3\">\n                      Select users who can vote as jury members. {formData.votingMethods.length === 1 ? 'Only jury members can vote.' : 'Jury members can vote alongside public voters.'}\n                    </p>\n                    \n                    {approvedUsers.length === 0 ? (\n                      <p className=\"text-sm text-slate-500 italic\">No approved users available for jury selection.</p>\n                    ) : (\n                      <div className=\"max-h-48 overflow-y-auto border border-slate-300/60 dark:border-slate-700/60 rounded-xl p-3 space-y-2\">\n                        {approvedUsers.map((user: any) => (\n                          <label key={user.id} className=\"flex items-center gap-2 hover:bg-slate-100 dark:hover:bg-slate-800 p-2 rounded-lg cursor-pointer\">\n                            <input\n                              type=\"checkbox\"\n                              checked={formData.juryMembers.includes(user.id)}\n                              onChange={(e) => {\n                                if (e.target.checked) {\n                                  handleInputChange('juryMembers', [...formData.juryMembers, user.id]);\n                                } else {\n                                  handleInputChange('juryMembers', formData.juryMembers.filter(id => id !== user.id));\n                                }\n                              }}\n                              className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                              data-testid={`checkbox-jury-${user.id}`}\n                            />\n                            <span className=\"text-sm text-slate-800 dark:text-slate-200\">{user.username}</span>\n                            <span className=\"text-xs text-slate-500\">({user.email})</span>\n                          </label>\n                        ))}\n                      </div>\n                    )}\n                    \n                    {formData.juryMembers.length > 0 && (\n                      <p className=\"text-xs text-slate-600 dark:text-slate-400 mt-2\">\n                        Selected: {formData.juryMembers.length} jury member(s)\n                      </p>\n                    )}\n                  </div>\n                )}\n\n                <div className=\"border-t border-slate-200 dark:border-slate-800 pt-4\">\n                  <h4 className=\"text-md font-medium text-slate-800 dark:text-slate-200 mb-3\">Voting Frequency</h4>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                        Votes per user per period\n                      </label>\n                      <input\n                        type=\"number\"\n                        value={formData.votesPerUserPerPeriod}\n                        onChange={(e) => handleInputChange('votesPerUserPerPeriod', parseInt(e.target.value) || 1)}\n                        min=\"1\"\n                        className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                      />\n                      <p className=\"text-xs text-slate-500 mt-1\">How many votes per time period</p>\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                        Period duration (hours)\n                      </label>\n                      <input\n                        type=\"number\"\n                        value={formData.periodDurationHours}\n                        onChange={(e) => handleInputChange('periodDurationHours', parseInt(e.target.value) || 24)}\n                        min=\"1\"\n                        max=\"168\"\n                        className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                      />\n                      <p className=\"text-xs text-slate-500 mt-1\">Time period in hours (max 168)</p>\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                        Total votes per user\n                      </label>\n                      <input\n                        type=\"number\"\n                        value={formData.totalVotesPerUser}\n                        onChange={(e) => handleInputChange('totalVotesPerUser', parseInt(e.target.value) || 0)}\n                        min=\"0\"\n                        className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                      />\n                      <p className=\"text-xs text-slate-500 mt-1\">\n                        {formData.totalVotesPerUser === 0 ? 'Unlimited votes during contest' : `Max ${formData.totalVotesPerUser} votes total`}\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"mt-3 p-3 rounded-lg bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-800\">\n                    <p className=\"text-sm text-blue-800 dark:text-blue-200\">\n                      <strong>Example:</strong> With current settings, each user can vote{' '}\n                      <span className=\"font-semibold\">{formData.votesPerUserPerPeriod} time(s)</span> every{' '}\n                      <span className=\"font-semibold\">{formData.periodDurationHours} hour(s)</span>\n                      {formData.totalVotesPerUser > 0 && (\n                        <>, with a maximum of <span className=\"font-semibold\">{formData.totalVotesPerUser} total votes</span> during the entire contest</>\n                      )}\n                      {formData.totalVotesPerUser === 0 && (\n                        <>, with <span className=\"font-semibold\">unlimited total votes</span> during the contest</>\n                      )}\n                      .\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </section>\n\n            {/* Admin Settings */}\n            <section>\n              <h3 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center gap-2\">\n                <Settings className=\"h-5 w-5 text-violet-600\" />\n                Admin Settings\n              </h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-800 dark:text-slate-200 mb-1\">\n                    Contest Status\n                  </label>\n                  <select\n                    value={formData.status}\n                    onChange={(e) => handleInputChange('status', e.target.value)}\n                    className=\"w-full rounded-xl border border-slate-300/60 dark:border-slate-700/60 bg-white/80 dark:bg-slate-900/80 px-3 py-2 outline-none focus:ring-2 focus:ring-violet-500\"\n                    data-testid=\"select-contest-status\"\n                  >\n                    <option value=\"draft\">Draft - Awaiting Activation</option>\n                    <option value=\"active\">Publish - Active Immediately</option>\n                    <option value=\"archived\">Archive - Hide Contest</option>\n                  </select>\n                  <p className=\"text-xs text-slate-500 mt-1\">\n                    {formData.status === 'draft' && 'Contest will be saved as draft and require admin approval'}\n                    {formData.status === 'active' && 'Contest will be published and active immediately'}\n                    {formData.status === 'archived' && 'Contest will be archived and hidden from users'}\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label className=\"flex items-center gap-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.featured}\n                      onChange={(e) => handleInputChange('featured', e.target.checked)}\n                      className=\"h-4 w-4 rounded border-slate-300 text-violet-600 focus:ring-violet-500\"\n                    />\n                    <span className=\"text-sm text-slate-800 dark:text-slate-200\">Featured Contest</span>\n                  </label>\n                </div>\n              </div>\n            </section>\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"flex items-center justify-between gap-3 p-6 border-t border-slate-200 dark:border-slate-800\">\n          <button\n            onClick={onClose}\n            className=\"px-6 py-2 rounded-xl border border-slate-300/60 dark:border-slate-700/60 text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors\"\n          >\n            Cancel\n          </button>\n\n          <button\n            onClick={async () => {\n              const draftData = { ...formData, status: 'draft' };\n              \n              // Use unified validation function\n              const validationErrors = validateFormData(draftData);\n              \n              setErrors(validationErrors);\n              \n              if (validationErrors.length === 0) {\n                await handleSubmitWithData(draftData);\n              }\n            }}\n            className=\"px-6 py-2 rounded-xl bg-violet-600 text-white hover:bg-violet-700 transition-colors font-semibold\"\n            data-testid=\"button-create-contest\"\n          >\n            Create Contest\n          </button>\n        </div>\n      </div>\n\n      {/* Image Gallery Selector Modal */}\n      {showImageSelector && (\n        <div className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-[60] flex items-center justify-center p-4\">\n          <div className=\"bg-white dark:bg-slate-900 rounded-2xl max-w-6xl w-full max-h-[80vh] shadow-2xl flex flex-col\">\n            <div className=\"flex items-center justify-between p-6 border-b border-slate-200 dark:border-slate-800\">\n              <div className=\"flex items-center gap-3\">\n                <ImageIcon className=\"h-6 w-6 text-violet-600\" />\n                <h2 className=\"text-xl font-bold text-slate-900 dark:text-slate-100\">Select Cover Image</h2>\n              </div>\n              <button\n                onClick={() => setShowImageSelector(false)}\n                className=\"p-2 rounded-full hover:bg-slate-200 dark:hover:bg-slate-800 transition-colors\"\n                data-testid=\"button-close-gallery-modal\"\n              >\n                <X size={20} />\n              </button>\n            </div>\n\n            <div className=\"flex-1 overflow-y-auto p-6\">\n              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n                {submissions\n                  .filter((sub: any) => sub.status === 'approved' && sub.type === 'image')\n                  .map((submission: any) => (\n                    <button\n                      key={submission.id}\n                      type=\"button\"\n                      onClick={() => {\n                        setCoverImagePreview(submission.mediaUrl);\n                        handleInputChange('coverImage', submission.mediaUrl);\n                        setShowImageSelector(false);\n                      }}\n                      className=\"group relative aspect-square rounded-xl overflow-hidden border-2 border-transparent hover:border-violet-500 transition-all\"\n                      data-testid={`button-gallery-image-${submission.id}`}\n                    >\n                      <img\n                        src={submission.mediaUrl}\n                        alt={submission.title}\n                        className=\"w-full h-full object-cover\"\n                      />\n                      <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\">\n                        <div className=\"absolute bottom-0 left-0 right-0 p-3\">\n                          <p className=\"text-white text-sm font-medium truncate\">{submission.title}</p>\n                          <p className=\"text-white/80 text-xs\">{submission.votesCount} votes</p>\n                        </div>\n                      </div>\n                    </button>\n                  ))}\n              </div>\n\n              {submissions.filter((sub: any) => sub.status === 'approved' && sub.type === 'image').length === 0 && (\n                <div className=\"text-center py-12\">\n                  <ImageIcon className=\"h-16 w-16 text-slate-400 mx-auto mb-4\" />\n                  <p className=\"text-slate-600 dark:text-slate-400\">No approved images available</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":61829},"server/middleware/rate-limit.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport { storage } from \"../storage\";\n\n// In-memory rate limiting (would use Redis in production)\nconst voteLimits = new Map<string, { count: number; resetTime: number }>();\n\nconst VOTE_LIMIT = 30; // Max votes per hour\nconst WINDOW_MS = 60 * 60 * 1000; // 1 hour\n\nexport const rateLimiter = async (req: Request, res: Response, next: NextFunction) => {\n  if (!req.userId) {\n    return next(); // Auth middleware will handle this\n  }\n\n  try {\n    const now = Date.now();\n    const windowStart = new Date(now - WINDOW_MS);\n    \n    // Check database for actual votes in the time window\n    const recentVotes = await storage.getUserVotesInTimeWindow(req.userId, windowStart);\n    \n    if (recentVotes >= VOTE_LIMIT) {\n      return res.status(429).json({ \n        error: \"Rate limit exceeded. Maximum 30 votes per hour.\", \n        code: \"RATE_LIMIT_EXCEEDED\" \n      });\n    }\n\n    next();\n  } catch (error) {\n    console.error(\"Rate limiter error:\", error);\n    // Continue on error to avoid blocking legitimate requests\n    next();\n  }\n};\n","size_bytes":1095},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/pages/home.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { GlassButton } from \"@/components/GlassButton\";\nimport { Trophy, ArrowRight, Search } from \"lucide-react\";\nimport { useAuth, isAuthenticated } from \"@/lib/auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { ContestCard } from \"@/components/contest-card\";\nimport { useState, useEffect } from \"react\";\n\nexport default function Home() {\n  const { data: user } = useAuth();\n  const [, setLocation] = useLocation();\n  const [prompt, setPrompt] = useState(\"\");\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    setIsVisible(true);\n  }, []);\n\n  // Fetch featured contest\n  const { data: featuredContest } = useQuery({\n    queryKey: [\"/api/contests/featured\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/contests/featured\");\n      if (!response.ok) {\n        if (response.status === 404) return null; // No featured contest\n        throw new Error(\"Failed to fetch featured contest\");\n      }\n      return response.json();\n    },\n  });\n\n  const handlePromptSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (prompt.trim()) {\n      setLocation(`/ai-generator?prompt=${encodeURIComponent(prompt.trim())}`);\n    }\n  };\n\n  return (\n    <div data-testid=\"home-page\">\n      {/* Hero Section */}\n      <section className=\"min-h-screen container mx-auto flex flex-col items-center justify-center px-4 sm:px-6 text-center\">\n        <div className=\"flex max-w-4xl flex-col items-center gap-6 sm:gap-8 relative\">\n          <div className={`flex flex-col gap-4 ${isVisible ? 'animate-fade-in-up animation-delay-100' : 'opacity-0'}`}>\n            <h1 className=\"text-3xl sm:text-5xl lg:text-6xl xl:text-7xl font-black tracking-tighter gradient-text animate-pulse-slow\" data-testid=\"hero-title\">\n              Where Prompts Become Glory\n            </h1>\n            <h2 className=\"text-base sm:text-lg lg:text-xl text-muted-foreground\" data-testid=\"hero-description\">\n              The world's first AI Art Contest platform powered by the $GLORY token.\n            </h2>\n            <p className=\"text-base sm:text-lg lg:text-xl text-muted-foreground\" data-testid=\"text-hero-subline\">\n              Upload your AI creations. Vote. Win crypto rewards.\n            </p>\n          </div>\n\n          {/* Prompt Search Bar */}\n          <div className={`w-full max-w-2xl px-4 sm:px-0 ${isVisible ? 'animate-fade-in-scale animation-delay-300' : 'opacity-0'}`}>\n            <form onSubmit={handlePromptSubmit} className=\"prompt-bar\">\n              <div className=\"pointer-events-none absolute inset-y-0 left-0 flex items-center pl-4 z-10\">\n                <Search className=\"h-5 w-5 text-gray-400 transition-colors duration-300\" />\n              </div>\n              <input\n                type=\"text\"\n                placeholder=\"Describe your vision...\"\n                value={prompt}\n                onChange={(e) => setPrompt(e.target.value)}\n                className=\"glass w-full rounded-full py-3 sm:py-4 pl-10 sm:pl-12 pr-4 text-white placeholder-gray-400 focus:outline-none focus:rounded-none transition-all duration-300 text-sm sm:text-base relative\"\n                data-testid=\"input-prompt-search\"\n              />\n            </form>\n          </div>\n\n          {/* CTAs */}\n          <div className={`flex flex-col gap-3 sm:gap-4 sm:flex-row w-full sm:w-auto px-4 sm:px-0 ${isVisible ? 'animate-fade-in-up animation-delay-400' : 'opacity-0'}`}>\n            <Link href=\"/explore\" data-testid=\"hero-button-explore\">\n              <GlassButton className=\"px-4 sm:px-6 py-3 text-sm sm:text-base w-full sm:w-auto\">\n                Explore\n              </GlassButton>\n            </Link>\n            <Link href=\"/contests\" data-testid=\"hero-button-contests\">\n              <GlassButton className=\"px-4 sm:px-6 py-3 text-sm sm:text-base w-full sm:w-auto\">\n                Contests\n              </GlassButton>\n            </Link>\n          </div>\n\n          {/* Floating Elements */}\n          <div className=\"absolute -top-10 -left-10 w-20 h-20 bg-primary/10 rounded-full blur-xl animate-pulse-slow animation-delay-200\"></div>\n          <div className=\"absolute -bottom-10 -right-10 w-32 h-32 bg-cyan-400/10 rounded-full blur-xl animate-pulse-slow animation-delay-500\"></div>\n          <div className=\"absolute top-1/2 -right-20 w-16 h-16 bg-pink-400/10 rounded-full blur-xl animate-pulse-slow animation-delay-300\"></div>\n        </div>\n      </section>\n\n      {/* Featured Contest */}\n      {featuredContest && (\n        <section className=\"py-16 md:py-20\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"text-center mb-8\">\n              <h2 className=\"text-3xl font-bold mb-2 gradient-text\">Featured Contest</h2>\n              <p className=\"text-muted-foreground\">Don't miss out on this exclusive competition</p>\n            </div>\n            <div className=\"max-w-5xl mx-auto\">\n              <ContestCard contest={featuredContest} />\n            </div>\n          </div>\n        </section>\n      )}\n\n      {/* Features Grid */}\n      <section className=\"py-16 md:py-24\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-center mb-12\">Why Join 5best?</h2>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 mx-auto mb-4 rounded-full gradient-glory flex items-center justify-center\">\n                <Trophy className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-2\">Compete & Win</h3>\n              <p className=\"text-muted-foreground\">\n                Enter creative contests and earn GLORY rewards. Top 5 submissions get rewarded.\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 mx-auto mb-4 rounded-full gradient-glory flex items-center justify-center\">\n                <svg className=\"h-8 w-8 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n                </svg>\n              </div>\n              <h3 className=\"text-xl font-bold mb-2\">Showcase Talent</h3>\n              <p className=\"text-muted-foreground\">\n                Display your creative work to a vibrant community of artists and creators.\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 mx-auto mb-4 rounded-full gradient-glory flex items-center justify-center\">\n                <svg className=\"h-8 w-8 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\" />\n                </svg>\n              </div>\n              <h3 className=\"text-xl font-bold mb-2\">Join Community</h3>\n              <p className=\"text-muted-foreground\">\n                Connect with fellow creators, vote on submissions, and grow together.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      {!isAuthenticated(user) && (\n        <section className=\"py-16 md:py-24\">\n          <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <h2 className=\"text-3xl sm:text-4xl font-bold mb-4\">\n              Ready to Start Winning?\n            </h2>\n            <p className=\"text-lg text-muted-foreground mb-8\">\n              Join thousands of creators competing for GLORY rewards\n            </p>\n            <div className=\"flex flex-col sm:flex-row items-center justify-center gap-4\">\n              <Link href=\"/register\" data-testid=\"cta-button-register\">\n                <GlassButton className=\"text-lg px-8 py-3\">\n                  Sign Up Now\n                </GlassButton>\n              </Link>\n              <Link href=\"/pricing\" data-testid=\"cta-button-pricing\">\n                <Button size=\"lg\" variant=\"outline\" className=\"text-lg px-8 py-3\">\n                  View Pricing\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </section>\n      )}\n    </div>\n  );\n}\n","size_bytes":8734},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type Contest, \n  type InsertContest,\n  type Submission,\n  type InsertSubmission,\n  type Vote,\n  type InsertVote,\n  type GloryLedger,\n  type InsertGloryLedger,\n  type AuditLog,\n  type InsertAuditLog,\n  type UserWallet,\n  type InsertUserWallet,\n  type CashoutRequest,\n  type InsertCashoutRequest,\n  type CashoutRequestWithRelations,\n  type CashoutEvent,\n  type InsertCashoutEvent,\n  type SiteSettings,\n  type InsertSiteSettings,\n  type AiGeneration,\n  type InsertAiGeneration,\n  type PricingSetting,\n  type InsertPricingSetting,\n  type SubscriptionTier,\n  type InsertSubscriptionTier,\n  type UserSubscription,\n  type InsertUserSubscription,\n  type UserSubscriptionWithTier,\n  type SubscriptionTransaction,\n  type InsertSubscriptionTransaction,\n  type PurchasedPrompt,\n  type InsertPurchasedPrompt,\n  type Image,\n  type InsertImage,\n  type ImageVersion,\n  type InsertImageVersion,\n  type EditJob,\n  type InsertEditJob,\n  type SubmissionWithUser,\n  type ContestWithStats,\n  type UserWithStats,\n  users,\n  contests,\n  submissions,\n  votes,\n  gloryLedger,\n  auditLog,\n  userWallets,\n  cashoutRequests,\n  cashoutEvents,\n  siteSettings,\n  aiGenerations,\n  pricingSettings,\n  subscriptionTiers,\n  userSubscriptions,\n  subscriptionTransactions,\n  purchasedPrompts,\n  images,\n  imageVersions,\n  editJobs\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport bcrypt from \"bcrypt\";\nimport { db } from \"./db\";\nimport { eq, and, desc, sql, count, countDistinct, sum, inArray, gte } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  updateWithdrawalAddress(userId: string, address: string): Promise<User | undefined>;\n  deleteUser(id: string): Promise<void>;\n  getUsersWithFilters(filters: { status?: string; role?: string }): Promise<UserWithStats[]>;\n  getUsersByIds(ids: string[]): Promise<User[]>;\n  bulkDeleteUsers(ids: string[]): Promise<number>;\n  \n  // Contests\n  getContest(id: string): Promise<Contest | undefined>;\n  getContestBySlug(slug: string): Promise<Contest | undefined>;\n  getContests(filters?: { status?: string }): Promise<ContestWithStats[]>;\n  createContest(contest: InsertContest): Promise<Contest>;\n  updateContest(id: string, updates: Partial<Contest>): Promise<Contest | undefined>;\n  deleteContest(id: string): Promise<boolean>;\n  \n  // Submissions\n  getSubmission(id: string): Promise<Submission | undefined>;\n  getSubmissions(filters: { contestId?: string; userId?: string; status?: string; tag?: string; page?: number; limit?: number }): Promise<SubmissionWithUser[]>;\n  createSubmission(submission: InsertSubmission): Promise<Submission>;\n  updateSubmission(id: string, updates: Partial<Submission>): Promise<Submission | undefined>;\n  deleteSubmission(id: string): Promise<boolean>;\n  getTopSubmissionsByContest(contestId: string, limit?: number): Promise<SubmissionWithUser[]>;\n  getUserSubmissionsInContest(userId: string, contestId: string): Promise<number>;\n  \n  // Votes\n  getVote(userId: string, submissionId: string): Promise<Vote | undefined>;\n  createVote(vote: InsertVote): Promise<Vote>;\n  getVoteCountByUser(userId: string, since: Date): Promise<number>;\n  getVoteCountForSubmissionInPeriod(userId: string, submissionId: string, since: Date): Promise<number>;\n  getUserTotalVotesInContest(userId: string, contestId: string): Promise<number>;\n  getUserTotalVotesInContestInPeriod(userId: string, contestId: string, since: Date): Promise<number>;\n  \n  // Glory Ledger (now handles all currencies)\n  createGloryTransaction(transaction: InsertGloryLedger): Promise<GloryLedger>;\n  getGloryTransactions(userId: string, currency?: string): Promise<GloryLedger[]>;\n  getGloryTransactionByHash(txHash: string): Promise<GloryLedger | undefined>;\n  clearGloryTransactions(userId: string): Promise<void>;\n  updateUserBalance(userId: string, delta: number, currency: string): Promise<void>;\n  \n  // Audit Log\n  createAuditLog(log: InsertAuditLog): Promise<AuditLog>;\n  getAuditLogs(limit?: number): Promise<AuditLog[]>;\n  clearAuditLogs(): Promise<void>;\n  \n  // Contest distribution\n  distributeContestRewards(contestId: string): Promise<void>;\n  \n  // User Wallets\n  getUserWallet(userId: string): Promise<UserWallet | undefined>;\n  getUserWalletByAddress(address: string): Promise<UserWallet | undefined>;\n  createUserWallet(wallet: InsertUserWallet): Promise<UserWallet>;\n  updateUserWallet(id: string, updates: Partial<UserWallet>): Promise<UserWallet | undefined>;\n  \n  // Purchased Prompts\n  purchasePrompt(userId: string, submissionId: string): Promise<PurchasedPrompt>;\n  getPurchasedPrompts(userId: string): Promise<PurchasedPrompt[]>;\n  checkIfPromptPurchased(userId: string, submissionId: string): Promise<boolean>;\n  \n  // Cashout Requests\n  getCashoutRequest(id: string): Promise<CashoutRequest | undefined>;\n  getCashoutRequests(filters?: { userId?: string; status?: string }): Promise<CashoutRequestWithRelations[]>;\n  createCashoutRequest(request: InsertCashoutRequest): Promise<CashoutRequest>;\n  updateCashoutRequest(id: string, updates: Partial<CashoutRequest>): Promise<CashoutRequest | undefined>;\n  \n  // Cashout Events\n  createCashoutEvent(event: InsertCashoutEvent): Promise<CashoutEvent>;\n  getCashoutEvents(cashoutRequestId: string): Promise<CashoutEvent[]>;\n  \n  // Site Settings\n  getSiteSettings(): Promise<SiteSettings>;\n  updateSiteSettings(updates: Partial<SiteSettings>): Promise<SiteSettings>;\n  \n  // AI Generations\n  createAiGeneration(generation: InsertAiGeneration): Promise<AiGeneration>;\n  getAiGeneration(id: string): Promise<AiGeneration | undefined>;\n  getAiGenerations(userId: string, limit?: number): Promise<AiGeneration[]>;\n  deleteAiGeneration(id: string): Promise<void>;\n  updateAiGeneration(id: string, updates: Partial<AiGeneration>): Promise<AiGeneration | undefined>;\n  \n  // Image Credits\n  getUserCredits(userId: string): Promise<number>;\n  deductCredits(userId: string, amount: number): Promise<boolean>;\n  addCredits(userId: string, amount: number): Promise<void>;\n  \n  // Pricing Settings\n  getPricingSetting(key: string): Promise<number | undefined>;\n  getAllPricingSettings(): Promise<Map<string, number>>;\n  updatePricingSetting(key: string, value: number): Promise<void>;\n  \n  // Subscription Tiers\n  getSubscriptionTiers(): Promise<SubscriptionTier[]>;\n  getSubscriptionTier(id: string): Promise<SubscriptionTier | undefined>;\n  getSubscriptionTierBySlug(slug: string): Promise<SubscriptionTier | undefined>;\n  createSubscriptionTier(tier: InsertSubscriptionTier): Promise<SubscriptionTier>;\n  updateSubscriptionTier(id: string, updates: Partial<SubscriptionTier>): Promise<SubscriptionTier | undefined>;\n  deleteSubscriptionTier(id: string): Promise<void>;\n  \n  // User Subscriptions\n  getUserSubscription(userId: string): Promise<UserSubscriptionWithTier | undefined>;\n  getUserSubscriptionById(id: string): Promise<UserSubscriptionWithTier | undefined>;\n  createUserSubscription(subscription: InsertUserSubscription): Promise<UserSubscription>;\n  updateUserSubscription(id: string, updates: Partial<UserSubscription>): Promise<UserSubscription | undefined>;\n  cancelUserSubscription(subscriptionId: string): Promise<void>;\n  \n  // Subscription Transactions\n  createSubscriptionTransaction(transaction: InsertSubscriptionTransaction): Promise<SubscriptionTransaction>;\n  getSubscriptionTransactions(filters: { userId?: string; subscriptionId?: string }): Promise<SubscriptionTransaction[]>;\n  \n  // Helper Methods\n  canUserAccessModel(userId: string, modelSlug: string): Promise<boolean>;\n  canUserEdit(userId: string): Promise<boolean>;\n  canUserUpscale(userId: string): Promise<boolean>;\n  getUserTierCommissions(userId: string): Promise<{ promptCommission: number; imageCommission: number }>;\n  grantMonthlyCredits(userId: string): Promise<void>;\n  refreshSubscriptionIfNeeded(userId: string): Promise<boolean>;\n  \n  // Pro Edit: Images\n  createImage(image: InsertImage): Promise<Image>;\n  getImage(id: string): Promise<Image | undefined>;\n  getImagesByUserId(userId: string): Promise<Image[]>;\n  updateImage(id: string, updates: Partial<Image>): Promise<Image | undefined>;\n  \n  // Pro Edit: Image Versions\n  createImageVersion(version: InsertImageVersion): Promise<ImageVersion>;\n  getImageVersion(id: string): Promise<ImageVersion | undefined>;\n  getImageVersionsByImageId(imageId: string): Promise<ImageVersion[]>;\n  getCurrentImageVersion(imageId: string): Promise<ImageVersion | undefined>;\n  unsetCurrentVersions(imageId: string): Promise<void>; // Mark all versions as not current\n  \n  // Pro Edit: Edit Jobs\n  createEditJob(job: InsertEditJob): Promise<EditJob>;\n  getEditJob(id: string): Promise<EditJob | undefined>;\n  getEditJobsByUserId(userId: string): Promise<EditJob[]>;\n  getEditJobsByImageId(imageId: string): Promise<EditJob[]>;\n  updateEditJob(id: string, updates: Partial<EditJob>): Promise<EditJob | undefined>;\n  \n  // Pro Edit: Credit Management\n  refundAiCredits(userId: string, amount: number, reason: string, jobId: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private contests: Map<string, Contest> = new Map();\n  private submissions: Map<string, Submission> = new Map();\n  private votes: Map<string, Vote> = new Map();\n  private gloryLedger: Map<string, GloryLedger> = new Map();\n  private auditLogs: Map<string, AuditLog> = new Map();\n\n  constructor() {\n    this.seedData();\n  }\n\n  private async seedData() {\n    // Create admin user\n    const adminPasswordHash = await bcrypt.hash(\"Admin123!\", 10);\n    const adminUser: User = {\n      id: randomUUID(),\n      username: \"admin\",\n      email: \"bellapokerstars@gmail.com\",\n      passwordHash: adminPasswordHash,\n      avatarUrl: null,\n      role: \"admin\",\n      status: \"approved\",\n      gloryBalance: 0,\n      solBalance: \"0\",\n      usdcBalance: \"0\",\n      imageCredits: 100,\n      withdrawalAddress: null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.users.set(adminUser.id, adminUser);\n\n    // Create sample approved users\n    const users = [\n      { username: \"tbppworld\", email: \"tbppworld@gmail.com\", gloryBalance: 0 },\n      { username: \"creative_legend\", email: \"legend@example.com\", gloryBalance: 12380 },\n      { username: \"design_master\", email: \"master@example.com\", gloryBalance: 8450 },\n      { username: \"pixel_wizard\", email: \"wizard@example.com\", gloryBalance: 7920 },\n      { username: \"art_jones\", email: \"jones@example.com\", gloryBalance: 6850 },\n      { username: \"video_king\", email: \"king@example.com\", gloryBalance: 5420 }\n    ];\n\n    for (const userData of users) {\n      const passwordHash = await bcrypt.hash(\"password123\", 10);\n      const user: User = {\n        id: randomUUID(),\n        username: userData.username,\n        email: userData.email,\n        passwordHash,\n        avatarUrl: null,\n        role: \"user\",\n        status: \"approved\",\n        gloryBalance: userData.gloryBalance,\n        solBalance: \"0\",\n        usdcBalance: \"0\",\n        imageCredits: 100,\n        withdrawalAddress: null,\n        createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000),\n        updatedAt: new Date()\n      };\n      this.users.set(user.id, user);\n    }\n\n    // Create active contest\n    const contest: Contest = {\n      id: randomUUID(),\n      title: \"Weekly Top 5 Challenge\",\n      slug: \"weekly-top-5\",\n      description: \"Submit your best creative work this week! Top 5 submissions share a prize pool of 1,000 GLORY points.\",\n      rules: \"Submit original artwork only (images or videos up to 100MB). One submission per user per contest. Voting ends when the contest timer reaches zero. Top 5 submissions win GLORY: 40%, 25%, 15%, 10%, 10%. Admin approval required before submissions are visible.\",\n      coverImageUrl: null,\n      status: \"active\",\n      prizeGlory: \"1000\",\n      startAt: new Date(),\n      endAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days from now\n      config: {\n        votesPerUserPerPeriod: 1,\n        periodDurationHours: 24,\n        totalVotesPerUser: 0\n      },\n      createdAt: new Date()\n    };\n    this.contests.set(contest.id, contest);\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = {\n      ...insertUser,\n      id,\n      avatarUrl: insertUser.avatarUrl || null,\n      role: insertUser.role || \"user\",\n      status: insertUser.status || \"pending\",\n      gloryBalance: 0,\n      solBalance: \"0\",\n      usdcBalance: \"0\",\n      imageCredits: 100,\n      withdrawalAddress: insertUser.withdrawalAddress || null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...updates, updatedAt: new Date() };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async updateWithdrawalAddress(userId: string, address: string): Promise<User | undefined> {\n    return this.updateUser(userId, { withdrawalAddress: address });\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    this.users.delete(id);\n    // Cascade delete related data\n    Array.from(this.submissions.values())\n      .filter(s => s.userId === id)\n      .forEach(s => this.submissions.delete(s.id));\n    Array.from(this.votes.values())\n      .filter(v => v.userId === id)\n      .forEach(v => this.votes.delete(v.id));\n    Array.from(this.gloryLedger.values())\n      .filter(g => g.userId === id)\n      .forEach(g => this.gloryLedger.delete(g.id));\n    Array.from(this.auditLogs.values())\n      .filter(a => a.actorUserId === id)\n      .forEach(a => this.auditLogs.delete(a.id));\n  }\n\n  async getUsersWithFilters(filters: { status?: string; role?: string }): Promise<UserWithStats[]> {\n    const users = Array.from(this.users.values());\n    let filtered = users;\n\n    if (filters.status) {\n      filtered = filtered.filter(user => user.status === filters.status);\n    }\n    if (filters.role) {\n      filtered = filtered.filter(user => user.role === filters.role);\n    }\n\n    return filtered.map(user => ({\n      ...user,\n      submissionCount: Array.from(this.submissions.values()).filter(s => s.userId === user.id).length,\n      totalVotes: Array.from(this.submissions.values())\n        .filter(s => s.userId === user.id)\n        .reduce((sum, s) => sum + s.votesCount, 0),\n      contestWins: 0 // TODO: implement win tracking\n    }));\n  }\n\n  async getUsersByIds(ids: string[]): Promise<User[]> {\n    return ids.map(id => this.users.get(id)).filter((u): u is User => u !== undefined);\n  }\n\n  async bulkDeleteUsers(ids: string[]): Promise<number> {\n    let deletedCount = 0;\n    \n    for (const userId of ids) {\n      if (this.users.has(userId)) {\n        // Delete user's submissions\n        const userSubmissions = Array.from(this.submissions.values()).filter(s => s.userId === userId);\n        for (const submission of userSubmissions) {\n          this.submissions.delete(submission.id);\n          // Delete votes on this submission\n          Array.from(this.votes.keys()).forEach(voteId => {\n            const vote = this.votes.get(voteId);\n            if (vote && vote.submissionId === submission.id) {\n              this.votes.delete(voteId);\n            }\n          });\n        }\n        \n        // Delete user's votes\n        Array.from(this.votes.keys()).forEach(voteId => {\n          const vote = this.votes.get(voteId);\n          if (vote && vote.userId === userId) {\n            this.votes.delete(voteId);\n          }\n        });\n        \n        // Delete user's glory ledger entries\n        Array.from(this.gloryLedger.keys()).forEach(ledgerId => {\n          const entry = this.gloryLedger.get(ledgerId);\n          if (entry && entry.userId === userId) {\n            this.gloryLedger.delete(ledgerId);\n          }\n        });\n        \n        // Finally delete the user\n        this.users.delete(userId);\n        deletedCount++;\n      }\n    }\n    \n    return deletedCount;\n  }\n\n  // Contests\n  async getContest(id: string): Promise<Contest | undefined> {\n    return this.contests.get(id);\n  }\n\n  async getContestBySlug(slug: string): Promise<Contest | undefined> {\n    return Array.from(this.contests.values()).find(contest => contest.slug === slug);\n  }\n\n  async getContests(filters?: { status?: string }): Promise<ContestWithStats[]> {\n    let contests = Array.from(this.contests.values());\n    \n    if (filters?.status) {\n      contests = contests.filter(contest => contest.status === filters.status);\n    }\n\n    return contests.map(contest => {\n      const submissions = Array.from(this.submissions.values()).filter(s => s.contestId === contest.id);\n      const approvedSubmissions = submissions.filter(s => s.status === 'approved');\n      const uniqueUsers = new Set(submissions.map(s => s.userId));\n      \n      // Find top submission by votes (for cover image)\n      const topSubmission = approvedSubmissions.length > 0\n        ? approvedSubmissions.reduce((top, current) => \n            current.votesCount > top.votesCount ? current : top\n          )\n        : null;\n      \n      return {\n        ...contest,\n        submissionCount: submissions.length,\n        participantCount: uniqueUsers.size,\n        totalVotes: submissions.reduce((sum, s) => sum + s.votesCount, 0),\n        topSubmissionImageUrl: topSubmission?.mediaUrl || null\n      };\n    });\n  }\n\n  async createContest(insertContest: InsertContest): Promise<Contest> {\n    const id = randomUUID();\n    const contest: Contest = {\n      ...insertContest,\n      id,\n      status: insertContest.status || \"draft\",\n      coverImageUrl: insertContest.coverImageUrl || null,\n      prizeGlory: insertContest.prizeGlory || \"0\",\n      config: insertContest.config || null,\n      createdAt: new Date()\n    };\n    this.contests.set(id, contest);\n    return contest;\n  }\n\n  async updateContest(id: string, updates: Partial<Contest>): Promise<Contest | undefined> {\n    const contest = this.contests.get(id);\n    if (!contest) return undefined;\n    \n    const updatedContest = { ...contest, ...updates };\n    this.contests.set(id, updatedContest);\n    return updatedContest;\n  }\n\n  async deleteContest(id: string): Promise<boolean> {\n    return this.contests.delete(id);\n  }\n\n  // Submissions\n  async getSubmission(id: string): Promise<Submission | undefined> {\n    return this.submissions.get(id);\n  }\n\n  async getSubmissions(filters: { contestId?: string; userId?: string; status?: string; tag?: string; page?: number; limit?: number }): Promise<SubmissionWithUser[]> {\n    let submissions = Array.from(this.submissions.values());\n    \n    if (filters.contestId) {\n      submissions = submissions.filter(s => s.contestId === filters.contestId);\n    }\n    if (filters.userId) {\n      submissions = submissions.filter(s => s.userId === filters.userId);\n    }\n    if (filters.status) {\n      submissions = submissions.filter(s => s.status === filters.status);\n    }\n    if (filters.tag) {\n      submissions = submissions.filter(s => s.tags && s.tags.some(t => t.toLowerCase().includes(filters.tag!.toLowerCase())));\n    }\n\n    // Sort by creation date (newest first)\n    submissions = submissions.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n\n    // Apply pagination\n    const page = filters.page || 1;\n    const limit = filters.limit || 20;\n    const offset = (page - 1) * limit;\n    const paginatedSubmissions = submissions.slice(offset, offset + limit);\n\n    return paginatedSubmissions.map(submission => {\n        const user = this.users.get(submission.userId)!;\n        const contest = submission.contestId ? this.contests.get(submission.contestId) : null;\n        \n        return {\n          ...submission,\n          user: { id: user.id, username: user.username },\n          contest: contest ? { id: contest.id, title: contest.title } : { id: '', title: submission.contestName || 'Deleted Contest' }\n        };\n      });\n  }\n\n  async createSubmission(insertSubmission: InsertSubmission): Promise<Submission> {\n    const id = randomUUID();\n    const submission: Submission = {\n      ...insertSubmission,\n      id,\n      status: insertSubmission.status || \"pending\",\n      description: insertSubmission.description || null,\n      contestId: insertSubmission.contestId || null,\n      contestName: insertSubmission.contestName || null,\n      thumbnailUrl: insertSubmission.thumbnailUrl || null,\n      tags: insertSubmission.tags || null,\n      cloudinaryPublicId: insertSubmission.cloudinaryPublicId || null,\n      cloudinaryResourceType: insertSubmission.cloudinaryResourceType || null,\n      entryFeeAmount: insertSubmission.entryFeeAmount || null,\n      entryFeeCurrency: insertSubmission.entryFeeCurrency || null,\n      category: insertSubmission.category || null,\n      aiModel: insertSubmission.aiModel || null,\n      prompt: insertSubmission.prompt || null,\n      generationId: insertSubmission.generationId || null,\n      promptForSale: insertSubmission.promptForSale || false,\n      promptPrice: insertSubmission.promptPrice || null,\n      promptCurrency: insertSubmission.promptCurrency || null,\n      votesCount: 0,\n      isEnhanced: false,\n      createdAt: new Date()\n    };\n    this.submissions.set(id, submission);\n    return submission;\n  }\n\n  async updateSubmission(id: string, updates: Partial<Submission>): Promise<Submission | undefined> {\n    const submission = this.submissions.get(id);\n    if (!submission) return undefined;\n    \n    const updatedSubmission = { ...submission, ...updates };\n    this.submissions.set(id, updatedSubmission);\n    return updatedSubmission;\n  }\n\n  async deleteSubmission(id: string): Promise<boolean> {\n    return this.submissions.delete(id);\n  }\n\n  async getTopSubmissionsByContest(contestId: string, limit = 10): Promise<SubmissionWithUser[]> {\n    const submissions = await this.getSubmissions({ contestId, status: \"approved\" });\n    return submissions\n      .sort((a, b) => b.votesCount - a.votesCount)\n      .slice(0, limit);\n  }\n\n  async getUserSubmissionsInContest(userId: string, contestId: string): Promise<number> {\n    return Array.from(this.submissions.values()).filter(\n      submission => submission.userId === userId && submission.contestId === contestId\n    ).length;\n  }\n\n  // Votes\n  async getVote(userId: string, submissionId: string): Promise<Vote | undefined> {\n    return Array.from(this.votes.values()).find(\n      vote => vote.userId === userId && vote.submissionId === submissionId\n    );\n  }\n\n  async createVote(insertVote: InsertVote): Promise<Vote> {\n    const id = randomUUID();\n    const vote: Vote = {\n      ...insertVote,\n      id,\n      createdAt: new Date()\n    };\n    this.votes.set(id, vote);\n\n    // Update submission vote count\n    const submission = this.submissions.get(insertVote.submissionId);\n    if (submission) {\n      submission.votesCount += 1;\n      this.submissions.set(submission.id, submission);\n    }\n\n    return vote;\n  }\n\n  async getVoteCountByUser(userId: string, since: Date): Promise<number> {\n    return Array.from(this.votes.values()).filter(\n      vote => vote.userId === userId && vote.createdAt >= since\n    ).length;\n  }\n\n  async getVoteCountForSubmissionInPeriod(userId: string, submissionId: string, since: Date): Promise<number> {\n    return Array.from(this.votes.values()).filter(\n      vote => vote.userId === userId && vote.submissionId === submissionId && vote.createdAt >= since\n    ).length;\n  }\n\n  async getUserTotalVotesInContest(userId: string, contestId: string): Promise<number> {\n    const contestSubmissions = Array.from(this.submissions.values()).filter(\n      submission => submission.contestId === contestId\n    );\n    const submissionIds = contestSubmissions.map(s => s.id);\n    \n    return Array.from(this.votes.values()).filter(\n      vote => vote.userId === userId && submissionIds.includes(vote.submissionId)\n    ).length;\n  }\n\n  async getUserTotalVotesInContestInPeriod(userId: string, contestId: string, since: Date): Promise<number> {\n    const contestSubmissions = Array.from(this.submissions.values()).filter(\n      submission => submission.contestId === contestId\n    );\n    const submissionIds = contestSubmissions.map(s => s.id);\n    \n    return Array.from(this.votes.values()).filter(\n      vote => vote.userId === userId && submissionIds.includes(vote.submissionId) && vote.createdAt >= since\n    ).length;\n  }\n\n  // Glory Ledger\n  async createGloryTransaction(insertTransaction: InsertGloryLedger): Promise<GloryLedger> {\n    const id = randomUUID();\n    const transaction: GloryLedger = {\n      ...insertTransaction,\n      id,\n      currency: insertTransaction.currency || \"GLORY\",\n      contestId: insertTransaction.contestId || null,\n      submissionId: insertTransaction.submissionId || null,\n      txHash: insertTransaction.txHash || null,\n      metadata: insertTransaction.metadata || null,\n      createdAt: new Date()\n    };\n    this.gloryLedger.set(id, transaction);\n    \n    // Update user balance\n    await this.updateUserBalance(transaction.userId, transaction.delta, transaction.currency);\n    \n    return transaction;\n  }\n\n  async getGloryTransactions(userId: string, currency?: string): Promise<GloryLedger[]> {\n    return Array.from(this.gloryLedger.values())\n      .filter(transaction => \n        transaction.userId === userId && \n        (!currency || transaction.currency === currency)\n      )\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getGloryTransactionByHash(txHash: string): Promise<GloryLedger | undefined> {\n    return Array.from(this.gloryLedger.values())\n      .find(transaction => transaction.txHash === txHash);\n  }\n\n  async clearGloryTransactions(userId: string): Promise<void> {\n    // Delete all transactions for this user\n    const userTransactions = Array.from(this.gloryLedger.entries())\n      .filter(([_, transaction]) => transaction.userId === userId);\n    \n    for (const [id, _] of userTransactions) {\n      this.gloryLedger.delete(id);\n    }\n  }\n\n  async updateUserBalance(userId: string, delta: string | number, currency: string): Promise<void> {\n    const user = this.users.get(userId);\n    if (user) {\n      if (currency === \"GLORY\") {\n        user.gloryBalance += typeof delta === 'string' ? Number(delta) : delta;\n      } else if (currency === \"SOL\") {\n        const currentBalance = Number(user.solBalance || \"0\");\n        const deltaNum = typeof delta === 'string' ? Number(delta) : delta;\n        user.solBalance = (currentBalance + deltaNum).toString();\n      } else if (currency === \"USDC\") {\n        const currentBalance = Number(user.usdcBalance || \"0\");\n        const deltaNum = typeof delta === 'string' ? Number(delta) : delta;\n        user.usdcBalance = (currentBalance + deltaNum).toString();\n      }\n      user.updatedAt = new Date();\n      this.users.set(userId, user);\n    }\n  }\n\n  // Audit Log\n  async createAuditLog(insertLog: InsertAuditLog): Promise<AuditLog> {\n    const id = randomUUID();\n    const log: AuditLog = {\n      ...insertLog,\n      id,\n      meta: insertLog.meta || null,\n      createdAt: new Date()\n    };\n    this.auditLogs.set(id, log);\n    return log;\n  }\n\n  async getAuditLogs(limit = 100): Promise<AuditLog[]> {\n    return Array.from(this.auditLogs.values())\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime())\n      .slice(0, limit);\n  }\n\n  async clearAuditLogs(): Promise<void> {\n    this.auditLogs.clear();\n  }\n\n  // Contest distribution\n  async distributeContestRewards(contestId: string): Promise<void> {\n    const contest = this.contests.get(contestId);\n    \n    if (!contest || contest.status !== \"active\") {\n      return;\n    }\n\n    // Get prize distribution from config (fixed amounts) or use default percentages\n    const config = contest.config as any;\n    const currency = config?.currency || \"GLORY\";\n    let prizes: number[] = [];\n    \n    if (config?.prizeDistribution && Array.isArray(config.prizeDistribution)) {\n      // Use fixed prize amounts from config\n      prizes = config.prizeDistribution\n        .map((p: any) => Number(p.value))\n        .filter((v: number) => !isNaN(v) && v > 0);\n    } else {\n      // Fallback to percentage-based distribution\n      const defaultPercentages = [0.4, 0.25, 0.15, 0.1, 0.1];\n      prizes = defaultPercentages.map(p => Math.floor(Number(contest.prizeGlory) * p));\n    }\n\n    // Get top N submissions based on number of prizes\n    const topSubmissions = await this.getTopSubmissionsByContest(contestId, prizes.length);\n    const numPrizes = Math.min(topSubmissions.length, prizes.length);\n    \n    for (let i = 0; i < numPrizes; i++) {\n      const submission = topSubmissions[i];\n      const prize = prizes[i];\n      \n      // Create transaction with the contest's currency\n      await this.createGloryTransaction({\n        userId: submission.userId,\n        delta: prize.toString(),\n        currency: currency,\n        reason: `Contest Prize - ${i + 1}${i === 0 ? 'st' : i === 1 ? 'nd' : i === 2 ? 'rd' : 'th'} Place`,\n        contestId: contestId,\n        submissionId: submission.id\n      });\n    }\n\n    // Update contest status to ended\n    contest.status = \"ended\";\n    this.contests.set(contestId, contest);\n  }\n\n  // User Wallets (MemStorage - not used in production)\n  async getUserWallet(userId: string): Promise<UserWallet | undefined> {\n    throw new Error(\"MemStorage wallet methods not implemented\");\n  }\n\n  async getUserWalletByAddress(address: string): Promise<UserWallet | undefined> {\n    throw new Error(\"MemStorage wallet methods not implemented\");\n  }\n\n  async createUserWallet(wallet: InsertUserWallet): Promise<UserWallet> {\n    throw new Error(\"MemStorage wallet methods not implemented\");\n  }\n\n  async updateUserWallet(id: string, updates: Partial<UserWallet>): Promise<UserWallet | undefined> {\n    throw new Error(\"MemStorage wallet methods not implemented\");\n  }\n\n  // Purchased Prompts (MemStorage - not used in production)\n  async purchasePrompt(userId: string, submissionId: string): Promise<PurchasedPrompt> {\n    throw new Error(\"MemStorage purchased prompts methods not implemented\");\n  }\n\n  async getPurchasedPrompts(userId: string): Promise<PurchasedPrompt[]> {\n    throw new Error(\"MemStorage purchased prompts methods not implemented\");\n  }\n\n  async checkIfPromptPurchased(userId: string, submissionId: string): Promise<boolean> {\n    throw new Error(\"MemStorage purchased prompts methods not implemented\");\n  }\n\n  // Cashout Requests (MemStorage - not used in production)\n  async getCashoutRequest(id: string): Promise<CashoutRequest | undefined> {\n    throw new Error(\"MemStorage cashout methods not implemented\");\n  }\n\n  async getCashoutRequests(filters?: { userId?: string; status?: string }): Promise<CashoutRequestWithRelations[]> {\n    throw new Error(\"MemStorage cashout methods not implemented\");\n  }\n\n  async createCashoutRequest(request: InsertCashoutRequest): Promise<CashoutRequest> {\n    throw new Error(\"MemStorage cashout methods not implemented\");\n  }\n\n  async updateCashoutRequest(id: string, updates: Partial<CashoutRequest>): Promise<CashoutRequest | undefined> {\n    throw new Error(\"MemStorage cashout methods not implemented\");\n  }\n\n  // Cashout Events (MemStorage - not used in production)\n  async createCashoutEvent(event: InsertCashoutEvent): Promise<CashoutEvent> {\n    throw new Error(\"MemStorage cashout methods not implemented\");\n  }\n\n  async getCashoutEvents(cashoutRequestId: string): Promise<CashoutEvent[]> {\n    throw new Error(\"MemStorage cashout methods not implemented\");\n  }\n\n  // Site Settings (MemStorage - not used in production)\n  async getSiteSettings(): Promise<SiteSettings> {\n    throw new Error(\"MemStorage site settings methods not implemented\");\n  }\n\n  async updateSiteSettings(updates: Partial<SiteSettings>): Promise<SiteSettings> {\n    throw new Error(\"MemStorage site settings methods not implemented\");\n  }\n\n  // AI Generations (MemStorage - not used in production)\n  async createAiGeneration(generation: InsertAiGeneration): Promise<AiGeneration> {\n    throw new Error(\"MemStorage AI generation methods not implemented\");\n  }\n\n  async getAiGeneration(id: string): Promise<AiGeneration | undefined> {\n    throw new Error(\"MemStorage AI generation methods not implemented\");\n  }\n\n  async getAiGenerations(userId: string, limit?: number): Promise<AiGeneration[]> {\n    throw new Error(\"MemStorage AI generation methods not implemented\");\n  }\n\n  async deleteAiGeneration(id: string): Promise<void> {\n    throw new Error(\"MemStorage AI generation methods not implemented\");\n  }\n\n  async updateAiGeneration(id: string, updates: Partial<AiGeneration>): Promise<AiGeneration | undefined> {\n    throw new Error(\"MemStorage AI generation methods not implemented\");\n  }\n\n  // Image Credits (MemStorage - not used in production)\n  async getUserCredits(userId: string): Promise<number> {\n    throw new Error(\"MemStorage credit methods not implemented\");\n  }\n\n  async deductCredits(userId: string, amount: number): Promise<boolean> {\n    throw new Error(\"MemStorage credit methods not implemented\");\n  }\n\n  async addCredits(userId: string, amount: number): Promise<void> {\n    throw new Error(\"MemStorage credit methods not implemented\");\n  }\n\n  // Pricing Settings (MemStorage - not used in production)\n  async getPricingSetting(key: string): Promise<number | undefined> {\n    throw new Error(\"MemStorage pricing methods not implemented\");\n  }\n\n  async getAllPricingSettings(): Promise<Map<string, number>> {\n    throw new Error(\"MemStorage pricing methods not implemented\");\n  }\n\n  async updatePricingSetting(key: string, value: number): Promise<void> {\n    throw new Error(\"MemStorage pricing methods not implemented\");\n  }\n\n  // Subscription Tiers (MemStorage - not used in production)\n  async getSubscriptionTiers(): Promise<SubscriptionTier[]> {\n    throw new Error(\"MemStorage subscription methods not implemented\");\n  }\n\n  async getSubscriptionTier(id: string): Promise<SubscriptionTier | undefined> {\n    throw new Error(\"MemStorage subscription methods not implemented\");\n  }\n\n  async getSubscriptionTierBySlug(slug: string): Promise<SubscriptionTier | undefined> {\n    throw new Error(\"MemStorage subscription methods not implemented\");\n  }\n\n  async createSubscriptionTier(tier: InsertSubscriptionTier): Promise<SubscriptionTier> {\n    throw new Error(\"MemStorage subscription methods not implemented\");\n  }\n\n  async updateSubscriptionTier(id: string, updates: Partial<SubscriptionTier>): Promise<SubscriptionTier | undefined> {\n    throw new Error(\"MemStorage subscription methods not implemented\");\n  }\n\n  async deleteSubscriptionTier(id: string): Promise<void> {\n    throw new Error(\"MemStorage subscription methods not implemented\");\n  }\n\n  // User Subscriptions (MemStorage - not used in production)\n  async getUserSubscription(userId: string): Promise<UserSubscriptionWithTier | undefined> {\n    throw new Error(\"MemStorage subscription methods not implemented\");\n  }\n\n  async getUserSubscriptionById(id: string): Promise<UserSubscriptionWithTier | undefined> {\n    throw new Error(\"MemStorage subscription methods not implemented\");\n  }\n\n  async createUserSubscription(subscription: InsertUserSubscription): Promise<UserSubscription> {\n    throw new Error(\"MemStorage subscription methods not implemented\");\n  }\n\n  async updateUserSubscription(id: string, updates: Partial<UserSubscription>): Promise<UserSubscription | undefined> {\n    throw new Error(\"MemStorage subscription methods not implemented\");\n  }\n\n  async cancelUserSubscription(subscriptionId: string): Promise<void> {\n    throw new Error(\"MemStorage subscription methods not implemented\");\n  }\n\n  // Subscription Transactions (MemStorage - not used in production)\n  async createSubscriptionTransaction(transaction: InsertSubscriptionTransaction): Promise<SubscriptionTransaction> {\n    throw new Error(\"MemStorage subscription methods not implemented\");\n  }\n\n  async getSubscriptionTransactions(filters: { userId?: string; subscriptionId?: string }): Promise<SubscriptionTransaction[]> {\n    throw new Error(\"MemStorage subscription methods not implemented\");\n  }\n\n  // Helper Methods (MemStorage - not used in production)\n  async canUserAccessModel(userId: string, modelSlug: string): Promise<boolean> {\n    throw new Error(\"MemStorage subscription methods not implemented\");\n  }\n\n  async canUserEdit(userId: string): Promise<boolean> {\n    throw new Error(\"MemStorage subscription methods not implemented\");\n  }\n\n  async canUserUpscale(userId: string): Promise<boolean> {\n    throw new Error(\"MemStorage subscription methods not implemented\");\n  }\n\n  async getUserTierCommissions(userId: string): Promise<{ promptCommission: number; imageCommission: number }> {\n    throw new Error(\"MemStorage subscription methods not implemented\");\n  }\n\n  async grantMonthlyCredits(userId: string): Promise<void> {\n    throw new Error(\"MemStorage subscription methods not implemented\");\n  }\n\n  async refreshSubscriptionIfNeeded(userId: string): Promise<boolean> {\n    throw new Error(\"MemStorage subscription methods not implemented\");\n  }\n\n  // Pro Edit methods (stub implementations - use DbStorage for Pro Edit)\n  async createImage(image: InsertImage): Promise<Image> {\n    throw new Error(\"MemStorage does not support Pro Edit - use DbStorage\");\n  }\n\n  async getImage(id: string): Promise<Image | undefined> {\n    throw new Error(\"MemStorage does not support Pro Edit - use DbStorage\");\n  }\n\n  async getImagesByUserId(userId: string): Promise<Image[]> {\n    throw new Error(\"MemStorage does not support Pro Edit - use DbStorage\");\n  }\n\n  async updateImage(id: string, updates: Partial<Image>): Promise<Image | undefined> {\n    throw new Error(\"MemStorage does not support Pro Edit - use DbStorage\");\n  }\n\n  async createImageVersion(version: InsertImageVersion): Promise<ImageVersion> {\n    throw new Error(\"MemStorage does not support Pro Edit - use DbStorage\");\n  }\n\n  async getImageVersion(id: string): Promise<ImageVersion | undefined> {\n    throw new Error(\"MemStorage does not support Pro Edit - use DbStorage\");\n  }\n\n  async getImageVersionsByImageId(imageId: string): Promise<ImageVersion[]> {\n    throw new Error(\"MemStorage does not support Pro Edit - use DbStorage\");\n  }\n\n  async getCurrentImageVersion(imageId: string): Promise<ImageVersion | undefined> {\n    throw new Error(\"MemStorage does not support Pro Edit - use DbStorage\");\n  }\n\n  async unsetCurrentVersions(imageId: string): Promise<void> {\n    throw new Error(\"MemStorage does not support Pro Edit - use DbStorage\");\n  }\n\n  async createEditJob(job: InsertEditJob): Promise<EditJob> {\n    throw new Error(\"MemStorage does not support Pro Edit - use DbStorage\");\n  }\n\n  async getEditJob(id: string): Promise<EditJob | undefined> {\n    throw new Error(\"MemStorage does not support Pro Edit - use DbStorage\");\n  }\n\n  async getEditJobsByUserId(userId: string): Promise<EditJob[]> {\n    throw new Error(\"MemStorage does not support Pro Edit - use DbStorage\");\n  }\n\n  async getEditJobsByImageId(imageId: string): Promise<EditJob[]> {\n    throw new Error(\"MemStorage does not support Pro Edit - use DbStorage\");\n  }\n\n  async updateEditJob(id: string, updates: Partial<EditJob>): Promise<EditJob | undefined> {\n    throw new Error(\"MemStorage does not support Pro Edit - use DbStorage\");\n  }\n\n  async refundAiCredits(userId: string, amount: number, reason: string, jobId: string): Promise<boolean> {\n    throw new Error(\"MemStorage does not support Pro Edit - use DbStorage\");\n  }\n}\n\nexport class DbStorage implements IStorage {\n  constructor() {\n    this.seedDatabase().catch(err => {\n      console.error(\"[DB] Failed to seed database:\", err);\n    });\n  }\n\n  private async seedDatabase() {\n    const existingAdmin = await db.query.users.findFirst({\n      where: eq(users.email, \"bellapokerstars@gmail.com\")\n    });\n\n    if (!existingAdmin) {\n      const adminPasswordHash = await bcrypt.hash(\"Admin123!\", 10);\n      await db.insert(users).values({\n        username: \"admin\",\n        email: \"bellapokerstars@gmail.com\",\n        passwordHash: adminPasswordHash,\n        role: \"admin\",\n        status: \"approved\",\n        gloryBalance: 0\n      });\n    }\n\n    // Seed pricing settings if they don't exist\n    const existingPricing = await db.query.pricingSettings.findFirst();\n    if (!existingPricing) {\n      const defaultPricing = [\n        { key: \"leonardo\", value: 1 },\n        { key: \"nano-banana\", value: 12 },\n        { key: \"flux-1.1-pro\", value: 12 },\n        { key: \"sd-3.5-large\", value: 20 },\n        { key: \"ideogram-v3\", value: 27 },\n        { key: \"upscale\", value: 5 }\n      ];\n\n      await db.insert(pricingSettings).values(defaultPricing);\n    }\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.query.users.findFirst({\n      where: eq(users.id, id)\n    });\n    return result;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.query.users.findFirst({\n      where: eq(users.email, email)\n    });\n    return result;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.query.users.findFirst({\n      where: eq(users.username, username)\n    });\n    return result;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user as User;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const [user] = await db.update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async updateWithdrawalAddress(userId: string, address: string): Promise<User | undefined> {\n    return this.updateUser(userId, { withdrawalAddress: address });\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    await db.delete(users).where(eq(users.id, id));\n    // Cascade delete is handled by database constraints\n  }\n\n  async getUsersWithFilters(filters: { status?: string; role?: string }): Promise<UserWithStats[]> {\n    const conditions = [];\n    if (filters.status) conditions.push(eq(users.status, filters.status));\n    if (filters.role) conditions.push(eq(users.role, filters.role));\n\n    const usersData = await db.query.users.findMany({\n      where: conditions.length > 0 ? and(...conditions) : undefined\n    });\n\n    const result: UserWithStats[] = [];\n    for (const user of usersData) {\n      const submissionCount = await db.select({ count: count() })\n        .from(submissions)\n        .where(eq(submissions.userId, user.id));\n      \n      const totalVotesResult = await db.select({ total: sum(submissions.votesCount) })\n        .from(submissions)\n        .where(eq(submissions.userId, user.id));\n\n      result.push({\n        ...user,\n        submissionCount: submissionCount[0]?.count || 0,\n        totalVotes: Number(totalVotesResult[0]?.total) || 0,\n        contestWins: 0\n      });\n    }\n\n    return result;\n  }\n\n  async getUsersByIds(ids: string[]): Promise<User[]> {\n    if (ids.length === 0) return [];\n    \n    const result = await db.query.users.findMany({\n      where: inArray(users.id, ids)\n    });\n    return result;\n  }\n\n  async bulkDeleteUsers(ids: string[]): Promise<number> {\n    if (ids.length === 0) return 0;\n    \n    try {\n      // Since neon-http doesn't support transactions, we'll delete in proper order\n      // to maintain referential integrity as much as possible\n      \n      // Get user submissions to delete associated votes\n      const userSubmissions = await db.select({ id: submissions.id })\n        .from(submissions)\n        .where(inArray(submissions.userId, ids));\n\n      const submissionIds = userSubmissions.map(s => s.id);\n\n      // Delete votes on user submissions first\n      if (submissionIds.length > 0) {\n        await db.delete(votes)\n          .where(inArray(votes.submissionId, submissionIds));\n      }\n\n      // Delete user votes\n      await db.delete(votes)\n        .where(inArray(votes.userId, ids));\n\n      // Delete cashout events (via cashout requests first)\n      const userCashoutRequests = await db.select({ id: cashoutRequests.id })\n        .from(cashoutRequests)\n        .where(inArray(cashoutRequests.userId, ids));\n      \n      const cashoutRequestIds = userCashoutRequests.map(r => r.id);\n      if (cashoutRequestIds.length > 0) {\n        await db.delete(cashoutEvents)\n          .where(inArray(cashoutEvents.cashoutRequestId, cashoutRequestIds));\n      }\n\n      // Delete cashout requests\n      await db.delete(cashoutRequests)\n        .where(inArray(cashoutRequests.userId, ids));\n\n      // Delete user wallets\n      await db.delete(userWallets)\n        .where(inArray(userWallets.userId, ids));\n\n      // Delete glory ledger entries\n      await db.delete(gloryLedger)\n        .where(inArray(gloryLedger.userId, ids));\n\n      // Delete submissions\n      await db.delete(submissions)\n        .where(inArray(submissions.userId, ids));\n\n      // Finally delete users\n      const result = await db.delete(users)\n        .where(inArray(users.id, ids));\n\n      return result.rowCount || 0;\n    } catch (error) {\n      console.error('Error in bulkDeleteUsers:', error);\n      throw error;\n    }\n  }\n\n  async getContest(id: string): Promise<Contest | undefined> {\n    const result = await db.query.contests.findFirst({\n      where: eq(contests.id, id)\n    });\n    return result;\n  }\n\n  async getContestBySlug(slug: string): Promise<Contest | undefined> {\n    const result = await db.query.contests.findFirst({\n      where: eq(contests.slug, slug)\n    });\n    return result;\n  }\n\n  async getContests(filters?: { status?: string }): Promise<ContestWithStats[]> {\n    const contestsData = await db.query.contests.findMany({\n      where: filters?.status ? eq(contests.status, filters.status) : undefined\n    });\n\n    const result: ContestWithStats[] = [];\n    for (const contest of contestsData) {\n      const submissionCount = await db.select({ count: count() })\n        .from(submissions)\n        .where(eq(submissions.contestId, contest.id));\n      \n      const participantCount = await db.select({ count: countDistinct(submissions.userId) })\n        .from(submissions)\n        .where(eq(submissions.contestId, contest.id));\n      \n      const totalVotesResult = await db.select({ total: sum(submissions.votesCount) })\n        .from(submissions)\n        .where(eq(submissions.contestId, contest.id));\n\n      // Get top submission image (highest voted approved submission)\n      const topSubmission = await db.query.submissions.findFirst({\n        where: and(\n          eq(submissions.contestId, contest.id),\n          eq(submissions.status, 'approved')\n        ),\n        orderBy: [desc(submissions.votesCount)],\n        columns: { mediaUrl: true }\n      });\n\n      result.push({\n        ...contest,\n        submissionCount: submissionCount[0]?.count || 0,\n        participantCount: participantCount[0]?.count || 0,\n        totalVotes: Number(totalVotesResult[0]?.total) || 0,\n        topSubmissionImageUrl: topSubmission?.mediaUrl || null\n      });\n    }\n\n    return result;\n  }\n\n  async createContest(insertContest: InsertContest): Promise<Contest> {\n    const [contest] = await db.insert(contests).values(insertContest).returning();\n    return contest as Contest;\n  }\n\n  async updateContest(id: string, updates: Partial<Contest>): Promise<Contest | undefined> {\n    const [contest] = await db.update(contests)\n      .set(updates)\n      .where(eq(contests.id, id))\n      .returning();\n    return contest;\n  }\n\n  async deleteContest(id: string): Promise<boolean> {\n    const result = await db.delete(contests)\n      .where(eq(contests.id, id));\n    return true;\n  }\n\n  async getSubmission(id: string): Promise<Submission | undefined> {\n    const result = await db.query.submissions.findFirst({\n      where: eq(submissions.id, id)\n    });\n    return result;\n  }\n\n  async getSubmissions(filters: { contestId?: string; userId?: string; status?: string; tag?: string; page?: number; limit?: number }): Promise<SubmissionWithUser[]> {\n    const conditions = [];\n    if (filters.contestId) conditions.push(eq(submissions.contestId, filters.contestId));\n    if (filters.userId) conditions.push(eq(submissions.userId, filters.userId));\n    if (filters.status) conditions.push(eq(submissions.status, filters.status));\n    if (filters.tag) {\n      // Check if any tag in the array contains the search string (case-insensitive)\n      conditions.push(sql`EXISTS (SELECT 1 FROM unnest(${submissions.tags}) AS tag WHERE LOWER(tag) LIKE LOWER(${'%' + filters.tag + '%'}))`);\n    }\n\n    // Calculate pagination\n    const page = filters.page || 1;\n    const limit = filters.limit || 20;\n    const offset = (page - 1) * limit;\n\n    const submissionsData = await db.query.submissions.findMany({\n      where: conditions.length > 0 ? and(...conditions) : undefined,\n      orderBy: [desc(submissions.createdAt)],\n      limit: limit,\n      offset: offset\n    });\n\n    const result: SubmissionWithUser[] = [];\n    for (const submission of submissionsData) {\n      const user = await db.query.users.findFirst({\n        where: eq(users.id, submission.userId),\n        columns: { id: true, username: true }\n      });\n      \n      let contest = null;\n      if (submission.contestId) {\n        contest = await db.query.contests.findFirst({\n          where: eq(contests.id, submission.contestId),\n          columns: { id: true, title: true }\n        });\n      }\n      \n      if (user) {\n        result.push({\n          ...submission,\n          user,\n          contest: contest || { id: '', title: submission.contestName || 'Deleted Contest' }\n        });\n      }\n    }\n\n    return result;\n  }\n\n  async createSubmission(insertSubmission: InsertSubmission): Promise<Submission> {\n    const [submission] = await db.insert(submissions).values(insertSubmission).returning();\n    return submission as Submission;\n  }\n\n  async updateSubmission(id: string, updates: Partial<Submission>): Promise<Submission | undefined> {\n    const [submission] = await db.update(submissions)\n      .set(updates)\n      .where(eq(submissions.id, id))\n      .returning();\n    return submission;\n  }\n\n  async deleteSubmission(id: string): Promise<boolean> {\n    const result = await db.delete(submissions)\n      .where(eq(submissions.id, id));\n    return true;\n  }\n\n  async getTopSubmissionsByContest(contestId: string, limit = 10): Promise<SubmissionWithUser[]> {\n    const submissionsData = await db.query.submissions.findMany({\n      where: and(\n        eq(submissions.contestId, contestId),\n        eq(submissions.status, \"approved\")\n      ),\n      orderBy: [desc(submissions.votesCount)],\n      limit\n    });\n\n    const result: SubmissionWithUser[] = [];\n    for (const submission of submissionsData) {\n      const user = await db.query.users.findFirst({\n        where: eq(users.id, submission.userId),\n        columns: { id: true, username: true }\n      });\n      \n      let contest = null;\n      if (submission.contestId) {\n        contest = await db.query.contests.findFirst({\n          where: eq(contests.id, submission.contestId),\n          columns: { id: true, title: true }\n        });\n      }\n      \n      if (user) {\n        result.push({\n          ...submission,\n          user,\n          contest: contest || { id: '', title: 'No Contest' }\n        });\n      }\n    }\n\n    return result;\n  }\n\n  async getUserSubmissionsInContest(userId: string, contestId: string): Promise<number> {\n    const result = await db.select({ count: count() })\n      .from(submissions)\n      .where(and(\n        eq(submissions.userId, userId),\n        eq(submissions.contestId, contestId)\n      ));\n    \n    return result[0]?.count || 0;\n  }\n\n  async getVote(userId: string, submissionId: string): Promise<Vote | undefined> {\n    const result = await db.query.votes.findFirst({\n      where: and(\n        eq(votes.userId, userId),\n        eq(votes.submissionId, submissionId)\n      )\n    });\n    return result;\n  }\n\n  async createVote(insertVote: InsertVote): Promise<Vote> {\n    const [vote] = await db.insert(votes).values(insertVote).returning();\n    \n    await db.update(submissions)\n      .set({ votesCount: sql`${submissions.votesCount} + 1` })\n      .where(eq(submissions.id, insertVote.submissionId));\n\n    return vote;\n  }\n\n  async getVoteCountByUser(userId: string, since: Date): Promise<number> {\n    const result = await db.select({ count: count() })\n      .from(votes)\n      .where(and(\n        eq(votes.userId, userId),\n        sql`${votes.createdAt} >= ${since}`\n      ));\n    \n    return result[0]?.count || 0;\n  }\n\n  async getVoteCountForSubmissionInPeriod(userId: string, submissionId: string, since: Date): Promise<number> {\n    const result = await db.select({ count: count() })\n      .from(votes)\n      .where(and(\n        eq(votes.userId, userId),\n        eq(votes.submissionId, submissionId),\n        sql`${votes.createdAt} >= ${since}`\n      ));\n    \n    return result[0]?.count || 0;\n  }\n\n  async getUserTotalVotesInContest(userId: string, contestId: string): Promise<number> {\n    const result = await db.select({ count: count() })\n      .from(votes)\n      .innerJoin(submissions, eq(votes.submissionId, submissions.id))\n      .where(and(\n        eq(votes.userId, userId),\n        eq(submissions.contestId, contestId)\n      ));\n    \n    return result[0]?.count || 0;\n  }\n\n  async getUserTotalVotesInContestInPeriod(userId: string, contestId: string, since: Date): Promise<number> {\n    const result = await db.select({ count: count() })\n      .from(votes)\n      .innerJoin(submissions, eq(votes.submissionId, submissions.id))\n      .where(and(\n        eq(votes.userId, userId),\n        eq(submissions.contestId, contestId),\n        gte(votes.createdAt, since)\n      ));\n    \n    return result[0]?.count || 0;\n  }\n\n  async createGloryTransaction(insertTransaction: InsertGloryLedger): Promise<GloryLedger> {\n    const [transaction] = await db.insert(gloryLedger).values(insertTransaction).returning();\n    \n    await this.updateUserBalance(transaction.userId, transaction.delta, transaction.currency || \"GLORY\");\n    \n    return transaction as GloryLedger;\n  }\n\n  async getGloryTransactions(userId: string, currency?: string): Promise<GloryLedger[]> {\n    const result = await db.query.gloryLedger.findMany({\n      where: currency \n        ? and(eq(gloryLedger.userId, userId), eq(gloryLedger.currency, currency))\n        : eq(gloryLedger.userId, userId),\n      orderBy: [desc(gloryLedger.createdAt)]\n    });\n    return result;\n  }\n\n  async getGloryTransactionByHash(txHash: string): Promise<GloryLedger | undefined> {\n    const result = await db.query.gloryLedger.findFirst({\n      where: eq(gloryLedger.txHash, txHash)\n    });\n    return result;\n  }\n\n  async clearGloryTransactions(userId: string): Promise<void> {\n    await db.delete(gloryLedger).where(eq(gloryLedger.userId, userId));\n  }\n\n  async updateUserBalance(userId: string, delta: string | number, currency: string): Promise<void> {\n    const deltaNum = typeof delta === 'string' ? Number(delta) : delta;\n    if (currency === \"GLORY\") {\n      await db.update(users)\n        .set({ \n          gloryBalance: sql`${users.gloryBalance} + ${deltaNum}`,\n          updatedAt: new Date()\n        })\n        .where(eq(users.id, userId));\n    } else if (currency === \"SOL\") {\n      await db.update(users)\n        .set({ \n          solBalance: sql`${users.solBalance} + ${deltaNum}`,\n          updatedAt: new Date()\n        })\n        .where(eq(users.id, userId));\n    } else if (currency === \"USDC\") {\n      await db.update(users)\n        .set({ \n          usdcBalance: sql`${users.usdcBalance} + ${deltaNum}`,\n          updatedAt: new Date()\n        })\n        .where(eq(users.id, userId));\n    }\n  }\n\n  async createAuditLog(insertLog: InsertAuditLog): Promise<AuditLog> {\n    const [log] = await db.insert(auditLog).values(insertLog).returning();\n    return log as AuditLog;\n  }\n\n  async getAuditLogs(limit = 100): Promise<AuditLog[]> {\n    const result = await db.query.auditLog.findMany({\n      orderBy: [desc(auditLog.createdAt)],\n      limit\n    });\n    return result;\n  }\n\n  async clearAuditLogs(): Promise<void> {\n    await db.delete(auditLog);\n  }\n\n  async distributeContestRewards(contestId: string): Promise<void> {\n    // Note: Can't use db.transaction with neon-http driver\n    const contest = await db.query.contests.findFirst({\n      where: eq(contests.id, contestId)\n    });\n    \n    if (!contest) {\n      throw new Error(\"Contest not found\");\n    }\n\n    if (contest.status === \"ended\") {\n      throw new Error(\"Contest has already ended\");\n    }\n\n    if (contest.status !== \"active\") {\n      throw new Error(\"Contest is not active\");\n    }\n\n    // Get prize distribution from config (fixed amounts) or use default percentages\n    const config = contest.config as any;\n    const currency = config?.currency || \"GLORY\";\n    let prizes: number[] = [];\n    \n    if (config?.prizeDistribution && Array.isArray(config.prizeDistribution)) {\n      // Use fixed prize amounts from config\n      prizes = config.prizeDistribution\n        .map((p: any) => Number(p.value))\n        .filter((v: number) => !isNaN(v) && v > 0);\n    } else {\n      // Fallback to percentage-based distribution\n      const defaultPercentages = [0.4, 0.25, 0.15, 0.1, 0.1];\n      prizes = defaultPercentages.map(p => Math.floor(Number(contest.prizeGlory) * p));\n    }\n\n    // Get top N submissions based on number of prizes\n    const topSubmissionsData = await db.query.submissions.findMany({\n      where: and(\n        eq(submissions.contestId, contestId),\n        eq(submissions.status, \"approved\")\n      ),\n      orderBy: [desc(submissions.votesCount)],\n      limit: prizes.length\n    });\n    \n    if (topSubmissionsData.length === 0) {\n      await db.update(contests)\n        .set({ status: \"ended\" })\n        .where(eq(contests.id, contestId));\n      return;\n    }\n    \n    const numPrizes = Math.min(topSubmissionsData.length, prizes.length);\n    \n    // Batch prepare all ledger entries and user updates\n    const ledgerEntries = [];\n    const userUpdates = [];\n    \n    // Check for existing ledger entries in one query\n    const existingLedgers = await db.query.gloryLedger.findMany({\n      where: and(\n        eq(gloryLedger.contestId, contestId),\n        inArray(gloryLedger.submissionId, topSubmissionsData.map(s => s.id))\n      )\n    });\n    \n    const existingSubmissionIds = new Set(existingLedgers.map(l => l.submissionId));\n    \n    for (let i = 0; i < numPrizes; i++) {\n      const submission = topSubmissionsData[i];\n      const prize = prizes[i];\n      \n      // Skip if already awarded\n      if (existingSubmissionIds.has(submission.id)) {\n        continue;\n      }\n\n      ledgerEntries.push({\n        userId: submission.userId,\n        delta: prize.toString(),\n        currency: currency,\n        reason: `Contest Prize - ${i + 1}${i === 0 ? 'st' : i === 1 ? 'nd' : i === 2 ? 'rd' : 'th'} Place`,\n        contestId: contestId,\n        submissionId: submission.id\n      });\n      \n      userUpdates.push({\n        userId: submission.userId,\n        prize: prize,\n        currency: currency\n      });\n    }\n\n    // Batch insert ledger entries (single query)\n    if (ledgerEntries.length > 0) {\n      await db.insert(gloryLedger).values(ledgerEntries).onConflictDoNothing();\n      \n      // Update user balances based on currency (unfortunately needs to be individual queries)\n      for (const update of userUpdates) {\n        if (update.currency === \"GLORY\") {\n          await db.update(users)\n            .set({ \n              gloryBalance: sql`${users.gloryBalance} + ${update.prize}`,\n              updatedAt: new Date()\n            })\n            .where(eq(users.id, update.userId));\n        } else if (update.currency === \"SOL\") {\n          await db.update(users)\n            .set({ \n              solBalance: sql`${users.solBalance} + ${update.prize}`,\n              updatedAt: new Date()\n            })\n            .where(eq(users.id, update.userId));\n        } else if (update.currency === \"USDC\") {\n          await db.update(users)\n            .set({ \n              usdcBalance: sql`${users.usdcBalance} + ${update.prize}`,\n              updatedAt: new Date()\n            })\n            .where(eq(users.id, update.userId));\n        }\n      }\n    }\n\n    // Only end contest if we actually awarded new prizes\n    if (ledgerEntries.length > 0) {\n      await db.update(contests)\n        .set({ status: \"ended\" })\n        .where(eq(contests.id, contestId));\n    }\n  }\n\n  // User Wallets\n  async getUserWallet(userId: string): Promise<UserWallet | undefined> {\n    const result = await db.query.userWallets.findFirst({\n      where: eq(userWallets.userId, userId)\n    });\n    return result;\n  }\n\n  async getUserWalletByAddress(address: string): Promise<UserWallet | undefined> {\n    const result = await db.query.userWallets.findFirst({\n      where: eq(userWallets.address, address)\n    });\n    return result;\n  }\n\n  async createUserWallet(wallet: InsertUserWallet): Promise<UserWallet> {\n    const [newWallet] = await db.insert(userWallets).values(wallet).returning();\n    return newWallet as UserWallet;\n  }\n\n  async updateUserWallet(id: string, updates: Partial<UserWallet>): Promise<UserWallet | undefined> {\n    const [wallet] = await db.update(userWallets)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(userWallets.id, id))\n      .returning();\n    return wallet;\n  }\n\n  // Purchased Prompts\n  async purchasePrompt(userId: string, submissionId: string): Promise<PurchasedPrompt> {\n    // Get submission with prompt details\n    const submission = await db.query.submissions.findFirst({\n      where: eq(submissions.id, submissionId),\n      with: {\n        user: true\n      }\n    });\n\n    if (!submission) {\n      throw new Error(\"Submission not found\");\n    }\n\n    if (!submission.promptForSale) {\n      throw new Error(\"This prompt is not for sale\");\n    }\n\n    if (!submission.promptPrice || !submission.promptCurrency) {\n      throw new Error(\"Prompt price not set\");\n    }\n\n    if (submission.userId === userId) {\n      throw new Error(\"Cannot purchase your own prompt\");\n    }\n\n    // Check if already purchased\n    const existing = await db.query.purchasedPrompts.findFirst({\n      where: and(\n        eq(purchasedPrompts.userId, userId),\n        eq(purchasedPrompts.submissionId, submissionId)\n      )\n    });\n\n    if (existing) {\n      throw new Error(\"You have already purchased this prompt\");\n    }\n\n    // Get buyer details\n    const buyer = await this.getUser(userId);\n    if (!buyer) {\n      throw new Error(\"Buyer not found\");\n    }\n\n    const price = parseFloat(submission.promptPrice);\n    const currency = submission.promptCurrency;\n\n    // Check buyer balance\n    let hasSufficientBalance = false;\n    if (currency === \"GLORY\") {\n      hasSufficientBalance = buyer.gloryBalance >= price;\n    } else if (currency === \"SOL\") {\n      hasSufficientBalance = parseFloat(buyer.solBalance) >= price;\n    } else if (currency === \"USDC\") {\n      hasSufficientBalance = parseFloat(buyer.usdcBalance) >= price;\n    }\n\n    if (!hasSufficientBalance) {\n      throw new Error(`Insufficient ${currency} balance`);\n    }\n\n    // Perform transaction atomically\n    await db.transaction(async (tx) => {\n      // Deduct from buyer\n      await this.createGloryTransaction({\n        userId,\n        delta: (-price).toString(),\n        currency,\n        reason: `Purchased prompt for submission \"${submission.title}\"`,\n        submissionId,\n        contestId: submission.contestId || null,\n        txHash: null,\n        metadata: {\n          sellerId: submission.userId,\n          price,\n          currency\n        }\n      });\n\n      // Credit seller\n      await this.createGloryTransaction({\n        userId: submission.userId,\n        delta: price.toString(),\n        currency,\n        reason: `Sold prompt for submission \"${submission.title}\"`,\n        submissionId,\n        contestId: submission.contestId || null,\n        txHash: null,\n        metadata: {\n          buyerId: userId,\n          price,\n          currency\n        }\n      });\n    });\n\n    // Create purchased prompt record\n    const [purchase] = await db.insert(purchasedPrompts).values({\n      userId,\n      submissionId,\n      sellerId: submission.userId,\n      price: price.toString(),\n      currency\n    }).returning();\n\n    return purchase as PurchasedPrompt;\n  }\n\n  async getPurchasedPrompts(userId: string): Promise<PurchasedPrompt[]> {\n    const results = await db.query.purchasedPrompts.findMany({\n      where: eq(purchasedPrompts.userId, userId),\n      orderBy: [desc(purchasedPrompts.createdAt)]\n    });\n    return results as PurchasedPrompt[];\n  }\n\n  async checkIfPromptPurchased(userId: string, submissionId: string): Promise<boolean> {\n    const result = await db.query.purchasedPrompts.findFirst({\n      where: and(\n        eq(purchasedPrompts.userId, userId),\n        eq(purchasedPrompts.submissionId, submissionId)\n      )\n    });\n    return !!result;\n  }\n\n  // Cashout Requests\n  async getCashoutRequest(id: string): Promise<CashoutRequest | undefined> {\n    const result = await db.query.cashoutRequests.findFirst({\n      where: eq(cashoutRequests.id, id)\n    });\n    return result;\n  }\n\n  async getCashoutRequests(filters?: { userId?: string; status?: string }): Promise<CashoutRequestWithRelations[]> {\n    const conditions = [];\n    if (filters?.userId) conditions.push(eq(cashoutRequests.userId, filters.userId));\n    if (filters?.status) conditions.push(eq(cashoutRequests.status, filters.status));\n\n    const result = await db.query.cashoutRequests.findMany({\n      where: conditions.length > 0 ? and(...conditions) : undefined,\n      orderBy: [desc(cashoutRequests.createdAt)],\n      with: {\n        user: {\n          columns: {\n            id: true,\n            username: true,\n            email: true,\n            gloryBalance: true\n          }\n        }\n      }\n    });\n    return result as CashoutRequestWithRelations[];\n  }\n\n  async createCashoutRequest(request: InsertCashoutRequest): Promise<CashoutRequest> {\n    const [newRequest] = await db.insert(cashoutRequests).values(request).returning();\n    return newRequest as CashoutRequest;\n  }\n\n  async updateCashoutRequest(id: string, updates: Partial<CashoutRequest>): Promise<CashoutRequest | undefined> {\n    const [request] = await db.update(cashoutRequests)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(cashoutRequests.id, id))\n      .returning();\n    return request;\n  }\n\n  // Cashout Events\n  async createCashoutEvent(event: InsertCashoutEvent): Promise<CashoutEvent> {\n    const [newEvent] = await db.insert(cashoutEvents).values(event).returning();\n    return newEvent as CashoutEvent;\n  }\n\n  async getCashoutEvents(cashoutRequestId: string): Promise<CashoutEvent[]> {\n    const result = await db.query.cashoutEvents.findMany({\n      where: eq(cashoutEvents.cashoutRequestId, cashoutRequestId),\n      orderBy: [desc(cashoutEvents.createdAt)]\n    });\n    return result;\n  }\n\n  // Site Settings\n  async getSiteSettings(): Promise<SiteSettings> {\n    // Try to get existing settings\n    const existing = await db.query.siteSettings.findFirst();\n    \n    if (existing) {\n      return existing;\n    }\n    \n    // Create default settings if none exist\n    const [newSettings] = await db.insert(siteSettings)\n      .values({ privateMode: false })\n      .returning();\n    \n    return newSettings as SiteSettings;\n  }\n\n  async updateSiteSettings(updates: Partial<SiteSettings>): Promise<SiteSettings> {\n    // Get existing settings to get the ID\n    const existing = await this.getSiteSettings();\n    \n    // Update settings\n    const [updated] = await db.update(siteSettings)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(siteSettings.id, existing.id))\n      .returning();\n    \n    return updated as SiteSettings;\n  }\n\n  // AI Generations\n  async createAiGeneration(generation: InsertAiGeneration): Promise<AiGeneration> {\n    const [newGeneration] = await db.insert(aiGenerations).values(generation).returning();\n    return newGeneration as AiGeneration;\n  }\n\n  async getAiGeneration(id: string): Promise<AiGeneration | undefined> {\n    const result = await db.query.aiGenerations.findFirst({\n      where: eq(aiGenerations.id, id)\n    });\n    return result;\n  }\n\n  async getAiGenerations(userId: string, limit: number = 20): Promise<AiGeneration[]> {\n    const result = await db.query.aiGenerations.findMany({\n      where: eq(aiGenerations.userId, userId),\n      orderBy: [desc(aiGenerations.createdAt)],\n      limit\n    });\n    return result;\n  }\n\n  async deleteAiGeneration(id: string): Promise<void> {\n    await db.delete(aiGenerations).where(eq(aiGenerations.id, id));\n  }\n\n  async updateAiGeneration(id: string, updates: Partial<AiGeneration>): Promise<AiGeneration | undefined> {\n    const [updated] = await db.update(aiGenerations)\n      .set(updates)\n      .where(eq(aiGenerations.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Image Credits\n  async getUserCredits(userId: string): Promise<number> {\n    const user = await db.query.users.findFirst({\n      where: eq(users.id, userId),\n      columns: { imageCredits: true }\n    });\n    return user?.imageCredits || 0;\n  }\n\n  async deductCredits(userId: string, amount: number): Promise<boolean> {\n    const user = await db.query.users.findFirst({\n      where: eq(users.id, userId),\n      columns: { imageCredits: true }\n    });\n\n    if (!user || user.imageCredits < amount) {\n      return false; // Insufficient credits\n    }\n\n    await db.update(users)\n      .set({ imageCredits: user.imageCredits - amount, updatedAt: new Date() })\n      .where(eq(users.id, userId));\n\n    return true;\n  }\n\n  async addCredits(userId: string, amount: number): Promise<void> {\n    await db.update(users)\n      .set({ \n        imageCredits: sql`${users.imageCredits} + ${amount}`,\n        updatedAt: new Date()\n      })\n      .where(eq(users.id, userId));\n  }\n\n  // Pricing Settings\n  async getPricingSetting(key: string): Promise<number | undefined> {\n    const setting = await db.query.pricingSettings.findFirst({\n      where: eq(pricingSettings.key, key)\n    });\n    return setting?.value;\n  }\n\n  async getAllPricingSettings(): Promise<Map<string, number>> {\n    const settings = await db.query.pricingSettings.findMany();\n    const map = new Map<string, number>();\n    settings.forEach(s => map.set(s.key, s.value));\n    return map;\n  }\n\n  async updatePricingSetting(key: string, value: number): Promise<void> {\n    const existing = await db.query.pricingSettings.findFirst({\n      where: eq(pricingSettings.key, key)\n    });\n\n    if (existing) {\n      await db.update(pricingSettings)\n        .set({ value, updatedAt: new Date() })\n        .where(eq(pricingSettings.key, key));\n    } else {\n      await db.insert(pricingSettings).values({ key, value });\n    }\n  }\n\n  // Subscription Tiers\n  async getSubscriptionTiers(): Promise<SubscriptionTier[]> {\n    const result = await db.query.subscriptionTiers.findMany({\n      where: eq(subscriptionTiers.isActive, true),\n      orderBy: [subscriptionTiers.sortOrder]\n    });\n    return result;\n  }\n\n  async getSubscriptionTier(id: string): Promise<SubscriptionTier | undefined> {\n    const result = await db.query.subscriptionTiers.findFirst({\n      where: eq(subscriptionTiers.id, id)\n    });\n    return result;\n  }\n\n  async getSubscriptionTierBySlug(slug: string): Promise<SubscriptionTier | undefined> {\n    const result = await db.query.subscriptionTiers.findFirst({\n      where: eq(subscriptionTiers.slug, slug)\n    });\n    return result;\n  }\n\n  async createSubscriptionTier(tier: InsertSubscriptionTier): Promise<SubscriptionTier> {\n    const [newTier] = await db.insert(subscriptionTiers).values(tier).returning();\n    return newTier as SubscriptionTier;\n  }\n\n  async updateSubscriptionTier(id: string, updates: Partial<SubscriptionTier>): Promise<SubscriptionTier | undefined> {\n    const [tier] = await db.update(subscriptionTiers)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(subscriptionTiers.id, id))\n      .returning();\n    return tier;\n  }\n\n  async deleteSubscriptionTier(id: string): Promise<void> {\n    await db.delete(subscriptionTiers).where(eq(subscriptionTiers.id, id));\n  }\n\n  // User Subscriptions\n  async getUserSubscription(userId: string): Promise<UserSubscriptionWithTier | undefined> {\n    const subscription = await db.query.userSubscriptions.findFirst({\n      where: and(\n        eq(userSubscriptions.userId, userId),\n        eq(userSubscriptions.status, 'active')\n      )\n    });\n\n    if (!subscription) {\n      // Default to free tier if no subscription exists\n      const freeTier = await this.getSubscriptionTierBySlug('free');\n      if (!freeTier) return undefined;\n      \n      return {\n        id: '',\n        userId,\n        tierId: freeTier.id,\n        status: 'active',\n        paymentMethod: null,\n        stripeSubscriptionId: null,\n        stripeCustomerId: null,\n        paymentTxHash: null,\n        currentPeriodStart: new Date(),\n        currentPeriodEnd: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // 1 year\n        creditsGranted: 0,\n        creditsGrantedAt: null,\n        cancelAtPeriodEnd: false,\n        cancelledAt: null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        tier: freeTier\n      };\n    }\n\n    const tier = await db.query.subscriptionTiers.findFirst({\n      where: eq(subscriptionTiers.id, subscription.tierId)\n    });\n\n    if (!tier) return undefined;\n\n    return {\n      ...subscription,\n      tier\n    };\n  }\n\n  async getUserSubscriptionById(id: string): Promise<UserSubscriptionWithTier | undefined> {\n    const subscription = await db.query.userSubscriptions.findFirst({\n      where: eq(userSubscriptions.id, id)\n    });\n\n    if (!subscription) return undefined;\n\n    const tier = await db.query.subscriptionTiers.findFirst({\n      where: eq(subscriptionTiers.id, subscription.tierId)\n    });\n\n    if (!tier) return undefined;\n\n    return {\n      ...subscription,\n      tier\n    };\n  }\n\n  async createUserSubscription(subscription: InsertUserSubscription): Promise<UserSubscription> {\n    const [newSubscription] = await db.insert(userSubscriptions).values(subscription).returning();\n    return newSubscription as UserSubscription;\n  }\n\n  async updateUserSubscription(id: string, updates: Partial<UserSubscription>): Promise<UserSubscription | undefined> {\n    const [subscription] = await db.update(userSubscriptions)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(userSubscriptions.id, id))\n      .returning();\n    return subscription;\n  }\n\n  async cancelUserSubscription(subscriptionId: string): Promise<void> {\n    await db.update(userSubscriptions)\n      .set({ \n        cancelAtPeriodEnd: true, \n        cancelledAt: new Date(),\n        updatedAt: new Date() \n      })\n      .where(eq(userSubscriptions.id, subscriptionId));\n  }\n\n  // Subscription Transactions\n  async createSubscriptionTransaction(transaction: InsertSubscriptionTransaction): Promise<SubscriptionTransaction> {\n    const [newTransaction] = await db.insert(subscriptionTransactions).values(transaction).returning();\n    return newTransaction as SubscriptionTransaction;\n  }\n\n  async getSubscriptionTransactions(filters: { userId?: string; subscriptionId?: string }): Promise<SubscriptionTransaction[]> {\n    const conditions = [];\n    if (filters.userId) conditions.push(eq(subscriptionTransactions.userId, filters.userId));\n    if (filters.subscriptionId) conditions.push(eq(subscriptionTransactions.subscriptionId, filters.subscriptionId));\n\n    const result = await db.query.subscriptionTransactions.findMany({\n      where: conditions.length > 0 ? and(...conditions) : undefined,\n      orderBy: [desc(subscriptionTransactions.createdAt)]\n    });\n    return result;\n  }\n\n  // Helper Methods\n  async canUserAccessModel(userId: string, modelSlug: string): Promise<boolean> {\n    const subscription = await this.getUserSubscription(userId);\n    if (!subscription) return false;\n\n    const allowedModels = subscription.tier.allowedModels || [];\n    return allowedModels.includes(modelSlug);\n  }\n\n  async canUserEdit(userId: string): Promise<boolean> {\n    const subscription = await this.getUserSubscription(userId);\n    if (!subscription) return false;\n    return subscription.tier.canEdit;\n  }\n\n  async canUserUpscale(userId: string): Promise<boolean> {\n    const subscription = await this.getUserSubscription(userId);\n    if (!subscription) return false;\n    return subscription.tier.canUpscale;\n  }\n\n  async getUserTierCommissions(userId: string): Promise<{ promptCommission: number; imageCommission: number }> {\n    const subscription = await this.getUserSubscription(userId);\n    if (!subscription) {\n      return { promptCommission: 0, imageCommission: 0 };\n    }\n    return {\n      promptCommission: subscription.tier.promptCommission,\n      imageCommission: subscription.tier.imageCommission\n    };\n  }\n\n  async grantMonthlyCredits(userId: string): Promise<void> {\n    const subscription = await this.getUserSubscription(userId);\n    if (!subscription || !subscription.id) return;\n\n    const monthlyCredits = subscription.tier.monthlyCredits;\n    \n    // Add credits to user account\n    await this.addCredits(userId, monthlyCredits);\n\n    // Update subscription with grant timestamp\n    await db.update(userSubscriptions)\n      .set({\n        creditsGranted: monthlyCredits,\n        creditsGrantedAt: new Date(),\n        updatedAt: new Date()\n      })\n      .where(eq(userSubscriptions.id, subscription.id));\n  }\n\n  async refreshSubscriptionIfNeeded(userId: string): Promise<boolean> {\n    const subscription = await this.getUserSubscription(userId);\n    if (!subscription || !subscription.id) return false;\n\n    const now = new Date();\n    let periodEnd = new Date(subscription.currentPeriodEnd);\n\n    // Check if subscription period has expired\n    if (periodEnd > now) {\n      return false; // Period still active, no refresh needed\n    }\n\n    // Check if subscription is canceled - finalize cancellation instead of renewing\n    if (subscription.status !== \"active\" || subscription.cancelAtPeriodEnd) {\n      console.log(`[Subscription] Finalizing canceled subscription for user ${userId}`);\n      \n      // Set subscription to canceled status\n      await db.update(userSubscriptions)\n        .set({\n          status: \"canceled\",\n          cancelledAt: now,\n          updatedAt: now\n        })\n        .where(eq(userSubscriptions.id, subscription.id));\n\n      return false; // No refresh, subscription is now canceled\n    }\n\n    // Calculate how many months to advance (handle long gaps)\n    let newPeriodStart = new Date(subscription.currentPeriodEnd);\n    let newPeriodEnd = new Date(subscription.currentPeriodEnd);\n    let monthsToAdd = 1;\n\n    // Advance period until it's in the future\n    while (newPeriodEnd <= now) {\n      newPeriodEnd.setMonth(newPeriodEnd.getMonth() + 1);\n      monthsToAdd++;\n    }\n\n    // Update start to be end of last period\n    newPeriodStart = new Date(newPeriodEnd);\n    newPeriodStart.setMonth(newPeriodStart.getMonth() - 1);\n\n    // Reset user credits to monthly allowance\n    const monthlyCredits = subscription.tier.monthlyCredits;\n    await db.update(users)\n      .set({ \n        imageCredits: monthlyCredits,\n        updatedAt: new Date()\n      })\n      .where(eq(users.id, userId));\n\n    // Update subscription period\n    await db.update(userSubscriptions)\n      .set({\n        currentPeriodStart: newPeriodStart,\n        currentPeriodEnd: newPeriodEnd,\n        creditsGranted: monthlyCredits,\n        creditsGrantedAt: now,\n        updatedAt: now\n      })\n      .where(eq(userSubscriptions.id, subscription.id));\n\n    // Create transaction record\n    await this.createSubscriptionTransaction({\n      userId,\n      subscriptionId: subscription.id,\n      tierId: subscription.tierId,\n      amountCents: 0, // Auto-refresh doesn't charge\n      currency: \"USD\",\n      paymentMethod: \"auto-renewal\",\n      paymentStatus: \"completed\",\n      metadata: {\n        creditsGranted: monthlyCredits,\n        periodStart: newPeriodStart.toISOString(),\n        periodEnd: newPeriodEnd.toISOString(),\n        monthsAdvanced: monthsToAdd - 1\n      }\n    });\n\n    console.log(`[Subscription] Auto-refreshed credits for user ${userId}: ${monthlyCredits} credits, advanced ${monthsToAdd - 1} months, new period: ${newPeriodStart.toISOString()} - ${newPeriodEnd.toISOString()}`);\n\n    return true; // Refresh performed\n  }\n\n  // Pro Edit: Images\n  async createImage(image: InsertImage): Promise<Image> {\n    const [created] = await db.insert(images).values(image).returning();\n    return created;\n  }\n\n  async getImage(id: string): Promise<Image | undefined> {\n    const [image] = await db.select().from(images).where(eq(images.id, id));\n    return image;\n  }\n\n  async getImagesByUserId(userId: string): Promise<Image[]> {\n    return await db.select()\n      .from(images)\n      .where(eq(images.userId, userId))\n      .orderBy(desc(images.createdAt));\n  }\n\n  async updateImage(id: string, updates: Partial<Image>): Promise<Image | undefined> {\n    const [updated] = await db.update(images)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(images.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Pro Edit: Image Versions\n  async createImageVersion(version: InsertImageVersion): Promise<ImageVersion> {\n    const [created] = await db.insert(imageVersions).values(version).returning();\n    return created;\n  }\n\n  async getImageVersion(id: string): Promise<ImageVersion | undefined> {\n    const [version] = await db.select().from(imageVersions).where(eq(imageVersions.id, id));\n    return version;\n  }\n\n  async getImageVersionsByImageId(imageId: string): Promise<ImageVersion[]> {\n    return await db.select()\n      .from(imageVersions)\n      .where(eq(imageVersions.imageId, imageId))\n      .orderBy(desc(imageVersions.createdAt));\n  }\n\n  async getCurrentImageVersion(imageId: string): Promise<ImageVersion | undefined> {\n    const [version] = await db.select()\n      .from(imageVersions)\n      .where(and(\n        eq(imageVersions.imageId, imageId),\n        eq(imageVersions.isCurrent, true)\n      ))\n      .limit(1);\n    return version;\n  }\n\n  async unsetCurrentVersions(imageId: string): Promise<void> {\n    await db.update(imageVersions)\n      .set({ isCurrent: false })\n      .where(eq(imageVersions.imageId, imageId));\n  }\n\n  // Pro Edit: Edit Jobs\n  async createEditJob(job: InsertEditJob): Promise<EditJob> {\n    const [created] = await db.insert(editJobs).values(job).returning();\n    return created;\n  }\n\n  async getEditJob(id: string): Promise<EditJob | undefined> {\n    const [job] = await db.select().from(editJobs).where(eq(editJobs.id, id));\n    return job;\n  }\n\n  async getEditJobsByUserId(userId: string): Promise<EditJob[]> {\n    return await db.select()\n      .from(editJobs)\n      .where(eq(editJobs.userId, userId))\n      .orderBy(desc(editJobs.createdAt));\n  }\n\n  async getEditJobsByImageId(imageId: string): Promise<EditJob[]> {\n    return await db.select()\n      .from(editJobs)\n      .where(eq(editJobs.imageId, imageId))\n      .orderBy(desc(editJobs.createdAt));\n  }\n\n  async updateEditJob(id: string, updates: Partial<EditJob>): Promise<EditJob | undefined> {\n    const [updated] = await db.update(editJobs)\n      .set(updates)\n      .where(eq(editJobs.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Pro Edit: Credit Management\n  async refundAiCredits(userId: string, amount: number, reason: string, jobId: string): Promise<boolean> {\n    // Use atomic UPDATE with WHERE condition instead of transaction (neon-http doesn't support transactions)\n    // This UPDATE will only succeed if refundedAt IS NULL, providing idempotency\n    const [updatedJob] = await db.update(editJobs)\n      .set({ refundedAt: new Date() })\n      .where(and(\n        eq(editJobs.id, jobId),\n        sql`${editJobs.refundedAt} IS NULL`\n      ))\n      .returning();\n    \n    // If no row was updated, job was already refunded or doesn't exist\n    if (!updatedJob) {\n      console.log(`[ProEdit] Refund skipped: Job ${jobId} not found or already refunded`);\n      return false;\n    }\n    \n    // Refund credits\n    await db.update(users)\n      .set({\n        imageCredits: sql`${users.imageCredits} + ${amount}`,\n        updatedAt: new Date()\n      })\n      .where(eq(users.id, userId));\n    \n    console.log(`[ProEdit] Refunded ${amount} AI credits to user ${userId} for job ${jobId}. Reason: ${reason}`);\n    \n    // Log the refund in audit log\n    await this.createAuditLog({\n      actorUserId: userId,\n      action: 'ai_credits_refund',\n      meta: { amount, reason, jobId }\n    });\n    \n    return true;\n  }\n}\n\nexport const storage = new DbStorage();\n","size_bytes":85577},"server/services/reward-distribution.ts":{"content":"/**\n * Pure function for calculating contest reward distribution\n * Top 5 submissions get: 40%, 25%, 15%, 10%, 10%\n */\n\nexport interface SubmissionWithVotes {\n  id: string;\n  userId: string;\n  votesCount: number;\n}\n\nexport interface RewardDistribution {\n  userId: string;\n  submissionId: string;\n  amount: number;\n  rank: number;\n}\n\nexport function calculateRewardDistribution(\n  submissions: SubmissionWithVotes[],\n  totalPrizePool: number\n): RewardDistribution[] {\n  // Prize distribution percentages for top 5\n  const prizePercentages = [0.4, 0.25, 0.15, 0.1, 0.1];\n  \n  // Sort submissions by votes (descending)\n  const sortedSubmissions = [...submissions]\n    .sort((a, b) => b.votesCount - a.votesCount)\n    .slice(0, 5); // Take top 5 only\n\n  const distributions: RewardDistribution[] = [];\n\n  for (let i = 0; i < sortedSubmissions.length; i++) {\n    const submission = sortedSubmissions[i];\n    const percentage = prizePercentages[i];\n    const amount = Math.floor(totalPrizePool * percentage);\n\n    distributions.push({\n      userId: submission.userId,\n      submissionId: submission.id,\n      amount,\n      rank: i + 1,\n    });\n  }\n\n  return distributions;\n}\n\n","size_bytes":1170},"client/src/main.tsx":{"content":"// Ensure Node Buffer is available in the browser for libraries that expect it\nimport \"./polyfills/buffer\";\n\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":266},"client/src/components/ContestRulesCard.tsx":{"content":"import { useEffect } from \"react\";\nimport { X, Trophy, Calendar, Users, FileText, Award, CheckSquare, Image, Shield } from \"lucide-react\";\nimport { GlassButton } from \"./GlassButton\";\nimport { formatPrizeAmount } from \"@/lib/utils\";\n\ninterface ContestRulesCardProps {\n  isOpen: boolean;\n  contest: {\n    title: string;\n    description: string;\n    rules: string;\n    prizeGlory: number;\n    startAt: string;\n    endAt: string;\n    config?: any;\n  } | null;\n  onClose: () => void;\n}\n\nexport function ContestRulesCard({ isOpen, contest, onClose }: ContestRulesCardProps) {\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const modalId = Date.now();\n\n    // Push unique history state when modal opens\n    window.history.pushState({ modal: 'rules', modalId }, '');\n\n    // Handle Escape key\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        onClose();\n      }\n    };\n\n    // Handle browser back button\n    const handlePopState = () => {\n      // Close modal when going back in history\n      if (window.history.state?.modalId !== modalId) {\n        onClose();\n      }\n    };\n\n    window.addEventListener('keydown', handleEscape);\n    window.addEventListener('popstate', handlePopState);\n\n    return () => {\n      window.removeEventListener('keydown', handleEscape);\n      window.removeEventListener('popstate', handlePopState);\n    };\n  }, [isOpen, onClose]);\n\n  if (!isOpen || !contest) return null;\n\n  return (\n    <div \n      className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/80 backdrop-blur-sm p-4\"\n      onClick={onClose}\n      data-testid=\"rules-overlay\"\n    >\n      <div \n        className=\"relative max-w-3xl w-full max-h-[90vh] overflow-y-auto bg-slate-900/90 backdrop-blur-xl rounded-2xl border border-white/10 shadow-2xl shadow-violet-600/20\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* Header */}\n        <div className=\"sticky top-0 bg-slate-900/95 backdrop-blur-xl border-b border-white/10 p-6 flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 rounded-lg bg-violet-600/20 border border-violet-500/30\">\n              <FileText className=\"h-6 w-6 text-violet-400\" />\n            </div>\n            <h2 className=\"text-2xl font-bold text-white\" data-testid=\"text-contest-title\">\n              Contest Rules\n            </h2>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"p-2 hover:bg-white/10 rounded-lg transition-colors\"\n            data-testid=\"button-close-rules\"\n          >\n            <X className=\"h-6 w-6 text-slate-400\" />\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6 space-y-6\">\n          {/* Contest Title */}\n          <div>\n            <h3 className=\"text-xl font-bold text-white mb-2\">{contest.title}</h3>\n            <p className=\"text-slate-300\">{contest.description}</p>\n          </div>\n\n          {/* Key Info Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"bg-white/5 backdrop-blur-sm rounded-xl border border-white/10 p-4\">\n              <div className=\"flex items-center gap-2 text-violet-400 mb-2\">\n                <Trophy className=\"h-5 w-5\" />\n                <span className=\"text-sm font-medium\">Prize Pool</span>\n              </div>\n              <p className=\"text-2xl font-bold text-white\" data-testid=\"text-prize-pool\">\n                {formatPrizeAmount(contest.prizeGlory)} GLORY\n              </p>\n            </div>\n\n            <div className=\"bg-white/5 backdrop-blur-sm rounded-xl border border-white/10 p-4\">\n              <div className=\"flex items-center gap-2 text-violet-400 mb-2\">\n                <Calendar className=\"h-5 w-5\" />\n                <span className=\"text-sm font-medium\">Start Date</span>\n              </div>\n              <p className=\"text-lg font-semibold text-white\">\n                {new Date(contest.startAt).toLocaleDateString()}\n              </p>\n            </div>\n\n            <div className=\"bg-white/5 backdrop-blur-sm rounded-xl border border-white/10 p-4\">\n              <div className=\"flex items-center gap-2 text-violet-400 mb-2\">\n                <Calendar className=\"h-5 w-5\" />\n                <span className=\"text-sm font-medium\">End Date</span>\n              </div>\n              <p className=\"text-lg font-semibold text-white\">\n                {new Date(contest.endAt).toLocaleDateString()}\n              </p>\n            </div>\n          </div>\n\n          {/* Prize Distribution */}\n          {contest.config?.prizeDistribution && contest.config.prizeDistribution.length > 0 && (\n            <div className=\"bg-white/5 backdrop-blur-sm rounded-xl border border-white/10 p-6\">\n              <h4 className=\"text-lg font-bold text-white mb-4 flex items-center gap-2\">\n                <Award className=\"h-5 w-5 text-violet-400\" />\n                Prize Distribution\n              </h4>\n              <div className=\"space-y-2\">\n                {contest.config.prizeDistribution.map((prize: any) => (\n                  <div key={prize.place} className=\"flex items-center justify-between p-3 bg-white/5 rounded-lg\">\n                    <span className=\"text-slate-300 font-medium\">{prize.place === 1 ? '🥇' : prize.place === 2 ? '🥈' : prize.place === 3 ? '🥉' : `${prize.place}th`} Place</span>\n                    <span className=\"text-white font-bold\">{formatPrizeAmount(prize.value)} {contest.config.currency || 'GLORY'}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Voting Rules */}\n          {contest.config && (\n            <div className=\"bg-white/5 backdrop-blur-sm rounded-xl border border-white/10 p-6\">\n              <h4 className=\"text-lg font-bold text-white mb-4 flex items-center gap-2\">\n                <CheckSquare className=\"h-5 w-5 text-violet-400\" />\n                Voting Rules\n              </h4>\n              <div className=\"space-y-2 text-slate-300\">\n                {contest.config.voteLimitPerPeriod && (\n                  <div className=\"flex items-center justify-between p-3 bg-white/5 rounded-lg\">\n                    <span>Votes per Period</span>\n                    <span className=\"text-white font-semibold\">{contest.config.voteLimitPerPeriod}</span>\n                  </div>\n                )}\n                {contest.config.votePeriodHours && (\n                  <div className=\"flex items-center justify-between p-3 bg-white/5 rounded-lg\">\n                    <span>Period Duration</span>\n                    <span className=\"text-white font-semibold\">{contest.config.votePeriodHours} hours</span>\n                  </div>\n                )}\n                {contest.config.totalVoteLimit !== undefined && (\n                  <div className=\"flex items-center justify-between p-3 bg-white/5 rounded-lg\">\n                    <span>Total Vote Limit</span>\n                    <span className=\"text-white font-semibold\">{contest.config.totalVoteLimit === 0 ? 'Unlimited' : contest.config.totalVoteLimit}</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Participation Rules */}\n          {contest.config && (\n            <div className=\"bg-white/5 backdrop-blur-sm rounded-xl border border-white/10 p-6\">\n              <h4 className=\"text-lg font-bold text-white mb-4 flex items-center gap-2\">\n                <Shield className=\"h-5 w-5 text-violet-400\" />\n                Participation Rules\n              </h4>\n              <div className=\"space-y-2 text-slate-300\">\n                {contest.config.maxSubmissions && (\n                  <div className=\"flex items-center justify-between p-3 bg-white/5 rounded-lg\">\n                    <span>Max Submissions per User</span>\n                    <span className=\"text-white font-semibold\">{contest.config.maxSubmissions}</span>\n                  </div>\n                )}\n                {contest.config.allowedMediaTypes && (\n                  <div className=\"flex items-center justify-between p-3 bg-white/5 rounded-lg\">\n                    <span>Allowed Media Types</span>\n                    <span className=\"text-white font-semibold\">{contest.config.allowedMediaTypes.join(', ')}</span>\n                  </div>\n                )}\n                {contest.config.fileSizeLimit && (\n                  <div className=\"flex items-center justify-between p-3 bg-white/5 rounded-lg\">\n                    <span>File Size Limit</span>\n                    <span className=\"text-white font-semibold\">{contest.config.fileSizeLimit}MB</span>\n                  </div>\n                )}\n                {contest.config.eligibility && (\n                  <div className=\"flex items-center justify-between p-3 bg-white/5 rounded-lg\">\n                    <span>Eligibility</span>\n                    <span className=\"text-white font-semibold capitalize\">{contest.config.eligibility.replace(/_/g, ' ')}</span>\n                  </div>\n                )}\n                {contest.config.entryFee && contest.config.entryFeeAmount && (\n                  <div className=\"flex items-center justify-between p-3 bg-white/5 rounded-lg\">\n                    <span>Entry Fee</span>\n                    <span className=\"text-white font-semibold\">{formatPrizeAmount(contest.config.entryFeeAmount)} {contest.config.currency || 'GLORY'}</span>\n                  </div>\n                )}\n                {!contest.config.entryFee && (\n                  <div className=\"flex items-center justify-between p-3 bg-white/5 rounded-lg\">\n                    <span>Entry Fee</span>\n                    <span className=\"text-green-400 font-semibold\">Free to Enter</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Rules */}\n          <div className=\"bg-white/5 backdrop-blur-sm rounded-xl border border-white/10 p-6\">\n            <h4 className=\"text-lg font-bold text-white mb-4 flex items-center gap-2\">\n              <Users className=\"h-5 w-5 text-violet-400\" />\n              Contest Rules & Guidelines\n            </h4>\n            <div \n              className=\"prose prose-invert prose-sm max-w-none text-slate-300\"\n              dangerouslySetInnerHTML={{ __html: contest.rules.replace(/\\n/g, '<br>') }}\n              data-testid=\"text-contest-rules\"\n            />\n          </div>\n\n          {/* Close Button */}\n          <GlassButton\n            onClick={onClose}\n            className=\"w-full py-3\"\n            data-testid=\"button-close-rules-bottom\"\n          >\n            Close\n          </GlassButton>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10713},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"replit.md":{"content":"# 5best - Creative Competition Platform\n\n## Overview\n5best is a creative competition platform for image and video contests. It allows users to submit entries, vote, and earn GLORY rewards. The platform features robust role-based access control, admin moderation, and a structured reward system distributing prizes to top submissions. It aims to provide a modern, full-stack experience with a 5-tier subscription model including AI model access, and integrates Solana Pay for USDC subscription payments. The platform also includes a prompt marketplace for AI-generated images, enabling users to monetize their creative prompts.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend\n- **Framework**: React 18 with TypeScript and Vite.\n- **UI/UX**: shadcn/ui (Radix UI, Tailwind CSS) for styling, dark mode, gradient, and glass morphism effects.\n- **State Management**: TanStack Query.\n- **Form Handling**: React Hook Form with Zod validation.\n- **Routing**: Wouter.\n- **Navigation**: Standardized order (Home → AI Studio → Contests → Explore → Pricing) across desktop and mobile (BottomNav).\n\n### Backend\n- **Runtime**: Node.js with Express.js REST API.\n- **Language**: TypeScript.\n- **Database ORM**: Drizzle ORM with PostgreSQL (Neon serverless).\n- **Authentication**: JWT-based with httpOnly cookies; three-tier access control.\n- **Password Security**: bcrypt.\n- **Rate Limiting**: In-memory for voting, scalable to Redis.\n\n### Database & Data Model\n- **Core Entities**: Users, Contests, Submissions, Votes, GloryLedger, AuditLog.\n- **Key Patterns**: UUID PKs, composite unique constraints, cascade deletion, indexed columns, timestamp tracking.\n- **Contest Lifecycle**: Draft, Active, Ended, Archived.\n- **Prompt Marketplace**: `submissions` schema extended with `category`, `aiModel`, `prompt`, `generationId`, `promptForSale`, `promptPrice`, `promptCurrency`.\n- **Featured Contests**: `isFeatured` field in `contests` table.\n- **AI Generations**: `thumbnailUrl` and `storageBucket` fields in `ai_generations` for optimized loading and storage tracking.\n\n### File Upload & Media Management\n- **Primary**: Cloudinary for image/video uploads, optimization, and CDN.\n- **Secondary**: Supabase Storage for large AI-generated images (>= 10MB) and permanent storage.\n- **Process**: Multer middleware, validation, storage, URL persistence.\n- **AI Image Storage**: Two Supabase buckets (`pro-edit-images` for temporary, `5best-submissions` for permanent).\n- **Thumbnail Generation**: Automatic generation for AI images to optimize grid displays.\n\n### Contest & Reward System\n- **Reward Distribution**: Top 5 submissions receive tiered rewards (40%, 25%, 15%, 10%, 10%).\n- **Multi-Currency Support**: Prizes distributed in GLORY, SOL, or USDC based on contest configuration.\n- **Voting Flexibility**: Configurable `votesPerUserPerPeriod`, `periodDurationHours`, `totalVotesPerUser`.\n- **Contest Types**: Image/video specific with submission validation.\n- **Entry Fees**: Optional GLORY, Solana, or USDC.\n- **Jury Voting**: Supports public, jury, or hybrid methods.\n\n### Subscription System\n- **Model**: 5-tier (Free, Starter, Creator, Pro, Studio) with configurable features, AI credits, and pricing.\n- **USDC Payment Flow**: Solana Pay for USDC payments on Solana via QR code/wallet integration, server-side verification.\n\n### Pro Edit System (AI Enhancements)\n- **AI Presets**: 6 specialized presets (Clean & Denoise, Upscale 4x, Portrait Pro, Smart Enhance, Remove Background, Relight Scene) with credit costs.\n- **Comparison Tool**: Interactive before/after slider for enhanced versions.\n- **Version History**: Panel displaying and allowing selection of all enhancement versions.\n- **Reliability**: Auto-retry logic for prediction failures, timeout guards, clear error messages.\n- **Permanent Storage**: \"Save to Gallery\" feature to permanently store AI-generated and Pro Edited images.\n\n### API Design\n- **Validation**: Zod schemas.\n- **Error Handling**: Consistent JSON error responses.\n- **Response Format**: `{ data }` for success, `{ error }` for failure.\n\n## External Dependencies\n\n### Core Services\n- **Neon Database**: Serverless PostgreSQL.\n- **Cloudinary**: Media hosting and CDN.\n- **Supabase Storage**: Image storage for AI-generated content.\n\n### Authentication & Security\n- **jsonwebtoken**: JWT token handling.\n- **bcrypt**: Password hashing.\n- **cookie-parser**: Secure cookie handling.\n\n### Blockchain & Payment Integration\n- **Solana Web3.js**: Solana blockchain interaction.\n- **@solana/pay**: Solana Pay protocol.\n- **SPL Token**: USDC token standard.\n\n### AI & Image Processing\n- **Replicate API**: AI model integration (e.g., Real-ESRGAN, CodeFormer, Rembg).","size_bytes":4749},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        DEFAULT: \"0.25rem\",\n        lg: \"0.5rem\",\n        xl: \"0.75rem\",\n        full: \"9999px\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        success: {\n          DEFAULT: \"var(--success)\",\n          foreground: \"var(--success-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        display: ['Inter', 'sans-serif'],\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      animation: {\n        \"pulse-slow\": \"pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in-up\": \"fade-in-up 0.6s ease-out\",\n        \"fade-in-scale\": \"fade-in-scale 0.5s ease-out\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"fade-in-up\": {\n          \"0%\": {\n            opacity: \"0\",\n            transform: \"translateY(20px)\",\n          },\n          \"100%\": {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n        \"fade-in-scale\": {\n          \"0%\": {\n            opacity: \"0\",\n            transform: \"scale(0.95)\",\n          },\n          \"100%\": {\n            opacity: \"1\",\n            transform: \"scale(1)\",\n          },\n        },\n      },\n      transitionDelay: {\n        \"200\": \"200ms\",\n        \"300\": \"300ms\",\n        \"400\": \"400ms\",\n        \"500\": \"500ms\",\n      },\n      animationDelay: {\n        \"100\": \"100ms\",\n        \"200\": \"200ms\",\n        \"300\": \"300ms\",\n        \"400\": \"400ms\",\n        \"500\": \"500ms\",\n      },\n    },\n  },\n  plugins: [\n    require(\"tailwindcss-animate\"),\n    require(\"@tailwindcss/typography\"),\n    function ({ matchUtilities, theme }: any) {\n      matchUtilities(\n        {\n          \"animation-delay\": (value: string) => ({\n            \"animation-delay\": value,\n          }),\n        },\n        { values: theme(\"animationDelay\") }\n      );\n    },\n  ],\n} satisfies Config;\n","size_bytes":4101},"CASHOUT_TEST_SCENARIO.md":{"content":"# Solana Cashout Test Scenario\n\n## Test Environment Setup\n\n### Prerequisites\n- Phantom wallet browser extension installed\n- Test Solana wallet with devnet SOL/USDC (for demo purposes)\n- Two browser profiles/windows:\n  - Profile 1: Regular user account\n  - Profile 2: Admin account\n\n---\n\n## Test Scenario: Complete Cashout Workflow\n\n### Phase 1: User Wallet Connection\n\n**As a Regular User:**\n\n1. **Login to User Account**\n   - Navigate to `/login`\n   - Login with regular user credentials\n   - Verify user has GLORY balance > 1000\n\n2. **Connect Phantom Wallet**\n   - Navigate to `/profile`\n   - Click on \"Settings\" tab\n   - Locate \"Solana Wallet\" card\n   - Click \"Connect Phantom Wallet\" button\n   - Phantom extension popup appears\n   - Approve the connection request\n   - Verify wallet address is displayed\n   - Verify \"Verified\" badge appears\n\n**Expected Result:**\n- ✅ Wallet address shown in the UI\n- ✅ Green \"Verified\" badge displayed\n- ✅ Connection status saved to database\n\n---\n\n### Phase 2: Cashout Request\n\n**As a Regular User (continued):**\n\n3. **Submit Cashout Request**\n   - Still on Settings tab in profile page\n   - Locate \"Cash Out GLORY\" card\n   - Enter amount: `2000` GLORY\n   - Select token type: `USDC` (or SOL/GLORY)\n   - Click \"Request Cashout\" button\n   - Wait for success toast notification\n\n4. **Verify Request Appears**\n   - Scroll down to \"Cashout History\" section\n   - Verify new request appears with:\n     - Amount: 2000 GLORY → 2000 USDC (1:1 ratio)\n     - Status: \"pending\" (yellow badge)\n     - Date: Current date\n   - Check user's GLORY balance (should be unchanged - not deducted yet)\n\n**Expected Result:**\n- ✅ Request created successfully\n- ✅ Status shows \"pending\"\n- ✅ GLORY not yet deducted (deducted only on admin approval)\n\n---\n\n### Phase 3: Admin Approval\n\n**As an Admin:**\n\n5. **Access Admin Dashboard**\n   - Login with admin credentials\n   - Navigate to `/admin`\n   - Click on \"Cashouts\" tab\n\n6. **Review Pending Request**\n   - Verify the cashout request appears in the table\n   - Check details:\n     - User: Username and email visible\n     - Amount: 2000 GLORY → 2000 USDC\n     - Wallet: Truncated Solana address\n     - Status: \"pending\" badge\n     - Actions: \"Approve\" and \"Reject\" buttons visible\n\n7. **Approve Cashout Request**\n   - Click \"Approve\" button for the request\n   - Wait for success toast: \"Cashout Approved - GLORY has been deducted...\"\n   - Verify status changes to \"approved\" (blue badge)\n   - Verify action button changes to \"Mark as Sent\"\n\n**Expected Result:**\n- ✅ Status changed to \"approved\"\n- ✅ User's GLORY balance deducted by 2000\n- ✅ GLORY ledger entry created (negative delta)\n- ✅ \"Mark as Sent\" button now visible\n\n**Alternative Flow - Rejection:**\n- Click \"Reject\" instead of \"Approve\"\n- Verify status changes to \"rejected\" (red badge)\n- Verify user's GLORY balance remains unchanged (no deduction occurred)\n- Verify no GLORY ledger entries created (query glory_ledger for this user)\n- Verify cashout_events shows pending → rejected transition\n- No further actions available\n\n---\n\n### Phase 4: Token Transfer & Transaction Recording\n\n**As an Admin (continued):**\n\n8. **Simulate Token Transfer**\n   - **Manual Step:** Use Phantom wallet to send tokens to user's wallet address\n   - Copy user's Solana wallet address from the table\n   - Send 2000 USDC (or equivalent) on Solana devnet\n   - **Copy the transaction hash from Phantom**\n\n9. **Mark Cashout as Sent**\n   - Back in admin dashboard, click \"Mark as Sent\" button\n   - Transaction hash dialog appears\n   - Paste the transaction hash from Phantom\n   - Click \"Mark as Sent\" button\n   - Wait for success toast\n\n10. **Verify Transaction Recorded**\n    - Status changes to \"sent\" (blue badge)\n    - \"View TX\" link appears next to the request\n    - Click \"View TX\" link\n    - Verify it opens Solscan.io with correct transaction hash\n    - Verify transaction details on Solscan (devnet)\n\n**Expected Result:**\n- ✅ Transaction hash saved to database\n- ✅ Status updated to \"sent\"\n- ✅ Solscan link works correctly\n- ✅ Cashout event recorded in audit log\n\n---\n\n### Phase 5: User Verification\n\n**As a Regular User:**\n\n11. **Check Cashout Status**\n    - Navigate back to `/profile` → Settings tab\n    - Scroll to \"Cashout History\"\n    - Verify request now shows:\n      - Status: \"sent\" or \"confirmed\" (blue/green badge)\n      - \"View Transaction\" link visible\n    - Click transaction link\n    - Verify Solscan page loads with transaction\n\n12. **Verify GLORY Balance**\n    - Check GLORY balance display (should be reduced by 2000)\n    - Navigate to \"GLORY History\" tab\n    - Verify deduction entry appears:\n      - Reason: \"Cashout deduction\" or similar\n      - Delta: -2000 GLORY\n      - Date: Approval timestamp\n\n**Expected Result:**\n- ✅ User sees completed cashout with transaction link\n- ✅ GLORY balance correctly reduced\n- ✅ GLORY ledger shows deduction entry\n- ✅ Transaction link works from user view\n\n---\n\n## Test Case Matrix\n\n| Scenario | Expected Behavior | Status |\n|----------|------------------|--------|\n| Connect wallet without Phantom | Error message, redirect to Phantom download | ⬜ |\n| Request cashout < 1000 GLORY | Validation error message | ⬜ |\n| Request cashout > user balance | Backend validation error | ⬜ |\n| Admin approves request | GLORY deducted, status → approved | ⬜ |\n| Admin rejects pending request | Status → rejected, no GLORY change | ⬜ |\n| Mark as sent without TX hash | Validation error in dialog | ⬜ |\n| Mark as sent with TX hash | Status → sent, link works | ⬜ |\n| Approve request twice (race condition) | Second attempt fails gracefully | ⬜ |\n| Disconnect wallet | Wallet status cleared, cashout disabled | ⬜ |\n\n---\n\n## Edge Cases to Test\n\n### 1. Multiple Cashout Requests\n- Create 3 cashout requests as user\n- Approve 1st, reject 2nd, keep 3rd pending\n- Verify all show correct status independently\n\n### 2. Transaction Confirmation Flow\n- Admin approves request (GLORY deducted, status → \"approved\")\n- Admin marks as sent with TX hash (status → \"sent\")\n- **Expected:** Transaction recorded with hash\n- **Verify:** Solscan link works, cashout_events shows transitions\n\n### 3. Invalid Transaction Hash\n- Mark cashout as sent\n- Enter invalid/malformed transaction hash\n- Complete the action\n- Click \"View TX\" link\n- **Expected:** Solscan shows error or 404 (graceful handling)\n\n### 4. Wallet Re-connection\n- Connect wallet\n- Submit cashout request\n- Disconnect wallet\n- Reconnect same wallet\n- **Expected:** Previous cashout request still accessible\n\n---\n\n## Database Verification Queries\n\nAfter testing, verify database state:\n\n```sql\n-- Check cashout requests\nSELECT id, user_id, wallet_id, amount_glory, amount_token, \n       token_type, status, tx_hash, admin_id, created_at\nFROM cashout_requests \nORDER BY created_at DESC LIMIT 5;\n\n-- Check cashout events (audit trail for status transitions)\nSELECT id, cashout_request_id, from_status, to_status, \n       actor_user_id, notes, created_at\nFROM cashout_events \nORDER BY created_at DESC LIMIT 10;\n\n-- Check user GLORY balance and wallet\nSELECT u.id, u.username, u.glory_balance, \n       w.address, w.provider, w.status AS wallet_status\nFROM users u\nLEFT JOIN user_wallets w ON w.user_id = u.id\nWHERE u.username = 'testuser';\n\n-- Check GLORY ledger entries for cashout-related transactions\nSELECT user_id, delta, reason, contest_id, submission_id, created_at\nFROM glory_ledger \nWHERE reason LIKE '%cashout%' OR reason LIKE '%Cashout%'\nORDER BY created_at DESC LIMIT 10;\n\n-- Get full cashout details with user and wallet info\nSELECT \n    cr.id AS request_id,\n    cr.status,\n    cr.amount_glory,\n    cr.amount_token,\n    cr.token_type,\n    cr.tx_hash,\n    u.username,\n    u.email,\n    u.glory_balance AS current_glory,\n    w.address AS wallet_address,\n    w.provider,\n    cr.created_at,\n    cr.updated_at\nFROM cashout_requests cr\nJOIN users u ON cr.user_id = u.id\nJOIN user_wallets w ON cr.wallet_id = w.id\nORDER BY cr.created_at DESC\nLIMIT 5;\n```\n\n---\n\n## Success Criteria\n\n- ✅ Wallet connects and verifies via Solana signature\n- ✅ Cashout requests created with correct amounts and token types\n- ✅ Admin can approve/reject pending requests with proper state transitions\n- ✅ GLORY deducted only on admin approval (not on request creation)\n- ✅ GLORY remains unchanged on pending rejection (no deduction occurred, so no refund needed)\n- ✅ Transaction hashes saved and displayed correctly\n- ✅ Solscan links work for devnet transactions\n- ✅ Complete audit trail in cashout_events table:\n  - pending → approved (or rejected)\n  - approved → sent (with TX hash)\n- ✅ GLORY ledger entries created correctly:\n  - Deduction entry when admin approves request\n  - No ledger entry when admin rejects pending request (nothing to deduct/refund)\n- ✅ All UI states display correctly:\n  - pending: Shows approve/reject buttons\n  - approved: Shows \"mark as sent\" button\n  - sent: Shows Solscan transaction link\n  - rejected: No actions available\n- ✅ No console errors or unhandled exceptions\n- ✅ Proper toast notifications for all state changes\n\n---\n\n## Known Limitations (Devnet)\n\n1. **Mock Token Conversion:** 1 GLORY = 1 USDC (hardcoded, no real price feed)\n2. **Manual Token Transfer:** Admin must manually send tokens via Phantom\n3. **Devnet Only:** Transaction links point to Solscan devnet\n4. **No Automatic Confirmation:** Status doesn't auto-update from blockchain\n\n---\n\n## Next Steps After Testing\n\nIf all tests pass:\n1. Document any bugs found and fixes applied\n2. Consider adding automated tests for critical flows\n3. Add production-ready features:\n   - Automatic token price conversion (GLORY → USD → SOL/USDC)\n   - Automated token transfer via backend wallet\n   - Blockchain confirmation polling\n   - Mainnet deployment configuration\n","size_bytes":9828},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, numeric, timestamp, boolean, jsonb, unique, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\", { length: 255 }).notNull().unique(),\n  email: varchar(\"email\", { length: 255 }).notNull().unique(),\n  passwordHash: text(\"password_hash\").notNull(),\n  avatarUrl: text(\"avatar_url\"),\n  role: varchar(\"role\", { length: 50 }).notNull().default(\"user\"), // user, admin\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"pending\"), // pending, approved, banned\n  gloryBalance: integer(\"glory_balance\").notNull().default(0),\n  solBalance: numeric(\"sol_balance\", { precision: 18, scale: 9 }).notNull().default(\"0\"), // SOL with 9 decimals\n  usdcBalance: numeric(\"usdc_balance\", { precision: 18, scale: 6 }).notNull().default(\"0\"), // USDC with 6 decimals\n  imageCredits: integer(\"image_credits\").notNull().default(100), // Credits for AI image generation and upscaling\n  withdrawalAddress: varchar(\"withdrawal_address\", { length: 255 }), // Solana withdrawal address\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow()\n}, (table) => ({\n  emailIdx: index(\"users_email_idx\").on(table.email),\n  usernameIdx: index(\"users_username_idx\").on(table.username)\n}));\n\n// Contests table\nexport const contests = pgTable(\"contests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  slug: varchar(\"slug\", { length: 255 }).notNull().unique(),\n  description: text(\"description\").notNull(),\n  rules: text(\"rules\").notNull(),\n  coverImageUrl: text(\"cover_image_url\"),\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"draft\"), // draft, active, ended, archived\n  prizeGlory: numeric(\"prize_glory\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  startAt: timestamp(\"start_at\").notNull(),\n  endAt: timestamp(\"end_at\").notNull(),\n  config: jsonb(\"config\"), // Stores all additional contest configuration (voting rules, prize distribution, etc.)\n  isFeatured: boolean(\"is_featured\").notNull().default(false), // Featured contest shown on home page\n  createdAt: timestamp(\"created_at\").notNull().defaultNow()\n}, (table) => ({\n  slugIdx: index(\"contests_slug_idx\").on(table.slug),\n  statusIdx: index(\"contests_status_idx\").on(table.status)\n}));\n\n// Submissions table\nexport const submissions = pgTable(\"submissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  contestId: varchar(\"contest_id\").references(() => contests.id, { onDelete: \"set null\" }),\n  contestName: varchar(\"contest_name\", { length: 255 }), // Preserved contest name even after contest deletion\n  type: varchar(\"type\", { length: 50 }).notNull(), // image, video\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  mediaUrl: text(\"media_url\").notNull(),\n  thumbnailUrl: text(\"thumbnail_url\"),\n  cloudinaryPublicId: varchar(\"cloudinary_public_id\", { length: 255 }), // Store Cloudinary public_id for easy deletion\n  cloudinaryResourceType: varchar(\"cloudinary_resource_type\", { length: 20 }), // Store resource type (image/video) for deletion\n  tags: text(\"tags\").array(),\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"pending\"), // pending, approved, rejected\n  votesCount: integer(\"votes_count\").notNull().default(0),\n  isEnhanced: boolean(\"is_enhanced\").notNull().default(false), // True if edited or upscaled via built-in editor\n  entryFeeAmount: text(\"entry_fee_amount\"), // Entry fee amount paid at submission time (stored as string for precision)\n  entryFeeCurrency: varchar(\"entry_fee_currency\", { length: 20 }), // Currency of entry fee (GLORY, SOL, USDC)\n  category: varchar(\"category\", { length: 100 }), // Category (Art, Portrait, Landscape, etc.)\n  aiModel: varchar(\"ai_model\", { length: 255 }), // AI model used to generate the image\n  prompt: text(\"prompt\"), // Prompt used to generate the image\n  generationId: varchar(\"generation_id\").references(() => aiGenerations.id, { onDelete: \"set null\" }), // Reference to AI generation\n  promptForSale: boolean(\"prompt_for_sale\").notNull().default(false), // Whether the prompt is for sale\n  promptPrice: numeric(\"prompt_price\", { precision: 18, scale: 6 }), // Price for the prompt (supports decimals for crypto)\n  promptCurrency: varchar(\"prompt_currency\", { length: 20 }), // Currency for prompt sale (SOL, USDC, GLORY)\n  createdAt: timestamp(\"created_at\").notNull().defaultNow()\n}, (table) => ({\n  userContestIdx: index(\"submissions_user_contest_idx\").on(table.userId, table.contestId),\n  contestStatusIdx: index(\"submissions_contest_status_idx\").on(table.contestId, table.status),\n  votesIdx: index(\"submissions_votes_idx\").on(table.votesCount)\n}));\n\n// Votes table\nexport const votes = pgTable(\"votes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  submissionId: varchar(\"submission_id\").notNull().references(() => submissions.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow()\n}, (table) => ({\n  userIdx: index(\"votes_user_idx\").on(table.userId),\n  submissionIdx: index(\"votes_submission_idx\").on(table.submissionId),\n  createdAtIdx: index(\"votes_created_at_idx\").on(table.createdAt)\n}));\n\n// Glory Ledger table (kept for backwards compatibility, but now tracks all currencies)\nexport const gloryLedger = pgTable(\"glory_ledger\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  delta: numeric(\"delta\", { precision: 18, scale: 9 }).notNull(), // positive or negative change (supports GLORY integers and SOL/USDC decimals)\n  currency: varchar(\"currency\", { length: 20 }).notNull().default(\"GLORY\"), // GLORY, SOL, USDC\n  reason: text(\"reason\").notNull(),\n  contestId: varchar(\"contest_id\").references(() => contests.id, { onDelete: \"set null\" }),\n  submissionId: varchar(\"submission_id\").references(() => submissions.id, { onDelete: \"set null\" }),\n  txHash: varchar(\"tx_hash\", { length: 255 }), // Blockchain transaction hash (for crypto payments)\n  metadata: jsonb(\"metadata\"), // Additional transaction metadata\n  createdAt: timestamp(\"created_at\").notNull().defaultNow()\n}, (table) => ({\n  userIdx: index(\"glory_ledger_user_idx\").on(table.userId),\n  createdAtIdx: index(\"glory_ledger_created_at_idx\").on(table.createdAt),\n  contestSubmissionUnique: unique(\"glory_ledger_contest_submission_unique\").on(table.contestId, table.submissionId),\n  txHashUnique: unique(\"glory_ledger_tx_hash_unique\").on(table.txHash)\n}));\n\n// Audit Log table\nexport const auditLog = pgTable(\"audit_log\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  actorUserId: varchar(\"actor_user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  action: varchar(\"action\", { length: 255 }).notNull(),\n  meta: jsonb(\"meta\"), // JSON metadata\n  createdAt: timestamp(\"created_at\").notNull().defaultNow()\n}, (table) => ({\n  actorIdx: index(\"audit_log_actor_idx\").on(table.actorUserId),\n  createdAtIdx: index(\"audit_log_created_at_idx\").on(table.createdAt)\n}));\n\n// User Wallets table (Solana wallet addresses)\nexport const userWallets = pgTable(\"user_wallets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  address: varchar(\"address\", { length: 255 }).notNull().unique(), // Solana wallet address\n  provider: varchar(\"provider\", { length: 50 }).notNull(), // phantom, solflare, etc\n  signatureNonce: varchar(\"signature_nonce\", { length: 255 }), // For verification\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"active\"), // active, inactive\n  verifiedAt: timestamp(\"verified_at\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow()\n}, (table) => ({\n  userIdx: index(\"user_wallets_user_idx\").on(table.userId),\n  addressIdx: index(\"user_wallets_address_idx\").on(table.address)\n}));\n\n// Cashout Requests table\nexport const cashoutRequests = pgTable(\"cashout_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  withdrawalAddress: varchar(\"withdrawal_address\", { length: 255 }).notNull(), // Solana withdrawal address\n  amountGlory: integer(\"amount_glory\").notNull(), // GLORY points to cash out\n  amountToken: text(\"amount_token\").notNull(), // Token amount (as string for precision)\n  tokenType: varchar(\"token_type\", { length: 50 }).notNull().default(\"USDC\"), // USDC, SOL, GLORY\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"pending\"), // pending, approved, rejected, processing, sent, confirmed, failed\n  adminId: varchar(\"admin_id\").references(() => users.id, { onDelete: \"set null\" }), // Admin who processed\n  txHash: varchar(\"tx_hash\", { length: 255 }), // Solana transaction hash\n  txMeta: jsonb(\"tx_meta\"), // Additional transaction metadata\n  rejectionReason: text(\"rejection_reason\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow()\n}, (table) => ({\n  userIdx: index(\"cashout_requests_user_idx\").on(table.userId),\n  statusIdx: index(\"cashout_requests_status_idx\").on(table.status),\n  createdAtIdx: index(\"cashout_requests_created_at_idx\").on(table.createdAt)\n}));\n\n// Cashout Events table (audit trail)\nexport const cashoutEvents = pgTable(\"cashout_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  cashoutRequestId: varchar(\"cashout_request_id\").notNull().references(() => cashoutRequests.id, { onDelete: \"cascade\" }),\n  fromStatus: varchar(\"from_status\", { length: 50 }).notNull(),\n  toStatus: varchar(\"to_status\", { length: 50 }).notNull(),\n  actorUserId: varchar(\"actor_user_id\").references(() => users.id, { onDelete: \"set null\" }),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow()\n}, (table) => ({\n  cashoutRequestIdx: index(\"cashout_events_cashout_request_idx\").on(table.cashoutRequestId),\n  createdAtIdx: index(\"cashout_events_created_at_idx\").on(table.createdAt)\n}));\n\n// Relations\nexport const cashoutRequestsRelations = relations(cashoutRequests, ({ one }) => ({\n  user: one(users, {\n    fields: [cashoutRequests.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  gloryBalance: true\n});\n\nexport const insertContestSchema = createInsertSchema(contests).omit({\n  id: true,\n  createdAt: true\n}).extend({\n  prizeGlory: z.union([z.string(), z.number()]).transform(val => {\n    const num = typeof val === 'string' ? parseFloat(val) : val;\n    if (isNaN(num) || num < 0) throw new Error('Prize pool must be a positive number');\n    return String(num); // Return as string, preserving original precision\n  }),\n  startAt: z.union([z.date(), z.string()]).transform(val => \n    typeof val === 'string' ? new Date(val) : val\n  ),\n  endAt: z.union([z.date(), z.string()]).transform(val => \n    typeof val === 'string' ? new Date(val) : val\n  )\n});\n\nexport const insertSubmissionSchema = createInsertSchema(submissions).omit({\n  id: true,\n  createdAt: true,\n  votesCount: true\n});\n\nexport const insertVoteSchema = createInsertSchema(votes).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertGloryLedgerSchema = createInsertSchema(gloryLedger).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLog).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertUserWalletSchema = createInsertSchema(userWallets).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\n\nexport const insertCashoutRequestSchema = createInsertSchema(cashoutRequests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\n\nexport const insertCashoutEventSchema = createInsertSchema(cashoutEvents).omit({\n  id: true,\n  createdAt: true\n});\n\n// Contest Config schema\nexport const contestConfigSchema = z.object({\n  // Contest type and rules\n  contestType: z.enum([\"image\", \"video\"]).optional(),\n  votingMethods: z.array(z.enum([\"public\", \"jury\"])).optional(),\n  juryMembers: z.array(z.string()).optional(),\n  maxSubmissions: z.number().optional(),\n  fileSizeLimit: z.number().optional(),\n  \n  // Timing\n  submissionEndAt: z.string().optional(),\n  votingStartAt: z.string().optional(),\n  votingEndAt: z.string().optional(),\n  \n  // Voting rules\n  votesPerUserPerPeriod: z.number().optional(),\n  periodDurationHours: z.number().optional(),\n  totalVotesPerUser: z.number().optional(),\n  \n  // Prize distribution\n  prizeDistribution: z.array(z.number()).optional(),\n  currency: z.enum([\"GLORY\", \"SOL\", \"USDC\"]).optional(), // Prize currency\n  \n  // Entry fee configuration\n  entryFee: z.boolean().optional(),\n  entryFeeAmount: z.number().optional(),\n  entryFeeCurrency: z.enum([\"GLORY\", \"SOL\", \"USDC\", \"CUSTOM\"]).optional(),\n  entryFeePaymentMethods: z.array(z.enum([\"balance\", \"wallet\"])).optional(), // Allow balance or wallet payment\n  \n  // Platform wallet configuration for crypto payments\n  platformWalletAddress: z.string().min(32).max(44).regex(/^[1-9A-HJ-NP-Za-km-z]+$/).optional(), // Solana wallet address (base58, 32-44 chars)\n  platformFeePercentage: z.number().min(0).max(100).optional(), // Platform fee percentage from entry fees\n  \n  // Custom SPL token support\n  customTokenMint: z.string().min(32).max(44).regex(/^[1-9A-HJ-NP-Za-km-z]+$/).optional(), // Solana SPL token mint address (base58, 32-44 chars)\n  customTokenDecimals: z.number().int().min(0).max(9).optional(), // Decimals for custom token (0-9)\n}).optional().refine((config) => {\n  // If currency is CUSTOM, require customTokenMint and customTokenDecimals\n  if (config?.entryFeeCurrency === \"CUSTOM\") {\n    return config.customTokenMint && config.customTokenDecimals !== undefined;\n  }\n  return true;\n}, {\n  message: \"customTokenMint and customTokenDecimals are required when entryFeeCurrency is CUSTOM\"\n}).refine((config) => {\n  // Forbid customTokenMint/decimals when currency is not CUSTOM\n  if (config?.entryFeeCurrency && config.entryFeeCurrency !== \"CUSTOM\") {\n    return !config.customTokenMint && config.customTokenDecimals === undefined;\n  }\n  return true;\n}, {\n  message: \"customTokenMint and customTokenDecimals can only be used when entryFeeCurrency is CUSTOM\"\n}).refine((config) => {\n  // If wallet payment is enabled, require platformWalletAddress\n  if (config?.entryFeePaymentMethods?.includes(\"wallet\")) {\n    return !!config.platformWalletAddress;\n  }\n  return true;\n}, {\n  message: \"platformWalletAddress is required when wallet payment method is enabled\"\n});\n\nexport type ContestConfig = z.infer<typeof contestConfigSchema>;\n\n// Auth schemas\nexport const loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6)\n});\n\nexport const registerSchema = z.object({\n  username: z.string().min(3).max(50),\n  email: z.string().email(),\n  password: z.string().min(6)\n});\n\n// API response schemas\nexport const voteSubmissionSchema = z.object({\n  submissionId: z.string()\n});\n\nexport const updateUserStatusSchema = z.object({\n  status: z.enum([\"pending\", \"approved\", \"banned\"])\n});\n\nexport const updateSubmissionStatusSchema = z.object({\n  status: z.enum([\"pending\", \"approved\", \"rejected\"])\n});\n\nexport const updateWithdrawalAddressSchema = z.object({\n  address: z.string().min(32).max(44) // Solana wallet address (32-44 chars)\n});\n\nexport const bulkSubmissionIdsSchema = z.object({\n  submissionIds: z.array(z.string()).min(1, \"At least one submission must be selected\")\n});\n\n// Wallet and Cashout schemas\nexport const connectWalletSchema = z.object({\n  address: z.string().min(32).max(44), // Solana addresses are 32-44 chars\n  provider: z.string(), // phantom, solflare, etc\n  signature: z.string(), // Signature for verification\n  message: z.string() // Message that was signed\n});\n\nexport const createCashoutRequestSchema = z.object({\n  withdrawalAddress: z.string().min(32).max(44), // Solana address\n  amountGlory: z.number().int().min(1000), // Minimum 1000 GLORY\n  tokenType: z.enum([\"USDC\", \"SOL\", \"GLORY\"]).default(\"USDC\")\n});\n\nexport const updateCashoutStatusSchema = z.object({\n  status: z.enum([\"approved\", \"rejected\", \"processing\", \"sent\", \"confirmed\", \"failed\"]),\n  rejectionReason: z.string().optional(),\n  txHash: z.string().optional()\n});\n\nexport const approveCashoutSchema = z.object({\n  requestId: z.string()\n});\n\nexport const rejectCashoutSchema = z.object({\n  requestId: z.string(),\n  rejectionReason: z.string().optional()\n});\n\nexport const bulkCashoutIdsSchema = z.object({\n  requestIds: z.array(z.string()).min(1, \"At least one request must be selected\")\n});\n\nexport const bulkRejectCashoutSchema = z.object({\n  requestIds: z.array(z.string()).min(1, \"At least one request must be selected\"),\n  rejectionReason: z.string().optional()\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertContest = z.infer<typeof insertContestSchema>;\nexport type Contest = typeof contests.$inferSelect;\nexport type InsertSubmission = z.infer<typeof insertSubmissionSchema>;\nexport type Submission = typeof submissions.$inferSelect;\nexport type InsertVote = z.infer<typeof insertVoteSchema>;\nexport type Vote = typeof votes.$inferSelect;\nexport type InsertGloryLedger = z.infer<typeof insertGloryLedgerSchema>;\nexport type GloryLedger = typeof gloryLedger.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\nexport type AuditLog = typeof auditLog.$inferSelect;\nexport type InsertUserWallet = z.infer<typeof insertUserWalletSchema>;\nexport type UserWallet = typeof userWallets.$inferSelect;\nexport type InsertCashoutRequest = z.infer<typeof insertCashoutRequestSchema>;\nexport type CashoutRequest = typeof cashoutRequests.$inferSelect;\nexport type InsertCashoutEvent = z.infer<typeof insertCashoutEventSchema>;\nexport type CashoutEvent = typeof cashoutEvents.$inferSelect;\nexport type InsertAiGeneration = z.infer<typeof insertAiGenerationSchema>;\nexport type AiGeneration = typeof aiGenerations.$inferSelect;\n\n// Extended types with relations\nexport type SubmissionWithUser = Submission & {\n  user: Pick<User, 'id' | 'username'>;\n  contest: Pick<Contest, 'id' | 'title'>;\n};\n\nexport type ContestWithStats = Contest & {\n  submissionCount: number;\n  participantCount: number;\n  totalVotes: number;\n  topSubmissionImageUrl?: string | null;\n};\n\nexport type UserWithStats = User & {\n  submissionCount: number;\n  totalVotes: number;\n  contestWins: number;\n};\n\nexport type CashoutRequestWithRelations = CashoutRequest & {\n  user: Pick<User, 'id' | 'username' | 'email' | 'gloryBalance'>;\n};\n\n// AI Generations table\nexport const aiGenerations = pgTable(\"ai_generations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  prompt: text(\"prompt\").notNull(),\n  model: varchar(\"model\", { length: 255 }).notNull(), // e.g., \"stability-ai/sdxl\"\n  imageUrl: text(\"image_url\").notNull(),\n  thumbnailUrl: text(\"thumbnail_url\"), // Thumbnail URL for fast loading (400x400)\n  parameters: jsonb(\"parameters\"), // Store generation parameters (width, height, steps, etc.)\n  cloudinaryPublicId: varchar(\"cloudinary_public_id\", { length: 255 }),\n  storageBucket: varchar(\"storage_bucket\", { length: 50 }).notNull().default(\"cloudinary\"), // cloudinary, supabase-temp\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"generated\"), // generated, saved, submitted\n  editedImageUrl: text(\"edited_image_url\"), // URL of edited version (if edited via built-in editor)\n  isEdited: boolean(\"is_edited\").notNull().default(false), // True if edited via built-in editor\n  isUpscaled: boolean(\"is_upscaled\").notNull().default(false), // True if upscaled via AI upscaling\n  creditsUsed: integer(\"credits_used\").notNull().default(0), // Credits deducted for this generation\n  createdAt: timestamp(\"created_at\").notNull().defaultNow()\n}, (table) => ({\n  userIdx: index(\"ai_generations_user_idx\").on(table.userId),\n  createdAtIdx: index(\"ai_generations_created_at_idx\").on(table.createdAt)\n}));\n\n// Site Settings table (global settings - should have only one row)\nexport const siteSettings = pgTable(\"site_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  privateMode: boolean(\"private_mode\").notNull().default(false), // When true, only logged-in users can access the site\n  platformWalletAddress: varchar(\"platform_wallet_address\", { length: 255 }), // Solana wallet address for receiving entry fees\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow()\n});\n\nexport const insertSiteSettingsSchema = createInsertSchema(siteSettings).omit({\n  id: true,\n  updatedAt: true\n});\n\nexport type InsertSiteSettings = z.infer<typeof insertSiteSettingsSchema>;\nexport type SiteSettings = typeof siteSettings.$inferSelect;\n\n// Pricing Settings table (key-value store for model costs and upscale pricing)\nexport const pricingSettings = pgTable(\"pricing_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  key: varchar(\"key\", { length: 255 }).notNull().unique(), // e.g., \"leonardo\", \"nano-banana\", \"upscale\"\n  value: integer(\"value\").notNull(), // Credit cost\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow()\n});\n\nexport const insertPricingSettingSchema = createInsertSchema(pricingSettings).omit({\n  id: true,\n  updatedAt: true\n});\n\nexport type InsertPricingSetting = z.infer<typeof insertPricingSettingSchema>;\nexport type PricingSetting = typeof pricingSettings.$inferSelect;\n\nexport const insertAiGenerationSchema = createInsertSchema(aiGenerations).omit({\n  id: true,\n  createdAt: true\n});\n\n// Subscription Tiers table\nexport const subscriptionTiers = pgTable(\"subscription_tiers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  slug: varchar(\"slug\", { length: 100 }).notNull().unique(), // free, starter, creator, pro, studio\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  priceUsd: integer(\"price_usd\").notNull().default(0), // Price in cents (0 for free tier)\n  monthlyCredits: integer(\"monthly_credits\").notNull().default(0),\n  \n  // Feature flags\n  canEdit: boolean(\"can_edit\").notNull().default(false),\n  canUpscale: boolean(\"can_upscale\").notNull().default(false),\n  \n  // AI model access (array of model slugs)\n  allowedModels: text(\"allowed_models\").array().notNull().default(sql`ARRAY[]::text[]`),\n  \n  // Commission rates (percentage as integer, e.g., 15 = 15%)\n  promptCommission: integer(\"prompt_commission\").notNull().default(0), // % from prompt sales\n  imageCommission: integer(\"image_commission\").notNull().default(0), // % from image/video sales\n  \n  // Additional features (stored as JSON for flexibility)\n  features: jsonb(\"features\"), // { maxSubmissionsPerContest: 10, prioritySupport: true, etc. }\n  \n  isActive: boolean(\"is_active\").notNull().default(true),\n  sortOrder: integer(\"sort_order\").notNull().default(0), // For display ordering\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow()\n}, (table) => ({\n  slugIdx: index(\"subscription_tiers_slug_idx\").on(table.slug),\n  sortOrderIdx: index(\"subscription_tiers_sort_order_idx\").on(table.sortOrder)\n}));\n\n// User Subscriptions table\nexport const userSubscriptions = pgTable(\"user_subscriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  tierId: varchar(\"tier_id\").notNull().references(() => subscriptionTiers.id, { onDelete: \"restrict\" }),\n  \n  status: varchar(\"status\", { length: 50 }).notNull().default(\"active\"), // active, cancelled, expired, pending\n  paymentMethod: varchar(\"payment_method\", { length: 50 }), // stripe, usdc, sol\n  \n  // Stripe-specific fields\n  stripeSubscriptionId: varchar(\"stripe_subscription_id\", { length: 255 }),\n  stripeCustomerId: varchar(\"stripe_customer_id\", { length: 255 }),\n  \n  // Crypto payment fields\n  paymentTxHash: varchar(\"payment_tx_hash\", { length: 255 }), // Solana transaction hash\n  \n  // Subscription period\n  currentPeriodStart: timestamp(\"current_period_start\").notNull(),\n  currentPeriodEnd: timestamp(\"current_period_end\").notNull(),\n  \n  // Credit tracking\n  creditsGranted: integer(\"credits_granted\").notNull().default(0), // Credits granted for this billing period\n  creditsGrantedAt: timestamp(\"credits_granted_at\"), // When credits were last granted\n  \n  cancelAtPeriodEnd: boolean(\"cancel_at_period_end\").notNull().default(false),\n  cancelledAt: timestamp(\"cancelled_at\"),\n  \n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow()\n}, (table) => ({\n  userIdx: index(\"user_subscriptions_user_idx\").on(table.userId),\n  tierIdx: index(\"user_subscriptions_tier_idx\").on(table.tierId),\n  statusIdx: index(\"user_subscriptions_status_idx\").on(table.status),\n  stripeSubscriptionIdx: index(\"user_subscriptions_stripe_subscription_idx\").on(table.stripeSubscriptionId),\n  currentPeriodEndIdx: index(\"user_subscriptions_current_period_end_idx\").on(table.currentPeriodEnd)\n}));\n\n// Subscription Transactions table (payment history)\nexport const subscriptionTransactions = pgTable(\"subscription_transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  subscriptionId: varchar(\"subscription_id\").notNull().references(() => userSubscriptions.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  tierId: varchar(\"tier_id\").notNull().references(() => subscriptionTiers.id, { onDelete: \"restrict\" }),\n  \n  amountCents: integer(\"amount_cents\").notNull(), // Amount in cents (for USD pricing)\n  currency: varchar(\"currency\", { length: 20 }).notNull().default(\"USD\"), // USD, USDC, SOL\n  \n  paymentMethod: varchar(\"payment_method\", { length: 50 }).notNull(), // stripe, usdc, sol\n  paymentStatus: varchar(\"payment_status\", { length: 50 }).notNull().default(\"pending\"), // pending, completed, failed, refunded\n  \n  // Stripe fields\n  stripeInvoiceId: varchar(\"stripe_invoice_id\", { length: 255 }),\n  stripeChargeId: varchar(\"stripe_charge_id\", { length: 255 }),\n  \n  // Crypto fields\n  txHash: varchar(\"tx_hash\", { length: 255 }), // Solana transaction hash\n  walletAddress: varchar(\"wallet_address\", { length: 255 }), // Payer's wallet address\n  \n  metadata: jsonb(\"metadata\"), // Additional transaction data\n  \n  createdAt: timestamp(\"created_at\").notNull().defaultNow()\n}, (table) => ({\n  subscriptionIdx: index(\"subscription_transactions_subscription_idx\").on(table.subscriptionId),\n  userIdx: index(\"subscription_transactions_user_idx\").on(table.userId),\n  statusIdx: index(\"subscription_transactions_status_idx\").on(table.paymentStatus),\n  createdAtIdx: index(\"subscription_transactions_created_at_idx\").on(table.createdAt),\n  txHashIdx: index(\"subscription_transactions_tx_hash_idx\").on(table.txHash)\n}));\n\n// Purchased Prompts table (marketplace transactions)\nexport const purchasedPrompts = pgTable(\"purchased_prompts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  submissionId: varchar(\"submission_id\").notNull().references(() => submissions.id, { onDelete: \"cascade\" }),\n  sellerId: varchar(\"seller_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }), // Creator of the prompt\n  price: numeric(\"price\", { precision: 18, scale: 9 }).notNull(), // Price paid (supports decimals for SOL/USDC)\n  currency: varchar(\"currency\", { length: 20 }).notNull(), // GLORY, SOL, USDC\n  createdAt: timestamp(\"created_at\").notNull().defaultNow()\n}, (table) => ({\n  userIdx: index(\"purchased_prompts_user_idx\").on(table.userId),\n  submissionIdx: index(\"purchased_prompts_submission_idx\").on(table.submissionId),\n  sellerIdx: index(\"purchased_prompts_seller_idx\").on(table.sellerId),\n  createdAtIdx: index(\"purchased_prompts_created_at_idx\").on(table.createdAt),\n  userSubmissionUnique: unique(\"purchased_prompts_user_submission_unique\").on(table.userId, table.submissionId)\n}));\n\n// Pro Edit: Images table (master image records)\nexport const images = pgTable(\"images\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  submissionId: varchar(\"submission_id\").references(() => submissions.id, { onDelete: \"set null\" }), // Link to submission if created from one\n  generationId: varchar(\"generation_id\").references(() => aiGenerations.id, { onDelete: \"set null\" }), // Link to AI generation if created from one\n  originalUrl: text(\"original_url\").notNull(), // URL of the original uploaded image\n  currentVersionId: varchar(\"current_version_id\"), // Points to the active version\n  title: varchar(\"title\", { length: 255 }),\n  width: integer(\"width\"),\n  height: integer(\"height\"),\n  format: varchar(\"format\", { length: 20 }), // png, jpg, webp\n  metadata: jsonb(\"metadata\"), // EXIF, camera data, etc.\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow()\n}, (table) => ({\n  userIdx: index(\"images_user_idx\").on(table.userId),\n  submissionIdx: index(\"images_submission_idx\").on(table.submissionId),\n  generationIdx: index(\"images_generation_idx\").on(table.generationId)\n}));\n\n// Pro Edit: Image Versions table (non-destructive editing history)\nexport const imageVersions = pgTable(\"image_versions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  imageId: varchar(\"image_id\").notNull().references(() => images.id, { onDelete: \"cascade\" }),\n  url: text(\"url\").notNull(), // Full-size URL (Cloudinary or Supabase)\n  thumbnailUrl: text(\"thumbnail_url\"), // Thumbnail URL for gallery display (optimized)\n  previewUrl: text(\"preview_url\"), // Medium-size URL for previews\n  width: integer(\"width\"),\n  height: integer(\"height\"),\n  format: varchar(\"format\", { length: 20 }), // png, jpg, webp\n  source: varchar(\"source\", { length: 50 }).notNull(), // 'upload', 'generate', 'edit'\n  preset: varchar(\"preset\", { length: 50 }), // 'clean', 'upscale4x', 'portrait_pro', etc.\n  params: jsonb(\"params\"), // Parameters used for this version\n  metadata: jsonb(\"metadata\"), // Additional version data\n  isCurrent: boolean(\"is_current\").default(false).notNull(), // Mark as the active version\n  createdAt: timestamp(\"created_at\").notNull().defaultNow()\n}, (table) => ({\n  imageIdx: index(\"image_versions_image_idx\").on(table.imageId),\n  createdAtIdx: index(\"image_versions_created_at_idx\").on(table.createdAt),\n  isCurrentIdx: index(\"image_versions_is_current_idx\").on(table.imageId, table.isCurrent)\n}));\n\n// Pro Edit: Edit Jobs table (processing queue)\nexport const editJobs = pgTable(\"edit_jobs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  imageId: varchar(\"image_id\").notNull().references(() => images.id, { onDelete: \"cascade\" }),\n  inputVersionId: varchar(\"input_version_id\").references(() => imageVersions.id, { onDelete: \"set null\" }),\n  \n  preset: varchar(\"preset\", { length: 50 }).notNull(), // 'clean', 'upscale4x', 'portrait_pro', etc.\n  params: jsonb(\"params\").notNull(), // Preset parameters\n  \n  status: varchar(\"status\", { length: 50 }).notNull().default(\"queued\"), // queued, running, succeeded, failed\n  \n  // Replicate integration\n  replicatePredictionId: text(\"replicate_prediction_id\"),\n  \n  outputVersionId: varchar(\"output_version_id\").references(() => imageVersions.id, { onDelete: \"set null\" }),\n  \n  costCredits: integer(\"cost_credits\").notNull().default(0), // Credits deducted for this job\n  \n  retryCount: integer(\"retry_count\").notNull().default(0), // Number of retries attempted\n  \n  lastAttemptAt: timestamp(\"last_attempt_at\").notNull().defaultNow(), // Timestamp of last prediction attempt\n  \n  error: text(\"error\"), // Error message if failed\n  \n  refundedAt: timestamp(\"refunded_at\"), // Timestamp when credits were refunded (for idempotency)\n  \n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  finishedAt: timestamp(\"finished_at\")\n}, (table) => ({\n  userIdx: index(\"edit_jobs_user_idx\").on(table.userId),\n  imageIdx: index(\"edit_jobs_image_idx\").on(table.imageId),\n  statusIdx: index(\"edit_jobs_status_idx\").on(table.status),\n  createdAtIdx: index(\"edit_jobs_created_at_idx\").on(table.createdAt)\n}));\n\n// Insert schemas\nexport const insertSubscriptionTierSchema = createInsertSchema(subscriptionTiers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\n\nexport const insertUserSubscriptionSchema = createInsertSchema(userSubscriptions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\n\nexport const insertSubscriptionTransactionSchema = createInsertSchema(subscriptionTransactions).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertPurchasedPromptSchema = createInsertSchema(purchasedPrompts).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertImageSchema = createInsertSchema(images).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\n\nexport const insertImageVersionSchema = createInsertSchema(imageVersions).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertEditJobSchema = createInsertSchema(editJobs).omit({\n  id: true,\n  createdAt: true,\n  finishedAt: true\n});\n\n// Export types\nexport type InsertSubscriptionTier = z.infer<typeof insertSubscriptionTierSchema>;\nexport type SubscriptionTier = typeof subscriptionTiers.$inferSelect;\nexport type InsertUserSubscription = z.infer<typeof insertUserSubscriptionSchema>;\nexport type UserSubscription = typeof userSubscriptions.$inferSelect;\nexport type InsertSubscriptionTransaction = z.infer<typeof insertSubscriptionTransactionSchema>;\nexport type SubscriptionTransaction = typeof subscriptionTransactions.$inferSelect;\nexport type InsertPurchasedPrompt = z.infer<typeof insertPurchasedPromptSchema>;\nexport type PurchasedPrompt = typeof purchasedPrompts.$inferSelect;\n\nexport type InsertImage = z.infer<typeof insertImageSchema>;\nexport type Image = typeof images.$inferSelect;\nexport type InsertImageVersion = z.infer<typeof insertImageVersionSchema>;\nexport type ImageVersion = typeof imageVersions.$inferSelect;\nexport type InsertEditJob = z.infer<typeof insertEditJobSchema>;\nexport type EditJob = typeof editJobs.$inferSelect;\n\n// Extended types with relations\nexport type UserSubscriptionWithTier = UserSubscription & {\n  tier: SubscriptionTier;\n};\n\nexport type SubscriptionTransactionWithDetails = SubscriptionTransaction & {\n  tier: SubscriptionTier;\n  user: Pick<User, 'id' | 'username' | 'email'>;\n};\n","size_bytes":35499},"client/src/components/layout/footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { Trophy, Map } from \"lucide-react\";\n\nexport function Footer() {\n  return (\n    <footer className=\"border-t border-border mt-8 md:mt-16 pb-20 md:pb-0\" data-testid=\"footer\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 md:py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 md:gap-8 mb-6 md:mb-8\">\n          <div>\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <div className=\"w-10 h-10 rounded-lg gradient-glory flex items-center justify-center\">\n                <Trophy className=\"text-white text-xl\" />\n              </div>\n              <span className=\"text-2xl font-bold tracking-tight\">5best</span>\n            </div>\n            <p className=\"text-muted-foreground text-sm\">\n              The premier platform for creative competitions. Compete, create, and win GLORY.\n            </p>\n          </div>\n          \n          <div>\n            <h4 className=\"font-bold mb-4\">Platform</h4>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li><Link href=\"/contests\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-link-contests\">Contests</Link></li>\n              <li>\n                <Link href=\"/roadmap\" className=\"hover:text-foreground transition-colors inline-flex items-center gap-1.5\" data-testid=\"footer-link-roadmap\">\n                  <Map className=\"h-3.5 w-3.5\" />\n                  Roadmap\n                </Link>\n              </li>\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-link-how-it-works\">How It Works</a></li>\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-link-rules\">Rules</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"font-bold mb-4\">Community</h4>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-link-discord\">Discord</a></li>\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-link-twitter\">Twitter</a></li>\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-link-instagram\">Instagram</a></li>\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-link-blog\">Blog</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"font-bold mb-4\">Support</h4>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-link-help\">Help Center</a></li>\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-link-contact\">Contact Us</a></li>\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-link-privacy\">Privacy Policy</a></li>\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-link-terms\">Terms of Service</a></li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"pt-6 md:pt-8 border-t border-border flex flex-col md:flex-row items-center justify-between gap-4\">\n          <p className=\"text-xs sm:text-sm text-muted-foreground\">\n            © 2024 5best. All rights reserved.\n          </p>\n          <div className=\"flex items-center space-x-4 md:space-x-6\">\n            <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"footer-social-twitter\">\n              <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path d=\"M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z\" />\n              </svg>\n            </a>\n            <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"footer-social-instagram\">\n              <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path d=\"M12.017 0C5.396 0 .029 5.367.029 11.987c0 6.62 5.367 11.987 11.988 11.987s11.987-5.367 11.987-11.987C24.004 5.367 18.637.001 12.017.001zM8.449 16.988c-1.297 0-2.448-.49-3.323-1.297C4.198 14.894 3.708 13.743 3.708 12.446s.49-2.448 1.297-3.323c.875-.807 2.026-1.297 3.323-1.297s2.448.49 3.323 1.297c.807.875 1.297 2.026 1.297 3.323s-.49 2.448-1.297 3.323c-.875.807-2.026 1.297-3.323 1.297zm7.83-9.708h-1.511V5.789h1.511v1.491zm-1.848 3.708c-.875-.807-2.026-1.297-3.323-1.297s-2.448.49-3.323 1.297c-.807.875-1.297 2.026-1.297 3.323s.49 2.448 1.297 3.323c.875.807 2.026 1.297 3.323 1.297s2.448-.49 3.323-1.297c.807-.875 1.297-2.026 1.297-3.323s-.49-2.448-1.297-3.323z\" />\n              </svg>\n            </a>\n            <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"footer-social-discord\">\n              <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path d=\"M20.317 4.37a19.791 19.791 0 0 0-4.885-1.515.074.074 0 0 0-.079.037c-.21.375-.444.864-.608 1.25a18.27 18.27 0 0 0-5.487 0 12.64 12.64 0 0 0-.617-1.25.077.077 0 0 0-.079-.037A19.736 19.736 0 0 0 3.677 4.37a.07.07 0 0 0-.032.027C.533 9.046-.32 13.58.099 18.057a.082.082 0 0 0 .031.057 19.9 19.9 0 0 0 5.993 3.03.078.078 0 0 0 .084-.028c.462-.63.874-1.295 1.226-1.994a.076.076 0 0 0-.041-.106 13.107 13.107 0 0 1-1.872-.892.077.077 0 0 1-.008-.128 10.2 10.2 0 0 0 .372-.292.074.074 0 0 1 .077-.01c3.928 1.793 8.18 1.793 12.062 0a.074.074 0 0 1 .078.01c.12.098.246.198.373.292a.077.077 0 0 1-.006.127 12.299 12.299 0 0 1-1.873.892.077.077 0 0 0-.041.107c.36.698.772 1.362 1.225 1.993a.076.076 0 0 0 .084.028 19.839 19.839 0 0 0 6.002-3.03.077.077 0 0 0 .032-.054c.5-5.177-.838-9.674-3.549-13.66a.061.061 0 0 0-.031-.03zM8.02 15.33c-1.183 0-2.157-1.085-2.157-2.419 0-1.333.956-2.419 2.157-2.419 1.21 0 2.176 1.096 2.157 2.42 0 1.333-.956 2.418-2.157 2.418zm7.975 0c-1.183 0-2.157-1.085-2.157-2.419 0-1.333.955-2.419 2.157-2.419 1.21 0 2.176 1.096 2.157 2.42 0 1.333-.946 2.418-2.157 2.418Z\" />\n              </svg>\n            </a>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":6435},"client/src/components/ui/ShareModal.tsx":{"content":"import React, { useState } from \"react\";\nimport { X, Twitter, Facebook, Copy, Share2, MessageSquare } from \"lucide-react\";\n\ninterface Props {\n  open: boolean;\n  onClose: () => void;\n  title?: string;\n  url?: string;\n}\n\nexport default function ShareModal({ open, onClose, title, url }: Props) {\n  const [copied, setCopied] = useState(false);\n  const shareUrl = url || (typeof window !== \"undefined\" ? window.location.href : \"\");\n\n  const handleWebShare = async () => {\n    if ((navigator as any).share) {\n      try {\n        await (navigator as any).share({ title, url: shareUrl });\n      } catch (e) {\n        // user cancelled or error — ignore\n      }\n      return;\n    }\n\n    // fallback to twitter\n    window.open(\n      `https://twitter.com/intent/tweet?text=${encodeURIComponent(`${title || \"\"} ${shareUrl}`)}`,\n      \"_blank\",\n      \"noopener,noreferrer\"\n    );\n  };\n\n  const handleTwitter = () => {\n    window.open(\n      `https://twitter.com/intent/tweet?text=${encodeURIComponent(`${title || \"\"} ${shareUrl}`)}`,\n      \"_blank\",\n      \"noopener,noreferrer\"\n    );\n  };\n\n  const handleFacebook = () => {\n    window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}`, \"_blank\", \"noopener,noreferrer\");\n  };\n\n  const handleTelegram = () => {\n    window.open(`https://t.me/share/url?url=${encodeURIComponent(shareUrl)}&text=${encodeURIComponent(title || \"\")}`, \"_blank\", \"noopener,noreferrer\");\n  };\n\n  const handleWhatsApp = () => {\n    window.open(`https://api.whatsapp.com/send?text=${encodeURIComponent(`${title || \"\"} ${shareUrl}`)}`, \"_blank\", \"noopener,noreferrer\");\n  };\n\n  const handleCopy = async () => {\n    try {\n      await navigator.clipboard.writeText(shareUrl);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 1500);\n    } catch (e) {\n      // ignore\n    }\n  };\n\n  if (!open) return null;\n\n  return (\n    <div\n      className=\"fixed inset-0 z-50 flex items-center justify-center\"\n      role=\"dialog\"\n      aria-modal=\"true\"\n      aria-label=\"Share\"\n    >\n      <div className=\"fixed inset-0 bg-black/50\" onClick={onClose} />\n      <div className=\"relative z-10 w-full max-w-md mx-4 rounded-lg bg-background p-4 shadow-lg\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h3 className=\"text-sm font-semibold text-white\">{title || \"Share\"}</h3>\n          <button onClick={onClose} aria-label=\"Close\" className=\"p-1 rounded hover:bg-white/5\">\n            <X className=\"text-white\" size={16} />\n          </button>\n        </div>\n\n        <div className=\"grid grid-cols-3 gap-3\">\n          <button onClick={handleWebShare} className=\"flex flex-col items-center justify-center gap-2 bg-white/5 rounded p-3\">\n            <Share2 size={20} />\n            <span className=\"text-xs\">Share</span>\n          </button>\n\n          <button onClick={handleTwitter} className=\"flex flex-col items-center justify-center gap-2 bg-white/5 rounded p-3\">\n            <Twitter size={20} />\n            <span className=\"text-xs\">Twitter</span>\n          </button>\n\n          <button onClick={handleFacebook} className=\"flex flex-col items-center justify-center gap-2 bg-white/5 rounded p-3\">\n            <Facebook size={20} />\n            <span className=\"text-xs\">Facebook</span>\n          </button>\n\n          <button onClick={handleTelegram} className=\"flex flex-col items-center justify-center gap-2 bg-white/5 rounded p-3\">\n            <MessageSquare size={20} />\n            <span className=\"text-xs\">Telegram</span>\n          </button>\n\n          <button onClick={handleWhatsApp} className=\"flex flex-col items-center justify-center gap-2 bg-white/5 rounded p-3\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"w-5 h-5\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M20.5 3.5A11 11 0 0 0 3.5 20.5L2 22l1.5-4.5A11 11 0 1 0 20.5 3.5z\"/></svg>\n            <span className=\"text-xs\">WhatsApp</span>\n          </button>\n\n          <button onClick={handleCopy} className=\"flex flex-col items-center justify-center gap-2 bg-white/5 rounded p-3\">\n            <Copy size={20} />\n            <span className=\"text-xs\">{copied ? \"Copied\" : \"Copy\"}</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4214},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"server/contest-scheduler.ts":{"content":"import type { IStorage } from \"./storage\";\n\ninterface ScheduledJob {\n  contestId: string;\n  timeoutId: NodeJS.Timeout;\n  endAt: Date;\n}\n\nexport class ContestScheduler {\n  private jobs: Map<string, ScheduledJob> = new Map();\n  private storage: IStorage;\n\n  constructor(storage: IStorage) {\n    this.storage = storage;\n  }\n\n  async initialize() {\n    // Schedule all active contests on startup\n    const contests = await this.storage.getContests({ status: \"active\" });\n    \n    for (const contest of contests) {\n      if (contest.endAt) {\n        this.scheduleContestEnd(contest.id, contest.endAt);\n      }\n    }\n    \n    console.log(`Contest scheduler initialized with ${this.jobs.size} active contests`);\n  }\n\n  scheduleContestEnd(contestId: string, endAt: Date) {\n    // Cancel existing job if any\n    this.cancelJob(contestId);\n\n    const now = new Date();\n    const endTime = new Date(endAt);\n    const delay = endTime.getTime() - now.getTime();\n\n    // Only schedule if the end time is in the future\n    if (delay <= 0) {\n      console.log(`Contest ${contestId} has already ended, distributing immediately`);\n      this.distributeRewards(contestId);\n      return;\n    }\n\n    // Maximum timeout value in JavaScript is ~24.8 days\n    const MAX_TIMEOUT = 2147483647;\n    const actualDelay = delay > MAX_TIMEOUT ? MAX_TIMEOUT : delay;\n\n    console.log(`Scheduling contest ${contestId} to end in ${Math.round(delay / 1000)} seconds`);\n\n    const timeoutId = setTimeout(async () => {\n      // Recalculate remaining delay\n      const nowInCallback = new Date();\n      const remainingDelay = endTime.getTime() - nowInCallback.getTime();\n      \n      // If there's still time remaining, reschedule for the remaining time\n      if (remainingDelay > 0) {\n        console.log(`Rescheduling contest ${contestId} for remaining ${Math.round(remainingDelay / 1000)} seconds`);\n        this.scheduleContestEnd(contestId, endTime);\n      } else {\n        await this.distributeRewards(contestId);\n        this.jobs.delete(contestId);\n      }\n    }, actualDelay);\n\n    this.jobs.set(contestId, {\n      contestId,\n      timeoutId,\n      endAt: endTime,\n    });\n  }\n\n  private async distributeRewards(contestId: string) {\n    try {\n      // Verify contest is still active before distributing\n      const contest = await this.storage.getContest(contestId);\n      if (!contest) {\n        console.log(`Contest ${contestId} no longer exists, skipping distribution`);\n        return;\n      }\n      \n      if (contest.status !== \"active\") {\n        console.log(`Contest ${contestId} is ${contest.status}, skipping distribution`);\n        return;\n      }\n\n      console.log(`Auto-distributing rewards for contest ${contestId}`);\n      await this.storage.distributeContestRewards(contestId);\n      console.log(`Successfully distributed rewards for contest ${contestId}`);\n    } catch (error) {\n      console.error(`Failed to distribute rewards for contest ${contestId}:`, error);\n    }\n  }\n\n  cancelJob(contestId: string) {\n    const job = this.jobs.get(contestId);\n    if (job) {\n      clearTimeout(job.timeoutId);\n      this.jobs.delete(contestId);\n      console.log(`Cancelled scheduled end for contest ${contestId}`);\n    }\n  }\n\n  rescheduleContest(contestId: string, newEndAt: Date) {\n    this.scheduleContestEnd(contestId, newEndAt);\n  }\n\n  getScheduledJobs() {\n    return Array.from(this.jobs.values()).map(job => ({\n      contestId: job.contestId,\n      endAt: job.endAt,\n    }));\n  }\n}\n","size_bytes":3469},"client/src/components/layout/bottom-nav.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth, useLogout, isAuthenticated, isAdmin } from \"@/lib/auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Home, Trophy, LogOut, User, Shield, Image } from \"lucide-react\";\n\nexport function BottomNav() {\n  const { data: user } = useAuth();\n  const logout = useLogout();\n  const [location, setLocation] = useLocation();\n\n  const handleLogout = () => {\n    logout.mutate();\n    setLocation(\"/\");\n  };\n\n  const getInitials = (username: string) => {\n    return username.substring(0, 2).toUpperCase();\n  };\n\n  const isActive = (path: string) => {\n    return location === path;\n  };\n\n  return (\n    <nav className={`${isAuthenticated(user) ? 'md:hidden' : ''} fixed bottom-0 left-0 right-0 z-50 glass-effect border-t border-border`} data-testid=\"bottom-nav\">\n      <div className=\"flex items-center justify-around h-16 px-2\">\n        {/* Home */}\n        <Link href=\"/\" data-testid=\"bottom-link-home\">\n          <Button \n            variant=\"ghost\" \n            className={`flex flex-col items-center justify-center h-14 px-4 ${isActive('/') ? 'text-primary' : 'text-muted-foreground'}`}\n          >\n            <Home className=\"w-5 h-5\" />\n            <span className=\"text-xs mt-1\">Home</span>\n          </Button>\n        </Link>\n\n        {/* Contests */}\n        <Link href=\"/contests\" data-testid=\"bottom-link-contests\">\n          <Button \n            variant=\"ghost\" \n            className={`flex flex-col items-center justify-center h-14 px-4 ${isActive('/contests') ? 'text-primary' : 'text-muted-foreground'}`}\n          >\n            <Trophy className=\"w-5 h-5\" />\n            <span className=\"text-xs mt-1\">Contests</span>\n          </Button>\n        </Link>\n\n        {/* User Menu or Auth Buttons */}\n        {isAuthenticated(user) ? (\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button \n                variant=\"ghost\" \n                className=\"flex flex-col items-center justify-center h-14 px-4\" \n                data-testid=\"bottom-user-menu\"\n              >\n                <Avatar className=\"w-6 h-6\">\n                  <AvatarFallback className=\"gradient-glory text-white font-bold text-xs\">\n                    {getInitials(user.username)}\n                  </AvatarFallback>\n                </Avatar>\n                <span className=\"text-xs mt-1 text-muted-foreground\">Menu</span>\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-56 mb-2\">\n              <div className=\"px-3 py-2\">\n                <p className=\"text-sm font-medium\">{user.username}</p>\n                <p className=\"text-xs text-muted-foreground\">{user.email}</p>\n                <div className=\"flex items-center gap-2 mt-1\">\n                  <Badge \n                    variant={user.status === \"approved\" ? \"default\" : user.status === \"pending\" ? \"secondary\" : \"destructive\"}\n                    className=\"text-xs\"\n                    data-testid={`bottom-status-${user.status}`}\n                  >\n                    {user.status}\n                  </Badge>\n                  {isAdmin(user) && (\n                    <Badge variant=\"outline\" className=\"text-xs\" data-testid=\"bottom-admin-badge\">\n                      <Shield className=\"w-3 h-3 mr-1\" />\n                      Admin\n                    </Badge>\n                  )}\n                </div>\n              </div>\n              <DropdownMenuSeparator />\n              <Link href=\"/profile\" data-testid=\"bottom-link-profile\">\n                <DropdownMenuItem>\n                  <User className=\"w-4 h-4 mr-2\" />\n                  Profile\n                </DropdownMenuItem>\n              </Link>\n              <Link href=\"/my-submissions\" data-testid=\"bottom-link-my-submissions\">\n                <DropdownMenuItem>\n                  <Image className=\"w-4 h-4 mr-2\" />\n                  My Gallery\n                </DropdownMenuItem>\n              </Link>\n              {isAdmin(user) && (\n                <Link href=\"/admin\" data-testid=\"bottom-link-admin\">\n                  <DropdownMenuItem>\n                    <Shield className=\"w-4 h-4 mr-2\" />\n                    Admin Dashboard\n                  </DropdownMenuItem>\n                </Link>\n              )}\n              <DropdownMenuSeparator />\n              <DropdownMenuItem onClick={handleLogout} data-testid=\"bottom-button-logout\">\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Logout\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        ) : (\n          <>\n            {/* Sign In */}\n            <Link href=\"/login\" data-testid=\"bottom-link-login\">\n              <Button \n                variant=\"ghost\" \n                className={`flex flex-col items-center justify-center h-14 px-3 ${isActive('/login') ? 'text-primary' : 'text-muted-foreground'}`}\n              >\n                <User className=\"w-5 h-5\" />\n                <span className=\"text-xs mt-1\">Sign In</span>\n              </Button>\n            </Link>\n\n            {/* Sign Up */}\n            <Link href=\"/register\" data-testid=\"bottom-link-register\">\n              <Button \n                variant=\"ghost\" \n                className={`flex flex-col items-center justify-center h-14 px-3 ${isActive('/register') ? 'text-primary' : 'text-muted-foreground'}`}\n              >\n                <User className=\"w-5 h-5\" />\n                <span className=\"text-xs mt-1\">Sign Up</span>\n              </Button>\n            </Link>\n          </>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":5872},"client/src/pages/submission-detail.tsx":{"content":"import { useRoute, Link } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Heart, ArrowLeft, Share2, Trophy, User, Sparkles } from \"lucide-react\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useState } from \"react\";\nimport { ProEditModal } from \"@/components/pro-edit/ProEditModal\";\n\nexport default function SubmissionDetailPage() {\n  const [match, params] = useRoute(\"/submission/:id\");\n  const submissionId = params?.id || \"\";\n  const { data: user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [proEditModalOpen, setProEditModalOpen] = useState(false);\n\n  // Fetch submission\n  const { data: submission, isLoading } = useQuery({\n    queryKey: [\"/api/submissions\", submissionId],\n    enabled: !!submissionId,\n    queryFn: async () => {\n      const response = await fetch(`/api/submissions/${submissionId}`, {\n        credentials: \"include\"\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch submission\");\n      return response.json();\n    }\n  });\n\n  // Vote mutation\n  const voteMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/votes\", { \n        submissionId: submission.id \n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\", submissionId] });\n      toast({\n        title: \"Vote recorded!\",\n        description: \"Your vote has been counted\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Vote failed\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleVote = () => {\n    if (!user) {\n      toast({\n        title: \"Login required\",\n        description: \"Please log in to vote\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    voteMutation.mutate();\n  };\n\n  const handleShare = () => {\n    const shareUrl = window.location.href;\n    \n    if (navigator.share) {\n      navigator.share({\n        title: submission.title,\n        text: `Check out ${submission.title} by ${submission.user?.username || 'Unknown'}`,\n        url: shareUrl,\n      }).catch(() => {\n        fallbackShare(shareUrl);\n      });\n    } else {\n      fallbackShare(shareUrl);\n    }\n  };\n\n  const fallbackShare = (url: string) => {\n    navigator.clipboard.writeText(url).then(() => {\n      toast({\n        title: \"Link copied!\",\n        description: \"Submission link copied to clipboard.\",\n      });\n    }).catch(() => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy link.\",\n        variant: \"destructive\",\n      });\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-background-dark via-purple-950/20 to-background-dark flex items-center justify-center\">\n        <div className=\"text-white text-xl\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!submission) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-background-dark via-purple-950/20 to-background-dark flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-3xl font-bold text-white mb-4\">Submission not found</h1>\n          <Link href=\"/\">\n            <a className=\"text-primary hover:text-primary/80\">Go back home</a>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background-dark via-purple-950/20 to-background-dark pb-32 md:pb-0\">\n      <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n        {/* Back button */}\n        <div className=\"mb-6\">\n          {submission.contest ? (\n            <Link href={`/contest/${submission.contest.slug}`}>\n              <a className=\"inline-flex items-center gap-2 text-white/80 hover:text-white transition-colors\" data-testid=\"link-back-contest\">\n                <ArrowLeft className=\"h-5 w-5\" />\n                Back to {submission.contest.title}\n              </a>\n            </Link>\n          ) : (\n            <Link href=\"/\">\n              <a className=\"inline-flex items-center gap-2 text-white/80 hover:text-white transition-colors\" data-testid=\"link-back-home\">\n                <ArrowLeft className=\"h-5 w-5\" />\n                Back to home\n              </a>\n            </Link>\n          )}\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Image/Video Section */}\n          <div className=\"lg:col-span-2\">\n            <div className=\"rounded-2xl overflow-hidden shadow-2xl glow-border\">\n              {submission.type === \"video\" ? (\n                <video\n                  src={submission.mediaUrl}\n                  controls\n                  className=\"w-full h-auto max-h-[70vh] object-contain bg-black\"\n                  data-testid=\"video-submission\"\n                />\n              ) : (\n                <img\n                  src={submission.mediaUrl}\n                  alt={submission.title}\n                  className=\"w-full h-auto max-h-[70vh] object-contain bg-black\"\n                  loading=\"lazy\"\n                  data-testid=\"img-submission\"\n                />\n              )}\n            </div>\n          </div>\n\n          {/* Info Section */}\n          <div className=\"lg:col-span-1 space-y-6\">\n            {/* Title and Author */}\n            <div>\n              <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-4 text-glow\" data-testid=\"text-title\">\n                {submission.title}\n              </h1>\n              \n              {submission.user && (\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <div className=\"h-12 w-12 rounded-full bg-gradient-to-br from-primary to-purple-600 flex items-center justify-center\">\n                    <User className=\"h-6 w-6 text-white\" />\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-white/60\">Created by</p>\n                    <p className=\"text-lg font-semibold text-white\" data-testid=\"text-author\">\n                      {submission.user.username}\n                    </p>\n                  </div>\n                </div>\n              )}\n\n              {submission.description && (\n                <p className=\"text-white/80 mt-4\" data-testid=\"text-description\">\n                  {submission.description}\n                </p>\n              )}\n            </div>\n\n            {/* Contest Info */}\n            {submission.contest && (\n              <div className=\"p-4 rounded-lg bg-white/5 backdrop-blur-sm border border-white/10\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Trophy className=\"h-5 w-5 text-yellow-400\" />\n                  <p className=\"text-sm text-white/60\">Contest Entry</p>\n                </div>\n                <Link href={`/contest/${submission.contest.slug}`}>\n                  <a className=\"text-lg font-semibold text-primary hover:text-primary/80 transition-colors\" data-testid=\"link-contest\">\n                    {submission.contest.title}\n                  </a>\n                </Link>\n              </div>\n            )}\n\n            {/* Vote and Share Actions */}\n            <div className=\"space-y-3\">\n              {/* Vote Button */}\n              <button\n                onClick={handleVote}\n                disabled={voteMutation.isPending || submission.hasVoted}\n                className={`w-full py-4 px-6 rounded-lg font-semibold transition-all duration-300 flex items-center justify-center gap-3 ${\n                  submission.hasVoted\n                    ? \"bg-primary text-white cursor-not-allowed\"\n                    : \"bg-white/10 text-white hover:bg-primary hover:scale-105 backdrop-blur-sm\"\n                }`}\n                data-testid=\"button-vote\"\n              >\n                <Heart className={`h-5 w-5 ${submission.hasVoted ? \"fill-current\" : \"\"}`} />\n                <span>\n                  {submission.hasVoted ? \"Voted\" : \"Vote\"} ({submission.voteCount})\n                </span>\n              </button>\n\n              {/* Share Button */}\n              <button\n                onClick={handleShare}\n                className=\"w-full py-4 px-6 rounded-lg font-semibold bg-white/10 text-white hover:bg-white/20 transition-all duration-300 flex items-center justify-center gap-3 backdrop-blur-sm\"\n                data-testid=\"button-share\"\n              >\n                <Share2 className=\"h-5 w-5\" />\n                <span>Share</span>\n              </button>\n\n              {/* Pro Edit Button - Only for image submissions owned by user */}\n              {user && submission.user?.id === user.id && submission.type === \"image\" && (\n                <button\n                  onClick={() => setProEditModalOpen(true)}\n                  className=\"w-full py-4 px-6 rounded-lg font-semibold bg-gradient-to-r from-purple-600 to-pink-600 text-white hover:from-purple-700 hover:to-pink-700 transition-all duration-300 flex items-center justify-center gap-3 shadow-lg hover:shadow-purple-500/50 hover:scale-105\"\n                  data-testid=\"button-pro-edit\"\n                >\n                  <Sparkles className=\"h-5 w-5\" />\n                  <span>Pro Edit</span>\n                </button>\n              )}\n            </div>\n\n            {/* Tags */}\n            {submission.tags && submission.tags.length > 0 && (\n              <div>\n                <p className=\"text-sm text-white/60 mb-2\">Tags</p>\n                <div className=\"flex flex-wrap gap-2\">\n                  {submission.tags.map((tag: string, index: number) => (\n                    <span\n                      key={index}\n                      className=\"px-3 py-1 bg-white/10 rounded-full text-sm text-white/80\"\n                      data-testid={`tag-${index}`}\n                    >\n                      #{tag}\n                    </span>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Pro Edit Modal */}\n      {submission && (\n        <ProEditModal\n          open={proEditModalOpen}\n          onOpenChange={setProEditModalOpen}\n          imageUrl={submission.mediaUrl}\n          submissionId={submission.id}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":10421},"client/src/lib/cloudinary.ts":{"content":"/**\n * Cloudinary URL transformation utilities for responsive images\n */\n\nexport interface CloudinaryTransformOptions {\n  width?: number;\n  height?: number;\n  quality?: 'auto' | 'auto:good' | 'auto:best' | 'auto:eco' | 'auto:low' | number;\n  format?: 'auto' | 'jpg' | 'png' | 'webp' | 'avif';\n  crop?: 'fill' | 'fit' | 'scale' | 'limit';\n}\n\n/**\n * Transform a Cloudinary URL with responsive image optimizations\n * Returns original URL if not a Cloudinary URL or already has transformations\n */\nexport function transformCloudinaryUrl(\n  url: string,\n  options: CloudinaryTransformOptions = {}\n): string {\n  // Only transform Cloudinary URLs\n  if (!url.includes('cloudinary.com')) {\n    return url;\n  }\n\n  // Check if URL already has transformations (avoid double transformation)\n  // Look for transformation prefixes: w_, h_, c_, q_, f_, t_, e_, g_, ar_, dpr_, fl_, bo_, if_\n  // This catches parameter-based and named transforms but allows folders (e.g., /upload/user_assets/)\n  const hasTransformations = /\\/upload\\/[^/]*(?:w_|h_|c_|q_|f_|t_|e_|g_|ar_|dpr_|fl_|bo_|if_)/.test(url);\n  if (hasTransformations) {\n    return url; // Already transformed, return as-is\n  }\n\n  const {\n    width,\n    height,\n    quality = 'auto:good',\n    format = 'auto',\n    crop = 'fill'\n  } = options;\n\n  // Build transformation string\n  const transformations: string[] = [];\n  \n  if (quality) {\n    transformations.push(`q_${quality}`);\n  }\n  \n  if (format) {\n    transformations.push(`f_${format}`);\n  }\n  \n  if (width || height || crop) {\n    const parts: string[] = [];\n    if (crop) parts.push(`c_${crop}`);\n    if (width) parts.push(`w_${width}`);\n    if (height) parts.push(`h_${height}`);\n    transformations.push(parts.join(','));\n  }\n\n  // Find 'upload/' in URL and insert transformations after it\n  const uploadPattern = /\\/upload\\//;\n  if (uploadPattern.test(url)) {\n    const transformStr = transformations.join(',');\n    return url.replace(/\\/upload\\//, `/upload/${transformStr}/`);\n  }\n\n  return url;\n}\n\n/**\n * Preset transformations for common use cases\n */\nexport const cloudinaryPresets = {\n  /** Thumbnail for cards and grids (400px width) */\n  thumbnail: (url: string) => transformCloudinaryUrl(url, { \n    width: 400, \n    crop: 'fill',\n    quality: 'auto:good',\n    format: 'auto'\n  }),\n  \n  /** Medium size for detail views (800px width) */\n  medium: (url: string) => transformCloudinaryUrl(url, { \n    width: 800, \n    crop: 'fit',\n    quality: 'auto:good',\n    format: 'auto'\n  }),\n  \n  /** Large for lightbox/fullscreen (1920px width) */\n  large: (url: string) => transformCloudinaryUrl(url, { \n    width: 1920, \n    crop: 'fit',\n    quality: 'auto:good',\n    format: 'auto'\n  }),\n  \n  /** Extra small for mobile thumbnails (200px width) */\n  xsmall: (url: string) => transformCloudinaryUrl(url, { \n    width: 200, \n    crop: 'fill',\n    quality: 'auto:eco',\n    format: 'auto'\n  })\n};\n","size_bytes":2893},"client/src/components/PrivateModeGuard.tsx":{"content":"import { useAuth } from \"@/lib/auth\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { usePrivateMode } from \"@/lib/private-mode-context\";\n\ninterface PrivateModeGuardProps {\n  children: React.ReactNode;\n}\n\nexport function PrivateModeGuard({ children }: PrivateModeGuardProps) {\n  const { data: user, isLoading: authLoading } = useAuth();\n  const { privateMode, isLoading: privateModeLoading } = usePrivateMode();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    // Wait for both queries to load\n    if (authLoading || privateModeLoading) return;\n\n    // If private mode is enabled and user is not authenticated, redirect to login\n    if (privateMode && !user) {\n      setLocation(\"/login\");\n    }\n  }, [privateMode, user, authLoading, privateModeLoading, setLocation]);\n\n  // Show loading state while checking\n  if (authLoading || privateModeLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-muted-foreground\">Loading...</div>\n      </div>\n    );\n  }\n\n  // If private mode is enabled and no user, don't render (redirect will happen)\n  if (privateMode && !user) {\n    return null;\n  }\n\n  // Otherwise, render children\n  return <>{children}</>;\n}\n","size_bytes":1268},"client/src/lib/private-mode-context.tsx":{"content":"import { createContext, useContext, ReactNode } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface PrivateModeContextType {\n  privateMode: boolean;\n  isLoading: boolean;\n}\n\nconst PrivateModeContext = createContext<PrivateModeContextType | undefined>(undefined);\n\nexport function PrivateModeProvider({ children }: { children: ReactNode }) {\n  const { data: privateModeStatus, isLoading } = useQuery<{ privateMode: boolean }>({\n    queryKey: [\"/api/settings/private-mode\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/settings/private-mode\");\n      if (!response.ok) throw new Error(\"Failed to fetch private mode status\");\n      return response.json();\n    },\n  });\n\n  return (\n    <PrivateModeContext.Provider value={{ privateMode: privateModeStatus?.privateMode || false, isLoading }}>\n      {children}\n    </PrivateModeContext.Provider>\n  );\n}\n\nexport function usePrivateMode() {\n  const context = useContext(PrivateModeContext);\n  if (context === undefined) {\n    throw new Error(\"usePrivateMode must be used within a PrivateModeProvider\");\n  }\n  return context;\n}\n","size_bytes":1115},"server/solana.ts":{"content":"import { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\n\nconst network = (process.env.SOLANA_NETWORK || 'mainnet-beta') as 'devnet' | 'testnet' | 'mainnet-beta';\n\n// Priority: 1. Helius RPC (custom with better limits), 2. Generic RPC, 3. Public endpoint\nconst endpoint = process.env.HELIUS_RPC_URL || process.env.SOLANA_RPC_ENDPOINT || clusterApiUrl(network);\n\nexport const solanaConnection = new Connection(endpoint, 'confirmed');\n\nexport async function verifySolanaSignature(\n  publicKey: string,\n  signature: string,\n  message: string\n): Promise<boolean> {\n  try {\n    const publicKeyObj = new PublicKey(publicKey);\n    const messageBytes = new TextEncoder().encode(message);\n    const signatureBytes = Buffer.from(signature, 'base64');\n\n    const nacl = await import('tweetnacl');\n    return nacl.sign.detached.verify(\n      messageBytes,\n      signatureBytes,\n      publicKeyObj.toBytes()\n    );\n  } catch (error) {\n    console.error('Failed to verify Solana signature:', error);\n    return false;\n  }\n}\n\nexport async function getSolanaBalance(walletAddress: string): Promise<number> {\n  try {\n    const publicKey = new PublicKey(walletAddress);\n    const balance = await solanaConnection.getBalance(publicKey);\n    return balance / 1e9; // Convert lamports to SOL\n  } catch (error) {\n    console.error('Failed to get Solana balance:', error);\n    return 0;\n  }\n}\n\nexport async function verifyTransaction(signature: string): Promise<{\n  confirmed: boolean;\n  amount?: number;\n  from?: string;\n  to?: string;\n  accountKeys?: string[];\n}> {\n  try {\n    const tx = await solanaConnection.getTransaction(signature, {\n      commitment: 'confirmed',\n      maxSupportedTransactionVersion: 0,\n    });\n\n    if (!tx || !tx.meta) {\n      return { confirmed: false };\n    }\n\n    // Get all account keys (static + loaded addresses for versioned transactions)\n    const staticKeys = tx.transaction.message.staticAccountKeys.map(key => key.toBase58());\n    const loadedWritable = tx.meta.loadedAddresses?.writable?.map(key => key.toBase58()) || [];\n    const loadedReadonly = tx.meta.loadedAddresses?.readonly?.map(key => key.toBase58()) || [];\n    \n    // Combine all account keys in the correct order\n    const accountKeys = [...staticKeys, ...loadedWritable, ...loadedReadonly];\n    \n    // Find the largest balance decrease (actual payer)\n    let maxDecrease = 0;\n    let payerIndex = 0;\n    \n    for (let i = 0; i < tx.meta.preBalances.length; i++) {\n      const preBalance = tx.meta.preBalances[i] || 0;\n      const postBalance = tx.meta.postBalances[i] || 0;\n      const decrease = preBalance - postBalance;\n      \n      if (decrease > maxDecrease) {\n        maxDecrease = decrease;\n        payerIndex = i;\n      }\n    }\n\n    // Get the actual payer address from the computed index\n    const payer = accountKeys[payerIndex];\n\n    // Subtract transaction fee to get actual transfer amount\n    const fee = tx.meta.fee || 0;\n    const transferAmount = Math.max(0, maxDecrease - fee);\n    \n    // Find recipient (account with largest balance increase)\n    let maxIncrease = 0;\n    let recipientIndex = -1;\n    \n    for (let i = 0; i < tx.meta.postBalances.length; i++) {\n      if (i === payerIndex) continue; // Skip payer\n      \n      const preBalance = tx.meta.preBalances[i] || 0;\n      const postBalance = tx.meta.postBalances[i] || 0;\n      const increase = postBalance - preBalance;\n      \n      if (increase > maxIncrease) {\n        maxIncrease = increase;\n        recipientIndex = i;\n      }\n    }\n\n    const recipient = recipientIndex >= 0 ? accountKeys[recipientIndex] : undefined;\n\n    return {\n      confirmed: true,\n      amount: transferAmount / 1e9, // Convert lamports to SOL\n      from: payer,\n      to: recipient,\n      accountKeys,\n    };\n  } catch (error) {\n    console.error('Failed to verify transaction:', error);\n    return { confirmed: false };\n  }\n}\n","size_bytes":3885},"client/src/context/WalletContextProvider.tsx":{"content":"import { FC, ReactNode, useMemo } from 'react';\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from '@solana/wallet-adapter-react';\nimport { WalletModalProvider } from '@solana/wallet-adapter-react-ui';\nimport { clusterApiUrl } from '@solana/web3.js';\n\n// Import default wallet adapter styles\nimport '@solana/wallet-adapter-react-ui/styles.css';\n\ninterface Props {\n  children: ReactNode;\n}\n\nexport const WalletContextProvider: FC<Props> = ({ children }) => {\n  // Use devnet for testing, can be changed to mainnet-beta for production\n  const network = import.meta.env.VITE_SOLANA_NETWORK || 'devnet';\n  const endpoint = useMemo(() => {\n    // Use custom RPC if provided, otherwise use default cluster API\n    const customRpc = import.meta.env.VITE_SOLANA_RPC_ENDPOINT;\n    if (customRpc) {\n      return customRpc;\n    }\n    return clusterApiUrl(network as 'devnet' | 'testnet' | 'mainnet-beta');\n  }, [network]);\n  \n  // Empty array - Wallet Standard automatically detects Phantom, Solflare, Backpack, etc.\n  const wallets = useMemo(() => [], []);\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletModalProvider>\n          {children}\n        </WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n};\n","size_bytes":1302},"client/src/components/payment/SolanaPayment.tsx":{"content":"import { useEffect, useState, useCallback, useMemo, useRef } from \"react\";\nimport { QRCodeSVG } from \"qrcode.react\";\nimport { PublicKey, Keypair } from \"@solana/web3.js\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Copy, Check, Loader2, ExternalLink, AlertTriangle } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface SolanaPaymentProps {\n  amount: number;\n  currency: \"SOL\" | \"USDC\" | \"CUSTOM\";\n  recipient: string; // Platform wallet address\n  label: string; // Contest name\n  message?: string; // Optional message\n  customTokenMint?: string; // For custom SPL tokens\n  customTokenDecimals?: number; // For custom SPL tokens\n  userId: string; // Current user ID\n  contestId: string; // Contest ID for verification\n  onSuccess: (txHash: string) => void;\n  onCancel?: () => void;\n}\n\nexport function SolanaPayment({\n  amount,\n  currency,\n  recipient,\n  label,\n  message,\n  customTokenMint,\n  customTokenDecimals,\n  userId,\n  contestId,\n  onSuccess,\n  onCancel,\n}: SolanaPaymentProps) {\n  const [paymentUrl, setPaymentUrl] = useState<string>(\"\");\n  const [copied, setCopied] = useState(false);\n  const [isVerifying, setIsVerifying] = useState(false);\n  const [timeoutSeconds, setTimeoutSeconds] = useState<number>(120); // 2 minutes\n  const [walletDetected, setWalletDetected] = useState<boolean>(false);\n  const pollingIntervalRef = useRef<NodeJS.Timeout | null>(null);\n  const { toast } = useToast();\n\n  // Generate unique reference for transaction tracking (stable across renders)\n  const reference = useMemo(() => Keypair.generate().publicKey, []);\n\n  // Detect available Solana wallets and protocol handlers\n  useEffect(() => {\n    const detectWallet = async () => {\n      let detected = false;\n      \n      // Check for wallet objects\n      const hasPhantom = typeof window !== 'undefined' && (window as any).solana && (window as any).solana.isPhantom;\n      const hasSolflare = typeof window !== 'undefined' && (window as any).solflare;\n      const hasGlow = typeof window !== 'undefined' && (window as any).glowSolana;\n      \n      if (hasPhantom || hasSolflare || hasGlow) {\n        detected = true;\n      }\n      \n      // Test if solana: protocol is supported (without triggering the error)\n      if (!detected && 'navigator' in window && 'registerProtocolHandler' in navigator) {\n        try {\n          // Create a temporary iframe to test protocol handling\n          const iframe = document.createElement('iframe');\n          iframe.style.display = 'none';\n          iframe.src = 'about:blank';\n          document.body.appendChild(iframe);\n          \n          // Test if we can handle solana: URLs without error\n          const testUrl = 'solana:test';\n          const link = iframe.contentDocument?.createElement('a');\n          if (link) {\n            link.href = testUrl;\n            // If this doesn't throw, protocol might be supported\n            if (link.protocol === 'solana:') {\n              detected = true;\n            }\n          }\n          \n          document.body.removeChild(iframe);\n        } catch (error) {\n          // Protocol not supported\n          detected = false;\n        }\n      }\n      \n      setWalletDetected(detected);\n    };\n\n    // Initial check\n    detectWallet();\n\n    // Check again after delays (wallets might load async)\n    const timeout1 = setTimeout(detectWallet, 1000);\n    const timeout2 = setTimeout(detectWallet, 3000);\n    \n    return () => {\n      clearTimeout(timeout1);\n      clearTimeout(timeout2);\n    };\n  }, []);\n\n  // Generate Solana Pay URL manually (avoids Buffer dependencies)\n  useEffect(() => {\n    try {\n      // Build Solana Pay URL according to spec: solana:{recipient}?params\n      // URLSearchParams handles encoding automatically, don't double-encode!\n      const params = new URLSearchParams();\n      \n      params.append('amount', amount.toString());\n      params.append('reference', reference.toBase58());\n      params.append('label', label);\n      params.append('message', message || `Entry fee for ${label}`);\n      params.append('memo', `contest:${contestId}:user:${userId}`);\n      \n      // Add SPL token mint if applicable\n      if (currency === \"USDC\") {\n        // USDC mainnet mint address\n        params.append('spl-token', \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\");\n      } else if (currency === \"CUSTOM\" && customTokenMint) {\n        params.append('spl-token', customTokenMint);\n      }\n\n      const url = `solana:${recipient}?${params.toString()}`;\n      setPaymentUrl(url);\n      \n      // Debug logging disabled to reduce console spam\n      // console.log(\"💳 Payment URL Generated:\", {\n      //   url: url.substring(0, 100) + \"...\", // Truncated for security\n      //   reference: reference.toBase58(),\n      //   amount,\n      //   currency,\n      //   recipient: recipient.substring(0, 8) + \"...\",\n      //   contestId\n      // });\n    } catch (error) {\n      console.error(\"Error generating payment URL:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate payment link\",\n        variant: \"destructive\",\n      });\n    }\n  }, [amount, currency, recipient, label, message, customTokenMint, contestId, userId, reference, toast]);\n\n  // Copy payment URL to clipboard\n  const copyToClipboard = useCallback(() => {\n    navigator.clipboard.writeText(paymentUrl);\n    setCopied(true);\n    toast({\n      title: \"Copied!\",\n      description: \"Payment link copied to clipboard\",\n    });\n    setTimeout(() => setCopied(false), 2000);\n  }, [paymentUrl, toast]);\n\n  // Direct wallet transaction (localhost-friendly)\n  const openInWallet = useCallback(async () => {\n    console.log(\"🚀 openInWallet called!\", { paymentUrl, walletDetected });\n    \n    if (!paymentUrl) {\n      toast({\n        title: \"Error\",\n        description: \"Payment URL not ready\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!walletDetected) {\n      toast({\n        title: \"No Wallet Extension Found\",\n        description: \"Please install Phantom or Solflare browser extension first.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    toast({\n      title: \"Opening Wallet...\",\n      description: \"Attempting to connect to your wallet extension.\",\n    });\n\n    try {\n      const win = window as any;\n      const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n      \n      // Mobile: use protocol URL (works better on mobile)\n      if (isMobile) {\n        window.location.href = paymentUrl;\n        toast({\n          title: \"Opening Mobile Wallet\",\n          description: \"Redirecting to your wallet app...\",\n        });\n        return;\n      }\n\n      // Desktop: Try both direct integration and protocol URL\n      console.log(\"🔍 Detailed wallet detection:\", { \n        hasSolana: !!win.solana, \n        isPhantom: win.solana?.isPhantom,\n        isConnected: win.solana?.isConnected,\n        phantomExists: !!win.phantom,\n        solflareExists: !!win.solflare,\n        walletDetected,\n        paymentUrl: paymentUrl?.substring(0, 50) + '...'\n      });\n\n      if (win.solana && win.solana.isPhantom) {\n        try {\n          console.log(\"Attempting Phantom direct integration...\");\n          \n          toast({\n            title: \"Connecting to Phantom...\",\n            description: \"Please approve the connection in your wallet.\",\n          });\n\n          // Connect wallet first (if not already connected)\n          let walletResponse;\n          try {\n            if (win.solana.isConnected) {\n              console.log(\"✅ Wallet already connected, skipping connect call\");\n              walletResponse = { publicKey: win.solana.publicKey };\n            } else {\n              console.log(\"🔗 Calling win.solana.connect()...\");\n              walletResponse = await win.solana.connect();\n              console.log(\"✅ Wallet connected successfully:\", walletResponse.publicKey.toString());\n            }\n          } catch (connectError: any) {\n            console.log(\"❌ Wallet connection error:\", connectError);\n            if (connectError.code === 4001) {\n              toast({\n                title: \"Connection Cancelled\",\n                description: \"You cancelled the wallet connection.\",\n                variant: \"destructive\",\n              });\n              return;\n            }\n            throw connectError;\n          }\n\n          toast({\n            title: \"Wallet Connected\",\n            description: \"Creating payment transaction...\",\n          });\n\n          // Parse payment URL for transaction details\n          const url = new URL(paymentUrl);\n          const recipientAddress = url.pathname;\n          const amount = parseFloat(url.searchParams.get('amount') || '0');\n          const referenceParam = url.searchParams.get('reference');\n          const memoParam = url.searchParams.get('memo');\n          \n          console.log(\"Payment details:\", { recipientAddress, amount, referenceParam, memoParam });\n\n          // Import Solana web3.js for direct transaction creation\n          const { Connection, PublicKey, Transaction, SystemProgram, LAMPORTS_PER_SOL } = await import('@solana/web3.js');\n          \n          // Create connection using custom Helius RPC (better rate limits) or fallback to public mainnet\n          const rpcUrl = import.meta.env.VITE_HELIUS_RPC_URL || 'https://api.mainnet-beta.solana.com';\n          const connection = new Connection(rpcUrl, 'confirmed');\n          \n          // Create transaction directly\n          const transaction = new Transaction();\n          \n          // Add transfer instruction\n          const transferInstruction = SystemProgram.transfer({\n            fromPubkey: walletResponse.publicKey,\n            toPubkey: new PublicKey(recipientAddress),\n            lamports: Math.round(amount * LAMPORTS_PER_SOL),\n          });\n          \n          // Add reference as account key to transfer instruction (Solana Pay spec)\n          if (referenceParam) {\n            transferInstruction.keys.push({\n              pubkey: new PublicKey(referenceParam),\n              isSigner: false,\n              isWritable: false,\n            });\n          }\n          \n          transaction.add(transferInstruction);\n          \n          // Get latest blockhash\n          const { blockhash } = await connection.getLatestBlockhash();\n          transaction.recentBlockhash = blockhash;\n          transaction.feePayer = walletResponse.publicKey;\n\n          toast({\n            title: \"Sending Transaction\",\n            description: \"Please approve the transaction in Phantom...\",\n          });\n\n          try {\n            console.log(\"🔄 Sending transaction to Phantom for signature...\");\n            \n            // Use Phantom's signAndSendTransaction method\n            const signedTransaction = await win.solana.signAndSendTransaction(transaction);\n            \n            console.log(\"✅ Transaction sent successfully:\", signedTransaction.signature);\n            \n            toast({\n              title: \"Payment Sent!\",\n              description: `Transaction: ${signedTransaction.signature.substring(0, 20)}...`,\n            });\n            \n            // Notify parent component of successful payment\n            onSuccess(signedTransaction.signature);\n            \n          } catch (transactionError: any) {\n            console.log(\"❌ Transaction failed:\", transactionError);\n            \n            if (transactionError.code === 4001) {\n              toast({\n                title: \"Transaction Cancelled\",\n                description: \"You cancelled the transaction.\",\n                variant: \"destructive\",\n              });\n            } else {\n              toast({\n                title: \"Transaction Failed\",\n                description: `Error: ${transactionError.message || 'Unknown error'}`,\n                variant: \"destructive\",\n              });\n            }\n          }\n\n          return;\n          \n        } catch (phantomError: any) {\n          console.error(\"Phantom integration error:\", phantomError);\n          \n          toast({\n            title: \"Wallet Integration Issue\",\n            description: \"Direct wallet method failed. Please use the QR code or copy link method below.\",\n            variant: \"destructive\",\n          });\n          return;\n        }\n      }\n      \n      // Fallback: Simple approach for other wallets or if direct fails\n      toast({\n        title: \"Alternative Method\",\n        description: \"Copying payment link - paste it in your wallet's browser section.\",\n      });\n      \n      try {\n        // For localhost compatibility, just copy the link\n        await navigator.clipboard.writeText(paymentUrl);\n        \n        setTimeout(() => {\n          toast({\n            title: \"Payment Link Copied\",\n            description: \"Open your wallet extension, find the browser/dApp tab, and paste this link there.\",\n            duration: 8000,\n          });\n        }, 1000);\n        \n      } catch (copyError) {\n        toast({\n          title: \"Please Copy Manually\",\n          description: \"Copy the payment link above and paste it in your wallet's browser tab.\",\n          variant: \"destructive\",\n        });\n      }\n      \n    } catch (error) {\n      console.error(\"Wallet integration error:\", error);\n      toast({\n        title: \"Wallet Integration Error\",\n        description: \"Please use the QR code or copy link method as a backup.\",\n        variant: \"destructive\",\n      });\n    }\n  }, [paymentUrl, walletDetected, onSuccess, toast]);\n\n  // Poll backend for payment verification using reference\n  const startPolling = useCallback(() => {\n    if (pollingIntervalRef.current) return;\n\n    let pollCount = 0;\n    const maxPolls = 40; // Stop after 2 minutes (40 * 3 seconds)\n    \n    const interval = setInterval(async () => {\n      try {\n        pollCount++;\n        \n        // Update countdown\n        const remainingSeconds = Math.max(0, (maxPolls - pollCount) * 3);\n        setTimeoutSeconds(remainingSeconds);\n        \n        // Stop polling after max attempts\n        if (pollCount > maxPolls) {\n          console.log(\"⏰ Payment polling timeout after\", maxPolls, \"attempts\");\n          clearInterval(interval);\n          pollingIntervalRef.current = null;\n          setTimeoutSeconds(0);\n          return;\n        }\n        \n        // Debug logging disabled to reduce console spam\n        // if (pollCount === 1 || pollCount === 20 || pollCount === 35) {\n        //   console.log(\"🔍 Polling for payment verification... (attempt\", pollCount + \"/\" + maxPolls + \")\");\n        // }\n\n        const res = await apiRequest(\"POST\", \"/api/payment/find-by-reference\", {\n          reference: reference.toBase58(),\n          expectedAmount: amount,\n          recipientAddress: recipient,\n          contestId,\n        });\n        \n        const data = await res.json();\n        \n        // Only log responses that are not \"payment not found\"\n        if (data.found || data.error) {\n          console.log(\"📡 Payment verification response:\", data);\n        }\n        \n        if (data.found && data.success && data.txHash) {\n          // Payment verified!\n          console.log(\"✅ Payment verified successfully:\", data.txHash);\n          clearInterval(interval);\n          pollingIntervalRef.current = null;\n          onSuccess(data.txHash);\n        } else if (data.error) {\n          console.error(\"❌ Payment verification error:\", data.error);\n        }\n      } catch (error) {\n        console.error(\"💥 Error checking payment status:\", error);\n      }\n    }, 3000); // Poll every 3 seconds\n\n    pollingIntervalRef.current = interval;\n  }, [reference, amount, recipient, contestId, onSuccess]);\n\n  // Start automatic polling when component mounts\n  useEffect(() => {\n    startPolling();\n    // Cleanup on unmount\n    return () => {\n      if (pollingIntervalRef.current) {\n        clearInterval(pollingIntervalRef.current);\n        pollingIntervalRef.current = null;\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Manual verification\n  const verifyPayment = useCallback(async () => {\n    setIsVerifying(true);\n    \n    try {\n      // Debug logging disabled to reduce console spam\n      // if (process.env.NODE_ENV === 'development') {\n      //   console.log(\"🔍 Manual payment verification started...\", {\n      //     reference: reference.toBase58(),\n      //     expectedAmount: amount,\n      //     recipientAddress: recipient,\n      //     contestId,\n      //   });\n      // }\n\n      const res = await apiRequest(\"POST\", \"/api/payment/find-by-reference\", {\n        reference: reference.toBase58(),\n        expectedAmount: amount,\n        recipientAddress: recipient,\n        contestId,\n      });\n      \n      const data = await res.json();\n      // Debug logging disabled to reduce console spam\n      // if (process.env.NODE_ENV === 'development') {\n      //   console.log(\"📡 Manual verification response:\", data);\n      // }\n      \n      if (data.found && data.success && data.txHash) {\n        // Success logging still enabled for important events\n        console.log(\"✅ Manual verification successful:\", data.txHash);\n        onSuccess(data.txHash);\n        toast({\n          title: \"Payment Verified!\",\n          description: \"Your entry fee payment has been confirmed\",\n        });\n      } else {\n        // Error logging disabled to reduce console spam - users see toast notification\n        // if (process.env.NODE_ENV === 'development') {\n        //   console.error(\"❌ Manual verification failed:\", data);\n        // }\n        const isNotFoundMessage = data.message && data.message.includes(\"Payment not found yet\");\n        toast({\n          title: isNotFoundMessage ? \"Transaction Not Detected\" : \"Payment Not Found\",\n          description: isNotFoundMessage \n            ? \"Transaction may still be processing on the blockchain. Please wait a moment and try again, or check if your wallet shows a pending transaction.\"\n            : data.message || data.error || \"Please complete the payment and try again\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      console.error(\"💥 Manual verification error:\", error);\n      toast({\n        title: \"Verification Error\",\n        description: error instanceof Error ? error.message : \"Failed to verify payment. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsVerifying(false);\n    }\n  }, [reference, amount, recipient, contestId, onSuccess, toast]);\n\n  const displayAmount = currency === \"CUSTOM\" && customTokenDecimals\n    ? `${amount} (Custom Token)`\n    : `${amount} ${currency}`;\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\" data-testid=\"card-solana-payment\">\n      <CardHeader>\n        <CardTitle>Pay Entry Fee</CardTitle>\n        <CardDescription>\n          Scan QR code or use the payment link to pay {displayAmount}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Mainnet Warning */}\n        <Alert className=\"bg-amber-50 dark:bg-amber-950 border-amber-200 dark:border-amber-800\">\n          <AlertTriangle className=\"h-4 w-4 text-amber-600 dark:text-amber-500\" />\n          <AlertDescription className=\"text-amber-800 dark:text-amber-200\">\n            <strong>Real Money Transaction:</strong> This payment uses mainnet with real {currency}. Make sure you're sending the correct amount to the right address.\n          </AlertDescription>\n        </Alert>\n\n        {/* QR Code */}\n        {paymentUrl && (\n          <div className=\"flex justify-center p-4 bg-white rounded-lg\" data-testid=\"container-qr-code\">\n            <QRCodeSVG value={paymentUrl} size={200} level=\"H\" />\n          </div>\n        )}\n\n        {/* Payment URL */}\n        <div className=\"space-y-2\">\n          <p className=\"text-sm text-muted-foreground\">Payment Link:</p>\n          <div className=\"flex gap-2\">\n            <input\n              type=\"text\"\n              value={paymentUrl}\n              readOnly\n              className=\"flex-1 px-3 py-2 text-sm border rounded-md bg-muted\"\n              data-testid=\"input-payment-url\"\n            />\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={copyToClipboard}\n              data-testid=\"button-copy-link\"\n            >\n              {copied ? <Check className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n            </Button>\n          </div>\n        </div>\n\n        {/* Instructions */}\n        <div className=\"p-3 bg-muted rounded-lg text-sm space-y-2\">\n          <p className=\"font-medium\">Payment Options:</p>\n          <ol className=\"list-decimal ml-4 space-y-1\">\n            <li><strong>QR Code:</strong> Scan with your mobile Solana wallet (mobile method)</li>\n            {walletDetected ? (\n              <li><strong>Pay with Wallet:</strong> Direct transaction in browser wallet ✅ (localhost-friendly)</li>\n            ) : (\n              <li><strong>No Wallet:</strong> Install browser extension first, then refresh page ⚠️</li>\n            )}\n            <li><strong>Manual Copy:</strong> Copy link and paste in wallet browser manually</li>\n            <li><strong>Verification:</strong> Automatic detection after transaction completion</li>\n          </ol>\n          \n          {/* Wallet Status Help */}\n          {!walletDetected && (\n            <div className=\"mt-3 p-2 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded text-xs\">\n              <p className=\"font-medium text-red-800 dark:text-red-200 mb-1\">⚠️ No Wallet Extension Detected</p>\n              <p className=\"text-red-700 dark:text-red-300 mb-2\">\n                Without a wallet extension, you'll need to use QR code or manual copy methods. Install a browser extension for easier payments:\n              </p>\n              <div className=\"flex gap-2\">\n                <a \n                  href=\"https://phantom.app\" \n                  target=\"_blank\" \n                  className=\"inline-block bg-red-100 dark:bg-red-800 text-red-800 dark:text-red-200 px-2 py-1 rounded text-xs font-medium hover:bg-red-200 dark:hover:bg-red-700\"\n                >\n                  Install Phantom\n                </a>\n                <a \n                  href=\"https://solflare.com\" \n                  target=\"_blank\" \n                  className=\"inline-block bg-red-100 dark:bg-red-800 text-red-800 dark:text-red-200 px-2 py-1 rounded text-xs font-medium hover:bg-red-200 dark:hover:bg-red-700\"\n                >\n                  Install Solflare\n                </a>\n              </div>\n              <p className=\"text-red-600 dark:text-red-400 mt-2 text-xs\">\n                💡 After installation, refresh this page to enable direct wallet opening.\n              </p>\n            </div>\n          )}\n          \n          {walletDetected && (\n            <div className=\"mt-3 p-2 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded text-xs\">\n              <p className=\"font-medium text-green-800 dark:text-green-200 mb-1\">✅ Wallet Extension Detected</p>\n              <p className=\"text-green-700 dark:text-green-300 mb-1\">\n                Try these methods in order:\n              </p>\n              <ol className=\"list-decimal ml-4 text-green-700 dark:text-green-300\">\n                <li>\"Open in Wallet\" button (main method)</li>\n                <li>\"Try Alternative Method\" if first doesn't work</li>\n                <li>\"Copy Full Payment Link\" as backup</li>\n              </ol>\n            </div>\n          )}\n          \n          {timeoutSeconds === 0 && (\n            <div className=\"mt-3 p-2 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded text-xs\">\n              <p className=\"font-medium text-yellow-800 dark:text-yellow-200 mb-1\">Troubleshooting:</p>\n              <ul className=\"list-disc ml-4 space-y-1 text-yellow-700 dark:text-yellow-300\">\n                <li>If \"Open Wallet\" doesn't work, install Phantom or Solflare first</li>\n                <li>Use \"Copy Full Payment Link\" and paste in your wallet</li>\n                <li>Check your wallet for pending/completed transactions</li>\n                <li>Ensure you have enough SOL for transaction + gas fees (~0.001 SOL extra)</li>\n                <li>Wait a few moments for blockchain confirmation</li>\n                <li>Try \"Verify Payment\" button after completing transaction</li>\n              </ul>\n            </div>\n          )}\n          \n          {/* Timeout countdown */}\n          {timeoutSeconds > 0 && (\n            <div className=\"flex items-center gap-2 pt-2 border-t\">\n              <div className=\"h-2 w-2 bg-orange-500 rounded-full animate-pulse\"></div>\n              <span className=\"text-xs text-muted-foreground\">\n                Auto-verification timeout: {Math.floor(timeoutSeconds / 60)}:{(timeoutSeconds % 60).toString().padStart(2, '0')}\n              </span>\n            </div>\n          )}\n          \n          {timeoutSeconds === 0 && (\n            <div className=\"flex items-center gap-2 pt-2 border-t text-amber-600\">\n              <div className=\"h-2 w-2 bg-amber-500 rounded-full\"></div>\n              <span className=\"text-xs font-medium\">\n                Auto-verification stopped. Use \"Verify Manually\" button below.\n              </span>\n            </div>\n          )}\n        </div>\n        \n        {/* Actions */}\n        <div className=\"flex gap-2\">\n          <Button\n            variant={walletDetected ? \"outline\" : \"secondary\"}\n            className=\"flex-1\"\n            onClick={() => {\n              console.log(\"🎯 BUTTON CLICKED! Wallet detected:\", walletDetected);\n              openInWallet();\n            }}\n            data-testid=\"button-open-wallet\"\n            disabled={!walletDetected}\n            title={walletDetected ? \"Open wallet directly for transaction approval\" : \"No wallet extension found - install Phantom or Solflare first\"}\n          >\n            <ExternalLink className=\"h-4 w-4 mr-2\" />\n            {walletDetected ? \"Pay with Wallet\" : \"No Wallet ⚠️\"}\n          </Button>\n          \n          <Button\n            variant=\"default\"\n            className=\"flex-1\"\n            onClick={verifyPayment}\n            disabled={isVerifying}\n            data-testid=\"button-verify-payment\"\n          >\n            {isVerifying ? (\n              <>\n                <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                Verifying...\n              </>\n            ) : (\n              \"Verify Payment\"\n            )}\n          </Button>\n        </div>\n        \n        {/* Alternative direct wallet approach */}\n        {walletDetected && (\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"flex-1 text-xs border border-dashed border-gray-300\"\n              onClick={() => {\n                if (!walletDetected) {\n                  toast({\n                    title: \"No Wallet Detected\",\n                    description: \"Please install a Solana wallet extension first.\",\n                    variant: \"destructive\",\n                  });\n                  return;\n                }\n                \n                toast({\n                  title: \"Copy & Paste Method\",\n                  description: \"Payment link copied! Paste it in your wallet's browser or address bar.\",\n                });\n                \n                // Safer approach: just copy to clipboard\n                navigator.clipboard.writeText(paymentUrl).then(() => {\n                  // Also show instructions\n                  setTimeout(() => {\n                    toast({\n                      title: \"Next Steps\",\n                      description: \"1. Open your wallet app, 2. Paste the link in browser/address bar, 3. Approve transaction\",\n                      duration: 8000,\n                    });\n                  }, 1000);\n                }).catch(() => {\n                  toast({\n                    title: \"Copy Failed\", \n                    description: \"Please manually copy the payment link above.\",\n                    variant: \"destructive\",\n                  });\n                });\n              }}\n            >\n              Copy & Paste Method\n            </Button>\n          </div>\n        )}\n        \n        {/* Alternative: Show full URL for manual copying */}\n        <Button\n          variant={walletDetected ? \"ghost\" : \"outline\"}\n          size=\"sm\"\n          className={`w-full text-xs ${!walletDetected ? 'border-blue-300 bg-blue-50 hover:bg-blue-100 text-blue-700 font-medium' : ''}`}\n          onClick={() => {\n            navigator.clipboard.writeText(paymentUrl);\n            toast({\n              title: \"Payment Link Copied!\",\n              description: \"Paste this link in your wallet's browser or address bar\",\n            });\n          }}\n        >\n          {walletDetected ? \"Copy Full Payment Link\" : \"📋 Copy Payment Link (Recommended)\"}\n        </Button>\n\n        {/* Auto-polling notice */}\n        <p className=\"text-xs text-center text-muted-foreground\">\n          Payment verification happens automatically. You can also verify manually.\n        </p>\n\n        {/* Cancel */}\n        {onCancel && (\n          <Button\n            variant=\"ghost\"\n            className=\"w-full\"\n            onClick={onCancel}\n            data-testid=\"button-cancel-payment\"\n          >\n            Cancel\n          </Button>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":29779},"server/ai-service.ts":{"content":"import Replicate from \"replicate\";\nimport { v2 as cloudinary } from \"cloudinary\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { promisify } from \"util\";\n\nconst replicate = new Replicate({\n  auth: process.env.REPLICATE_API_TOKEN,\n});\n\nconst writeFileAsync = promisify(fs.writeFile);\nconst unlinkAsync = promisify(fs.unlink);\n\n// Configure Cloudinary\ncloudinary.config({\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n  api_key: process.env.CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_API_SECRET,\n});\n\n// Extended AI Model configuration interface\nexport interface ModelConfig {\n  id: string;\n  name: string;\n  description: string;\n  replicateModel: string;\n  costPerImage: number;\n  \n  // Parameter support flags\n  supportsAspectRatio: boolean;\n  supportsCustomDimensions: boolean; // width/height\n  supportsResolution: boolean; // predefined resolutions\n  supportsOutputFormat: boolean;\n  supportsOutputQuality: boolean;\n  supportsNegativePrompt: boolean;\n  supportsImageInput: boolean; // image-to-image\n  supportsMask: boolean; // inpainting\n  \n  // Model-specific parameter support\n  supportsSeed: boolean; // Random seed for reproducibility\n  supportsStyleType: boolean; // Ideogram\n  supportsStylePreset: boolean; // Ideogram\n  supportsMagicPrompt: boolean; // Ideogram\n  supportsStyleReferenceImages: boolean; // Ideogram\n  supportsPromptUpsampling: boolean; // Flux 1.1\n  supportsSafetyTolerance: boolean; // Flux 1.1\n  supportsCfg: boolean; // Stable Diffusion\n  supportsPromptStrength: boolean; // Stable Diffusion img2img\n  supportsLeonardoStyle: boolean; // Leonardo\n  supportsContrast: boolean; // Leonardo\n  supportsGenerationMode: boolean; // Leonardo\n  supportsPromptEnhance: boolean; // Leonardo\n  supportsNumImages: boolean; // Leonardo\n}\n\nexport const AI_MODELS: Record<string, ModelConfig> = {\n  \"ideogram-v3\": {\n    id: \"ideogram-v3\",\n    name: \"Ideogram v3 Quality\",\n    description: \"High-quality with 60+ art styles, resolution control\",\n    replicateModel: \"ideogram-ai/ideogram-v3-quality\",\n    costPerImage: 0.08,\n    \n    supportsAspectRatio: true,\n    supportsCustomDimensions: false,\n    supportsResolution: true,\n    supportsOutputFormat: false,\n    supportsOutputQuality: false,\n    supportsNegativePrompt: false,\n    supportsImageInput: true,\n    supportsMask: true,\n    \n    supportsSeed: true,\n    supportsStyleType: true,\n    supportsStylePreset: true,\n    supportsMagicPrompt: true,\n    supportsStyleReferenceImages: true,\n    supportsPromptUpsampling: false,\n    supportsSafetyTolerance: false,\n    supportsCfg: false,\n    supportsPromptStrength: false,\n    supportsLeonardoStyle: false,\n    supportsContrast: false,\n    supportsGenerationMode: false,\n    supportsPromptEnhance: false,\n    supportsNumImages: false,\n  },\n  \n  \"nano-banana\": {\n    id: \"nano-banana\",\n    name: \"Nano Banana\",\n    description: \"Google's Gemini 2.5 Flash - fast, versatile\",\n    replicateModel: \"google/nano-banana\",\n    costPerImage: 0.039,\n    \n    supportsAspectRatio: true,\n    supportsCustomDimensions: false,\n    supportsResolution: false,\n    supportsOutputFormat: true,\n    supportsOutputQuality: false,\n    supportsNegativePrompt: false,\n    supportsImageInput: true,\n    supportsMask: false,\n    \n    supportsSeed: false,\n    supportsStyleType: false,\n    supportsStylePreset: false,\n    supportsMagicPrompt: false,\n    supportsStyleReferenceImages: false,\n    supportsPromptUpsampling: false,\n    supportsSafetyTolerance: false,\n    supportsCfg: false,\n    supportsPromptStrength: false,\n    supportsLeonardoStyle: false,\n    supportsContrast: false,\n    supportsGenerationMode: false,\n    supportsPromptEnhance: false,\n    supportsNumImages: false,\n  },\n  \n  \"flux-1.1-pro\": {\n    id: \"flux-1.1-pro\",\n    name: \"Flux 1.1 Pro\",\n    description: \"6x faster than Flux Pro, highest quality\",\n    replicateModel: \"black-forest-labs/flux-1.1-pro\",\n    costPerImage: 0.04,\n    \n    supportsAspectRatio: true,\n    supportsCustomDimensions: true,\n    supportsResolution: false,\n    supportsOutputFormat: true,\n    supportsOutputQuality: true,\n    supportsNegativePrompt: false,\n    supportsImageInput: true,\n    supportsMask: false,\n    \n    supportsSeed: true,\n    supportsStyleType: false,\n    supportsStylePreset: false,\n    supportsMagicPrompt: false,\n    supportsStyleReferenceImages: false,\n    supportsPromptUpsampling: true,\n    supportsSafetyTolerance: true,\n    supportsCfg: false,\n    supportsPromptStrength: false,\n    supportsLeonardoStyle: false,\n    supportsContrast: false,\n    supportsGenerationMode: false,\n    supportsPromptEnhance: false,\n    supportsNumImages: false,\n  },\n  \n  \"sd-3.5-large\": {\n    id: \"sd-3.5-large\",\n    name: \"Stable Diffusion 3.5 Large\",\n    description: \"Latest SD with improved quality and detail\",\n    replicateModel: \"stability-ai/stable-diffusion-3.5-large\",\n    costPerImage: 0.055,\n    \n    supportsAspectRatio: true,\n    supportsCustomDimensions: false,\n    supportsResolution: false,\n    supportsOutputFormat: true,\n    supportsOutputQuality: false,\n    supportsNegativePrompt: true,\n    supportsImageInput: true,\n    supportsMask: false,\n    \n    supportsSeed: true,\n    supportsStyleType: false,\n    supportsStylePreset: false,\n    supportsMagicPrompt: false,\n    supportsStyleReferenceImages: false,\n    supportsPromptUpsampling: false,\n    supportsSafetyTolerance: false,\n    supportsCfg: true,\n    supportsPromptStrength: true,\n    supportsLeonardoStyle: false,\n    supportsContrast: false,\n    supportsGenerationMode: false,\n    supportsPromptEnhance: false,\n    supportsNumImages: false,\n  },\n  \n  \"leonardo-lucid\": {\n    id: \"leonardo-lucid\",\n    name: \"Leonardo Lucid Origin\",\n    description: \"Professional styles, ultra mode, prompt enhance\",\n    replicateModel: \"leonardoai/lucid-origin\",\n    costPerImage: 0.045,\n    \n    supportsAspectRatio: true,\n    supportsCustomDimensions: false,\n    supportsResolution: false,\n    supportsOutputFormat: false,\n    supportsOutputQuality: false,\n    supportsNegativePrompt: false,\n    supportsImageInput: false,\n    supportsMask: false,\n    \n    supportsSeed: false,\n    supportsStyleType: false,\n    supportsStylePreset: false,\n    supportsMagicPrompt: false,\n    supportsStyleReferenceImages: false,\n    supportsPromptUpsampling: false,\n    supportsSafetyTolerance: false,\n    supportsCfg: false,\n    supportsPromptStrength: false,\n    supportsLeonardoStyle: true,\n    supportsContrast: true,\n    supportsGenerationMode: true,\n    supportsPromptEnhance: true,\n    supportsNumImages: true,\n  },\n};\n\nexport interface GenerateImageOptions {\n  prompt: string;\n  model?: string;\n  seed?: number;\n  userId?: string; // Required for Supabase uploads of large images\n  \n  // Dimension options\n  aspectRatio?: string;\n  width?: number;\n  height?: number;\n  resolution?: string;\n  \n  // Output options\n  outputFormat?: string;\n  outputQuality?: number;\n  \n  // Prompt modifiers\n  negativePrompt?: string;\n  promptUpsampling?: boolean;\n  promptEnhance?: boolean;\n  magicPromptOption?: string;\n  \n  // Image input\n  imageInput?: string | string[];\n  mask?: string;\n  \n  // Style options (Ideogram)\n  styleType?: string;\n  stylePreset?: string;\n  styleReferenceImages?: string[];\n  \n  // Leonardo options\n  leonardoStyle?: string;\n  contrast?: string;\n  generationMode?: string;\n  numImages?: number;\n  \n  // Flux options\n  safetyTolerance?: number;\n  \n  // Stable Diffusion options\n  cfg?: number;\n  promptStrength?: number;\n}\n\nexport interface GeneratedImage {\n  url: string;\n  cloudinaryUrl?: string;\n  cloudinaryPublicId?: string;\n  parameters: Record<string, any>;\n}\n\nexport async function generateImage(options: GenerateImageOptions): Promise<GeneratedImage[]> {\n  const {\n    prompt,\n    model = \"flux-1.1-pro\",\n    seed,\n    userId,\n    aspectRatio = \"1:1\",\n    width,\n    height,\n    resolution,\n    outputFormat = \"webp\",\n    outputQuality = 80,\n    negativePrompt,\n    promptUpsampling = false,\n    promptEnhance = false,\n    magicPromptOption = \"Auto\",\n    imageInput,\n    mask,\n    styleType,\n    stylePreset,\n    styleReferenceImages,\n    leonardoStyle,\n    contrast = \"medium\",\n    generationMode = \"standard\",\n    numImages = 1,\n    safetyTolerance = 2,\n    cfg = 5,\n    promptStrength = 0.85,\n  } = options;\n\n  // Get model configuration\n  const modelConfig = AI_MODELS[model] || AI_MODELS[\"flux-1.1-pro\"];\n  \n  console.log(`Generating AI image with ${modelConfig.name}...`, { prompt, model });\n\n  try {\n    // Helper function to build input parameters for a single generation\n    const buildInputParams = () => {\n      const input: any = {\n        prompt,\n      };\n\n      // Add seed if provided\n      if (seed !== undefined) {\n        input.seed = seed;\n      }\n\n      // Model-specific parameter handling\n      switch (model) {\n        case \"ideogram-v3\":\n          if (resolution && resolution !== \"None\") {\n            input.resolution = resolution;\n          } else if (aspectRatio) {\n            input.aspect_ratio = aspectRatio;\n          }\n          if (magicPromptOption) input.magic_prompt_option = magicPromptOption;\n          if (styleType && styleType !== \"None\") input.style_type = styleType;\n          if (stylePreset && stylePreset !== \"None\") input.style_preset = stylePreset;\n          if (imageInput) input.image = imageInput;\n          if (mask) input.mask = mask;\n          if (styleReferenceImages && styleReferenceImages.length > 0) {\n            input.style_reference_images = styleReferenceImages;\n          }\n          break;\n\n        case \"nano-banana\":\n          if (aspectRatio) input.aspect_ratio = aspectRatio;\n          if (outputFormat) {\n            // Nano Banana only supports jpg/png\n            input.output_format = outputFormat === \"webp\" ? \"jpg\" : outputFormat;\n          }\n          if (imageInput) {\n            // Handle single image or array\n            input.image_input = Array.isArray(imageInput) ? imageInput : [imageInput];\n          }\n          break;\n\n        case \"flux-1.1-pro\":\n          if (aspectRatio === \"custom\" && width && height) {\n            input.aspect_ratio = \"custom\";\n            input.width = width;\n            input.height = height;\n          } else if (aspectRatio) {\n            input.aspect_ratio = aspectRatio;\n          }\n          if (outputFormat) input.output_format = outputFormat;\n          if (outputQuality) input.output_quality = outputQuality;\n          if (promptUpsampling) input.prompt_upsampling = true;\n          if (safetyTolerance) input.safety_tolerance = safetyTolerance;\n          if (imageInput) input.image_prompt = imageInput;\n          break;\n\n        case \"sd-3.5-large\":\n          if (aspectRatio) input.aspect_ratio = aspectRatio;\n          if (outputFormat) input.output_format = outputFormat;\n          if (negativePrompt) input.negative_prompt = negativePrompt;\n          if (cfg) input.cfg = cfg;\n          if (imageInput) {\n            input.image = imageInput;\n            input.prompt_strength = promptStrength;\n          }\n          break;\n\n        case \"leonardo-lucid\":\n          if (aspectRatio) input.aspect_ratio = aspectRatio;\n          if (leonardoStyle && leonardoStyle !== \"none\") input.style = leonardoStyle;\n          if (contrast) input.contrast = contrast;\n          if (generationMode) input.generation_mode = generationMode;\n          if (promptEnhance !== undefined) input.prompt_enhance = promptEnhance;\n          if (numImages) input.num_images = numImages;\n          break;\n      }\n\n      return input;\n    };\n\n    // Leonardo supports native multi-image generation\n    const leonardoSupportsMultiImage = model === \"leonardo-lucid\";\n    \n    // Collect all Replicate outputs\n    let allOutputs: any[] = [];\n\n    if (leonardoSupportsMultiImage) {\n      // Leonardo: Single API call with num_images parameter\n      const input = buildInputParams();\n      console.log(\"Replicate input parameters:\", input);\n      \n      const output = await replicate.run(\n        modelConfig.replicateModel as `${string}/${string}`,\n        { input }\n      ) as any;\n      \n      allOutputs = Array.isArray(output) ? output : [output];\n    } else {\n      // Other models: Call API multiple times for each image\n      console.log(`Generating ${numImages} image(s) with sequential API calls...`);\n      \n      for (let i = 0; i < numImages; i++) {\n        const input = buildInputParams();\n        console.log(`Replicate input parameters (image ${i + 1}/${numImages}):`, input);\n        \n        const output = await replicate.run(\n          modelConfig.replicateModel as `${string}/${string}`,\n          { input }\n        ) as any;\n        \n        // Each call returns a single image (or array with one image)\n        if (Array.isArray(output)) {\n          allOutputs.push(...output);\n        } else {\n          allOutputs.push(output);\n        }\n      }\n    }\n\n    if (!allOutputs || allOutputs.length === 0) {\n      throw new Error(\"No image generated\");\n    }\n\n    // Extract URLs from Replicate response (always an array now)\n    let imageUrls: string[] = [];\n    \n    // Process all images in the array\n    for (const item of allOutputs) {\n      let url: string;\n      \n      if (typeof item === 'object' && item !== null) {\n        if (typeof item.url === 'function') {\n          const urlResult = await item.url();\n          url = typeof urlResult === 'object' && urlResult.href ? urlResult.href : String(urlResult);\n        } else if (typeof item.url === 'string') {\n          url = item.url;\n        } else {\n          throw new Error(\"FileOutput object missing url property\");\n        }\n      } else if (typeof item === 'string') {\n        url = item;\n      } else {\n        throw new Error(\"Invalid output format from Replicate\");\n      }\n      \n      imageUrls.push(url);\n    }\n\n    console.log(`AI image(s) generated successfully: ${imageUrls.length} image(s)`);\n\n    // Upload all images to Cloudinary\n    const results: GeneratedImage[] = [];\n    \n    for (let i = 0; i < imageUrls.length; i++) {\n      const imageUrl = imageUrls[i];\n      let uploadedUrl: string | undefined;\n      let cloudinaryPublicId: string | undefined;\n\n      try {\n        const uploadResult = await downloadAndUploadToCloudinary(imageUrl, false, userId);\n        uploadedUrl = uploadResult.url;\n        cloudinaryPublicId = uploadResult.publicId;\n        \n        if (uploadResult.isSupabase) {\n          console.log(`Image ${i + 1}/${imageUrls.length} uploaded to Supabase:`, uploadedUrl);\n        } else {\n          console.log(`Image ${i + 1}/${imageUrls.length} uploaded to Cloudinary:`, uploadedUrl);\n        }\n      } catch (uploadError) {\n        console.error(`Upload failed for image ${i + 1}, using Replicate URL:`, uploadError);\n      }\n\n      results.push({\n        url: uploadedUrl || imageUrl,\n        cloudinaryUrl: uploadedUrl, // Can be either Cloudinary or Supabase URL\n        cloudinaryPublicId,\n        parameters: {\n          model: modelConfig.id,\n          ...options, // Include all original parameters\n        },\n      });\n    }\n\n    return results;\n  } catch (error) {\n    console.error(\"Replicate API error:\", error);\n    throw new Error(\n      `Failed to generate image: ${error instanceof Error ? error.message : \"Unknown error\"}`\n    );\n  }\n}\n\nasync function downloadAndUploadToCloudinary(imageUrl: string, isUpscaled: boolean = false, userId?: string): Promise<{\n  url: string;\n  publicId: string | null;\n  isSupabase: boolean;\n}> {\n  const SIZE_LIMIT = 10 * 1024 * 1024; // 10MB in bytes\n  \n  try {\n    // Download image\n    const response = await fetch(imageUrl);\n    if (!response.ok) {\n      throw new Error(`Failed to download image: ${response.statusText}`);\n    }\n\n    const arrayBuffer = await response.arrayBuffer();\n    const buffer = Buffer.from(arrayBuffer);\n    const fileSizeBytes = buffer.byteLength;\n\n    console.log(`Image size: ${(fileSizeBytes / 1024 / 1024).toFixed(2)}MB`);\n\n    // If image is >= 10MB, upload to Supabase temporary bucket\n    if (fileSizeBytes >= SIZE_LIMIT) {\n      console.log(`Image is >= 10MB, uploading to Supabase temporary storage`);\n      \n      if (!userId) {\n        throw new Error('userId required for Supabase upload');\n      }\n\n      const { uploadImageToSupabase } = await import('./supabase');\n      const timestamp = Date.now();\n      const generationId = `gen_${timestamp}`;\n      \n      // Upload to Supabase temporary bucket\n      const { url: supabaseUrl } = await uploadImageToSupabase(\n        imageUrl,\n        userId,\n        generationId,\n        `v${timestamp}`\n      );\n\n      return {\n        url: supabaseUrl,\n        publicId: null, // No Cloudinary public ID for Supabase images\n        isSupabase: true\n      };\n    }\n\n    // If image is < 10MB, upload to Cloudinary\n    console.log(`Image is < 10MB, uploading to Cloudinary`);\n    \n    const tempDir = path.join(process.cwd(), \"temp\");\n    if (!fs.existsSync(tempDir)) {\n      fs.mkdirSync(tempDir, { recursive: true });\n    }\n\n    const tempFilePath = path.join(tempDir, `ai-${Date.now()}.png`);\n    await writeFileAsync(tempFilePath, buffer);\n\n    const uploadOptions: any = {\n      resource_type: \"image\",\n      folder: \"5best-ai-generated\",\n      quality: isUpscaled ? \"auto:eco\" : \"auto:good\",\n      fetch_format: \"auto\",\n    };\n\n    // For upscaled images, use upload_stream with proper stream handling\n    let result: any;\n    try {\n      if (isUpscaled) {\n        uploadOptions.transformation = [\n          { quality: 80, fetch_format: \"jpg\" } // Light compression to balance quality and size\n        ];\n        console.log(\"Using upload_stream for upscaled image\");\n        \n        // Create read stream and upload using stream API for proper synchronization\n        result = await new Promise((resolve, reject) => {\n          const readStream = fs.createReadStream(tempFilePath);\n          const uploadStream = cloudinary.uploader.upload_stream(\n            uploadOptions,\n            (error: any, result: any) => {\n              if (error) {\n                reject(error);\n              } else {\n                // Wait for read stream to fully close before resolving\n                readStream.on('close', () => {\n                  console.log(\"Upload stream complete and read stream closed\");\n                  resolve(result);\n                });\n                // If stream already closed, resolve immediately\n                if (readStream.closed) {\n                  console.log(\"Upload complete, stream already closed\");\n                  resolve(result);\n                }\n              }\n            }\n          );\n\n          readStream.on('error', reject);\n          uploadStream.on('error', reject);\n          readStream.pipe(uploadStream);\n        });\n      } else {\n        result = await cloudinary.uploader.upload(tempFilePath, uploadOptions);\n      }\n\n      return {\n        url: result.secure_url,\n        publicId: result.public_id,\n        isSupabase: false\n      };\n    } finally {\n      // Always clean up temp file, whether upload succeeded or failed\n      if (fs.existsSync(tempFilePath)) {\n        await unlinkAsync(tempFilePath);\n      }\n    }\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function upscaleImage(\n  imageUrl: string,\n  options?: { scale?: number; faceEnhance?: boolean; userId?: string }\n): Promise<{\n  url: string;\n  cloudinaryUrl?: string;\n  cloudinaryPublicId?: string;\n}> {\n  try {\n    console.log(\"Starting image upscaling with Real-ESRGAN:\", imageUrl);\n\n    const input: any = {\n      image: imageUrl,\n      scale: options?.scale || 4,\n    };\n\n    if (options?.faceEnhance !== undefined) {\n      input.face_enhance = options.faceEnhance;\n    }\n\n    const output = await replicate.run(\n      \"nightmareai/real-esrgan:c15c48c0e85a93f3d4e283ac6ca684ce180d94d1975783663c747e7bfa6f5e5c\",\n      { input }\n    );\n\n    console.log(\"Real-ESRGAN raw output:\", output);\n    console.log(\"Real-ESRGAN output type:\", typeof output);\n\n    let upscaledUrl: string;\n    \n    // Replicate can return different types depending on the model\n    if (typeof output === \"string\") {\n      upscaledUrl = output;\n    } else if (Array.isArray(output) && output.length > 0) {\n      upscaledUrl = output[0];\n    } else if (output && typeof output === \"object\") {\n      // Try to extract URL from FileOutput or other object types\n      const outputObj = output as any;\n      console.log(\"Processing object output. Has .url?\", !!outputObj.url, \"Type of .url:\", typeof outputObj.url);\n      console.log(\"Has .output?\", !!outputObj.output, \"Type of .output:\", typeof outputObj.output);\n      \n      if (outputObj.url && typeof outputObj.url === \"function\") {\n        console.log(\"Calling .url() method...\");\n        const urlResult = await outputObj.url();\n        console.log(\"Result from .url():\", urlResult, \"Type:\", typeof urlResult);\n        // .url() can return a URL object, extract the href string\n        if (typeof urlResult === \"string\") {\n          upscaledUrl = urlResult;\n        } else if (urlResult && urlResult.href) {\n          upscaledUrl = urlResult.href;\n        } else if (urlResult && typeof urlResult.toString === \"function\") {\n          upscaledUrl = urlResult.toString();\n        } else {\n          throw new Error(`Invalid URL result from .url() method: ${typeof urlResult}`);\n        }\n      } else if (outputObj.url && typeof outputObj.url === \"string\") {\n        console.log(\"Using .url string property\");\n        upscaledUrl = outputObj.url;\n      } else if (outputObj.output) {\n        console.log(\"Using .output property\");\n        upscaledUrl = outputObj.output;\n      } else {\n        throw new Error(`Unsupported Real-ESRGAN output format: ${typeof output}`);\n      }\n    } else {\n      throw new Error(`Real-ESRGAN did not return a valid image URL. Got: ${typeof output}`);\n    }\n\n    if (!upscaledUrl || typeof upscaledUrl !== \"string\") {\n      throw new Error(`Failed to extract valid URL from Real-ESRGAN output: ${upscaledUrl}`);\n    }\n\n    console.log(\"Real-ESRGAN upscaling completed:\", upscaledUrl);\n\n    // Upload upscaled image to Cloudinary with quality optimization\n    // Use quality:85 to balance file size (<10MB for free tier) and quality\n    let uploadedUrl: string | undefined;\n    let cloudinaryPublicId: string | undefined;\n\n    try {\n      const uploadResult = await downloadAndUploadToCloudinary(upscaledUrl, true, options?.userId);\n      uploadedUrl = uploadResult.url;\n      cloudinaryPublicId = uploadResult.publicId;\n      \n      if (uploadResult.isSupabase) {\n        console.log(\"Upscaled image uploaded to Supabase:\", uploadedUrl);\n      } else {\n        console.log(\"Upscaled image uploaded to Cloudinary:\", uploadedUrl);\n      }\n    } catch (uploadError) {\n      console.error(\"Upload failed for upscaled image, using Replicate URL:\", uploadError);\n    }\n\n    return {\n      url: uploadedUrl || upscaledUrl,\n      cloudinaryUrl: uploadedUrl, // Can be either Cloudinary or Supabase URL\n      cloudinaryPublicId,\n    };\n  } catch (error) {\n    console.error(\"Real-ESRGAN upscaling error:\", error);\n    throw new Error(\n      `Failed to upscale image: ${error instanceof Error ? error.message : \"Unknown error\"}`\n    );\n  }\n}\n","size_bytes":23138},"client/src/pages/ai-generator.tsx":{"content":"import { useState, useEffect, useMemo, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { GlassButton } from \"@/components/ui/glass-button\";\nimport { GlassButton as FancyGlassButton } from \"@/components/GlassButton\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Sparkles, Download, Trash2, Wand2, Settings, Image as ImageIcon, Loader2, Upload, X, Pencil, Maximize2, User, Undo, Redo, Save, Menu } from \"lucide-react\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { UploadWizardModal } from \"@/components/UploadWizardModal\";\nimport { AiLightboxModal } from \"@/components/AiLightboxModal\";\nimport { Sidebar } from \"@/components/layout/Sidebar\";\nimport { SidebarProvider, useSidebar } from \"@/contexts/SidebarContext\";\nimport * as fabric from \"fabric\";\nimport type { AiGeneration, EditJob } from \"@shared/schema\";\n\ntype EditJobStatus = EditJob & {\n  outputUrl: string | null;\n  originalUrl: string;\n};\n\ninterface ModelConfig {\n  id: string;\n  name: string;\n  description: string;\n  costPerImage: number;\n  \n  supportsAspectRatio: boolean;\n  supportsCustomDimensions: boolean;\n  supportsResolution: boolean;\n  supportsOutputFormat: boolean;\n  supportsOutputQuality: boolean;\n  supportsNegativePrompt: boolean;\n  supportsImageInput: boolean;\n  supportsMask: boolean;\n  supportsSeed: boolean;\n  supportsStyleReferenceImages: boolean;\n  \n  supportsStyleType: boolean;\n  supportsStylePreset: boolean;\n  supportsMagicPrompt: boolean;\n  supportsPromptUpsampling: boolean;\n  supportsSafetyTolerance: boolean;\n  supportsCfg: boolean;\n  supportsPromptStrength: boolean;\n  supportsLeonardoStyle: boolean;\n  supportsContrast: boolean;\n  supportsGenerationMode: boolean;\n  supportsPromptEnhance: boolean;\n  supportsNumImages: boolean;\n}\n\nconst ideogramAspectRatios = [\n  { value: \"1:3\", label: \"Tall (1:3)\" },\n  { value: \"3:1\", label: \"Wide (3:1)\" },\n  { value: \"1:2\", label: \"Tall (1:2)\" },\n  { value: \"2:1\", label: \"Wide (2:1)\" },\n  { value: \"9:16\", label: \"Portrait (9:16)\" },\n  { value: \"16:9\", label: \"Landscape (16:9)\" },\n  { value: \"10:16\", label: \"Portrait (10:16)\" },\n  { value: \"16:10\", label: \"Landscape (16:10)\" },\n  { value: \"2:3\", label: \"Portrait (2:3)\" },\n  { value: \"3:2\", label: \"Landscape (3:2)\" },\n  { value: \"3:4\", label: \"Portrait (3:4)\" },\n  { value: \"4:3\", label: \"Landscape (4:3)\" },\n  { value: \"4:5\", label: \"Portrait (4:5)\" },\n  { value: \"5:4\", label: \"Landscape (5:4)\" },\n  { value: \"1:1\", label: \"Square (1:1)\" },\n];\n\nconst nanoBananaAspectRatios = [\n  { value: \"match_input_image\", label: \"Match Input Image\" },\n  { value: \"1:1\", label: \"Square (1:1)\" },\n  { value: \"2:3\", label: \"Portrait (2:3)\" },\n  { value: \"3:2\", label: \"Landscape (3:2)\" },\n  { value: \"3:4\", label: \"Portrait (3:4)\" },\n  { value: \"4:3\", label: \"Landscape (4:3)\" },\n  { value: \"4:5\", label: \"Portrait (4:5)\" },\n  { value: \"5:4\", label: \"Landscape (5:4)\" },\n  { value: \"9:16\", label: \"Portrait (9:16)\" },\n  { value: \"16:9\", label: \"Landscape (16:9)\" },\n  { value: \"21:9\", label: \"Ultrawide (21:9)\" },\n];\n\nconst flux11AspectRatios = [\n  { value: \"custom\", label: \"Custom (set width/height)\" },\n  { value: \"1:1\", label: \"Square (1:1)\" },\n  { value: \"16:9\", label: \"Landscape (16:9)\" },\n  { value: \"3:2\", label: \"Landscape (3:2)\" },\n  { value: \"2:3\", label: \"Portrait (2:3)\" },\n  { value: \"4:5\", label: \"Portrait (4:5)\" },\n  { value: \"5:4\", label: \"Landscape (5:4)\" },\n  { value: \"9:16\", label: \"Portrait (9:16)\" },\n  { value: \"3:4\", label: \"Portrait (3:4)\" },\n  { value: \"4:3\", label: \"Landscape (4:3)\" },\n];\n\nconst sd35AspectRatios = [\n  { value: \"16:9\", label: \"Landscape (16:9)\" },\n  { value: \"1:1\", label: \"Square (1:1)\" },\n  { value: \"21:9\", label: \"Ultrawide (21:9)\" },\n  { value: \"2:3\", label: \"Portrait (2:3)\" },\n  { value: \"3:2\", label: \"Landscape (3:2)\" },\n  { value: \"4:5\", label: \"Portrait (4:5)\" },\n  { value: \"5:4\", label: \"Landscape (5:4)\" },\n  { value: \"9:16\", label: \"Portrait (9:16)\" },\n  { value: \"9:21\", label: \"Ultra Tall (9:21)\" },\n];\n\nconst leonardoAspectRatios = [\n  { value: \"1:1\", label: \"Square (1:1)\" },\n  { value: \"16:9\", label: \"Landscape (16:9)\" },\n  { value: \"9:16\", label: \"Portrait (9:16)\" },\n  { value: \"3:2\", label: \"Landscape (3:2)\" },\n  { value: \"2:3\", label: \"Portrait (2:3)\" },\n  { value: \"4:5\", label: \"Portrait (4:5)\" },\n  { value: \"5:4\", label: \"Landscape (5:4)\" },\n  { value: \"3:4\", label: \"Portrait (3:4)\" },\n  { value: \"4:3\", label: \"Landscape (4:3)\" },\n  { value: \"2:1\", label: \"Wide (2:1)\" },\n  { value: \"1:2\", label: \"Tall (1:2)\" },\n  { value: \"3:1\", label: \"Wide (3:1)\" },\n  { value: \"1:3\", label: \"Tall (1:3)\" },\n];\n\nconst defaultAspectRatios = [\n  { value: \"1:1\", label: \"Square (1:1)\" },\n  { value: \"16:9\", label: \"Landscape (16:9)\" },\n  { value: \"9:16\", label: \"Portrait (9:16)\" },\n  { value: \"4:3\", label: \"Classic (4:3)\" },\n  { value: \"3:2\", label: \"Photo (3:2)\" },\n  { value: \"2:3\", label: \"Photo Portrait (2:3)\" },\n  { value: \"4:5\", label: \"Portrait (4:5)\" },\n  { value: \"5:4\", label: \"Landscape (5:4)\" },\n  { value: \"21:9\", label: \"Ultrawide (21:9)\" },\n];\n\nconst ideogramResolutions = [\n  { value: \"None\", label: \"None (use aspect ratio)\" },\n  { value: \"1024x1024\", label: \"1024x1024 (Square)\" },\n  { value: \"1152x896\", label: \"1152x896 (Landscape)\" },\n  { value: \"896x1152\", label: \"896x1152 (Portrait)\" },\n  { value: \"1216x832\", label: \"1216x832 (Wide)\" },\n  { value: \"832x1216\", label: \"832x1216 (Tall)\" },\n  { value: \"1344x768\", label: \"1344x768 (Ultrawide)\" },\n  { value: \"768x1344\", label: \"768x1344 (Ultra Tall)\" },\n  { value: \"1536x640\", label: \"1536x640 (Panorama)\" },\n  { value: \"640x1536\", label: \"640x1536 (Vertical Panorama)\" },\n];\n\nconst ideogramStyleTypes = [\n  { value: \"None\", label: \"None\" },\n  { value: \"Auto\", label: \"Auto\" },\n  { value: \"General\", label: \"General\" },\n  { value: \"Realistic\", label: \"Realistic\" },\n  { value: \"Design\", label: \"Design\" },\n];\n\nconst ideogramStylePresets = [\n  { value: \"None\", label: \"None\" },\n  { value: \"Realistic\", label: \"Realistic\" },\n  { value: \"Oil Painting\", label: \"Oil Painting\" },\n  { value: \"Watercolor\", label: \"Watercolor\" },\n  { value: \"Pop Art\", label: \"Pop Art\" },\n  { value: \"Anime\", label: \"Anime\" },\n  { value: \"Cubism\", label: \"Cubism\" },\n  { value: \"Art Deco\", label: \"Art Deco\" },\n  { value: \"Bauhaus\", label: \"Bauhaus\" },\n  { value: \"Vintage Poster\", label: \"Vintage Poster\" },\n  { value: \"Travel Poster\", label: \"Travel Poster\" },\n  { value: \"Magazine Editorial\", label: \"Magazine Editorial\" },\n  { value: \"Dramatic Cinema\", label: \"Dramatic Cinema\" },\n  { value: \"Golden Hour\", label: \"Golden Hour\" },\n  { value: \"Long Exposure\", label: \"Long Exposure\" },\n  { value: \"Monochrome\", label: \"Monochrome\" },\n  { value: \"Minimal Illustration\", label: \"Minimal Illustration\" },\n  { value: \"Flat Art\", label: \"Flat Art\" },\n  { value: \"C4D Cartoon\", label: \"C4D Cartoon\" },\n  { value: \"Graffiti I\", label: \"Graffiti I\" },\n  { value: \"80s Illustration\", label: \"80s Illustration\" },\n  { value: \"90s Nostalgia\", label: \"90s Nostalgia\" },\n];\n\nconst magicPromptOptions = [\n  { value: \"Auto\", label: \"Auto\" },\n  { value: \"On\", label: \"On\" },\n  { value: \"Off\", label: \"Off\" },\n];\n\nconst leonardoStyles = [\n  { value: \"none\", label: \"None\" },\n  { value: \"bokeh\", label: \"Bokeh\" },\n  { value: \"cinematic\", label: \"Cinematic\" },\n  { value: \"cinematic_close_up\", label: \"Cinematic Close Up\" },\n  { value: \"creative\", label: \"Creative\" },\n  { value: \"dynamic\", label: \"Dynamic\" },\n  { value: \"fashion\", label: \"Fashion\" },\n  { value: \"film\", label: \"Film\" },\n  { value: \"food\", label: \"Food\" },\n  { value: \"hdr\", label: \"HDR\" },\n  { value: \"long_exposure\", label: \"Long Exposure\" },\n  { value: \"macro\", label: \"Macro\" },\n  { value: \"minimalist\", label: \"Minimalist\" },\n  { value: \"monochrome\", label: \"Monochrome\" },\n  { value: \"moody\", label: \"Moody\" },\n  { value: \"neutral\", label: \"Neutral\" },\n  { value: \"portrait\", label: \"Portrait\" },\n  { value: \"retro\", label: \"Retro\" },\n  { value: \"stock_photo\", label: \"Stock Photo\" },\n  { value: \"unprocessed\", label: \"Unprocessed\" },\n  { value: \"vibrant\", label: \"Vibrant\" },\n];\n\nconst contrastLevels = [\n  { value: \"low\", label: \"Low\" },\n  { value: \"medium\", label: \"Medium\" },\n  { value: \"high\", label: \"High\" },\n];\n\nconst generationModes = [\n  { value: \"standard\", label: \"Standard\" },\n  { value: \"ultra\", label: \"Ultra\" },\n];\n\nasync function uploadToCloudinary(file: File): Promise<string> {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n\n  const response = await fetch(\"/api/upload\", {\n    method: \"POST\",\n    credentials: \"include\",\n    body: formData,\n  });\n\n  if (!response.ok) {\n    throw new Error(\"Failed to upload file\");\n  }\n\n  const data = await response.json();\n  return data.url;\n}\n\nfunction AiGeneratorPageContent() {\n  const { isCollapsed } = useSidebar();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [prompt, setPrompt] = useState(\"\");\n  const [negativePrompt, setNegativePrompt] = useState(\"\");\n  const [selectedModel, setSelectedModel] = useState(\"flux-1.1-pro\");\n  const [aspectRatio, setAspectRatio] = useState(\"1:1\");\n  const [outputFormat, setOutputFormat] = useState(\"webp\");\n  const [outputQuality, setOutputQuality] = useState(80);\n  const [currentImage, setCurrentImage] = useState<string | null>(null);\n  const [currentGenerationId, setCurrentGenerationId] = useState<string | null>(null);\n  \n  // New parameters\n  const [seed, setSeed] = useState<number>(0);\n  const [imageInput, setImageInput] = useState<File | null>(null);\n  const [styleReferenceImages, setStyleReferenceImages] = useState<File[]>([]);\n  \n  // Ideogram parameters\n  const [resolution, setResolution] = useState(\"None\");\n  const [styleType, setStyleType] = useState(\"None\");\n  const [stylePreset, setStylePreset] = useState(\"None\");\n  const [magicPromptOption, setMagicPromptOption] = useState(\"Auto\");\n  \n  // Flux 1.1 parameters\n  const [promptUpsampling, setPromptUpsampling] = useState(false);\n  const [safetyTolerance, setSafetyTolerance] = useState(2);\n  \n  // Stable Diffusion parameters\n  const [cfg, setCfg] = useState(5);\n  const [promptStrength, setPromptStrength] = useState(0.85);\n  \n  // Leonardo parameters\n  const [leonardoStyle, setLeonardoStyle] = useState(\"none\");\n  const [contrast, setContrast] = useState(\"medium\");\n  const [generationMode, setGenerationMode] = useState(\"standard\");\n  const [promptEnhance, setPromptEnhance] = useState(true);\n  const [numImages, setNumImages] = useState(2);\n  \n  // Submit to contest wizard modal state\n  const [wizardModalOpen, setWizardModalOpen] = useState(false);\n  const [selectedGeneration, setSelectedGeneration] = useState<AiGeneration | null>(null);\n  const [downloadingId, setDownloadingId] = useState<string | null>(null);\n  const [lightboxOpen, setLightboxOpen] = useState(false);\n  const [lightboxGenerationId, setLightboxGenerationId] = useState<string | null>(null);\n  const [currentTab, setCurrentTab] = useState<string>(\"history\");\n  \n  // Pro Edit canvas state\n  const [processingPreset, setProcessingPreset] = useState<string | null>(null);\n  const [editJobId, setEditJobId] = useState<string | null>(null);\n  const [imageId, setImageId] = useState<string | null>(null);\n  const [imageVersions, setImageVersions] = useState<string[]>([]);\n  const [currentVersionIndex, setCurrentVersionIndex] = useState(0);\n  \n  // Canvas zoom state\n  const [zoomLevel, setZoomLevel] = useState<'fit' | '100' | '150' | '200'>('fit');\n  \n  // Canvas state for fabric.js\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [canvas, setCanvas] = useState<fabric.Canvas | null>(null);\n  const [historyStack, setHistoryStack] = useState<string[]>([]);\n  const historyIndexRef = useRef(-1);\n  const [isRestoring, setIsRestoring] = useState(false);\n\n  useEffect(() => {\n    document.title = \"AI Studio - 5best\";\n  }, []);\n\n  // Read prompt from URL query parameter\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const urlPrompt = urlParams.get('prompt');\n    if (urlPrompt) {\n      setPrompt(decodeURIComponent(urlPrompt));\n    }\n  }, []);\n\n  const { data: modelConfigs, isLoading: loadingModels } = useQuery<ModelConfig[]>({\n    queryKey: [\"/api/ai/models\"],\n  });\n\n  const { data: generations, isLoading: loadingHistory } = useQuery<AiGeneration[]>({\n    queryKey: [\"/api/ai/generations\"],\n  });\n\n  // Derive lightbox generation from query data\n  const lightboxGeneration = useMemo(() => {\n    if (!lightboxGenerationId || !generations) return null;\n    return generations.find(gen => gen.id === lightboxGenerationId) || null;\n  }, [lightboxGenerationId, generations]);\n\n  const { data: userData } = useQuery<any>({\n    queryKey: [\"/api/me\"],\n  });\n\n  const { data: pricing } = useQuery<Record<string, number>>({\n    queryKey: [\"/api/pricing\"],\n  });\n\n  // Map model IDs to pricing keys\n  const modelToPricingKey: Record<string, string> = useMemo(() => ({\n    \"leonardo-lucid\": \"leonardo\",\n    \"ideogram-v3\": \"ideogram-v3\",\n    \"nano-banana\": \"nano-banana\",\n    \"flux-1.1-pro\": \"flux-1.1-pro\",\n    \"sd-3.5-large\": \"sd-3.5-large\",\n  }), []);\n\n  const currentModelConfig = useMemo(() => \n    modelConfigs?.find(m => m.id === selectedModel),\n    [modelConfigs, selectedModel]\n  );\n  \n  const userCredits = userData?.imageCredits || 0;\n  \n  const { totalCost, hasEnoughCredits } = useMemo(() => {\n    const pricingKey = modelToPricingKey[selectedModel] || selectedModel;\n    const modelCost = pricing?.[pricingKey] || 0;\n    \n    // Calculate total cost (multiply by numImages - all models support multiple images)\n    const total = modelCost * numImages;\n    \n    return {\n      totalCost: total,\n      hasEnoughCredits: userCredits >= total\n    };\n  }, [userCredits, pricing, selectedModel, numImages, currentModelConfig, modelToPricingKey]);\n\n  const getAspectRatiosForModel = (modelId: string) => {\n    if (modelId.includes(\"ideogram\")) return ideogramAspectRatios;\n    if (modelId.includes(\"nano-banana\")) return nanoBananaAspectRatios;\n    if (modelId.includes(\"flux-1.1\")) return flux11AspectRatios;\n    if (modelId.includes(\"sd-3.5\") || modelId.includes(\"stable-diffusion\")) return sd35AspectRatios;\n    if (modelId.includes(\"leonardo\")) return leonardoAspectRatios;\n    return defaultAspectRatios;\n  };\n\n  const aspectRatiosForCurrentModel = getAspectRatiosForModel(selectedModel);\n\n  const getImageInputLabel = () => {\n    if (selectedModel.includes(\"sd-3.5\")) return \"Image for img2img\";\n    if (selectedModel.includes(\"flux-1.1\")) return \"Image Prompt (Redux)\";\n    if (selectedModel.includes(\"ideogram\")) return \"Inpainting Image\";\n    if (selectedModel.includes(\"nano-banana\")) return \"Reference Images\";\n    return \"Image Input\";\n  };\n\n  const generateMutation = useMutation({\n    mutationFn: async (params: any) => {\n      const res = await apiRequest(\"POST\", \"/api/ai/generate\", params);\n      return res.json();\n    },\n    onSuccess: (data) => {\n      // Handle multiple images - show the first one\n      if (data.images && data.images.length > 0) {\n        setCurrentImage(data.images[0].imageUrl);\n        setCurrentGenerationId(data.images[0].id);\n      }\n      queryClient.invalidateQueries({ queryKey: [\"/api/ai/generations\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n      \n      const imageCount = data.images?.length || 1;\n      const imageText = imageCount > 1 ? `${imageCount} images` : \"Image\";\n      \n      toast({\n        title: `${imageText} Generated!`,\n        description: `Your AI image${imageCount > 1 ? 's have' : ' has'} been created successfully. ${data.creditsUsed} credits used.`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Generation Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/ai/generations/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/ai/generations\"] });\n      toast({\n        title: \"Deleted\",\n        description: \"Image removed from your history.\",\n      });\n    },\n  });\n\n  // Pro Edit mutations\n  const startEditMutation = useMutation({\n    mutationFn: async ({ preset, imageUrl }: { preset: string; imageUrl: string }) => {\n      const response = await fetch(\"/api/edits\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({\n          imageUrl,\n          preset,\n          generationId: currentGenerationId\n        })\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Failed to start processing\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      setEditJobId(data.jobId);\n      setImageId(data.imageId);\n      toast({\n        title: \"Processing started\",\n        description: `Your image is being enhanced. Credits used: ${data.creditsDeducted}`\n      });\n    },\n    onError: (error: Error) => {\n      setProcessingPreset(null);\n      toast({\n        title: \"Edit Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Polling query for job status\n  const { data: jobStatus } = useQuery<EditJobStatus>({\n    queryKey: [\"/api/edit-jobs\", editJobId],\n    enabled: !!editJobId && processingPreset !== null,\n    refetchInterval: (query) => {\n      const data = query.state.data;\n      // Stop polling if job is done\n      if (data?.status === 'succeeded' || data?.status === 'failed') {\n        return false;\n      }\n      return 2000; // Poll every 2 seconds\n    }\n  });\n\n  // Initialize fabric.js canvas when currentImage changes\n  useEffect(() => {\n    if (!canvasRef.current || !currentImage) return;\n\n    let fabricCanvas: fabric.Canvas | null = null;\n    let isMounted = true;\n\n    // Clear existing canvas\n    if (canvas) {\n      try {\n        canvas.dispose();\n      } catch (e) {\n        // Ignore disposal errors\n        console.warn('Canvas disposal warning:', e);\n      }\n      setCanvas(null);\n    }\n\n    // Load image to get dimensions\n    const img = new Image();\n    img.crossOrigin = \"anonymous\";\n    img.onload = () => {\n      if (!isMounted || !canvasRef.current) return;\n\n      // Get available space - look for the flex-1 container\n      const previewContainer = canvasRef.current.closest('.flex-1');\n      const maxWidth = (previewContainer?.clientWidth || 1200) - 100; // Account for padding\n      const maxHeight = (previewContainer?.clientHeight || 800) - 150; // Account for header/padding\n\n      // Calculate scale to fit image in available space\n      const scaleX = maxWidth / img.width;\n      const scaleY = maxHeight / img.height;\n      const scale = Math.min(scaleX, scaleY);\n\n      const canvasWidth = img.width * scale;\n      const canvasHeight = img.height * scale;\n\n      // Create fabric canvas with scaled dimensions\n      fabricCanvas = new fabric.Canvas(canvasRef.current, {\n        width: canvasWidth,\n        height: canvasHeight,\n      });\n\n      // Load image onto canvas\n      fabric.FabricImage.fromURL(currentImage, { crossOrigin: \"anonymous\" }).then((fabricImg: any) => {\n        if (!isMounted || !fabricCanvas) return;\n\n        fabricImg.set({\n          left: fabricCanvas.width! / 2,\n          top: fabricCanvas.height! / 2,\n          originX: \"center\",\n          originY: \"center\",\n          scaleX: scale,\n          scaleY: scale,\n          selectable: false,\n          evented: false,\n        });\n\n        fabricCanvas.add(fabricImg);\n        fabricCanvas.sendObjectToBack(fabricImg);\n        fabricCanvas.renderAll();\n\n        // Save initial state to history\n        setTimeout(() => {\n          if (!isMounted) return;\n          const initialState = JSON.stringify(fabricCanvas!.toJSON());\n          setHistoryStack([initialState]);\n          historyIndexRef.current = 0;\n        }, 100);\n      });\n\n      if (isMounted) {\n        setCanvas(fabricCanvas);\n      }\n\n      // Add event listeners for history\n      fabricCanvas.on(\"object:added\", () => {\n        if (isRestoring) return;\n        saveToHistory(fabricCanvas!);\n      });\n      fabricCanvas.on(\"object:modified\", () => {\n        if (isRestoring) return;\n        saveToHistory(fabricCanvas!);\n      });\n      fabricCanvas.on(\"object:removed\", () => {\n        if (isRestoring) return;\n        saveToHistory(fabricCanvas!);\n      });\n    };\n\n    img.src = currentImage;\n\n    return () => {\n      isMounted = false;\n      if (fabricCanvas) {\n        try {\n          fabricCanvas.dispose();\n        } catch (e) {\n          // Ignore disposal errors during cleanup\n          console.warn('Canvas cleanup warning:', e);\n        }\n      }\n    };\n  }, [currentImage]);\n\n  // Save state to history\n  const saveToHistory = (fabricCanvas: fabric.Canvas) => {\n    if (isRestoring) return;\n\n    const state = JSON.stringify(fabricCanvas.toJSON());\n    setHistoryStack((prev) => {\n      const newStack = prev.slice(0, historyIndexRef.current + 1);\n      newStack.push(state);\n      const finalStack = newStack.length > 50 ? newStack.slice(-50) : newStack;\n      historyIndexRef.current = finalStack.length - 1;\n      return finalStack;\n    });\n  };\n\n  // Force reload canvas by changing image URL (useEffect handles canvas recreation)\n  const reloadCanvas = (imageUrl: string) => {\n    setCurrentImage(imageUrl);\n  };\n\n  // Handle Pro Edit job completion\n  useEffect(() => {\n    if (jobStatus?.status === 'succeeded' && jobStatus.outputUrl) {\n      const outputUrl = jobStatus.outputUrl;\n      setCurrentImage(outputUrl);\n      setImageVersions(prev => {\n        const newVersions = [...prev, outputUrl];\n        setCurrentVersionIndex(newVersions.length - 1);\n        historyIndexRef.current = newVersions.length - 1;\n        return newVersions;\n      });\n      setProcessingPreset(null);\n      setEditJobId(null);\n      toast({ \n        title: \"Edit Complete!\",\n        description: \"Your image has been processed successfully.\"\n      });\n    } else if (jobStatus?.status === 'failed') {\n      setProcessingPreset(null);\n      setEditJobId(null);\n      toast({ \n        title: \"Edit Failed\", \n        description: jobStatus.error || \"Processing failed. Please try again.\",\n        variant: \"destructive\" \n      });\n    }\n  }, [jobStatus, toast]);\n\n  const handleOpenSubmitWizard = (generation: AiGeneration) => {\n    if (!generation.cloudinaryPublicId) {\n      toast({\n        title: \"Upload Error\",\n        description: \"This image wasn't properly uploaded to storage. Please regenerate.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setSelectedGeneration(generation);\n    setWizardModalOpen(true);\n  };\n\n  const handleCloseWizard = () => {\n    setWizardModalOpen(false);\n    setSelectedGeneration(null);\n    queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n  };\n\n  const handleSelectGeneration = async (gen: AiGeneration) => {\n    setCurrentImage(gen.imageUrl);\n    setCurrentGenerationId(gen.id);\n    setProcessingPreset(null);\n    setEditJobId(null);\n    \n    // Fetch imageId and versions for this generation\n    try {\n      const imageIdResponse = await fetch(`/api/pro-edit/image-id?generationId=${gen.id}`, {\n        credentials: \"include\",\n      });\n      \n      if (imageIdResponse.ok) {\n        const { imageId: fetchedImageId } = await imageIdResponse.json();\n        \n        if (fetchedImageId) {\n          setImageId(fetchedImageId);\n          \n          // Fetch versions\n          const versionsResponse = await fetch(`/api/images/${fetchedImageId}/versions`, {\n            credentials: \"include\",\n          });\n          \n          if (versionsResponse.ok) {\n            const { versions } = await versionsResponse.json();\n            const versionUrls = versions.map((v: any) => v.url);\n            setImageVersions(versionUrls.length > 0 ? versionUrls : [gen.imageUrl]);\n            setCurrentVersionIndex(versionUrls.length > 0 ? versionUrls.length - 1 : 0);\n            \n            // Only switch to Versions tab if there are actual versions (more than just the original)\n            if (versionUrls.length > 0) {\n              setCurrentTab(\"versions\");\n            } else {\n              setCurrentTab(\"history\");\n            }\n          } else {\n            setImageVersions([gen.imageUrl]);\n            setCurrentVersionIndex(0);\n            setCurrentTab(\"history\");\n          }\n        } else {\n          // No imageId yet, start fresh\n          setImageId(null);\n          setImageVersions([gen.imageUrl]);\n          setCurrentVersionIndex(0);\n          setCurrentTab(\"history\");\n        }\n      } else {\n        setImageVersions([gen.imageUrl]);\n        setCurrentVersionIndex(0);\n        setCurrentTab(\"history\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching versions:\", error);\n      setImageVersions([gen.imageUrl]);\n      setCurrentVersionIndex(0);\n      setCurrentTab(\"history\");\n    }\n  };\n\n  const handleGenerate = async () => {\n    if (!prompt.trim()) {\n      toast({\n        title: \"Prompt Required\",\n        description: \"Please enter a description for your image.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const params: any = {\n        prompt: prompt.trim(),\n        model: selectedModel,\n      };\n\n      // Upload imageInput if present\n      if (imageInput) {\n        toast({\n          title: \"Uploading image...\",\n          description: \"Please wait while we upload your image.\",\n        });\n        params.imageInput = await uploadToCloudinary(imageInput);\n      }\n\n      // Upload styleReferenceImages if present\n      if (styleReferenceImages.length > 0) {\n        toast({\n          title: \"Uploading style references...\",\n          description: `Uploading ${styleReferenceImages.length} image(s)...`,\n        });\n        params.styleReferenceImages = await Promise.all(\n          styleReferenceImages.map(file => uploadToCloudinary(file))\n        );\n      }\n\n      // Add seed if not 0 (0 = random)\n      if (currentModelConfig?.supportsSeed && seed !== 0) {\n        params.seed = seed;\n      }\n\n      // Add aspect ratio if supported\n      if (currentModelConfig?.supportsAspectRatio) {\n        params.aspectRatio = aspectRatio;\n      }\n\n      // Add output format if supported\n      if (currentModelConfig?.supportsOutputFormat) {\n        params.outputFormat = outputFormat;\n      }\n\n      // Add output quality if supported\n      if (currentModelConfig?.supportsOutputQuality) {\n        params.outputQuality = outputQuality;\n      }\n\n      // Add negative prompt if supported and provided\n      if (currentModelConfig?.supportsNegativePrompt && negativePrompt.trim()) {\n        params.negativePrompt = negativePrompt.trim();\n      }\n\n      // Ideogram parameters\n      if (currentModelConfig?.supportsResolution && resolution !== \"None\") {\n        params.resolution = resolution;\n      }\n      if (currentModelConfig?.supportsStyleType && styleType !== \"None\") {\n        params.styleType = styleType;\n      }\n      if (currentModelConfig?.supportsStylePreset && stylePreset !== \"None\") {\n        params.stylePreset = stylePreset;\n      }\n      if (currentModelConfig?.supportsMagicPrompt) {\n        params.magicPromptOption = magicPromptOption;\n      }\n\n      // Flux 1.1 parameters\n      if (currentModelConfig?.supportsPromptUpsampling) {\n        params.promptUpsampling = promptUpsampling;\n      }\n      if (currentModelConfig?.supportsSafetyTolerance) {\n        params.safetyTolerance = safetyTolerance;\n      }\n\n      // Stable Diffusion parameters\n      if (currentModelConfig?.supportsCfg) {\n        params.cfg = cfg;\n      }\n      if (currentModelConfig?.supportsPromptStrength) {\n        params.promptStrength = promptStrength;\n      }\n\n      // Leonardo parameters\n      if (currentModelConfig?.supportsLeonardoStyle && leonardoStyle !== \"none\") {\n        params.leonardoStyle = leonardoStyle;\n      }\n      if (currentModelConfig?.supportsContrast) {\n        params.contrast = contrast;\n      }\n      if (currentModelConfig?.supportsGenerationMode) {\n        params.generationMode = generationMode;\n      }\n      if (currentModelConfig?.supportsPromptEnhance) {\n        params.promptEnhance = promptEnhance;\n      }\n      // All models now support multiple images\n      params.numImages = numImages;\n\n      generateMutation.mutate(params);\n    } catch (error) {\n      toast({\n        title: \"Upload Failed\",\n        description: error instanceof Error ? error.message : \"Failed to upload files\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Helper to get file extension from URL\n  const getFileExtension = (url: string): string => {\n    try {\n      const urlPath = new URL(url).pathname;\n      const ext = urlPath.split('.').pop()?.toLowerCase();\n      if (ext && ['png', 'jpg', 'jpeg', 'webp', 'gif'].includes(ext)) {\n        return ext;\n      }\n    } catch (e) {\n      // Invalid URL, fallback to default\n    }\n    return 'png'; // Default extension\n  };\n\n  const handleDownload = async (url: string, generationId: string, filename?: string) => {\n    try {\n      setDownloadingId(generationId);\n      \n      // Use proxy endpoint to ensure download works with CORS\n      const downloadUrl = `/api/proxy-download?url=${encodeURIComponent(url)}`;\n      \n      const response = await fetch(downloadUrl, {\n        credentials: 'include',\n        cache: 'no-store',\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Failed to fetch image: ${response.statusText}`);\n      }\n      \n      const blob = await response.blob();\n      const blobUrl = URL.createObjectURL(blob);\n      \n      // Auto-generate filename with correct extension if not provided\n      const extension = getFileExtension(url);\n      const finalFilename = filename || `ai-generated-${Date.now()}.${extension}`;\n      \n      const link = document.createElement(\"a\");\n      link.href = blobUrl;\n      link.download = finalFilename;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      \n      setTimeout(() => URL.revokeObjectURL(blobUrl), 100);\n      \n      toast({\n        title: \"Download Complete\",\n        description: \"Image saved successfully\",\n      });\n    } catch (error) {\n      console.error(\"Download failed:\", error);\n      toast({\n        title: \"Download Failed\",\n        description: error instanceof Error ? error.message : \"Failed to download image\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setDownloadingId(null);\n    }\n  };\n\n  return (\n    <div className={`min-h-screen bg-background font-['Space_Grotesk',sans-serif] transition-all duration-300 ${isCollapsed ? 'md:ml-[90px]' : 'md:ml-64'}`}>\n        {/* Header with Pro Edit Toolbar */}\n        <div className=\"sticky top-0 z-40 border-b border-border/40 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n          <div className=\"max-w-[1920px] mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n            <div className=\"flex items-center justify-between gap-4\">\n              <div className=\"flex items-center gap-4\">\n                <h1 className=\"text-2xl font-bold tracking-tight\">AI Studio</h1>\n              \n              {/* Pro Edit Toolbar */}\n              {currentImage && (\n                <div className=\"hidden lg:flex items-center gap-2\">\n                  <div className=\"h-6 w-px bg-border\" />\n                  <span className=\"text-xs text-muted-foreground font-medium mr-1\">Pro Edit:</span>\n                  <GlassButton\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setProcessingPreset('clean');\n                      startEditMutation.mutate({ preset: 'clean', imageUrl: currentImage! });\n                    }}\n                    disabled={processingPreset !== null || !currentImage}\n                    className=\"gap-1.5\"\n                    title=\"Clean & Denoise\"\n                  >\n                    {processingPreset === 'clean' ? (\n                      <Loader2 className=\"h-3.5 w-3.5 animate-spin\" />\n                    ) : (\n                      <Sparkles className=\"h-3.5 w-3.5\" />\n                    )}\n                    Clean\n                  </GlassButton>\n                  <GlassButton\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setProcessingPreset('upscale4x');\n                      startEditMutation.mutate({ preset: 'upscale4x', imageUrl: currentImage! });\n                    }}\n                    disabled={processingPreset !== null || !currentImage}\n                    className=\"gap-1.5\"\n                    title=\"Upscale 4×\"\n                  >\n                    {processingPreset === 'upscale4x' ? (\n                      <Loader2 className=\"h-3.5 w-3.5 animate-spin\" />\n                    ) : (\n                      <Maximize2 className=\"h-3.5 w-3.5\" />\n                    )}\n                    Upscale\n                  </GlassButton>\n                  <GlassButton\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setProcessingPreset('portrait_pro');\n                      startEditMutation.mutate({ preset: 'portrait_pro', imageUrl: currentImage! });\n                    }}\n                    disabled={processingPreset !== null || !currentImage}\n                    className=\"gap-1.5\"\n                    title=\"Portrait Pro\"\n                  >\n                    {processingPreset === 'portrait_pro' ? (\n                      <Loader2 className=\"h-3.5 w-3.5 animate-spin\" />\n                    ) : (\n                      <User className=\"h-3.5 w-3.5\" />\n                    )}\n                    Portrait\n                  </GlassButton>\n                  <GlassButton\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setProcessingPreset('enhance');\n                      startEditMutation.mutate({ preset: 'enhance', imageUrl: currentImage! });\n                    }}\n                    disabled={processingPreset !== null || !currentImage}\n                    className=\"gap-1.5\"\n                    title=\"Smart Enhance\"\n                  >\n                    {processingPreset === 'enhance' ? (\n                      <Loader2 className=\"h-3.5 w-3.5 animate-spin\" />\n                    ) : (\n                      <Wand2 className=\"h-3.5 w-3.5\" />\n                    )}\n                    Enhance\n                  </GlassButton>\n                  <GlassButton\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setProcessingPreset('bg_remove');\n                      startEditMutation.mutate({ preset: 'bg_remove', imageUrl: currentImage! });\n                    }}\n                    disabled={processingPreset !== null || !currentImage}\n                    className=\"gap-1.5\"\n                    title=\"Remove Background\"\n                  >\n                    {processingPreset === 'bg_remove' ? (\n                      <Loader2 className=\"h-3.5 w-3.5 animate-spin\" />\n                    ) : (\n                      <Trash2 className=\"h-3.5 w-3.5\" />\n                    )}\n                    Remove BG\n                  </GlassButton>\n                  <GlassButton\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setProcessingPreset('relight');\n                      startEditMutation.mutate({ preset: 'relight', imageUrl: currentImage! });\n                    }}\n                    disabled={processingPreset !== null || !currentImage}\n                    className=\"gap-1.5\"\n                    title=\"Relight Scene\"\n                  >\n                    {processingPreset === 'relight' ? (\n                      <Loader2 className=\"h-3.5 w-3.5 animate-spin\" />\n                    ) : (\n                      <Sparkles className=\"h-3.5 w-3.5\" />\n                    )}\n                    Relight\n                  </GlassButton>\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex items-center gap-3\">\n              {/* Credits Display */}\n              <div className=\"flex items-center gap-2 px-4 py-2 rounded-lg glassmorphism\">\n                <span className=\"material-symbols-outlined text-primary text-xl\">auto_awesome</span>\n                <div>\n                  <p className=\"text-xs text-muted-foreground\">Credits</p>\n                  <p className=\"text-xl font-bold text-primary\" data-testid=\"text-credits-balance\">{userCredits}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"w-full\">\n        {/* Mobile Vertical Scroll Layout (< lg) */}\n        <div className=\"lg:hidden\">\n          {/* Section 1: Generator */}\n          <div className=\"border-b border-border/40\">\n            <div className=\"sticky top-16 bg-background/95 backdrop-blur z-30 p-4 border-b border-border/40\">\n              <h2 className=\"text-lg font-semibold\">Generator</h2>\n            </div>\n              <div className=\"min-h-[calc(100vh-10rem)] overflow-y-auto\">\n                <div className=\"p-4 space-y-6\">\n                  {/* Prompt */}\n                  <div>\n                    <Label htmlFor=\"prompt-mobile\" className=\"mb-2 block text-sm font-medium\">\n                      Prompt\n                    </Label>\n                    <Textarea\n                      id=\"prompt-mobile\"\n                      placeholder=\"e.g., a futuristic cityscape at sunset, neon lights, glassmorphism\"\n                      value={prompt}\n                      onChange={(e) => setPrompt(e.target.value)}\n                      rows={4}\n                      className=\"w-full resize-none rounded-lg border-0 bg-black/20 dark:bg-white/5 p-3 text-sm placeholder:text-muted-foreground/50 ring-1 ring-inset ring-transparent transition-all focus:bg-black/30 dark:focus:bg-white/10 focus:ring-primary\"\n                      data-testid=\"input-prompt\"\n                    />\n                  </div>\n\n                  {/* Negative Prompt */}\n                  {currentModelConfig?.supportsNegativePrompt && (\n                    <div>\n                      <Label htmlFor=\"negative-prompt-mobile\" className=\"mb-2 block text-sm font-medium\">\n                        Negative Prompt (Optional)\n                      </Label>\n                      <Textarea\n                        id=\"negative-prompt-mobile\"\n                        placeholder=\"blurry, low quality, distorted...\"\n                        value={negativePrompt}\n                        onChange={(e) => setNegativePrompt(e.target.value)}\n                        rows={2}\n                        className=\"w-full resize-none rounded-lg border-0 bg-black/20 dark:bg-white/5 p-3 text-sm placeholder:text-muted-foreground/50 ring-1 ring-inset ring-transparent transition-all focus:bg-black/30 dark:focus:bg-white/10 focus:ring-primary\"\n                        data-testid=\"input-negative-prompt\"\n                      />\n                    </div>\n                  )}\n\n                  {/* AI Model Selector */}\n                  <div>\n                    <h3 className=\"mb-2 text-sm font-medium\">AI Generator</h3>\n                    {loadingModels ? (\n                      <div className=\"h-10 rounded-md border border-input bg-muted/50 animate-pulse\" />\n                    ) : (\n                      <Select value={selectedModel} onValueChange={setSelectedModel}>\n                        <SelectTrigger data-testid=\"select-model\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {modelConfigs?.map((model) => {\n                            const pricingKey = modelToPricingKey[model.id] || model.id;\n                            const credits = pricing?.[pricingKey] || 0;\n                            return (\n                              <SelectItem key={model.id} value={model.id}>\n                                {model.name} - {credits} {credits === 1 ? 'credit' : 'credits'}\n                              </SelectItem>\n                            );\n                          })}\n                        </SelectContent>\n                      </Select>\n                    )}\n                  </div>\n\n                  {/* Parameters */}\n                  {currentModelConfig && (\n                    <div className=\"space-y-4\">\n                      <h3 className=\"mb-2 text-sm font-medium\">Parameters</h3>\n                      \n                      {/* Number of Images */}\n                      <div>\n                        <Label className=\"mb-1 block text-xs text-muted-foreground\">\n                          Num Images ({numImages})\n                        </Label>\n                        <Slider\n                          value={[numImages]}\n                          onValueChange={(value) => setNumImages(value[0])}\n                          min={1}\n                          max={8}\n                          step={1}\n                          className=\"mt-2\"\n                        />\n                      </div>\n\n                      {/* Aspect Ratio */}\n                      {currentModelConfig.supportsAspectRatio && (\n                        <div>\n                          <Label className=\"mb-1 block text-xs text-muted-foreground\">Aspect Ratio</Label>\n                          <Select value={aspectRatio} onValueChange={setAspectRatio}>\n                            <SelectTrigger className=\"h-9 text-xs\" data-testid=\"select-aspect-ratio\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {aspectRatiosForCurrentModel.map((ratio) => (\n                                <SelectItem key={ratio.value} value={ratio.value}>\n                                  {ratio.label}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      )}\n\n                      {/* Resolution (Ideogram) */}\n                      {currentModelConfig.supportsResolution && (\n                        <div>\n                          <Label className=\"mb-1 block text-xs text-muted-foreground\">Resolution</Label>\n                          <Select value={resolution} onValueChange={setResolution}>\n                            <SelectTrigger className=\"h-9 text-xs\" data-testid=\"select-resolution\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {ideogramResolutions.map((res) => (\n                                <SelectItem key={res.value} value={res.value}>\n                                  {res.label}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      )}\n\n                      {/* Style Type (Ideogram) */}\n                      {currentModelConfig.supportsStyleType && (\n                        <div>\n                          <Label className=\"mb-1 block text-xs text-muted-foreground\">Style Type</Label>\n                          <Select value={styleType} onValueChange={setStyleType}>\n                            <SelectTrigger className=\"h-9 text-xs\" data-testid=\"select-style-type\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {ideogramStyleTypes.map((style) => (\n                                <SelectItem key={style.value} value={style.value}>\n                                  {style.label}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      )}\n\n                      {/* Style Preset (Ideogram) */}\n                      {currentModelConfig.supportsStylePreset && (\n                        <div>\n                          <Label className=\"mb-1 block text-xs text-muted-foreground\">Style Preset</Label>\n                          <Select value={stylePreset} onValueChange={setStylePreset}>\n                            <SelectTrigger className=\"h-9 text-xs\" data-testid=\"select-style-preset\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {ideogramStylePresets.map((preset) => (\n                                <SelectItem key={preset.value} value={preset.value}>\n                                  {preset.label}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      )}\n\n                      {/* Magic Prompt (Ideogram) */}\n                      {currentModelConfig.supportsMagicPrompt && (\n                        <div>\n                          <Label className=\"mb-1 block text-xs text-muted-foreground\">Magic Prompt</Label>\n                          <Select value={magicPromptOption} onValueChange={setMagicPromptOption}>\n                            <SelectTrigger className=\"h-9 text-xs\" data-testid=\"select-magic-prompt\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {magicPromptOptions.map((option) => (\n                                <SelectItem key={option.value} value={option.value}>\n                                  {option.label}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            Automatically enhances your prompt\n                          </p>\n                        </div>\n                      )}\n\n                      {/* Leonardo Style */}\n                      {currentModelConfig.supportsLeonardoStyle && (\n                        <div>\n                          <Label className=\"mb-1 block text-xs text-muted-foreground\">Leonardo Style</Label>\n                          <Select value={leonardoStyle} onValueChange={setLeonardoStyle}>\n                            <SelectTrigger className=\"h-9 text-xs\" data-testid=\"select-leonardo-style\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {leonardoStyles.map((style) => (\n                                <SelectItem key={style.value} value={style.value}>\n                                  {style.label}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      )}\n\n                      {/* Contrast (Leonardo) */}\n                      {currentModelConfig.supportsContrast && (\n                        <div>\n                          <Label className=\"mb-1 block text-xs text-muted-foreground\">Contrast</Label>\n                          <Select value={contrast} onValueChange={setContrast}>\n                            <SelectTrigger className=\"h-9 text-xs\" data-testid=\"select-contrast\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {contrastLevels.map((level) => (\n                                <SelectItem key={level.value} value={level.value}>\n                                  {level.label}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      )}\n\n                      {/* Generation Mode (Leonardo) */}\n                      {currentModelConfig.supportsGenerationMode && (\n                        <div>\n                          <Label className=\"mb-1 block text-xs text-muted-foreground\">Generation Mode</Label>\n                          <Select value={generationMode} onValueChange={setGenerationMode}>\n                            <SelectTrigger className=\"h-9 text-xs\" data-testid=\"select-generation-mode\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {generationModes.map((mode) => (\n                                <SelectItem key={mode.value} value={mode.value}>\n                                  {mode.label}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      )}\n\n                      {/* Prompt Enhance (Leonardo) */}\n                      {currentModelConfig.supportsPromptEnhance && (\n                        <div className=\"flex items-center justify-between\">\n                          <Label className=\"text-xs text-muted-foreground\">Prompt Enhance</Label>\n                          <Checkbox\n                            checked={promptEnhance}\n                            onCheckedChange={(checked) => setPromptEnhance(checked as boolean)}\n                            data-testid=\"checkbox-prompt-enhance\"\n                          />\n                        </div>\n                      )}\n\n                      {/* Prompt Upsampling (Flux) */}\n                      {currentModelConfig.supportsPromptUpsampling && (\n                        <div className=\"flex items-center justify-between\">\n                          <Label className=\"text-xs text-muted-foreground\">Prompt Upsampling</Label>\n                          <Checkbox\n                            checked={promptUpsampling}\n                            onCheckedChange={(checked) => setPromptUpsampling(checked as boolean)}\n                            data-testid=\"checkbox-prompt-upsampling\"\n                          />\n                        </div>\n                      )}\n\n                      {/* Safety Tolerance (Flux) */}\n                      {currentModelConfig.supportsSafetyTolerance && (\n                        <div>\n                          <Label className=\"mb-1 block text-xs text-muted-foreground\">\n                            Safety Tolerance ({safetyTolerance})\n                          </Label>\n                          <Slider\n                            value={[safetyTolerance]}\n                            onValueChange={(value) => setSafetyTolerance(value[0])}\n                            min={0}\n                            max={6}\n                            step={1}\n                          />\n                        </div>\n                      )}\n\n                      {/* CFG Scale (Stable Diffusion) */}\n                      {currentModelConfig.supportsCfg && (\n                        <div>\n                          <Label className=\"mb-1 block text-xs text-muted-foreground\">\n                            CFG Scale ({cfg})\n                          </Label>\n                          <Slider\n                            value={[cfg]}\n                            onValueChange={(value) => setCfg(value[0])}\n                            min={0}\n                            max={20}\n                            step={0.5}\n                          />\n                        </div>\n                      )}\n\n                      {/* Prompt Strength (Stable Diffusion) */}\n                      {currentModelConfig.supportsPromptStrength && (\n                        <div>\n                          <Label className=\"mb-1 block text-xs text-muted-foreground\">\n                            Prompt Strength ({promptStrength.toFixed(2)})\n                          </Label>\n                          <Slider\n                            value={[promptStrength]}\n                            onValueChange={(value) => setPromptStrength(value[0])}\n                            min={0}\n                            max={1}\n                            step={0.05}\n                          />\n                        </div>\n                      )}\n\n                      {/* Seed */}\n                      {currentModelConfig.supportsSeed && (\n                        <div>\n                          <Label htmlFor=\"seed-mobile\" className=\"mb-1 block text-xs text-muted-foreground\">\n                            Seed (0 for random)\n                          </Label>\n                          <Input\n                            id=\"seed-mobile\"\n                            type=\"number\"\n                            value={seed}\n                            onChange={(e) => setSeed(Number(e.target.value))}\n                            className=\"h-9\"\n                            data-testid=\"input-seed\"\n                          />\n                        </div>\n                      )}\n\n                      {/* Image Input */}\n                      {currentModelConfig.supportsImageInput && (\n                        <div>\n                          <Label className=\"mb-1 block text-xs text-muted-foreground\">\n                            {getImageInputLabel()}\n                          </Label>\n                          <Input\n                            type=\"file\"\n                            accept=\"image/*\"\n                            onChange={(e) => setImageInput(e.target.files?.[0] || null)}\n                            className=\"h-9 text-xs\"\n                            data-testid=\"input-image-input\"\n                          />\n                          {imageInput && (\n                            <div className=\"mt-2 flex items-center gap-2\">\n                              <span className=\"text-xs text-muted-foreground\">{imageInput.name}</span>\n                              <Button\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                onClick={() => setImageInput(null)}\n                                className=\"h-5 px-1\"\n                              >\n                                <X className=\"h-3 w-3\" />\n                              </Button>\n                            </div>\n                          )}\n                        </div>\n                      )}\n\n                      {/* Style Reference Images */}\n                      {currentModelConfig.supportsStyleReferenceImages && (\n                        <div>\n                          <Label className=\"mb-1 block text-xs text-muted-foreground\">\n                            Style Reference Images\n                          </Label>\n                          <Input\n                            type=\"file\"\n                            accept=\"image/*\"\n                            multiple\n                            onChange={(e) => setStyleReferenceImages(Array.from(e.target.files || []))}\n                            className=\"h-9 text-xs\"\n                            data-testid=\"input-style-reference\"\n                          />\n                          {styleReferenceImages.length > 0 && (\n                            <div className=\"mt-2 space-y-1\">\n                              {styleReferenceImages.map((file, index) => (\n                                <div key={index} className=\"flex items-center gap-2\">\n                                  <span className=\"text-xs text-muted-foreground\">{file.name}</span>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"ghost\"\n                                    onClick={() => {\n                                      setStyleReferenceImages(prev => prev.filter((_, i) => i !== index));\n                                    }}\n                                    className=\"h-5 px-1\"\n                                  >\n                                    <X className=\"h-3 w-3\" />\n                                  </Button>\n                                </div>\n                              ))}\n                            </div>\n                          )}\n                        </div>\n                      )}\n                    </div>\n                  )}\n\n                  {/* Generate Button */}\n                  <FancyGlassButton\n                    onClick={handleGenerate}\n                    disabled={generateMutation.isPending || !hasEnoughCredits}\n                    className=\"w-full\"\n                    data-testid=\"button-generate\"\n                  >\n                    {generateMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"h-5 w-5 animate-spin\" />\n                        Generating...\n                      </>\n                    ) : !hasEnoughCredits ? (\n                      <>\n                        <Sparkles className=\"h-5 w-5\" />\n                        Insufficient Credits\n                      </>\n                    ) : (\n                      <>\n                        <span className=\"material-symbols-outlined\">auto_awesome</span>\n                        Generate Image ({totalCost} {totalCost === 1 ? 'credit' : 'credits'})\n                      </>\n                    )}\n                  </FancyGlassButton>\n                </div>\n              </div>\n          </div>\n\n          {/* Section 2: Canvas */}\n          <div className=\"border-b border-border/40\">\n            <div className=\"sticky top-16 bg-background/95 backdrop-blur z-30 p-4 border-b border-border/40\">\n              <h2 className=\"text-lg font-semibold\">Canvas</h2>\n            </div>\n              <div className=\"min-h-[calc(100vh-10rem)] relative\">\n                {generateMutation.isPending ? (\n                  <div className=\"flex-1 flex items-center justify-center min-h-[calc(100vh-10rem)]\">\n                    <div className=\"text-center space-y-4\">\n                      <Loader2 className=\"h-16 w-16 animate-spin text-primary mx-auto\" />\n                      <div>\n                        <h3 className=\"text-xl font-bold mb-2\">Generating...</h3>\n                        <p className=\"text-sm text-muted-foreground\">This may take a few moments</p>\n                      </div>\n                    </div>\n                  </div>\n                ) : currentImage ? (\n                  <>\n                    {/* Zoom Controls */}\n                    <div className=\"flex items-center justify-between px-4 py-3 border-b border-border/40 bg-background sticky top-0 z-10\">\n                      <div className=\"text-sm text-muted-foreground\">\n                        Preview\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <GlassButton\n                          variant={zoomLevel === 'fit' ? 'primary' : 'ghost'}\n                          size=\"sm\"\n                          onClick={() => setZoomLevel('fit')}\n                          className=\"h-7 px-2 text-xs\"\n                        >\n                          Fit\n                        </GlassButton>\n                        <GlassButton\n                          variant={zoomLevel === '100' ? 'primary' : 'ghost'}\n                          size=\"sm\"\n                          onClick={() => setZoomLevel('100')}\n                          className=\"h-7 px-2 text-xs\"\n                        >\n                          100%\n                        </GlassButton>\n                      </div>\n                    </div>\n                    \n                    {/* Canvas Container */}\n                    <div className=\"flex items-center justify-center overflow-auto bg-muted/10 min-h-[calc(100vh-16rem)] p-4\">\n                      <div className={`${zoomLevel === 'fit' ? 'max-w-full w-full' : 'w-auto'}`}>\n                        <div className=\"relative rounded-2xl glassmorphism p-4\">\n                          <canvas\n                            ref={canvasRef}\n                            className=\"rounded-xl max-w-full\"\n                            style={{\n                              transform: zoomLevel === 'fit' ? 'none' : \n                                        zoomLevel === '100' ? 'scale(1)' :\n                                        zoomLevel === '150' ? 'scale(1.5)' :\n                                        'scale(2)',\n                              transformOrigin: 'center'\n                            }}\n                          />\n                          \n                          {processingPreset && (\n                            <div className=\"absolute inset-0 bg-black/60 backdrop-blur-sm rounded-xl flex items-center justify-center\">\n                              <div className=\"text-center space-y-3\">\n                                <Loader2 className=\"h-12 w-12 animate-spin text-primary mx-auto\" />\n                                <div>\n                                  <h4 className=\"text-lg font-semibold\">Processing...</h4>\n                                  <p className=\"text-sm text-muted-foreground\">\n                                    Applying {processingPreset === 'clean' ? 'Clean & Denoise' : \n                                              processingPreset === 'upscale4x' ? 'Upscale 4×' :\n                                              processingPreset === 'portrait_pro' ? 'Portrait Pro' :\n                                              processingPreset === 'enhance' ? 'Smart Enhance' :\n                                              processingPreset === 'bg_remove' ? 'Remove Background' :\n                                              'Relight Scene'}\n                                  </p>\n                                </div>\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Overlay Controls - Bottom Right */}\n                    {currentImage && (\n                      <div className=\"fixed bottom-20 right-4 z-40 flex flex-col gap-2 glassmorphism p-3 rounded-xl shadow-lg\">\n                        <GlassButton\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => {\n                            if (currentVersionIndex <= 0) return;\n                            const newIndex = currentVersionIndex - 1;\n                            setCurrentVersionIndex(newIndex);\n                            historyIndexRef.current = newIndex;\n                            reloadCanvas(imageVersions[newIndex]);\n                          }}\n                          disabled={currentVersionIndex <= 0 || imageVersions.length === 0}\n                          className=\"h-9 w-9 p-0\"\n                          title=\"Undo\"\n                          data-testid=\"button-undo\"\n                        >\n                          <Undo className=\"h-4 w-4\" />\n                        </GlassButton>\n                        <GlassButton\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => {\n                            if (currentVersionIndex >= imageVersions.length - 1) return;\n                            const newIndex = currentVersionIndex + 1;\n                            setCurrentVersionIndex(newIndex);\n                            historyIndexRef.current = newIndex;\n                            reloadCanvas(imageVersions[newIndex]);\n                          }}\n                          disabled={currentVersionIndex >= imageVersions.length - 1 || imageVersions.length === 0}\n                          className=\"h-9 w-9 p-0\"\n                          title=\"Redo\"\n                          data-testid=\"button-redo\"\n                        >\n                          <Redo className=\"h-4 w-4\" />\n                        </GlassButton>\n                        <GlassButton\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => {\n                            if (!canvas) return;\n                            const dataURL = canvas.toDataURL({\n                              format: \"png\",\n                              quality: 1,\n                              multiplier: 2,\n                            });\n                            const link = document.createElement(\"a\");\n                            link.href = dataURL;\n                            link.download = `edited-${Date.now()}.png`;\n                            document.body.appendChild(link);\n                            link.click();\n                            document.body.removeChild(link);\n                            toast({\n                              title: \"Downloaded\",\n                              description: \"Image downloaded successfully\",\n                            });\n                          }}\n                          disabled={!canvas}\n                          className=\"h-9 w-9 p-0\"\n                          title=\"Download\"\n                          data-testid=\"button-download\"\n                        >\n                          <Download className=\"h-4 w-4\" />\n                        </GlassButton>\n                        <GlassButton\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => {\n                            const gen = generations?.find(g => g.id === currentGenerationId);\n                            if (gen) handleOpenSubmitWizard(gen);\n                          }}\n                          disabled={!currentGenerationId}\n                          className=\"h-9 w-9 p-0\"\n                          title=\"Upload to Contest\"\n                          data-testid=\"button-upload\"\n                        >\n                          <Upload className=\"h-4 w-4\" />\n                        </GlassButton>\n                      </div>\n                    )}\n\n                    {/* Pro Edit FAB - Bottom Left */}\n                    {currentImage && (\n                      <div className=\"fixed bottom-20 left-4 z-50\">\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <FancyGlassButton\n                              disabled={processingPreset !== null}\n                              className=\"gap-2 shadow-xl\"\n                              data-testid=\"button-pro-edit-fab\"\n                            >\n                              <Sparkles className=\"h-5 w-5\" />\n                              Pro Edit\n                            </FancyGlassButton>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"start\" className=\"w-56\">\n                            <DropdownMenuItem\n                              onClick={() => {\n                                setProcessingPreset('clean');\n                                startEditMutation.mutate({ preset: 'clean', imageUrl: currentImage! });\n                              }}\n                              disabled={processingPreset !== null}\n                              data-testid=\"menu-item-clean\"\n                            >\n                              <div className=\"flex items-center justify-between w-full\">\n                                <div className=\"flex items-center gap-2\">\n                                  {processingPreset === 'clean' ? (\n                                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                                  ) : (\n                                    <Sparkles className=\"h-4 w-4\" />\n                                  )}\n                                  <span>Clean & Denoise</span>\n                                </div>\n                                <span className=\"text-xs text-muted-foreground\">2 credits</span>\n                              </div>\n                            </DropdownMenuItem>\n                            <DropdownMenuItem\n                              onClick={() => {\n                                setProcessingPreset('upscale4x');\n                                startEditMutation.mutate({ preset: 'upscale4x', imageUrl: currentImage! });\n                              }}\n                              disabled={processingPreset !== null}\n                              data-testid=\"menu-item-upscale\"\n                            >\n                              <div className=\"flex items-center justify-between w-full\">\n                                <div className=\"flex items-center gap-2\">\n                                  {processingPreset === 'upscale4x' ? (\n                                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                                  ) : (\n                                    <Maximize2 className=\"h-4 w-4\" />\n                                  )}\n                                  <span>Upscale 4×</span>\n                                </div>\n                                <span className=\"text-xs text-muted-foreground\">4 credits</span>\n                              </div>\n                            </DropdownMenuItem>\n                            <DropdownMenuItem\n                              onClick={() => {\n                                setProcessingPreset('portrait_pro');\n                                startEditMutation.mutate({ preset: 'portrait_pro', imageUrl: currentImage! });\n                              }}\n                              disabled={processingPreset !== null}\n                              data-testid=\"menu-item-portrait\"\n                            >\n                              <div className=\"flex items-center justify-between w-full\">\n                                <div className=\"flex items-center gap-2\">\n                                  {processingPreset === 'portrait_pro' ? (\n                                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                                  ) : (\n                                    <User className=\"h-4 w-4\" />\n                                  )}\n                                  <span>Portrait Pro</span>\n                                </div>\n                                <span className=\"text-xs text-muted-foreground\">4 credits</span>\n                              </div>\n                            </DropdownMenuItem>\n                            <DropdownMenuItem\n                              onClick={() => {\n                                setProcessingPreset('enhance');\n                                startEditMutation.mutate({ preset: 'enhance', imageUrl: currentImage! });\n                              }}\n                              disabled={processingPreset !== null}\n                              data-testid=\"menu-item-enhance\"\n                            >\n                              <div className=\"flex items-center justify-between w-full\">\n                                <div className=\"flex items-center gap-2\">\n                                  {processingPreset === 'enhance' ? (\n                                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                                  ) : (\n                                    <Wand2 className=\"h-4 w-4\" />\n                                  )}\n                                  <span>Smart Enhance</span>\n                                </div>\n                                <span className=\"text-xs text-muted-foreground\">3 credits</span>\n                              </div>\n                            </DropdownMenuItem>\n                            <DropdownMenuItem\n                              onClick={() => {\n                                setProcessingPreset('bg_remove');\n                                startEditMutation.mutate({ preset: 'bg_remove', imageUrl: currentImage! });\n                              }}\n                              disabled={processingPreset !== null}\n                              data-testid=\"menu-item-bg-remove\"\n                            >\n                              <div className=\"flex items-center justify-between w-full\">\n                                <div className=\"flex items-center gap-2\">\n                                  {processingPreset === 'bg_remove' ? (\n                                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                                  ) : (\n                                    <Trash2 className=\"h-4 w-4\" />\n                                  )}\n                                  <span>Remove Background</span>\n                                </div>\n                                <span className=\"text-xs text-muted-foreground\">2 credits</span>\n                              </div>\n                            </DropdownMenuItem>\n                            <DropdownMenuItem\n                              onClick={() => {\n                                setProcessingPreset('relight');\n                                startEditMutation.mutate({ preset: 'relight', imageUrl: currentImage! });\n                              }}\n                              disabled={processingPreset !== null}\n                              data-testid=\"menu-item-relight\"\n                            >\n                              <div className=\"flex items-center justify-between w-full\">\n                                <div className=\"flex items-center gap-2\">\n                                  {processingPreset === 'relight' ? (\n                                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                                  ) : (\n                                    <Sparkles className=\"h-4 w-4\" />\n                                  )}\n                                  <span>Relight Scene</span>\n                                </div>\n                                <span className=\"text-xs text-muted-foreground\">4 credits</span>\n                              </div>\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </div>\n                    )}\n                  </>\n                ) : (\n                  <div className=\"flex-1 flex items-center justify-center min-h-[calc(100vh-10rem)]\">\n                    <div className=\"text-center space-y-4\">\n                      <div className=\"mx-auto h-32 w-32 rounded-full bg-muted/50 flex items-center justify-center\">\n                        <ImageIcon className=\"h-16 w-16 text-muted-foreground\" />\n                      </div>\n                      <div>\n                        <h3 className=\"text-2xl font-bold mb-2\">Your images will be displayed here</h3>\n                        <p className=\"text-sm text-muted-foreground\">Generate an image to see it here</p>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n          </div>\n\n          {/* Section 3: History */}\n          <div>\n            <div className=\"sticky top-16 bg-background/95 backdrop-blur z-30 p-4 border-b border-border/40\">\n              <h2 className=\"text-lg font-semibold\">History</h2>\n            </div>\n              <div className=\"min-h-[calc(100vh-10rem)] overflow-y-auto\">\n                <div className=\"p-4\">\n                  {/* Warning Banner */}\n                  <div className=\"mb-4 px-3 py-2 rounded-lg bg-amber-500/10 border border-amber-500/20\">\n                    <p className=\"text-xs text-amber-600 dark:text-amber-400 flex items-center gap-2 font-medium\">\n                      <span className=\"text-base\">⚠️</span>\n                      <span>Images will be deleted after 7 days. Download soon!</span>\n                    </p>\n                  </div>\n                  \n                  <Tabs value={currentTab} onValueChange={setCurrentTab} className=\"w-full\">\n                    <TabsList className=\"w-full grid grid-cols-2 mb-4\">\n                      <TabsTrigger value=\"history\">History</TabsTrigger>\n                      <TabsTrigger value=\"versions\">Versions</TabsTrigger>\n                    </TabsList>\n                    \n                    <TabsContent value=\"history\" className=\"mt-0\">\n                      <div className=\"mb-4\">\n                        <p className=\"text-xs text-muted-foreground\">Your generated images</p>\n                      </div>\n\n                      {/* Images Grid */}\n                      {loadingHistory ? (\n                        <div className=\"flex justify-center py-12\">\n                          <Loader2 className=\"h-12 w-12 animate-spin text-muted-foreground\" />\n                        </div>\n                      ) : !generations || generations.length === 0 ? (\n                        <div className=\"text-center py-12\">\n                          <ImageIcon className=\"h-12 w-12 mx-auto text-muted-foreground mb-3\" />\n                          <p className=\"text-sm text-muted-foreground\">No generations yet</p>\n                        </div>\n                      ) : (\n                        <div className=\"grid grid-cols-2 gap-3\">\n                          {generations.map((gen) => (\n                            <div\n                              key={gen.id}\n                              className={`group cursor-pointer relative aspect-square overflow-hidden rounded-lg border-2 transition-all ${\n                                currentGenerationId === gen.id\n                                  ? 'border-primary shadow-lg shadow-primary/20'\n                                  : 'border-transparent hover:border-primary/50'\n                              }`}\n                              onClick={() => {\n                                handleSelectGeneration(gen);\n                              }}\n                              data-testid={`generation-${gen.id}`}\n                            >\n                              <img\n                                alt={gen.prompt}\n                                className=\"h-full w-full object-cover\"\n                                src={gen.thumbnailUrl || gen.editedImageUrl || gen.imageUrl}\n                                data-testid={`img-generation-${gen.id}`}\n                              />\n                              \n                              {/* Hover Actions */}\n                              <div className=\"absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center gap-1\">\n                                <GlassButton\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  className=\"h-7 w-7 rounded-full\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    const downloadUrl = currentGenerationId === gen.id && currentImage \n                                      ? currentImage \n                                      : gen.editedImageUrl || gen.imageUrl;\n                                    handleDownload(downloadUrl, gen.id);\n                                  }}\n                                  disabled={downloadingId === gen.id}\n                                >\n                                  {downloadingId === gen.id ? (\n                                    <Loader2 className=\"h-3 w-3 animate-spin\" />\n                                  ) : (\n                                    <Download className=\"h-3 w-3\" />\n                                  )}\n                                </GlassButton>\n                                \n                                <GlassButton\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  className=\"h-7 w-7 rounded-full\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    deleteMutation.mutate(gen.id);\n                                  }}\n                                  disabled={deleteMutation.isPending}\n                                >\n                                  {deleteMutation.isPending ? (\n                                    <Loader2 className=\"h-3 w-3 animate-spin\" />\n                                  ) : (\n                                    <Trash2 className=\"h-3 w-3\" />\n                                  )}\n                                </GlassButton>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </TabsContent>\n                    \n                    <TabsContent value=\"versions\" className=\"mt-0\">\n                      <div className=\"mb-4\">\n                        <p className=\"text-xs text-muted-foreground\">Pro Edit versions ({imageVersions.length})</p>\n                      </div>\n                      \n                      {/* Versions Grid */}\n                      {!currentImage ? (\n                        <div className=\"text-center py-12\">\n                          <ImageIcon className=\"h-12 w-12 mx-auto text-muted-foreground mb-3\" />\n                          <p className=\"text-sm text-muted-foreground\">Select an image to see versions</p>\n                        </div>\n                      ) : imageVersions.length === 0 ? (\n                        <div className=\"text-center py-12\">\n                          <ImageIcon className=\"h-12 w-12 mx-auto text-muted-foreground mb-3\" />\n                          <p className=\"text-sm text-muted-foreground\">No versions yet</p>\n                          <p className=\"text-xs text-muted-foreground mt-2\">Apply Pro Edit effects to create versions</p>\n                        </div>\n                      ) : (\n                        <div className=\"grid grid-cols-2 gap-3\">\n                          {imageVersions.map((versionUrl, index) => (\n                            <div\n                              key={`${versionUrl}-${index}`}\n                              className={`group cursor-pointer relative aspect-square overflow-hidden rounded-lg border-2 transition-all ${\n                                currentVersionIndex === index\n                                  ? 'border-primary shadow-lg shadow-primary/20'\n                                  : 'border-transparent hover:border-primary/50'\n                              }`}\n                              onClick={() => {\n                                setCurrentVersionIndex(index);\n                                historyIndexRef.current = index;\n                                reloadCanvas(versionUrl);\n                              }}\n                              data-testid={`version-${index}`}\n                            >\n                              <img\n                                alt={`Version ${index + 1}`}\n                                className=\"h-full w-full object-cover\"\n                                src={versionUrl}\n                                data-testid={`img-version-${index}`}\n                              />\n                              \n                              {/* Version Number Badge */}\n                              <div className=\"absolute top-2 left-2 bg-black/60 backdrop-blur-sm rounded px-2 py-0.5\">\n                                <span className=\"text-xs font-semibold text-white\">v{index + 1}</span>\n                              </div>\n                              \n                              {/* Hover Actions - Top Right */}\n                              <div className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity flex gap-1\">\n                                <GlassButton\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  className=\"h-7 w-7 rounded-full\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleDownload(versionUrl, `version-${index + 1}`);\n                                  }}\n                                  disabled={downloadingId === `version-${index + 1}`}\n                                  data-testid={`button-download-version-${index}`}\n                                  title=\"Download version\"\n                                >\n                                  {downloadingId === `version-${index + 1}` ? (\n                                    <Loader2 className=\"h-3 w-3 animate-spin\" />\n                                  ) : (\n                                    <Download className=\"h-3 w-3\" />\n                                  )}\n                                </GlassButton>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </TabsContent>\n                  </Tabs>\n                </div>\n              </div>\n          </div>\n        </div>\n\n        {/* Desktop 3-Column Layout (>= lg) */}\n        <div className=\"hidden lg:flex gap-0\">\n          {/* Center Panel - Canvas (flex-grow) */}\n          <div className=\"flex-1 min-h-[calc(100vh-5rem)] flex flex-col\">\n            {generateMutation.isPending ? (\n              <div className=\"flex-1 flex items-center justify-center\">\n                <div className=\"text-center space-y-4\">\n                  <Loader2 className=\"h-16 w-16 animate-spin text-primary mx-auto\" />\n                  <div>\n                    <h3 className=\"text-xl font-bold mb-2\">Generating...</h3>\n                    <p className=\"text-sm text-muted-foreground\">This may take a few moments</p>\n                  </div>\n                </div>\n              </div>\n            ) : currentImage ? (\n              <>\n                {/* Zoom Controls */}\n                <div className=\"flex items-center justify-between px-6 py-3 border-b border-border/40\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"text-sm text-muted-foreground mr-2\">\n                      Preview\n                    </div>\n                    <GlassButton\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => {\n                        if (currentVersionIndex <= 0) return;\n                        const newIndex = currentVersionIndex - 1;\n                        setCurrentVersionIndex(newIndex);\n                        historyIndexRef.current = newIndex;\n                        reloadCanvas(imageVersions[newIndex]);\n                      }}\n                      disabled={currentVersionIndex <= 0 || imageVersions.length === 0}\n                      className=\"h-7 px-2 text-xs gap-1\"\n                      title=\"Undo\"\n                      data-testid=\"button-undo\"\n                    >\n                      <Undo className=\"h-3 w-3\" />\n                    </GlassButton>\n                    <GlassButton\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => {\n                        if (currentVersionIndex >= imageVersions.length - 1) return;\n                        const newIndex = currentVersionIndex + 1;\n                        setCurrentVersionIndex(newIndex);\n                        historyIndexRef.current = newIndex;\n                        reloadCanvas(imageVersions[newIndex]);\n                      }}\n                      disabled={currentVersionIndex >= imageVersions.length - 1 || imageVersions.length === 0}\n                      className=\"h-7 px-2 text-xs gap-1\"\n                      title=\"Redo\"\n                      data-testid=\"button-redo\"\n                    >\n                      <Redo className=\"h-3 w-3\" />\n                    </GlassButton>\n                    <GlassButton\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => {\n                        if (!canvas) return;\n                        const dataURL = canvas.toDataURL({\n                          format: \"png\",\n                          quality: 1,\n                          multiplier: 2,\n                        });\n                        const link = document.createElement(\"a\");\n                        link.href = dataURL;\n                        link.download = `edited-${Date.now()}.png`;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n                        toast({\n                          title: \"Downloaded\",\n                          description: \"Image downloaded successfully\",\n                        });\n                      }}\n                      disabled={!canvas}\n                      className=\"h-7 px-2 text-xs gap-1\"\n                      title=\"Download\"\n                      data-testid=\"button-download\"\n                    >\n                      <Download className=\"h-3 w-3\" />\n                    </GlassButton>\n                    <FancyGlassButton\n                      onClick={() => {\n                        const gen = generations?.find(g => g.id === currentGenerationId);\n                        if (gen) handleOpenSubmitWizard(gen);\n                      }}\n                      disabled={!currentGenerationId}\n                      title=\"Upload to Contest or Gallery\"\n                      data-testid=\"button-upload\"\n                    >\n                      <Upload className=\"h-5 w-5\" />\n                      Upload\n                    </FancyGlassButton>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <GlassButton\n                      variant={zoomLevel === 'fit' ? 'primary' : 'ghost'}\n                      size=\"sm\"\n                      onClick={() => setZoomLevel('fit')}\n                      className=\"h-7 px-2 text-xs\"\n                    >\n                      Fit\n                    </GlassButton>\n                    <GlassButton\n                      variant={zoomLevel === '100' ? 'primary' : 'ghost'}\n                      size=\"sm\"\n                      onClick={() => setZoomLevel('100')}\n                      className=\"h-7 px-2 text-xs\"\n                    >\n                      100%\n                    </GlassButton>\n                    <GlassButton\n                      variant={zoomLevel === '150' ? 'primary' : 'ghost'}\n                      size=\"sm\"\n                      onClick={() => setZoomLevel('150')}\n                      className=\"h-7 px-2 text-xs\"\n                    >\n                      150%\n                    </GlassButton>\n                    <GlassButton\n                      variant={zoomLevel === '200' ? 'primary' : 'ghost'}\n                      size=\"sm\"\n                      onClick={() => setZoomLevel('200')}\n                      className=\"h-7 px-2 text-xs\"\n                    >\n                      200%\n                    </GlassButton>\n                  </div>\n                </div>\n                \n                {/* Canvas */}\n                <div className=\"flex-1 flex items-center justify-center overflow-auto bg-muted/10\">\n                  <div className={`p-8 ${zoomLevel === 'fit' ? 'max-w-4xl w-full' : 'w-auto'}`}>\n                    <div className={`relative rounded-2xl glassmorphism p-4`}>\n                      <canvas\n                        ref={canvasRef}\n                        className=\"rounded-xl max-w-full\"\n                        style={{\n                          transform: zoomLevel === 'fit' ? 'none' : \n                                    zoomLevel === '100' ? 'scale(1)' :\n                                    zoomLevel === '150' ? 'scale(1.5)' :\n                                    'scale(2)',\n                          transformOrigin: 'center'\n                        }}\n                      />\n                      \n                      {processingPreset && (\n                        <div className=\"absolute inset-0 bg-black/60 backdrop-blur-sm rounded-xl flex items-center justify-center\">\n                          <div className=\"text-center space-y-3\">\n                            <Loader2 className=\"h-12 w-12 animate-spin text-primary mx-auto\" />\n                            <div>\n                              <h4 className=\"text-lg font-semibold\">Processing...</h4>\n                              <p className=\"text-sm text-muted-foreground\">\n                                Applying {processingPreset === 'clean' ? 'Clean & Denoise' : \n                                          processingPreset === 'upscale4x' ? 'Upscale 4×' :\n                                          processingPreset === 'portrait_pro' ? 'Portrait Pro' :\n                                          processingPreset === 'enhance' ? 'Smart Enhance' :\n                                          processingPreset === 'bg_remove' ? 'Remove Background' :\n                                          'Relight Scene'}\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </>\n            ) : (\n              <div className=\"flex-1 flex items-center justify-center\">\n                <div className=\"text-center space-y-4\">\n                  <div className=\"mx-auto h-32 w-32 rounded-full bg-muted/50 flex items-center justify-center\">\n                    <ImageIcon className=\"h-16 w-16 text-muted-foreground\" />\n                  </div>\n                  <div>\n                    <h3 className=\"text-2xl font-bold mb-2\">Your images will be displayed here</h3>\n                    <p className=\"text-sm text-muted-foreground\">Enter a prompt on the left and click Generate</p>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Left Panel - Generator Controls */}\n          <div className=\"hidden lg:block w-[360px] border-r border-border/40 bg-muted/20 order-first\">\n            <div className=\"h-[calc(100vh-5rem)] overflow-y-auto\">\n              <div className=\"sticky top-0 bg-muted/20 p-4 border-b border-border/40 z-10\">\n                <h2 className=\"text-lg font-semibold\">Generator</h2>\n              </div>\n              <div className=\"p-4 space-y-6\">\n                {/* Prompt */}\n                <div>\n                  <Label htmlFor=\"prompt\" className=\"mb-2 block text-sm font-medium\">\n                    Prompt\n                  </Label>\n                  <Textarea\n                    id=\"prompt\"\n                    placeholder=\"e.g., a futuristic cityscape at sunset, neon lights, glassmorphism\"\n                    value={prompt}\n                    onChange={(e) => setPrompt(e.target.value)}\n                    rows={4}\n                    className=\"w-full resize-none rounded-lg border-0 bg-black/20 dark:bg-white/5 p-3 text-sm placeholder:text-muted-foreground/50 ring-1 ring-inset ring-transparent transition-all focus:bg-black/30 dark:focus:bg-white/10 focus:ring-primary\"\n                    data-testid=\"input-prompt\"\n                  />\n                </div>\n\n                {/* Negative Prompt */}\n                {currentModelConfig?.supportsNegativePrompt && (\n                  <div>\n                    <Label htmlFor=\"negative-prompt\" className=\"mb-2 block text-sm font-medium\">\n                      Negative Prompt (Optional)\n                    </Label>\n                    <Textarea\n                      id=\"negative-prompt\"\n                      placeholder=\"blurry, low quality, distorted...\"\n                      value={negativePrompt}\n                      onChange={(e) => setNegativePrompt(e.target.value)}\n                      rows={2}\n                      className=\"w-full resize-none rounded-lg border-0 bg-black/20 dark:bg-white/5 p-3 text-sm placeholder:text-muted-foreground/50 ring-1 ring-inset ring-transparent transition-all focus:bg-black/30 dark:focus:bg-white/10 focus:ring-primary\"\n                      data-testid=\"input-negative-prompt\"\n                    />\n                  </div>\n                )}\n\n                {/* AI Model Selector */}\n                <div>\n                  <h3 className=\"mb-2 text-sm font-medium\">AI Generator</h3>\n                  {loadingModels ? (\n                    <div className=\"h-10 rounded-md border border-input bg-muted/50 animate-pulse\" />\n                  ) : (\n                    <Select value={selectedModel} onValueChange={setSelectedModel}>\n                      <SelectTrigger data-testid=\"select-model\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {modelConfigs?.map((model) => {\n                          const pricingKey = modelToPricingKey[model.id] || model.id;\n                          const credits = pricing?.[pricingKey] || 0;\n                          return (\n                            <SelectItem key={model.id} value={model.id}>\n                              {model.name} - {credits} {credits === 1 ? 'credit' : 'credits'}\n                            </SelectItem>\n                          );\n                        })}\n                      </SelectContent>\n                    </Select>\n                  )}\n                </div>\n\n                {/* Parameters */}\n                {currentModelConfig && (\n                  <div className=\"space-y-4\">\n                    <h3 className=\"mb-2 text-sm font-medium\">Parameters</h3>\n                    \n                    {/* Number of Images - always show */}\n                    <div>\n                      <Label className=\"mb-1 block text-xs text-muted-foreground\">\n                        Num Images ({numImages})\n                      </Label>\n                      <Slider\n                        value={[numImages]}\n                        onValueChange={(value) => setNumImages(value[0])}\n                        min={1}\n                        max={8}\n                        step={1}\n                        className=\"mt-2\"\n                      />\n                    </div>\n\n                    {/* Aspect Ratio */}\n                    {currentModelConfig.supportsAspectRatio && (\n                      <div>\n                        <Label className=\"mb-1 block text-xs text-muted-foreground\">Aspect Ratio</Label>\n                        <Select value={aspectRatio} onValueChange={setAspectRatio}>\n                          <SelectTrigger className=\"h-9 text-xs\" data-testid=\"select-aspect-ratio\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {aspectRatiosForCurrentModel.map((ratio) => (\n                              <SelectItem key={ratio.value} value={ratio.value}>\n                                {ratio.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    )}\n\n                    {/* Resolution (Ideogram) */}\n                    {currentModelConfig.supportsResolution && (\n                      <div>\n                        <Label className=\"mb-1 block text-xs text-muted-foreground\">Resolution</Label>\n                        <Select value={resolution} onValueChange={setResolution}>\n                          <SelectTrigger className=\"h-9 text-xs\" data-testid=\"select-resolution\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {ideogramResolutions.map((res) => (\n                              <SelectItem key={res.value} value={res.value}>\n                                {res.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    )}\n\n                    {/* Style Type (Ideogram) */}\n                    {currentModelConfig.supportsStyleType && (\n                      <div>\n                        <Label className=\"mb-1 block text-xs text-muted-foreground\">Style Type</Label>\n                        <Select value={styleType} onValueChange={setStyleType}>\n                          <SelectTrigger className=\"h-9 text-xs\" data-testid=\"select-style-type\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {ideogramStyleTypes.map((style) => (\n                              <SelectItem key={style.value} value={style.value}>\n                                {style.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    )}\n\n                    {/* Style Preset (Ideogram) */}\n                    {currentModelConfig.supportsStylePreset && (\n                      <div>\n                        <Label className=\"mb-1 block text-xs text-muted-foreground\">Style Preset</Label>\n                        <Select value={stylePreset} onValueChange={setStylePreset}>\n                          <SelectTrigger className=\"h-9 text-xs\" data-testid=\"select-style-preset\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {ideogramStylePresets.map((preset) => (\n                              <SelectItem key={preset.value} value={preset.value}>\n                                {preset.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    )}\n\n                    {/* Magic Prompt (Ideogram) */}\n                    {currentModelConfig.supportsMagicPrompt && (\n                      <div>\n                        <Label className=\"mb-1 block text-xs text-muted-foreground\">Magic Prompt</Label>\n                        <Select value={magicPromptOption} onValueChange={setMagicPromptOption}>\n                          <SelectTrigger className=\"h-9 text-xs\" data-testid=\"select-magic-prompt\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {magicPromptOptions.map((option) => (\n                              <SelectItem key={option.value} value={option.value}>\n                                {option.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          Automatically enhances your prompt\n                        </p>\n                      </div>\n                    )}\n\n                    {/* Leonardo Style */}\n                    {currentModelConfig.supportsLeonardoStyle && (\n                      <div>\n                        <Label className=\"mb-1 block text-xs text-muted-foreground\">Leonardo Style</Label>\n                        <Select value={leonardoStyle} onValueChange={setLeonardoStyle}>\n                          <SelectTrigger className=\"h-9 text-xs\" data-testid=\"select-leonardo-style\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {leonardoStyles.map((style) => (\n                              <SelectItem key={style.value} value={style.value}>\n                                {style.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    )}\n\n                    {/* Contrast (Leonardo) */}\n                    {currentModelConfig.supportsContrast && (\n                      <div>\n                        <Label className=\"mb-1 block text-xs text-muted-foreground\">Contrast</Label>\n                        <Select value={contrast} onValueChange={setContrast}>\n                          <SelectTrigger className=\"h-9 text-xs\" data-testid=\"select-contrast\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {contrastLevels.map((level) => (\n                              <SelectItem key={level.value} value={level.value}>\n                                {level.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    )}\n\n                    {/* Generation Mode (Leonardo) */}\n                    {currentModelConfig.supportsGenerationMode && (\n                      <div>\n                        <Label className=\"mb-1 block text-xs text-muted-foreground\">Generation Mode</Label>\n                        <Select value={generationMode} onValueChange={setGenerationMode}>\n                          <SelectTrigger className=\"h-9 text-xs\" data-testid=\"select-generation-mode\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {generationModes.map((mode) => (\n                              <SelectItem key={mode.value} value={mode.value}>\n                                {mode.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    )}\n\n                    {/* Prompt Enhance (Leonardo) */}\n                    {currentModelConfig.supportsPromptEnhance && (\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id=\"prompt-enhance\"\n                          checked={promptEnhance}\n                          onCheckedChange={(checked) => setPromptEnhance(checked as boolean)}\n                          data-testid=\"checkbox-prompt-enhance\"\n                        />\n                        <Label htmlFor=\"prompt-enhance\" className=\"text-xs cursor-pointer\">\n                          Prompt Enhancement\n                        </Label>\n                      </div>\n                    )}\n\n                    {/* Prompt Upsampling (Flux) */}\n                    {currentModelConfig.supportsPromptUpsampling && (\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id=\"prompt-upsampling\"\n                          checked={promptUpsampling}\n                          onCheckedChange={(checked) => setPromptUpsampling(checked as boolean)}\n                          data-testid=\"checkbox-prompt-upsampling\"\n                        />\n                        <Label htmlFor=\"prompt-upsampling\" className=\"text-xs cursor-pointer\">\n                          Prompt Upsampling\n                        </Label>\n                      </div>\n                    )}\n\n                    {/* Safety Tolerance (Flux) */}\n                    {currentModelConfig.supportsSafetyTolerance && (\n                      <div>\n                        <Label className=\"mb-1 block text-xs text-muted-foreground\">\n                          Safety Tolerance ({safetyTolerance})\n                        </Label>\n                        <Slider\n                          value={[safetyTolerance]}\n                          onValueChange={(value) => setSafetyTolerance(value[0])}\n                          min={0}\n                          max={6}\n                          step={1}\n                        />\n                      </div>\n                    )}\n\n                    {/* CFG Scale (SD) */}\n                    {currentModelConfig.supportsCfg && (\n                      <div>\n                        <Label className=\"mb-1 block text-xs text-muted-foreground\">\n                          CFG Scale ({cfg})\n                        </Label>\n                        <Slider\n                          value={[cfg]}\n                          onValueChange={(value) => setCfg(value[0])}\n                          min={0}\n                          max={10}\n                          step={0.1}\n                        />\n                      </div>\n                    )}\n\n                    {/* Prompt Strength (SD) */}\n                    {currentModelConfig.supportsPromptStrength && (\n                      <div>\n                        <Label className=\"mb-1 block text-xs text-muted-foreground\">\n                          Prompt Strength ({promptStrength.toFixed(2)})\n                        </Label>\n                        <Slider\n                          value={[promptStrength]}\n                          onValueChange={(value) => setPromptStrength(value[0])}\n                          min={0}\n                          max={1}\n                          step={0.05}\n                        />\n                      </div>\n                    )}\n\n                    {/* Seed */}\n                    {currentModelConfig.supportsSeed && (\n                      <div>\n                        <Label htmlFor=\"seed\" className=\"mb-1 block text-xs text-muted-foreground\">\n                          Seed (0 for random)\n                        </Label>\n                        <Input\n                          id=\"seed\"\n                          type=\"number\"\n                          value={seed}\n                          onChange={(e) => setSeed(Number(e.target.value))}\n                          className=\"h-9\"\n                          data-testid=\"input-seed\"\n                        />\n                      </div>\n                    )}\n\n                    {/* Image Input */}\n                    {currentModelConfig.supportsImageInput && (\n                      <div>\n                        <Label className=\"mb-1 block text-xs text-muted-foreground\">\n                          {getImageInputLabel()}\n                        </Label>\n                        <Input\n                          type=\"file\"\n                          accept=\"image/*\"\n                          onChange={(e) => setImageInput(e.target.files?.[0] || null)}\n                          className=\"h-9 text-xs\"\n                          data-testid=\"input-image-input\"\n                        />\n                        {imageInput && (\n                          <div className=\"mt-2 flex items-center gap-2\">\n                            <span className=\"text-xs text-muted-foreground\">{imageInput.name}</span>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => setImageInput(null)}\n                              className=\"h-5 px-1\"\n                            >\n                              <X className=\"h-3 w-3\" />\n                            </Button>\n                          </div>\n                        )}\n                      </div>\n                    )}\n\n                    {/* Style Reference Images */}\n                    {currentModelConfig.supportsStyleReferenceImages && (\n                      <div>\n                        <Label className=\"mb-1 block text-xs text-muted-foreground\">\n                          Style Reference Images\n                        </Label>\n                        <Input\n                          type=\"file\"\n                          accept=\"image/*\"\n                          multiple\n                          onChange={(e) => setStyleReferenceImages(Array.from(e.target.files || []))}\n                          className=\"h-9 text-xs\"\n                          data-testid=\"input-style-reference\"\n                        />\n                        {styleReferenceImages.length > 0 && (\n                          <div className=\"mt-2 space-y-1\">\n                            {styleReferenceImages.map((file, index) => (\n                              <div key={index} className=\"flex items-center gap-2\">\n                                <span className=\"text-xs text-muted-foreground\">{file.name}</span>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  onClick={() => {\n                                    setStyleReferenceImages(prev => prev.filter((_, i) => i !== index));\n                                  }}\n                                  className=\"h-5 px-1\"\n                                >\n                                  <X className=\"h-3 w-3\" />\n                                </Button>\n                              </div>\n                            ))}\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {/* Generate Button */}\n                <FancyGlassButton\n                  onClick={handleGenerate}\n                  disabled={generateMutation.isPending || !hasEnoughCredits}\n                  className=\"w-full\"\n                  data-testid=\"button-generate\"\n                >\n                  {generateMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"h-5 w-5 animate-spin\" />\n                      Generating...\n                    </>\n                  ) : !hasEnoughCredits ? (\n                    <>\n                      <Sparkles className=\"h-5 w-5\" />\n                      Insufficient Credits\n                    </>\n                  ) : (\n                    <>\n                      <span className=\"material-symbols-outlined\">auto_awesome</span>\n                      Generate Image ({totalCost} {totalCost === 1 ? 'credit' : 'credits'})\n                    </>\n                  )}\n                </FancyGlassButton>\n              </div>\n            </div>\n          </div>\n\n          {/* Right Panel - History & Versions */}\n          <div className=\"hidden lg:block w-[340px] border-l border-border/40 bg-muted/20\">\n            <div className=\"h-[calc(100vh-5rem)] overflow-y-auto\">\n              {/* Warning Banner */}\n              <div className=\"mx-4 mt-4 mb-3 px-3 py-2 rounded-lg bg-amber-500/10 border border-amber-500/20\">\n                <p className=\"text-xs text-amber-600 dark:text-amber-400 flex items-center gap-2 font-medium\">\n                  <span className=\"text-base\">⚠️</span>\n                  <span>Images will be deleted after 7 days. Download soon!</span>\n                </p>\n              </div>\n              \n              <Tabs value={currentTab} onValueChange={setCurrentTab} className=\"w-full\">\n                <TabsList className=\"w-full grid grid-cols-2 mx-4 mb-2\" style={{ width: 'calc(100% - 2rem)' }}>\n                  <TabsTrigger value=\"history\">History</TabsTrigger>\n                  <TabsTrigger value=\"versions\">Versions</TabsTrigger>\n                </TabsList>\n                \n                <TabsContent value=\"history\" className=\"px-4 pb-4 mt-0\">\n                  <div className=\"mb-4\">\n                    <p className=\"text-xs text-muted-foreground\">Your generated images</p>\n                  </div>\n\n                  {/* Images Grid */}\n                  {loadingHistory ? (\n                    <div className=\"flex justify-center py-12\">\n                      <Loader2 className=\"h-12 w-12 animate-spin text-muted-foreground\" />\n                    </div>\n                  ) : !generations || generations.length === 0 ? (\n                    <div className=\"text-center py-12\">\n                      <ImageIcon className=\"h-12 w-12 mx-auto text-muted-foreground mb-3\" />\n                      <p className=\"text-sm text-muted-foreground\">No generations yet</p>\n                    </div>\n                  ) : (\n                    <div className=\"grid grid-cols-2 gap-3\">\n                      {generations.map((gen) => (\n                        <div\n                          key={gen.id}\n                          className={`group cursor-pointer relative aspect-square overflow-hidden rounded-lg border-2 transition-all ${\n                            currentGenerationId === gen.id\n                              ? 'border-primary shadow-lg shadow-primary/20'\n                              : 'border-transparent hover:border-primary/50'\n                          }`}\n                          onClick={() => handleSelectGeneration(gen)}\n                          data-testid={`generation-${gen.id}`}\n                        >\n                          <img\n                            alt={gen.prompt}\n                            className=\"h-full w-full object-cover\"\n                            src={gen.thumbnailUrl || gen.editedImageUrl || gen.imageUrl}\n                            data-testid={`img-generation-${gen.id}`}\n                          />\n                          \n                          {/* Hover Actions */}\n                          <div className=\"absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center gap-1\">\n                            <GlassButton\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              className=\"h-7 w-7 rounded-full\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                // Use currentImage if this generation is selected and has been edited\n                                const downloadUrl = currentGenerationId === gen.id && currentImage \n                                  ? currentImage \n                                  : gen.editedImageUrl || gen.imageUrl;\n                                handleDownload(downloadUrl, gen.id);\n                              }}\n                              disabled={downloadingId === gen.id}\n                            >\n                              {downloadingId === gen.id ? (\n                                <Loader2 className=\"h-3 w-3 animate-spin\" />\n                              ) : (\n                                <Download className=\"h-3 w-3\" />\n                              )}\n                            </GlassButton>\n                            \n                            <GlassButton\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              className=\"h-7 w-7 rounded-full\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                deleteMutation.mutate(gen.id);\n                              }}\n                              disabled={deleteMutation.isPending}\n                            >\n                              {deleteMutation.isPending ? (\n                                <Loader2 className=\"h-3 w-3 animate-spin\" />\n                              ) : (\n                                <Trash2 className=\"h-3 w-3\" />\n                              )}\n                            </GlassButton>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </TabsContent>\n                \n                <TabsContent value=\"versions\" className=\"px-4 pb-4 mt-0\">\n                  <div className=\"mb-4\">\n                    <p className=\"text-xs text-muted-foreground\">Pro Edit versions ({imageVersions.length})</p>\n                  </div>\n                  \n                  {/* Versions Grid */}\n                  {!currentImage ? (\n                    <div className=\"text-center py-12\">\n                      <ImageIcon className=\"h-12 w-12 mx-auto text-muted-foreground mb-3\" />\n                      <p className=\"text-sm text-muted-foreground\">Select an image to see versions</p>\n                    </div>\n                  ) : imageVersions.length === 0 ? (\n                    <div className=\"text-center py-12\">\n                      <ImageIcon className=\"h-12 w-12 mx-auto text-muted-foreground mb-3\" />\n                      <p className=\"text-sm text-muted-foreground\">No versions yet</p>\n                      <p className=\"text-xs text-muted-foreground mt-2\">Apply Pro Edit effects to create versions</p>\n                    </div>\n                  ) : (\n                    <div className=\"grid grid-cols-2 gap-3\">\n                      {imageVersions.map((versionUrl, index) => (\n                        <div\n                          key={`${versionUrl}-${index}`}\n                          className={`group cursor-pointer relative aspect-square overflow-hidden rounded-lg border-2 transition-all ${\n                            currentVersionIndex === index\n                              ? 'border-primary shadow-lg shadow-primary/20'\n                              : 'border-transparent hover:border-primary/50'\n                          }`}\n                          onClick={() => {\n                            setCurrentVersionIndex(index);\n                            historyIndexRef.current = index;\n                            reloadCanvas(versionUrl);\n                          }}\n                          data-testid={`version-${index}`}\n                        >\n                          <img\n                            alt={`Version ${index + 1}`}\n                            className=\"h-full w-full object-cover\"\n                            src={versionUrl}\n                            data-testid={`img-version-${index}`}\n                          />\n                          \n                          {/* Version Number Badge */}\n                          <div className=\"absolute top-2 left-2 bg-black/60 backdrop-blur-sm rounded px-2 py-0.5\">\n                            <span className=\"text-xs font-semibold text-white\">v{index + 1}</span>\n                          </div>\n                          \n                          {/* Hover Actions - Top Right */}\n                          <div className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity flex gap-1\">\n                            <GlassButton\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              className=\"h-7 w-7 rounded-full\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                handleDownload(versionUrl, `version-${index + 1}`);\n                              }}\n                              disabled={downloadingId === `version-${index + 1}`}\n                              data-testid={`button-download-version-${index}`}\n                              title=\"Download version\"\n                            >\n                              {downloadingId === `version-${index + 1}` ? (\n                                <Loader2 className=\"h-3 w-3 animate-spin\" />\n                              ) : (\n                                <Download className=\"h-3 w-3\" />\n                              )}\n                            </GlassButton>\n                            {imageVersions.length > 1 && (\n                              <GlassButton\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                className=\"h-7 w-7 rounded-full text-red-400 hover:text-red-300\"\n                                onClick={async (e) => {\n                                  e.stopPropagation();\n                                  if (!confirm(\"Изтриване на тази версия?\")) return;\n                                  \n                                  toast({\n                                    title: \"Скоро\",\n                                    description: \"Delete функцията скоро ще бъде добавена\",\n                                  });\n                                }}\n                                title=\"Delete version\"\n                                data-testid={`button-delete-version-${index}`}\n                              >\n                                <Trash2 className=\"h-3 w-3\" />\n                              </GlassButton>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </TabsContent>\n              </Tabs>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Upload Wizard Modal for AI Submissions */}\n      <UploadWizardModal\n        isOpen={wizardModalOpen}\n        onClose={handleCloseWizard}\n        aiSubmissionMode={\n          selectedGeneration\n            ? {\n                imageUrl: (selectedGeneration.id === currentGenerationId && currentImage) \n                  ? currentImage \n                  : selectedGeneration.imageUrl,\n                cloudinaryPublicId: selectedGeneration.cloudinaryPublicId!,\n                prompt: selectedGeneration.prompt,\n              }\n            : undefined\n        }\n      />\n\n      {/* AI Lightbox Modal */}\n      <AiLightboxModal\n        isOpen={lightboxOpen}\n        generation={lightboxGeneration}\n        onClose={() => {\n          setLightboxOpen(false);\n          setLightboxGenerationId(null);\n        }}\n        onDownload={handleDownload}\n        onEdit={(generationId) => setLocation(`/image-editor/${generationId}`)}\n        onUploadToContest={(generation) => {\n          setLightboxOpen(false);\n          handleOpenSubmitWizard(generation);\n        }}\n        onDelete={(generationId) => {\n          deleteMutation.mutate(generationId);\n          setLightboxOpen(false);\n        }}\n        downloadingId={downloadingId}\n        deletingPending={deleteMutation.isPending}\n        userCredits={userCredits}\n        currentEditedUrl={lightboxGenerationId === currentGenerationId ? currentImage : null}\n      />\n    </div>\n  );\n}\n\nexport default function AiGeneratorPage() {\n  return (\n    <SidebarProvider>\n      <Sidebar />\n      <AiGeneratorPageContent />\n    </SidebarProvider>\n  );\n}\n","size_bytes":128102},"client/src/pages/image-editor.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport * as fabric from \"fabric\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport {\n  RotateCw,\n  RotateCcw,\n  FlipHorizontal,\n  FlipVertical,\n  Type,\n  Save,\n  Loader2,\n  ArrowLeft,\n  Crop,\n  Pencil,\n  Square,\n  Circle,\n  Minus,\n  Check,\n  X as XIcon,\n  Undo,\n  Redo,\n  Download\n} from \"lucide-react\";\n\nexport default function ImageEditor() {\n  const { id } = useParams();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [canvas, setCanvas] = useState<fabric.Canvas | null>(null);\n  const [baseImage, setBaseImage] = useState<fabric.FabricImage | null>(null);\n  \n  // Filter states\n  const [brightness, setBrightness] = useState(0);\n  const [contrast, setContrast] = useState(0);\n  const [saturation, setSaturation] = useState(0);\n  const [blur, setBlur] = useState(0);\n  const [sharpen, setSharpen] = useState(0);\n  const [grayscale, setGrayscale] = useState(false);\n  const [sepia, setSepia] = useState(false);\n  const [vintage, setVintage] = useState(false);\n  const [vignette, setVignette] = useState(false);\n  const [vignetteOverlay, setVignetteOverlay] = useState<fabric.Rect | null>(null);\n  \n  // Text states\n  const [textInput, setTextInput] = useState(\"\");\n  const [textColor, setTextColor] = useState(\"#ffffff\");\n  const [fontSize, setFontSize] = useState(40);\n  const [fontFamily, setFontFamily] = useState(\"Arial\");\n  \n  // Drawing states\n  const [drawingMode, setDrawingMode] = useState(false);\n  const [brushColor, setBrushColor] = useState(\"#000000\");\n  const [brushSize, setBrushSize] = useState(5);\n  \n  // Shapes states\n  const [shapeColor, setShapeColor] = useState(\"#ff0000\");\n  const [shapeSize, setShapeSize] = useState(100);\n  \n  // Crop states\n  const [cropMode, setCropMode] = useState(false);\n  const [cropRect, setCropRect] = useState<fabric.Rect | null>(null);\n  \n  // History states for undo/redo\n  const [historyStack, setHistoryStack] = useState<string[]>([]);\n  const [historyIndex, setHistoryIndex] = useState(-1);\n  \n  const [isSaving, setIsSaving] = useState(false);\n\n  // Fetch generation data\n  const { data: generation, isLoading } = useQuery<any>({\n    queryKey: [`/api/ai/generations/${id}`],\n    enabled: !!id,\n  });\n\n  // Initialize Fabric.js canvas\n  useEffect(() => {\n    if (!canvasRef.current || !generation?.imageUrl) return;\n\n    const fabricCanvas = new fabric.Canvas(canvasRef.current, {\n      width: 800,\n      height: 600,\n      backgroundColor: \"#f0f0f0\",\n    });\n\n    // Load image onto canvas\n    fabric.FabricImage.fromURL(generation.imageUrl, { crossOrigin: \"anonymous\" }).then((img: any) => {\n      const scale = Math.min(\n        fabricCanvas.width! / img.width!,\n        fabricCanvas.height! / img.height!\n      );\n      img.scale(scale);\n      img.set({\n        left: fabricCanvas.width! / 2,\n        top: fabricCanvas.height! / 2,\n        originX: \"center\",\n        originY: \"center\",\n        selectable: false,\n      });\n      fabricCanvas.add(img);\n      fabricCanvas.sendObjectToBack(img);\n      fabricCanvas.renderAll();\n      setBaseImage(img);\n    });\n\n    setCanvas(fabricCanvas);\n\n    return () => {\n      fabricCanvas.dispose();\n    };\n  }, [generation?.imageUrl]);\n\n  // Apply filters\n  const applyFilters = () => {\n    if (!canvas || !baseImage) return;\n\n    const filters: any[] = [];\n\n    if (brightness !== 0) {\n      filters.push(new fabric.filters.Brightness({ brightness: brightness / 100 }));\n    }\n    if (contrast !== 0) {\n      filters.push(new fabric.filters.Contrast({ contrast: contrast / 100 }));\n    }\n    if (saturation !== 0) {\n      filters.push(new fabric.filters.Saturation({ saturation: saturation / 100 }));\n    }\n    if (blur > 0) {\n      filters.push(new fabric.filters.Blur({ blur: blur / 20 }));\n    }\n    if (sharpen > 0) {\n      filters.push(new fabric.filters.Convolute({\n        matrix: [\n          0, -1 * (sharpen / 100), 0,\n          -1 * (sharpen / 100), 1 + 4 * (sharpen / 100), -1 * (sharpen / 100),\n          0, -1 * (sharpen / 100), 0\n        ]\n      }));\n    }\n    if (grayscale) {\n      filters.push(new fabric.filters.Grayscale());\n    }\n    if (sepia) {\n      filters.push(new fabric.filters.Sepia());\n    }\n    if (vintage) {\n      filters.push(new fabric.filters.Vintage());\n    }\n\n    baseImage.filters = filters;\n    baseImage.applyFilters();\n    canvas.renderAll();\n  };\n\n  // Apply vignette overlay\n  useEffect(() => {\n    if (!canvas || !baseImage) return;\n\n    // Remove existing vignette overlay if any\n    if (vignetteOverlay) {\n      canvas.remove(vignetteOverlay);\n      setVignetteOverlay(null);\n    }\n\n    if (vignette) {\n      // Create a radial gradient for vignette effect\n      const rect = new fabric.Rect({\n        left: 0,\n        top: 0,\n        width: canvas.width!,\n        height: canvas.height!,\n        fill: new fabric.Gradient({\n          type: 'radial',\n          coords: {\n            x1: canvas.width! / 2,\n            y1: canvas.height! / 2,\n            x2: canvas.width! / 2,\n            y2: canvas.height! / 2,\n            r1: 0,\n            r2: Math.max(canvas.width!, canvas.height!) * 0.7,\n          },\n          colorStops: [\n            { offset: 0, color: 'rgba(0,0,0,0)' },\n            { offset: 0.5, color: 'rgba(0,0,0,0)' },\n            { offset: 1, color: 'rgba(0,0,0,0.7)' },\n          ],\n        }),\n        selectable: false,\n        evented: false,\n      });\n      \n      canvas.add(rect);\n      canvas.renderAll();\n      setVignetteOverlay(rect);\n    }\n  }, [vignette, canvas, baseImage]);\n\n  useEffect(() => {\n    applyFilters();\n  }, [brightness, contrast, saturation, blur, sharpen, grayscale, sepia, vintage]);\n\n  // Rotate\n  const rotate = (degrees: number) => {\n    if (!canvas) return;\n    const activeObject = canvas.getActiveObject();\n    if (activeObject) {\n      activeObject.rotate((activeObject.angle || 0) + degrees);\n      canvas.renderAll();\n    }\n  };\n\n  // Flip\n  const flip = (direction: \"horizontal\" | \"vertical\") => {\n    if (!canvas) return;\n    const activeObject = canvas.getActiveObject();\n    if (activeObject) {\n      if (direction === \"horizontal\") {\n        activeObject.set(\"flipX\", !activeObject.flipX);\n      } else {\n        activeObject.set(\"flipY\", !activeObject.flipY);\n      }\n      canvas.renderAll();\n    }\n  };\n\n  // Enhanced text\n  const addText = () => {\n    if (!canvas || !textInput.trim()) return;\n\n    const text = new fabric.IText(textInput, {\n      left: canvas.width! / 2,\n      top: canvas.height! / 2,\n      fontSize: fontSize,\n      fill: textColor,\n      fontFamily: fontFamily,\n      stroke: textColor === \"#ffffff\" ? \"#000000\" : \"#ffffff\",\n      strokeWidth: 1,\n    });\n\n    canvas.add(text);\n    canvas.setActiveObject(text);\n    canvas.renderAll();\n    setTextInput(\"\");\n  };\n\n  // Drawing mode\n  const toggleDrawing = () => {\n    if (!canvas) return;\n    const newMode = !drawingMode;\n    setDrawingMode(newMode);\n    canvas.isDrawingMode = newMode;\n    \n    if (newMode && canvas.freeDrawingBrush) {\n      canvas.freeDrawingBrush.color = brushColor;\n      canvas.freeDrawingBrush.width = brushSize;\n    }\n  };\n\n  useEffect(() => {\n    if (canvas && drawingMode && canvas.freeDrawingBrush) {\n      canvas.freeDrawingBrush.color = brushColor;\n      canvas.freeDrawingBrush.width = brushSize;\n    }\n  }, [brushColor, brushSize, canvas, drawingMode]);\n\n  // Add shapes\n  const addShape = (type: \"rect\" | \"circle\" | \"line\") => {\n    if (!canvas) return;\n\n    let shape: fabric.FabricObject;\n    const centerX = canvas.width! / 2;\n    const centerY = canvas.height! / 2;\n\n    switch (type) {\n      case \"rect\":\n        shape = new fabric.Rect({\n          left: centerX - shapeSize / 2,\n          top: centerY - shapeSize / 2,\n          fill: shapeColor,\n          width: shapeSize,\n          height: shapeSize,\n        });\n        break;\n      case \"circle\":\n        shape = new fabric.Circle({\n          left: centerX - shapeSize / 2,\n          top: centerY - shapeSize / 2,\n          fill: shapeColor,\n          radius: shapeSize / 2,\n        });\n        break;\n      case \"line\":\n        shape = new fabric.Line([centerX - shapeSize, centerY, centerX + shapeSize, centerY], {\n          stroke: shapeColor,\n          strokeWidth: 5,\n        });\n        break;\n    }\n\n    canvas.add(shape);\n    canvas.setActiveObject(shape);\n    canvas.renderAll();\n  };\n\n  // Crop functionality\n  const startCrop = () => {\n    if (!canvas) return;\n    setCropMode(true);\n    \n    // Disable selection for all objects\n    canvas.forEachObject((obj) => {\n      obj.selectable = false;\n      obj.evented = false;\n    });\n\n    // Create crop rectangle\n    const rect = new fabric.Rect({\n      left: 100,\n      top: 100,\n      width: 400,\n      height: 300,\n      fill: \"transparent\",\n      stroke: \"#00ff00\",\n      strokeWidth: 2,\n      strokeDashArray: [5, 5],\n      selectable: true,\n      evented: true,\n      hasControls: true,\n      hasBorders: true,\n    });\n\n    canvas.add(rect);\n    canvas.setActiveObject(rect);\n    canvas.renderAll();\n    setCropRect(rect);\n  };\n\n  const applyCrop = () => {\n    if (!canvas || !cropRect || !baseImage) return;\n\n    // Save all creative objects (text, shapes, drawings) before clearing\n    const creativeObjects = canvas.getObjects().filter(obj => obj !== baseImage && obj !== cropRect);\n\n    const left = cropRect.left!;\n    const top = cropRect.top!;\n    const width = cropRect.width! * (cropRect.scaleX || 1);\n    const height = cropRect.height! * (cropRect.scaleY || 1);\n\n    // Create temp canvas to crop just the base image\n    const tempCanvas = document.createElement('canvas');\n    const tempCtx = tempCanvas.getContext('2d');\n    if (!tempCtx) return;\n\n    tempCanvas.width = width;\n    tempCanvas.height = height;\n\n    // Draw only the base image portion to temp canvas\n    const baseImageElement = baseImage.toCanvasElement();\n    const baseImageLeft = baseImage.left! - (baseImage.width! * baseImage.scaleX!) / 2;\n    const baseImageTop = baseImage.top! - (baseImage.height! * baseImage.scaleY!) / 2;\n    \n    tempCtx.drawImage(\n      baseImageElement,\n      (left - baseImageLeft) / baseImage.scaleX!,\n      (top - baseImageTop) / baseImage.scaleY!,\n      width / baseImage.scaleX!,\n      height / baseImage.scaleY!,\n      0,\n      0,\n      width,\n      height\n    );\n\n    const croppedDataURL = tempCanvas.toDataURL('image/png');\n\n    // Remove only the base image and crop rect\n    canvas.remove(baseImage, cropRect);\n    setCropRect(null);\n\n    // Load cropped image as new base\n    fabric.FabricImage.fromURL(croppedDataURL, { crossOrigin: \"anonymous\" }).then((img: any) => {\n      const scale = Math.min(\n        canvas.width! / img.width!,\n        canvas.height! / img.height!\n      );\n      img.scale(scale);\n      img.set({\n        left: canvas.width! / 2,\n        top: canvas.height! / 2,\n        originX: \"center\",\n        originY: \"center\",\n        selectable: false,\n      });\n      \n      // Apply current filters to the new image immediately\n      const filters: any[] = [];\n      if (brightness !== 0) {\n        filters.push(new fabric.filters.Brightness({ brightness: brightness / 100 }));\n      }\n      if (contrast !== 0) {\n        filters.push(new fabric.filters.Contrast({ contrast: contrast / 100 }));\n      }\n      if (saturation !== 0) {\n        filters.push(new fabric.filters.Saturation({ saturation: saturation / 100 }));\n      }\n      if (blur > 0) {\n        filters.push(new fabric.filters.Blur({ blur: blur / 20 }));\n      }\n      if (sharpen > 0) {\n        filters.push(new fabric.filters.Convolute({\n          matrix: [\n            0, -1 * (sharpen / 100), 0,\n            -1 * (sharpen / 100), 1 + 4 * (sharpen / 100), -1 * (sharpen / 100),\n            0, -1 * (sharpen / 100), 0\n          ]\n        }));\n      }\n      if (grayscale) {\n        filters.push(new fabric.filters.Grayscale());\n      }\n      if (sepia) {\n        filters.push(new fabric.filters.Sepia());\n      }\n      if (vintage) {\n        filters.push(new fabric.filters.Vintage());\n      }\n      \n      img.filters = filters;\n      img.applyFilters();\n      \n      canvas.add(img);\n      canvas.sendObjectToBack(img);\n      \n      // Restore creative objects\n      creativeObjects.forEach(obj => {\n        canvas.add(obj);\n      });\n      \n      canvas.renderAll();\n      setBaseImage(img);\n    });\n\n    setCropMode(false);\n    \n    // Re-enable selection\n    canvas.forEachObject((obj) => {\n      if (obj !== cropRect) {\n        obj.selectable = true;\n        obj.evented = true;\n      }\n    });\n  };\n\n  const cancelCrop = () => {\n    if (!canvas || !cropRect) return;\n    canvas.remove(cropRect);\n    setCropRect(null);\n    setCropMode(false);\n    \n    // Re-enable selection\n    canvas.forEachObject((obj) => {\n      if (obj !== baseImage) {\n        obj.selectable = true;\n        obj.evented = true;\n      }\n    });\n    canvas.renderAll();\n  };\n\n  // History management functions\n  const saveToHistory = () => {\n    if (!canvas) return;\n    \n    const json = JSON.stringify(canvas.toJSON());\n    setHistoryStack(prev => {\n      const newStack = prev.slice(0, historyIndex + 1);\n      newStack.push(json);\n      // Limit history to 50 states\n      return newStack.slice(-50);\n    });\n    setHistoryIndex(prev => Math.min(prev + 1, 49));\n  };\n\n  const undo = () => {\n    if (!canvas || historyIndex <= 0) return;\n    \n    const newIndex = historyIndex - 1;\n    const state = historyStack[newIndex];\n    \n    canvas.loadFromJSON(state).then(() => {\n      canvas.renderAll();\n      setHistoryIndex(newIndex);\n      // Update baseImage reference after loading\n      const objects = canvas.getObjects();\n      const bgImage = objects.find(obj => obj.selectable === false);\n      if (bgImage) setBaseImage(bgImage as fabric.FabricImage);\n    });\n  };\n\n  const redo = () => {\n    if (!canvas || historyIndex >= historyStack.length - 1) return;\n    \n    const newIndex = historyIndex + 1;\n    const state = historyStack[newIndex];\n    \n    canvas.loadFromJSON(state).then(() => {\n      canvas.renderAll();\n      setHistoryIndex(newIndex);\n      // Update baseImage reference after loading\n      const objects = canvas.getObjects();\n      const bgImage = objects.find(obj => obj.selectable === false);\n      if (bgImage) setBaseImage(bgImage as fabric.FabricImage);\n    });\n  };\n\n  // Download current canvas\n  const handleDownload = () => {\n    if (!canvas) return;\n\n    try {\n      const dataURL = canvas.toDataURL({ format: \"png\", quality: 1, multiplier: 2 });\n      const link = document.createElement('a');\n      link.href = dataURL;\n      link.download = `edited-image-${Date.now()}.png`;\n      document.body.appendChild(link);\n      link.click();\n      \n      setTimeout(() => {\n        document.body.removeChild(link);\n      }, 100);\n      \n      toast({\n        title: \"Downloaded\",\n        description: \"Image downloaded successfully.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Download failed\",\n        description: \"Failed to download the image.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Save to history on canvas changes\n  useEffect(() => {\n    if (!canvas) return;\n\n    const handleCanvasChange = () => {\n      saveToHistory();\n    };\n\n    canvas.on('object:added', handleCanvasChange);\n    canvas.on('object:modified', handleCanvasChange);\n    canvas.on('object:removed', handleCanvasChange);\n\n    return () => {\n      canvas.off('object:added', handleCanvasChange);\n      canvas.off('object:modified', handleCanvasChange);\n      canvas.off('object:removed', handleCanvasChange);\n    };\n  }, [canvas, historyIndex]);\n\n  // Save edited image\n  const handleSave = async () => {\n    if (!canvas) return;\n\n    setIsSaving(true);\n    try {\n      // Exit crop mode if active\n      if (cropMode) {\n        cancelCrop();\n      }\n\n      // Export canvas as data URL\n      const dataURL = canvas.toDataURL({ format: \"png\", quality: 1, multiplier: 1 });\n\n      // Convert data URL to Blob\n      const res = await fetch(dataURL);\n      const blob = await res.blob();\n\n      // Upload via backend API\n      const formData = new FormData();\n      formData.append(\"image\", blob, \"edited-image.png\");\n      formData.append(\"generationId\", id!);\n\n      const response = await fetch(\"/api/ai/save-edited\", {\n        method: \"POST\",\n        body: formData,\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Failed to save edited image\");\n      }\n\n      toast({\n        title: \"Saved!\",\n        description: \"Your edited image has been saved successfully.\",\n      });\n\n      queryClient.invalidateQueries({ queryKey: [`/api/ai/generations/${id}`] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/ai/generations\"] });\n      setLocation(\"/ai-generator\");\n    } catch (error) {\n      console.error(\"Save error:\", error);\n      toast({\n        title: \"Save Failed\",\n        description: error instanceof Error ? error.message : \"Failed to save edited image\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  if (!generation) {\n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-screen\">\n        <p className=\"text-muted-foreground mb-4\">Generation not found</p>\n        <Button onClick={() => setLocation(\"/ai-generator\")} data-testid=\"button-back-to-studio\">\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          Back to AI Studio\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-8 px-4\">\n      <div className=\"mb-6 flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold mb-2\">Image Editor</h1>\n          <p className=\"text-muted-foreground\">Edit and enhance your AI-generated image</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" onClick={() => setLocation(\"/ai-generator\")} data-testid=\"button-cancel\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Cancel\n          </Button>\n          <Button \n            variant=\"outline\" \n            onClick={undo} \n            disabled={historyIndex <= 0}\n            data-testid=\"button-undo\"\n            title=\"Undo\"\n          >\n            <Undo className=\"w-4 h-4\" />\n          </Button>\n          <Button \n            variant=\"outline\" \n            onClick={redo} \n            disabled={historyIndex >= historyStack.length - 1}\n            data-testid=\"button-redo\"\n            title=\"Redo\"\n          >\n            <Redo className=\"w-4 h-4\" />\n          </Button>\n          <Button \n            variant=\"outline\" \n            onClick={handleDownload}\n            data-testid=\"button-download\"\n            title=\"Download\"\n          >\n            <Download className=\"w-4 h-4 mr-2\" />\n            Download\n          </Button>\n          <Button onClick={handleSave} disabled={isSaving} data-testid=\"button-save\">\n            {isSaving ? (\n              <>\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                Saving...\n              </>\n            ) : (\n              <>\n                <Save className=\"w-4 h-4 mr-2\" />\n                Save\n              </>\n            )}\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        <div className=\"lg:col-span-3\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-center bg-gray-100 dark:bg-gray-900 rounded-lg\">\n                <canvas ref={canvasRef} data-testid=\"canvas-editor\" />\n              </div>\n              {cropMode && (\n                <div className=\"mt-4 flex gap-2 justify-center\">\n                  <Button onClick={applyCrop} variant=\"default\" data-testid=\"button-apply-crop\">\n                    <Check className=\"w-4 h-4 mr-2\" />\n                    Apply Crop\n                  </Button>\n                  <Button onClick={cancelCrop} variant=\"outline\" data-testid=\"button-cancel-crop\">\n                    <XIcon className=\"w-4 h-4 mr-2\" />\n                    Cancel\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"lg:col-span-1\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Editor Tools</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Tabs defaultValue=\"filters\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-3\">\n                  <TabsTrigger value=\"filters\" data-testid=\"tab-filters\">Filters</TabsTrigger>\n                  <TabsTrigger value=\"adjust\" data-testid=\"tab-adjust\">Adjust</TabsTrigger>\n                  <TabsTrigger value=\"creative\" data-testid=\"tab-creative\">Creative</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"filters\" className=\"space-y-4\">\n                  <div>\n                    <Label>Brightness</Label>\n                    <Slider\n                      min={-100}\n                      max={100}\n                      step={1}\n                      value={[brightness]}\n                      onValueChange={(val) => setBrightness(val[0])}\n                      data-testid=\"slider-brightness\"\n                    />\n                    <span className=\"text-sm text-muted-foreground\">{brightness}</span>\n                  </div>\n\n                  <div>\n                    <Label>Contrast</Label>\n                    <Slider\n                      min={-100}\n                      max={100}\n                      step={1}\n                      value={[contrast]}\n                      onValueChange={(val) => setContrast(val[0])}\n                      data-testid=\"slider-contrast\"\n                    />\n                    <span className=\"text-sm text-muted-foreground\">{contrast}</span>\n                  </div>\n\n                  <div>\n                    <Label>Saturation</Label>\n                    <Slider\n                      min={-100}\n                      max={100}\n                      step={1}\n                      value={[saturation]}\n                      onValueChange={(val) => setSaturation(val[0])}\n                      data-testid=\"slider-saturation\"\n                    />\n                    <span className=\"text-sm text-muted-foreground\">{saturation}</span>\n                  </div>\n\n                  <div>\n                    <Label>Blur</Label>\n                    <Slider\n                      min={0}\n                      max={100}\n                      step={1}\n                      value={[blur]}\n                      onValueChange={(val) => setBlur(val[0])}\n                      data-testid=\"slider-blur\"\n                    />\n                    <span className=\"text-sm text-muted-foreground\">{blur}</span>\n                  </div>\n\n                  <div>\n                    <Label>Sharpen</Label>\n                    <Slider\n                      min={0}\n                      max={100}\n                      step={1}\n                      value={[sharpen]}\n                      onValueChange={(val) => setSharpen(val[0])}\n                      data-testid=\"slider-sharpen\"\n                    />\n                    <span className=\"text-sm text-muted-foreground\">{sharpen}</span>\n                  </div>\n\n                  <div className=\"space-y-2 pt-2\">\n                    <Label>Color Effects</Label>\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      <Button \n                        variant={grayscale ? \"default\" : \"outline\"} \n                        onClick={() => setGrayscale(!grayscale)}\n                        size=\"sm\"\n                        data-testid=\"button-grayscale\"\n                      >\n                        Grayscale\n                      </Button>\n                      <Button \n                        variant={sepia ? \"default\" : \"outline\"} \n                        onClick={() => setSepia(!sepia)}\n                        size=\"sm\"\n                        data-testid=\"button-sepia\"\n                      >\n                        Sepia\n                      </Button>\n                      <Button \n                        variant={vintage ? \"default\" : \"outline\"} \n                        onClick={() => setVintage(!vintage)}\n                        size=\"sm\"\n                        data-testid=\"button-vintage\"\n                      >\n                        Vintage\n                      </Button>\n                      <Button \n                        variant={vignette ? \"default\" : \"outline\"} \n                        onClick={() => setVignette(!vignette)}\n                        size=\"sm\"\n                        data-testid=\"button-vignette\"\n                      >\n                        Vignette\n                      </Button>\n                    </div>\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"adjust\" className=\"space-y-2\">\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <Button variant=\"outline\" onClick={() => rotate(90)} data-testid=\"button-rotate-cw\">\n                      <RotateCw className=\"w-4 h-4 mr-2\" />\n                      Rotate\n                    </Button>\n                    <Button variant=\"outline\" onClick={() => rotate(-90)} data-testid=\"button-rotate-ccw\">\n                      <RotateCcw className=\"w-4 h-4 mr-2\" />\n                      Rotate\n                    </Button>\n                    <Button variant=\"outline\" onClick={() => flip(\"horizontal\")} data-testid=\"button-flip-h\">\n                      <FlipHorizontal className=\"w-4 h-4 mr-2\" />\n                      Flip H\n                    </Button>\n                    <Button variant=\"outline\" onClick={() => flip(\"vertical\")} data-testid=\"button-flip-v\">\n                      <FlipVertical className=\"w-4 h-4 mr-2\" />\n                      Flip V\n                    </Button>\n                  </div>\n                  \n                  <div className=\"pt-4\">\n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full\" \n                      onClick={startCrop}\n                      disabled={cropMode}\n                      data-testid=\"button-crop\"\n                    >\n                      <Crop className=\"w-4 h-4 mr-2\" />\n                      Crop Image\n                    </Button>\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"creative\" className=\"space-y-4\">\n                  <div className=\"space-y-4\">\n                    <Label className=\"text-base font-semibold\">Text</Label>\n                    <div className=\"space-y-2\">\n                      <Input\n                        placeholder=\"Enter text...\"\n                        value={textInput}\n                        onChange={(e) => setTextInput(e.target.value)}\n                        data-testid=\"input-text\"\n                      />\n                      \n                      <div className=\"grid grid-cols-2 gap-2\">\n                        <div>\n                          <Label className=\"text-xs\">Font</Label>\n                          <Select value={fontFamily} onValueChange={setFontFamily}>\n                            <SelectTrigger className=\"h-8 text-xs\" data-testid=\"select-font\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"Arial\">Arial</SelectItem>\n                              <SelectItem value=\"Times New Roman\">Times</SelectItem>\n                              <SelectItem value=\"Courier New\">Courier</SelectItem>\n                              <SelectItem value=\"Georgia\">Georgia</SelectItem>\n                              <SelectItem value=\"Verdana\">Verdana</SelectItem>\n                              <SelectItem value=\"Comic Sans MS\">Comic Sans</SelectItem>\n                              <SelectItem value=\"Impact\">Impact</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <div>\n                          <Label className=\"text-xs\">Color</Label>\n                          <Input\n                            type=\"color\"\n                            value={textColor}\n                            onChange={(e) => setTextColor(e.target.value)}\n                            className=\"h-8\"\n                            data-testid=\"input-text-color\"\n                          />\n                        </div>\n                      </div>\n\n                      <div>\n                        <Label className=\"text-xs\">Size: {fontSize}px</Label>\n                        <Slider\n                          min={10}\n                          max={120}\n                          step={2}\n                          value={[fontSize]}\n                          onValueChange={(val) => setFontSize(val[0])}\n                          data-testid=\"slider-font-size\"\n                        />\n                      </div>\n\n                      <Button onClick={addText} className=\"w-full\" disabled={!textInput.trim()} data-testid=\"button-add-text\">\n                        <Type className=\"w-4 h-4 mr-2\" />\n                        Add Text\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4 pt-2 border-t\">\n                    <Label className=\"text-base font-semibold\">Drawing</Label>\n                    <div className=\"space-y-2\">\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        <div>\n                          <Label className=\"text-xs\">Color</Label>\n                          <Input\n                            type=\"color\"\n                            value={brushColor}\n                            onChange={(e) => setBrushColor(e.target.value)}\n                            className=\"h-8\"\n                            data-testid=\"input-brush-color\"\n                          />\n                        </div>\n                        <div>\n                          <Label className=\"text-xs\">Size: {brushSize}px</Label>\n                          <Slider\n                            min={1}\n                            max={50}\n                            step={1}\n                            value={[brushSize]}\n                            onValueChange={(val) => setBrushSize(val[0])}\n                            data-testid=\"slider-brush-size\"\n                          />\n                        </div>\n                      </div>\n                      <Button \n                        variant={drawingMode ? \"default\" : \"outline\"} \n                        className=\"w-full\" \n                        onClick={toggleDrawing}\n                        data-testid=\"button-drawing-mode\"\n                      >\n                        <Pencil className=\"w-4 h-4 mr-2\" />\n                        {drawingMode ? \"Stop Drawing\" : \"Start Drawing\"}\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4 pt-2 border-t\">\n                    <Label className=\"text-base font-semibold\">Shapes</Label>\n                    <div className=\"space-y-2\">\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        <div>\n                          <Label className=\"text-xs\">Color</Label>\n                          <Input\n                            type=\"color\"\n                            value={shapeColor}\n                            onChange={(e) => setShapeColor(e.target.value)}\n                            className=\"h-8\"\n                            data-testid=\"input-shape-color\"\n                          />\n                        </div>\n                        <div>\n                          <Label className=\"text-xs\">Size: {shapeSize}px</Label>\n                          <Slider\n                            min={20}\n                            max={300}\n                            step={10}\n                            value={[shapeSize]}\n                            onValueChange={(val) => setShapeSize(val[0])}\n                            data-testid=\"slider-shape-size\"\n                          />\n                        </div>\n                      </div>\n                      <div className=\"grid grid-cols-3 gap-2\">\n                        <Button variant=\"outline\" onClick={() => addShape(\"rect\")} data-testid=\"button-add-rect\">\n                          <Square className=\"w-4 h-4\" />\n                        </Button>\n                        <Button variant=\"outline\" onClick={() => addShape(\"circle\")} data-testid=\"button-add-circle\">\n                          <Circle className=\"w-4 h-4\" />\n                        </Button>\n                        <Button variant=\"outline\" onClick={() => addShape(\"line\")} data-testid=\"button-add-line\">\n                          <Minus className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </TabsContent>\n              </Tabs>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":34246},"client/src/components/AiLightboxModal.tsx":{"content":"import { useEffect } from \"react\";\nimport { X, Download, Pencil, Upload, Trash2, Maximize2, Loader2, Sparkles } from \"lucide-react\";\nimport type { AiGeneration } from \"@shared/schema\";\n\ninterface AiLightboxModalProps {\n  isOpen: boolean;\n  generation: AiGeneration | null;\n  onClose: () => void;\n  onDownload: (url: string, generationId: string) => void;\n  onEdit: (generationId: string) => void;\n  onUpscale: (generationId: string) => void;\n  onUploadToContest: (generation: AiGeneration) => void;\n  onDelete: (generationId: string) => void;\n  downloadingId: string | null;\n  upscalingId: string | null;\n  deletingPending: boolean;\n  userCredits: number;\n  upscalePrice: number;\n}\n\nexport function AiLightboxModal({ \n  isOpen, \n  generation, \n  onClose,\n  onDownload,\n  onEdit,\n  onUpscale,\n  onUploadToContest,\n  onDelete,\n  downloadingId,\n  upscalingId,\n  deletingPending,\n  userCredits,\n  upscalePrice,\n}: AiLightboxModalProps) {\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const modalId = Date.now();\n\n    // Push unique history state when modal opens\n    window.history.pushState({ modal: 'ai-lightbox', modalId }, '');\n\n    // Handle Escape key\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        (document.activeElement as HTMLElement)?.blur();\n        onClose();\n      }\n    };\n\n    // Handle browser back button\n    const handlePopState = () => {\n      if (window.history.state?.modalId !== modalId) {\n        onClose();\n      }\n    };\n\n    window.addEventListener('keydown', handleEscape);\n    window.addEventListener('popstate', handlePopState);\n\n    return () => {\n      window.removeEventListener('keydown', handleEscape);\n      window.removeEventListener('popstate', handlePopState);\n    };\n  }, [isOpen, onClose]);\n\n  if (!isOpen || !generation) return null;\n\n  const imageUrl = generation.editedImageUrl || generation.imageUrl;\n\n  return (\n    <div \n      className=\"fixed inset-0 z-[100] bg-black\"\n      onClick={onClose}\n      data-testid=\"ai-lightbox-overlay\"\n    >\n      {/* Full-screen image */}\n      <div className=\"absolute inset-0 flex items-center justify-center z-0\">\n        <img\n          src={imageUrl}\n          alt={generation.prompt}\n          className=\"max-w-full max-h-full object-contain\"\n          data-testid=\"ai-lightbox-image\"\n          onClick={(e) => e.stopPropagation()}\n        />\n      </div>\n\n      {/* Top Left - Action Buttons */}\n      <div className=\"absolute top-4 left-4 sm:top-6 sm:left-6 flex gap-2 sm:gap-3 z-30\">\n        {/* Download */}\n        <button\n          onClick={(e) => {\n            e.stopPropagation();\n            onDownload(imageUrl, generation.id);\n          }}\n          disabled={downloadingId === generation.id}\n          className=\"p-2 sm:p-3 rounded-full bg-black/50 backdrop-blur-sm text-white hover:bg-primary/90 transition-all duration-300 border border-white/20 disabled:opacity-50\"\n          title=\"Download\"\n          data-testid=\"button-lightbox-download\"\n        >\n          {downloadingId === generation.id ? (\n            <Loader2 className=\"h-5 w-5 sm:h-6 sm:w-6 animate-spin\" />\n          ) : (\n            <Download className=\"h-5 w-5 sm:h-6 sm:w-6\" />\n          )}\n        </button>\n        \n        {/* Edit */}\n        <button\n          onClick={(e) => {\n            e.stopPropagation();\n            onEdit(generation.id);\n          }}\n          className=\"p-2 sm:p-3 rounded-full bg-black/50 backdrop-blur-sm text-white hover:bg-primary/90 transition-all duration-300 border border-white/20\"\n          title=\"Edit\"\n          data-testid=\"button-lightbox-edit\"\n        >\n          <Pencil className=\"h-5 w-5 sm:h-6 sm:w-6\" />\n        </button>\n\n        {/* Upscale */}\n        {!generation.isUpscaled && (\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              onUpscale(generation.id);\n            }}\n            disabled={upscalingId === generation.id || userCredits < upscalePrice}\n            className=\"p-2 sm:p-3 rounded-full bg-black/50 backdrop-blur-sm text-white hover:bg-primary/90 transition-all duration-300 border border-white/20 disabled:opacity-50\"\n            title=\"Upscale 4x\"\n            data-testid=\"button-lightbox-upscale\"\n          >\n            {upscalingId === generation.id ? (\n              <Loader2 className=\"h-5 w-5 sm:h-6 sm:w-6 animate-spin\" />\n            ) : (\n              <Sparkles className=\"h-5 w-5 sm:h-6 sm:w-6\" />\n            )}\n          </button>\n        )}\n\n        {/* Upload to Contest */}\n        <button\n          onClick={(e) => {\n            e.stopPropagation();\n            onUploadToContest(generation);\n          }}\n          className=\"p-2 sm:p-3 rounded-full bg-black/50 backdrop-blur-sm text-white hover:bg-primary/90 transition-all duration-300 border border-white/20\"\n          title=\"Upload to Contest\"\n          data-testid=\"button-lightbox-upload\"\n        >\n          <Upload className=\"h-5 w-5 sm:h-6 sm:w-6\" />\n        </button>\n\n        {/* Delete */}\n        <button\n          onClick={(e) => {\n            e.stopPropagation();\n            onDelete(generation.id);\n          }}\n          disabled={deletingPending}\n          className=\"p-2 sm:p-3 rounded-full bg-black/50 backdrop-blur-sm text-white hover:bg-red-500 transition-all duration-300 border border-white/20 disabled:opacity-50\"\n          title=\"Delete\"\n          data-testid=\"button-lightbox-delete\"\n        >\n          {deletingPending ? (\n            <Loader2 className=\"h-5 w-5 sm:h-6 sm:w-6 animate-spin\" />\n          ) : (\n            <Trash2 className=\"h-5 w-5 sm:h-6 sm:w-6\" />\n          )}\n        </button>\n      </div>\n\n      {/* Top Right - Close Icon */}\n      <button\n        onClick={onClose}\n        className=\"absolute top-4 right-4 sm:top-6 sm:right-6 p-2 sm:p-3 rounded-full bg-black/50 backdrop-blur-sm text-white hover:bg-red-500 transition-all duration-300 border border-white/20 z-30\"\n        data-testid=\"button-close-lightbox\"\n      >\n        <X className=\"h-5 w-5 sm:h-6 sm:w-6\" />\n      </button>\n\n      {/* Bottom Info Bar */}\n      <div \n        className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 via-black/50 to-transparent p-4 sm:p-6 z-20\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"flex items-start gap-3 mb-3\">\n            <div className=\"h-10 w-10 rounded-full bg-gradient-to-br from-primary/40 to-purple-600/40 border border-primary/30 flex items-center justify-center flex-shrink-0\">\n              <span className=\"material-symbols-outlined text-primary text-xl\">auto_awesome</span>\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <h2 className=\"text-sm text-gray-400 mb-1\">Prompt</h2>\n              <p className=\"text-base sm:text-lg font-medium text-white leading-relaxed\" data-testid=\"text-lightbox-prompt\">\n                {generation.prompt}\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex flex-wrap items-center gap-4 text-xs sm:text-sm text-gray-400\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"material-symbols-outlined text-base\">brush</span>\n              <span className=\"capitalize\">{generation.model?.replace(/-/g, ' ')}</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"material-symbols-outlined text-base\">calendar_today</span>\n              <span>{new Date(generation.createdAt).toLocaleDateString()}</span>\n            </div>\n            {generation.isUpscaled && (\n              <div className=\"flex items-center gap-2 text-primary\">\n                <Maximize2 className=\"h-4 w-4\" />\n                <span>Upscaled 4x</span>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7869},"server/seed-tiers.ts":{"content":"import { storage } from \"./storage\";\n\n// Default subscription tier configurations\nconst defaultTiers = [\n  {\n    slug: \"free\",\n    name: \"Free\",\n    description: \"Perfect for trying out AI generation\",\n    priceUsd: 0, // $0\n    monthlyCredits: 100,\n    canEdit: false,\n    canUpscale: false,\n    allowedModels: [\"leonardo\", \"nano-banana\"],\n    promptCommission: 0, // No sales allowed on free tier\n    imageCommission: 0,\n    features: {\n      maxSubmissionsPerContest: 3,\n      prioritySupport: false,\n      watermark: true,\n    },\n    isActive: true,\n    sortOrder: 0,\n  },\n  {\n    slug: \"starter\",\n    name: \"Starter\",\n    description: \"For hobbyists and casual creators\",\n    priceUsd: 999, // $9.99\n    monthlyCredits: 500,\n    canEdit: true,\n    canUpscale: true,\n    allowedModels: [\"leonardo\", \"nano-banana\", \"ideogram-v3\"],\n    promptCommission: 30, // 30% commission\n    imageCommission: 30,\n    features: {\n      maxSubmissionsPerContest: 10,\n      prioritySupport: false,\n      watermark: false,\n    },\n    isActive: true,\n    sortOrder: 1,\n  },\n  {\n    slug: \"creator\",\n    name: \"Creator\",\n    description: \"For active creators and professionals\",\n    priceUsd: 2499, // $24.99\n    monthlyCredits: 1500,\n    canEdit: true,\n    canUpscale: true,\n    allowedModels: [\"leonardo\", \"nano-banana\", \"ideogram-v3\", \"sd-3.5-large\"],\n    promptCommission: 25, // 25% commission\n    imageCommission: 25,\n    features: {\n      maxSubmissionsPerContest: 25,\n      prioritySupport: true,\n      watermark: false,\n      advancedAnalytics: true,\n    },\n    isActive: true,\n    sortOrder: 2,\n  },\n  {\n    slug: \"pro\",\n    name: \"Pro\",\n    description: \"For professional artists and teams\",\n    priceUsd: 4999, // $49.99\n    monthlyCredits: 4000,\n    canEdit: true,\n    canUpscale: true,\n    allowedModels: [\"leonardo\", \"nano-banana\", \"ideogram-v3\", \"sd-3.5-large\", \"flux-1.1-pro\"],\n    promptCommission: 20, // 20% commission\n    imageCommission: 20,\n    features: {\n      maxSubmissionsPerContest: 50,\n      prioritySupport: true,\n      watermark: false,\n      advancedAnalytics: true,\n      apiAccess: true,\n    },\n    isActive: true,\n    sortOrder: 3,\n  },\n  {\n    slug: \"studio\",\n    name: \"Studio\",\n    description: \"For studios and power users\",\n    priceUsd: 9999, // $99.99\n    monthlyCredits: 10000,\n    canEdit: true,\n    canUpscale: true,\n    allowedModels: [\"leonardo\", \"nano-banana\", \"ideogram-v3\", \"sd-3.5-large\", \"flux-1.1-pro\"],\n    promptCommission: 15, // 15% commission (lowest = most profit for creator)\n    imageCommission: 15,\n    features: {\n      maxSubmissionsPerContest: 100,\n      prioritySupport: true,\n      watermark: false,\n      advancedAnalytics: true,\n      apiAccess: true,\n      customBranding: true,\n      dedicatedSupport: true,\n    },\n    isActive: true,\n    sortOrder: 4,\n  },\n];\n\nexport async function seedSubscriptionTiers() {\n  try {\n    console.log(\"Checking subscription tiers...\");\n    \n    const existingTiers = await storage.getSubscriptionTiers();\n    \n    if (existingTiers.length > 0) {\n      console.log(`Found ${existingTiers.length} existing tiers, skipping seed.`);\n      return;\n    }\n    \n    console.log(\"No tiers found, seeding default subscription tiers...\");\n    \n    for (const tier of defaultTiers) {\n      await storage.createSubscriptionTier(tier);\n      console.log(`✓ Created tier: ${tier.name} ($${tier.priceUsd / 100})`);\n    }\n    \n    console.log(\"✓ Subscription tiers seeded successfully!\");\n  } catch (error) {\n    console.error(\"Error seeding subscription tiers:\", error);\n    throw error;\n  }\n}\n","size_bytes":3571},"client/src/pages/admin/subscription-tiers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Loader2, Edit3, Crown, Sparkles } from \"lucide-react\";\nimport { useAuth, isAdmin } from \"@/lib/auth\";\nimport { useLocation } from \"wouter\";\n\nconst MODEL_NAMES: Record<string, string> = {\n  \"leonardo\": \"Leonardo Lucid (Fast)\",\n  \"nano-banana\": \"Nano Banana (Style Reference)\",\n  \"flux-1.1-pro\": \"Flux 1.1 Pro (High Quality)\",\n  \"sd-3.5-large\": \"Stable Diffusion 3.5\",\n  \"ideogram-v3\": \"Ideogram v3 (Premium)\",\n};\n\nconst ALL_MODELS = [\"leonardo\", \"nano-banana\", \"ideogram-v3\", \"sd-3.5-large\", \"flux-1.1-pro\"];\n\n// Tier color schemes\nconst TIER_COLORS: Record<string, { gradient: string; badge: string }> = {\n  free: {\n    gradient: \"from-gray-500/20 to-gray-600/20\",\n    badge: \"bg-gray-500/20 text-gray-300 border-gray-500/30\",\n  },\n  starter: {\n    gradient: \"from-blue-500/20 to-cyan-500/20\",\n    badge: \"bg-blue-500/20 text-blue-300 border-blue-500/30\",\n  },\n  creator: {\n    gradient: \"from-purple-500/20 to-pink-500/20\",\n    badge: \"bg-purple-500/20 text-purple-300 border-purple-500/30\",\n  },\n  pro: {\n    gradient: \"from-amber-500/20 to-yellow-500/20\",\n    badge: \"bg-amber-500/20 text-amber-300 border-amber-500/30\",\n  },\n  studio: {\n    gradient: \"from-pink-500/20 via-purple-500/20 to-cyan-500/20\",\n    badge: \"bg-gradient-to-r from-pink-500/20 via-purple-500/20 to-cyan-500/20 text-white border-pink-500/30\",\n  },\n};\n\n// Tier type from backend\ntype SubscriptionTier = {\n  id: string;\n  slug: string;\n  name: string;\n  description: string | null;\n  priceUsd: number;\n  monthlyCredits: number;\n  canEdit: boolean;\n  canUpscale: boolean;\n  allowedModels: string[];\n  promptCommission: number;\n  imageCommission: number;\n  features: Record<string, any> | null;\n  isActive: boolean;\n  sortOrder: number;\n  createdAt: string;\n  updatedAt: string;\n};\n\n// Edit form schema\nconst editTierFormSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  description: z.string().optional(),\n  priceUsd: z.coerce.number().int().min(0, \"Price must be 0 or greater\"),\n  monthlyCredits: z.coerce.number().int().min(0, \"Credits must be 0 or greater\"),\n  canEdit: z.boolean(),\n  canUpscale: z.boolean(),\n  allowedModels: z.array(z.string()).min(0),\n  promptCommission: z.coerce.number().int().min(0).max(100, \"Must be between 0-100\"),\n  imageCommission: z.coerce.number().int().min(0).max(100, \"Must be between 0-100\"),\n  isActive: z.boolean(),\n});\n\ntype EditTierFormValues = z.infer<typeof editTierFormSchema>;\n\nexport default function AdminSubscriptionTiers() {\n  const { data: user } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [selectedTier, setSelectedTier] = useState<SubscriptionTier | null>(null);\n\n  // Redirect if not admin\n  if (!user || !isAdmin(user)) {\n    setLocation(\"/\");\n    return null;\n  }\n\n  // Fetch tiers\n  const { data: tiers = [], isLoading } = useQuery<SubscriptionTier[]>({\n    queryKey: [\"/api/admin/tiers\"],\n  });\n\n  // Edit form\n  const form = useForm<EditTierFormValues>({\n    resolver: zodResolver(editTierFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      priceUsd: 0,\n      monthlyCredits: 0,\n      canEdit: false,\n      canUpscale: false,\n      allowedModels: [],\n      promptCommission: 0,\n      imageCommission: 0,\n      isActive: true,\n    },\n  });\n\n  // Update tier mutation\n  const updateTierMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: EditTierFormValues }) => {\n      const res = await apiRequest(\"PUT\", `/api/admin/tiers/${id}`, data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/tiers\"] });\n      setEditDialogOpen(false);\n      setSelectedTier(null);\n      form.reset();\n      toast({\n        title: \"Tier Updated\",\n        description: \"Subscription tier has been successfully updated\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update tier\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEditClick = (tier: SubscriptionTier) => {\n    setSelectedTier(tier);\n    form.reset({\n      name: tier.name,\n      description: tier.description || \"\",\n      priceUsd: tier.priceUsd,\n      monthlyCredits: tier.monthlyCredits,\n      canEdit: tier.canEdit,\n      canUpscale: tier.canUpscale,\n      allowedModels: tier.allowedModels || [],\n      promptCommission: tier.promptCommission,\n      imageCommission: tier.imageCommission,\n      isActive: tier.isActive,\n    });\n    setEditDialogOpen(true);\n  };\n\n  const onSubmit = (values: EditTierFormValues) => {\n    if (!selectedTier) return;\n    updateTierMutation.mutate({ id: selectedTier.id, data: values });\n  };\n\n  const formatPrice = (cents: number) => {\n    if (cents === 0) return \"Free\";\n    return `$${(cents / 100).toFixed(2)}/mo`;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" data-testid=\"loader-tiers\" />\n      </div>\n    );\n  }\n\n  const sortedTiers = [...tiers].sort((a, b) => a.sortOrder - b.sortOrder);\n\n  return (\n    <div className=\"container mx-auto py-8 px-4\">\n      <div className=\"max-w-6xl mx-auto space-y-6\">\n        <div className=\"flex items-center gap-3\">\n          <Crown className=\"h-8 w-8 text-amber-500\" />\n          <div>\n            <h1 className=\"text-3xl font-bold mb-1\" data-testid=\"text-tiers-title\">\n              Subscription Tiers\n            </h1>\n            <p className=\"text-muted-foreground\">Manage pricing and features for all subscription plans</p>\n          </div>\n        </div>\n\n        {/* Tiers Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {sortedTiers.map((tier) => {\n            const colors = TIER_COLORS[tier.slug] || TIER_COLORS.free;\n            return (\n              <Card\n                key={tier.id}\n                className={`relative overflow-hidden border border-white/10 bg-gradient-to-br ${colors.gradient} backdrop-blur-xl`}\n                data-testid={`card-tier-${tier.slug}`}\n              >\n                <div className=\"absolute inset-0 bg-black/40 backdrop-blur-sm\" />\n                <CardHeader className=\"relative\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"space-y-1\">\n                      <CardTitle className=\"text-2xl flex items-center gap-2\">\n                        {tier.name}\n                        {tier.slug === \"studio\" && <Sparkles className=\"h-5 w-5 text-yellow-400\" />}\n                      </CardTitle>\n                      <div className=\"text-3xl font-bold\" data-testid={`text-price-${tier.slug}`}>\n                        {formatPrice(tier.priceUsd)}\n                      </div>\n                    </div>\n                    <Badge\n                      variant=\"outline\"\n                      className={colors.badge}\n                      data-testid={`badge-status-${tier.slug}`}\n                    >\n                      {tier.isActive ? \"Active\" : \"Inactive\"}\n                    </Badge>\n                  </div>\n                  {tier.description && (\n                    <CardDescription className=\"text-gray-300\">\n                      {tier.description}\n                    </CardDescription>\n                  )}\n                </CardHeader>\n                <CardContent className=\"relative space-y-4\">\n                  {/* Monthly Credits */}\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-300\">Monthly Credits:</span>\n                    <span className=\"font-semibold\" data-testid={`text-credits-${tier.slug}`}>\n                      {tier.monthlyCredits.toLocaleString()}\n                    </span>\n                  </div>\n\n                  {/* Feature Flags */}\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <Checkbox checked={tier.canEdit} disabled />\n                      <span className=\"text-sm text-gray-300\">Can Edit Images</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Checkbox checked={tier.canUpscale} disabled />\n                      <span className=\"text-sm text-gray-300\">Can Upscale Images</span>\n                    </div>\n                  </div>\n\n                  {/* Commissions */}\n                  <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                    <div>\n                      <span className=\"text-gray-400\">Prompt Commission:</span>\n                      <div className=\"font-semibold\">{tier.promptCommission}%</div>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-400\">Image Commission:</span>\n                      <div className=\"font-semibold\">{tier.imageCommission}%</div>\n                    </div>\n                  </div>\n\n                  {/* Allowed Models */}\n                  {tier.allowedModels && tier.allowedModels.length > 0 && (\n                    <div className=\"space-y-2\">\n                      <span className=\"text-sm text-gray-400\">Allowed Models:</span>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {tier.allowedModels.map((model) => (\n                          <Badge\n                            key={model}\n                            variant=\"secondary\"\n                            className=\"text-xs bg-white/5 border-white/10\"\n                            data-testid={`badge-model-${tier.slug}-${model}`}\n                          >\n                            {MODEL_NAMES[model] || model}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Features */}\n                  {tier.features && Object.keys(tier.features).length > 0 && (\n                    <div className=\"space-y-2\">\n                      <span className=\"text-sm text-gray-400\">Features:</span>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {Object.keys(tier.features).map((key) => (\n                          <Badge\n                            key={key}\n                            variant=\"outline\"\n                            className=\"text-xs bg-white/5 border-white/20\"\n                            data-testid={`badge-feature-${tier.slug}-${key}`}\n                          >\n                            {key}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Edit Button */}\n                  <Button\n                    onClick={() => handleEditClick(tier)}\n                    className=\"w-full mt-4\"\n                    variant=\"outline\"\n                    data-testid={`button-edit-${tier.slug}`}\n                  >\n                    <Edit3 className=\"mr-2 h-4 w-4\" />\n                    Edit Tier\n                  </Button>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Edit Tier Dialog */}\n      <Dialog open={editDialogOpen} onOpenChange={setEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Edit Subscription Tier</DialogTitle>\n            <DialogDescription>\n              Update pricing, features, and settings for {selectedTier?.name}\n            </DialogDescription>\n          </DialogHeader>\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              {/* Name */}\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Name</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-tier-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Description */}\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} rows={3} data-testid=\"textarea-tier-description\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Price USD */}\n              <FormField\n                control={form.control}\n                name=\"priceUsd\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Price (USD)</FormLabel>\n                    <FormControl>\n                      <div className=\"space-y-2\">\n                        <Input\n                          type=\"number\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                          data-testid=\"input-tier-price\"\n                        />\n                        <FormDescription>\n                          Price in cents. Current value: {formatPrice(field.value)}\n                        </FormDescription>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Monthly Credits */}\n              <FormField\n                control={form.control}\n                name=\"monthlyCredits\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Monthly Credits</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                        data-testid=\"input-tier-credits\"\n                      />\n                    </FormControl>\n                    <FormDescription>Number of credits granted each month</FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Can Edit */}\n              <FormField\n                control={form.control}\n                name=\"canEdit\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base\">Can Edit Images</FormLabel>\n                      <FormDescription>Allow users to edit images with the built-in editor</FormDescription>\n                    </div>\n                    <FormControl>\n                      <Checkbox\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"checkbox-tier-can-edit\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n\n              {/* Can Upscale */}\n              <FormField\n                control={form.control}\n                name=\"canUpscale\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base\">Can Upscale Images</FormLabel>\n                      <FormDescription>Allow users to upscale images using AI</FormDescription>\n                    </div>\n                    <FormControl>\n                      <Checkbox\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"checkbox-tier-can-upscale\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n\n              {/* Allowed Models */}\n              <FormField\n                control={form.control}\n                name=\"allowedModels\"\n                render={() => (\n                  <FormItem>\n                    <div className=\"mb-4\">\n                      <FormLabel className=\"text-base\">Allowed AI Models</FormLabel>\n                      <FormDescription>Select which AI models users can access</FormDescription>\n                    </div>\n                    <div className=\"space-y-2\">\n                      {ALL_MODELS.map((model) => (\n                        <FormField\n                          key={model}\n                          control={form.control}\n                          name=\"allowedModels\"\n                          render={({ field }) => {\n                            return (\n                              <FormItem\n                                key={model}\n                                className=\"flex flex-row items-start space-x-3 space-y-0\"\n                              >\n                                <FormControl>\n                                  <Checkbox\n                                    checked={field.value?.includes(model)}\n                                    onCheckedChange={(checked) => {\n                                      return checked\n                                        ? field.onChange([...field.value, model])\n                                        : field.onChange(\n                                            field.value?.filter((value) => value !== model)\n                                          );\n                                    }}\n                                    data-testid={`checkbox-tier-model-${model}`}\n                                  />\n                                </FormControl>\n                                <FormLabel className=\"font-normal\">\n                                  {MODEL_NAMES[model] || model}\n                                </FormLabel>\n                              </FormItem>\n                            );\n                          }}\n                        />\n                      ))}\n                    </div>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Commissions */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"promptCommission\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Prompt Commission %</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          min=\"0\"\n                          max=\"100\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                          data-testid=\"input-tier-prompt-commission\"\n                        />\n                      </FormControl>\n                      <FormDescription>0-100%</FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"imageCommission\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Image Commission %</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          min=\"0\"\n                          max=\"100\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                          data-testid=\"input-tier-image-commission\"\n                        />\n                      </FormControl>\n                      <FormDescription>0-100%</FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              {/* Is Active */}\n              <FormField\n                control={form.control}\n                name=\"isActive\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base\">Active Status</FormLabel>\n                      <FormDescription>\n                        Inactive tiers cannot be purchased by users\n                      </FormDescription>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-tier-is-active\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n\n              <DialogFooter>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setEditDialogOpen(false)}\n                  data-testid=\"button-cancel-edit\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={updateTierMutation.isPending}\n                  data-testid=\"button-save-tier\"\n                >\n                  {updateTierMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Saving...\n                    </>\n                  ) : (\n                    \"Save Changes\"\n                  )}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":23292},"DEVNET_TESTING.md":{"content":"# Solana Devnet Payment Testing Guide\n\n## Overview\nThis guide walks through testing the complete Solana wallet payment flow on devnet.\n\n## Prerequisites\n\n### 1. Wallet Setup\n- Install [Phantom Wallet](https://phantom.app/) or [Solflare Wallet](https://solflare.com/)\n- Switch wallet to **Devnet** network\n- Get devnet SOL from faucet: https://faucet.solana.com/\n\n### 2. Platform Configuration\n\n#### Step 1: Create Admin User\n1. Register a new user at `/register`\n2. Admin must manually approve the user in database (or use existing admin)\n\n#### Step 2: Configure Platform Wallet\n1. Login as admin\n2. Go to `/admin/settings`\n3. Enter your devnet wallet address in \"Platform Wallet Address\" field\n4. Click \"Save Changes\"\n\n#### Step 3: Create Test Contest\n1. Go to `/admin/dashboard`\n2. Click \"Create New Contest\"\n3. Configure contest with:\n   - **Entry Fee**: Enabled\n   - **Entry Fee Amount**: 0.01 (SOL)\n   - **Entry Fee Currency**: SOL\n   - **Entry Fee Payment Methods**: [\"wallet\"] (crypto-only for testing)\n   - **Contest Type**: image\n   - **Start/End Dates**: Set appropriately\n\n## Testing Flow\n\n### Test 1: Wallet Connection (Message Signing Flow)\n\n**Technical Flow:**\n1. User clicks \"Connect Wallet\" → Wallet extension opens\n2. User approves connection → `publicKey` available in browser (base58 format)\n3. Frontend generates message: `Sign this message to verify your wallet ownership.\\nWallet: {publicKey}\\nTimestamp: {timestamp}`\n4. User signs message in wallet → signature returned as base64\n5. Frontend sends to `POST /api/wallet/connect`:\n   ```json\n   {\n     \"address\": \"base58 wallet address (e.g., 7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU)\",\n     \"provider\": \"phantom\",\n     \"signature\": \"base64-encoded signature\",\n     \"message\": \"message that was signed\"\n   }\n   ```\n6. Backend converts base58 address to bytes via `new PublicKey(address).toBytes()`\n7. Backend verifies signature using ed25519 (message bytes + signature bytes + public key bytes)\n8. Backend stores wallet record with base58 address and `verifiedAt` timestamp\n\n**Important:** Wallet address stays in **base58 format** throughout (Solana standard). Only converted to bytes internally for ed25519 verification.\n\n**Test Steps:**\n1. Go to `/profile`\n2. Click \"Connect Wallet\" button in navbar\n3. Select Phantom or Solflare\n4. Approve connection in wallet popup\n5. Sign verification message when prompted\n6. ✅ Verify: Wallet address displayed in navbar\n7. ✅ Verify: SOL balance shown\n8. ✅ Verify: Profile page shows \"Wallet verified and ready for cashouts\"\n9. ✅ Verify: Green checkmark icon displayed\n10. **DevTools Check**: Network tab shows `POST /api/wallet/connect` with 200 response\n\n### Test 2: Payment QR Code Generation\n1. Go to test contest detail page\n2. Click \"Submit Entry\" or \"Upload\" button\n3. Upload an image\n4. Fill in title and details\n5. Select the test contest\n6. Click \"Next\" until payment step\n7. ✅ Verify: Payment modal appears with QR code\n8. ✅ Verify: Payment URL displayed (starts with `solana:`)\n9. ✅ Verify: Amount, recipient, label, memo visible\n\n### Test 3: Payment URL Structure\nInspect the payment URL. It should contain:\n```\nsolana:{recipient}?\n  amount=0.01&\n  reference={unique-reference}&\n  label={contest-name}&\n  message=Entry%20fee%20for%20{contest}&\n  memo=contest:{contestId}:user:{userId}\n```\n\n### Test 4: Automatic Payment Verification (Two-Step Flow)\n\n**Technical Flow:**\n1. SolanaPayment component polls every 3 seconds via `POST /api/payment/find-by-reference`\n2. Backend uses `findReference()` from @solana/pay to search blockchain for reference key\n3. **First response**: `{found: false, message: \"Payment not found yet\"}`\n4. User completes payment in wallet\n5. **Second response** (when transaction found):\n   - Backend calls `verifyTransaction()` to check confirmation status\n   - Validates: payer = user wallet, amount ≥ expected, recipient = platform wallet\n   - Creates `glory_ledger` entry with txHash\n   - Returns: `{found: true, success: true, txHash: \"...\", alreadyProcessed: false}`\n6. Frontend detects `success: true` → closes modal, shows success toast\n\n**Test Steps:**\n1. On mobile: Scan QR code with Phantom/Solflare app\n2. On desktop: Click \"Open in Wallet\" button\n3. Approve transaction in wallet (0.01 SOL + network fee ~0.000005)\n4. Wait 3-10 seconds for blockchain confirmation\n5. ✅ Verify: Payment modal shows \"Verifying payment...\" spinner\n6. ✅ Verify: Modal automatically closes when verified\n7. ✅ Verify: Success toast: \"Payment verified successfully!\"\n8. ✅ Verify: Submission created and visible in contest\n9. **DevTools Check**: Network tab shows multiple `/api/payment/find-by-reference` requests, last one returns `{found: true, success: true}`\n\n### Test 5: Manual Payment Verification\n\n**When to use:**\n- Polling timeout (60 seconds max)\n- Network delays causing auto-verification to miss transaction\n- User prefers manual control\n\n**Test Steps:**\n1. Complete payment in wallet (follow Test 4 steps 1-3)\n2. DON'T wait for auto-verification\n3. Click \"Verify Payment\" button in modal\n4. ✅ Verify: Manual verification triggers immediately\n5. ✅ Verify: Success toast appears\n6. ✅ Verify: Transaction verified via same backend flow\n7. ✅ Verify: Payment modal closes\n8. **DevTools Check**: Network tab shows single `/api/payment/find-by-reference` POST triggered by button click\n\n### Test 6: Backend Verification\n1. Check browser DevTools Network tab\n2. Find `POST /api/payment/find-by-reference` request\n3. ✅ Verify: Response contains `{found: true, success: true, txHash: \"...\"}`\n4. Check server logs for transaction verification\n5. ✅ Verify: \"Payment verified via reference\" message logged\n\n### Test 7: Database Verification\n1. Go to Replit Database tab\n2. Query `glory_ledger` table:\n   ```sql\n   SELECT * FROM glory_ledger \n   WHERE tx_hash IS NOT NULL \n   ORDER BY created_at DESC \n   LIMIT 5;\n   ```\n3. ✅ Verify: Entry with:\n   - `userId`: Your user ID\n   - `contestId`: Test contest ID\n   - `currency`: \"SOL\"\n   - `delta`: 0 (crypto payments don't affect GLORY)\n   - `reason`: Contains \"Solana payment verified\"\n   - `tx_hash`: Transaction signature\n   - `metadata`: Contains reference, from, to, amount\n\n### Test 8: Transaction Uniqueness\n1. Try to submit another entry with same wallet\n2. Make payment with SAME transaction signature (impossible, but test backend)\n3. ✅ Verify: Backend rejects duplicate txHash\n4. ✅ Verify: Second payment creates new submission successfully\n\n### Test 9: Error Handling\n\n#### Test 9a: Missing Platform Wallet\n1. Admin: Clear platform wallet address in settings\n2. User: Try to submit entry\n3. ✅ Verify: Error shown (empty recipient address)\n\n#### Test 9b: Wrong Payment Amount\n1. Manually construct payment URL with lower amount\n2. Send transaction\n3. ✅ Verify: Backend rejects with \"Insufficient payment amount\" error\n\n#### Test 9c: Wrong Recipient\n1. Send SOL to different address (not platform wallet)\n2. Try manual verification\n3. ✅ Verify: Backend rejects with \"Payment recipient mismatch\"\n\n#### Test 9d: Different Payer\n1. Connect wallet A\n2. Start submission flow\n3. Pay from wallet B (different wallet)\n4. ✅ Verify: Backend rejects with \"Transaction payer mismatch\"\n\n### Test 10: USDC Payment (Optional)\n1. Create contest with USDC entry fee\n2. Get devnet USDC: https://spl-token-faucet.com/\n3. Repeat payment flow with USDC\n4. ✅ Verify: Payment URL includes `spl-token` parameter\n5. ✅ Verify: Transaction verified successfully\n\n## Success Criteria\n\nAll tests must pass:\n- ✅ Wallet connects successfully\n- ✅ QR code generates correctly\n- ✅ Payment URL has correct structure\n- ✅ Automatic verification works\n- ✅ Manual verification works\n- ✅ Transaction recorded in database\n- ✅ Duplicate transactions rejected\n- ✅ Error cases handled gracefully\n\n## Troubleshooting\n\n### Payment Not Found (Most Common)\n**Symptom:** `{found: false, message: \"Payment not found yet\"}` persists after transaction\n\n**Causes & Solutions:**\n1. **Blockchain Confirmation Delay** (3-15 seconds on devnet)\n   - Wait 10-15 seconds, auto-polling will detect it\n   - Devnet is slower than mainnet during high load\n   \n2. **Transaction Not Finalized**\n   - Backend uses `finality: 'confirmed'` (usually 1-2 seconds)\n   - Check Solana Explorer: https://explorer.solana.com/?cluster=devnet\n   - Look for transaction status: \"Finalized\" or \"Confirmed\"\n   - If status is \"Processing\", wait and retry manual verification\n\n3. **Wrong Network**\n   - Verify wallet is on **devnet** (not mainnet/testnet)\n   - Check wallet network selector (usually top-right in wallet settings)\n\n4. **Reference Key Mismatch**\n   - Ensure payment URL matches exactly what was generated\n   - Don't modify Solana Pay URL manually\n   - Reference must be unique PublicKey in base58 format\n\n**Debugging Steps:**\n1. Copy transaction signature from wallet history\n2. Paste into Solana Explorer with `?cluster=devnet` parameter\n3. Check:\n   - Status: Must be \"Confirmed\" or \"Finalized\"\n   - From: Must match your connected wallet address\n   - To: Must match platform wallet address\n   - Amount: Must be ≥ entry fee amount\n4. If all correct but still fails, click \"Verify Payment\" manually\n5. Check server logs for detailed error (see Server Logs section below)\n\n### Verification Fails with Error\n\n**Error: \"Transaction payer mismatch\"**\n- You connected wallet A but paid from wallet B\n- Solution: Ensure you pay from the SAME wallet shown in navbar\n\n**Error: \"Insufficient payment amount\"**\n- You paid less than entry fee (e.g., 0.005 SOL instead of 0.01 SOL)\n- Check transaction details in Solana Explorer\n- Network fees are separate, don't reduce payment amount\n\n**Error: \"Payment recipient address mismatch\"**\n- Payment went to wrong address\n- Check platform wallet configuration in `/admin/settings`\n- Verify contest was created AFTER platform wallet was set\n\n**Error: \"Transaction already verified\"**\n- You tried to reuse same transaction for multiple submissions\n- Each submission requires NEW payment with unique transaction\n- Solution: Make a fresh payment\n\n**Error: \"Transaction not found or not confirmed\"**\n- Transaction exists but not confirmed on blockchain\n- Wait 10-30 seconds and retry manual verification\n- Use `getSignatureStatus` to check:\n   ```bash\n   # In browser console or via Solana CLI\n   solana confirm <SIGNATURE> --url devnet\n   ```\n\n### QR Code Not Scanning\n- Ensure mobile wallet is on devnet\n- Try \"Open in Wallet\" button instead\n- Check payment URL format (should start with `solana:`)\n- Some wallets don't support Solana Pay QR codes → use manual URL open\n\n### Server Logs (Advanced Debugging)\n1. Open Replit Shell\n2. Check logs for payment verification:\n   ```bash\n   # Filter for payment-related logs\n   tail -f /tmp/*.log | grep -i \"payment\\|solana\\|verify\"\n   ```\n3. Look for errors:\n   - `Solana payment verification error:`\n   - `Transaction not found or not confirmed`\n   - `Payment recipient mismatch`\n4. Check transaction details logged by `verifyTransaction()`\n\n## Production Checklist\n\nBefore deploying to mainnet:\n- [ ] Configure QuickNode RPC endpoint (SOLANA_RPC_ENDPOINT secret)\n- [ ] Set SOLANA_NETWORK=mainnet-beta\n- [ ] Configure production platform wallet address\n- [ ] Test with real SOL/USDC on mainnet-beta\n- [ ] Set up transaction monitoring\n- [ ] Configure fee calculations\n- [ ] Implement withdrawal system\n- [ ] Add fraud detection\n","size_bytes":11414},"client/src/polyfills/buffer.ts":{"content":"// Polyfill Buffer for browser environments when dependencies expect Node's Buffer\nimport { Buffer } from 'buffer';\n\n// Attach to globalThis so libraries that access global.Buffer work\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nif (typeof (globalThis as any).Buffer === 'undefined') {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  (globalThis as any).Buffer = Buffer;\n}\n","size_bytes":439},"client/src/pages/roadmap.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { ArrowRight, Flame, Globe2, Image as ImageIcon, Rocket, ShoppingBag, Users, Wallet, Wand2, Briefcase, Coins, Star, Trophy, ChevronRight } from \"lucide-react\";\nimport { useEffect } from \"react\";\n\nconst phases = [\n  {\n    id: 1,\n    quarter: \"Q4 2025\",\n    title: \"Launch & Foundation\",\n    icon: Rocket,\n    bullets: [\n      \"Launch of the 5Best Contest Platform — upload & vote for the best AI images.\",\n      \"Glory Token deployed on Pump.fun (Solana) as the native utility & reward.\",\n      \"Contest participation requires holding Glory Tokens.\",\n      \"Community building on Twitter (X), Telegram & Discord.\",\n      \"Transparent prize distribution handled inside the 5Best platform.\",\n    ],\n    accent: \"from-fuchsia-500 via-purple-500 to-indigo-500\",\n  },\n  {\n    id: 2,\n    quarter: \"Q1 2026\",\n    title: \"Marketplace & Utility Expansion\",\n    icon: ShoppingBag,\n    bullets: [\n      \"Launch of the 5Best Marketplace — creators sell AI artworks and earn.\",\n      \"5% of all marketplace profits allocated to Glory Token buybacks.\",\n      \"DAO Governance (suggest & vote for next contest topics).\",\n      \"Fiat withdrawal integration.\",\n      \"Weekly sponsored contests with brand partnerships.\",\n    ],\n    accent: \"from-cyan-500 via-sky-500 to-blue-500\",\n  },\n  {\n    id: 3,\n    quarter: \"Q2 2026\",\n    title: \"AI Tools Integration\",\n    icon: Wand2,\n    bullets: [\n      \"Built-in AI Image Generator (create inside 5Best).\",\n      \"Create, upload & sell in a single flow.\",\n      \"Subscription tiers — pay or hold Glory for discounts & credits.\",\n      \"Expanded token utility across the platform.\",\n    ],\n    accent: \"from-emerald-500 via-teal-500 to-cyan-500\",\n  },\n  {\n    id: 4,\n    quarter: \"Q3 2026\",\n    title: \"'Hire Me' & Creator Economy\",\n    icon: Briefcase,\n    bullets: [\n      \"Launch the 'Hire Me' module for brands & individuals.\",\n      \"Verified creator profiles, portfolios, ratings & reviews.\",\n      \"Partnerships with digital agencies, NFT & AI communities.\",\n    ],\n    accent: \"from-amber-500 via-orange-500 to-rose-500\",\n  },\n  {\n    id: 5,\n    quarter: \"Q4 2026+\",\n    title: \"Full Ecosystem & Expansion\",\n    icon: Globe2,\n    bullets: [\n      \"Glory utility across all 5Best apps (AI video, POD, NFT minting).\",\n      \"Global marketing, influencer collaborations & media coverage.\",\n    ],\n    accent: \"from-violet-500 via-fuchsia-500 to-pink-500\",\n  },\n];\n\nfunction SectionTitle({ label, eyebrow = \"Roadmap\", icon: Icon = Flame }: { label: string; eyebrow?: string; icon?: typeof Flame }) {\n  return (\n    <div className=\"text-center max-w-3xl mx-auto\">\n      <div className=\"inline-flex items-center gap-2 text-sm font-medium tracking-wide text-fuchsia-300/90\">\n        <Icon className=\"h-4 w-4\" aria-hidden />\n        <span>{eyebrow}</span>\n      </div>\n      <h1 className=\"mt-3 text-3xl sm:text-4xl md:text-5xl font-extrabold text-white dark:text-white\">\n        5Best & Glory Token Roadmap\n      </h1>\n      <p className=\"mt-4 text-base sm:text-lg text-white/70 dark:text-white/70\">\n        <em>\"Where Prompts Become Glory.\"</em>\n      </p>\n    </div>\n  );\n}\n\nfunction PhaseCard({ phase, index }: { phase: typeof phases[number]; index: number }) {\n  const Icon = phase.icon;\n  return (\n    <motion.li\n      initial={{ opacity: 0, y: 24 }}\n      whileInView={{ opacity: 1, y: 0 }}\n      viewport={{ once: true, amount: 0.3 }}\n      transition={{ duration: 0.5, delay: 0.05 * index }}\n      className=\"relative\"\n    >\n      <div className=\"grid grid-cols-1 md:grid-cols-[220px_1fr] gap-4 md:gap-8 items-start\">\n        <div className=\"md:text-right\">\n          <div className=\"inline-flex md:inline-block px-3 py-1 rounded-full text-xs font-semibold bg-white/10 text-white/90 border border-white/10\">\n            {phase.quarter}\n          </div>\n        </div>\n\n        <div className=\"relative\">\n          <div className=\"absolute -left-4 top-0 bottom-0 hidden md:block border-l border-white/10\" aria-hidden />\n          <div className=\"absolute -left-4 -translate-x-1/2 mt-1 hidden md:block\" aria-hidden>\n            <div className={`h-3 w-3 rounded-full bg-gradient-to-r ${phase.accent} shadow-[0_0_24px_rgba(255,255,255,0.35)]`} />\n          </div>\n\n          <div className=\"rounded-2xl border border-white/10 bg-white/5 dark:bg-white/5 backdrop-blur-md p-5 md:p-6 shadow-xl\">\n            <div className=\"flex items-center gap-3\">\n              <div className={`p-2 rounded-xl bg-gradient-to-r ${phase.accent} text-white shadow-lg`}> \n                <Icon className=\"h-5 w-5\" aria-hidden />\n              </div>\n              <h3 className=\"text-xl md:text-2xl font-bold text-white dark:text-white\">{phase.title}</h3>\n            </div>\n\n            <ul className=\"mt-4 space-y-2.5\">\n              {phase.bullets.map((b, i) => (\n                <li key={i} className=\"flex items-start gap-3 text-white/80 dark:text-white/80\">\n                  <ChevronRight className=\"mt-1 h-4 w-4 shrink-0\" aria-hidden />\n                  <span>{b}</span>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      </div>\n    </motion.li>\n  );\n}\n\nfunction CTASection() {\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 24 }}\n      whileInView={{ opacity: 1, y: 0 }}\n      viewport={{ once: true, amount: 0.4 }}\n      transition={{ duration: 0.6 }}\n      className=\"mt-14 md:mt-20\"\n    >\n      <div className=\"rounded-3xl border border-white/10 bg-white/5 dark:bg-white/5 backdrop-blur-md p-6 md:p-10 text-center shadow-2xl\">\n        <div className=\"inline-flex items-center gap-2 px-3 py-1 rounded-full bg-white/10 text-white/90 text-xs font-semibold\">\n          <Coins className=\"h-4 w-4\" aria-hidden />\n          <span>Utility, Buybacks & Growth</span>\n        </div>\n        <h3 className=\"mt-4 text-2xl md:text-3xl font-extrabold text-white dark:text-white\">\n          Hold $GLORY. Create. Vote. Earn.\n        </h3>\n        <p className=\"mt-3 text-white/70 dark:text-white/70 max-w-2xl mx-auto\">\n          5% of marketplace profits are allocated to token buybacks. Your creativity powers the economy — and holders share the momentum.\n        </p>\n        <div className=\"mt-6 flex flex-col sm:flex-row gap-3 justify-center\">\n          <a\n            href=\"https://t.me/ComunityGloryToken\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            className=\"inline-flex items-center justify-center gap-2 rounded-xl px-5 py-3 font-semibold bg-white text-gray-900 hover:opacity-90 transition focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-white\"\n            data-testid=\"button-telegram\"\n          >\n            Join Telegram\n            <ArrowRight className=\"h-4 w-4\" aria-hidden />\n          </a>\n          <a\n            href=\"https://twitter.com/GloryToken5best\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            className=\"inline-flex items-center justify-center gap-2 rounded-xl px-5 py-3 font-semibold border border-white/20 text-white hover:bg-white/10 transition focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-white\"\n            data-testid=\"button-twitter\"\n          >\n            Follow on X\n            <ArrowRight className=\"h-4 w-4\" aria-hidden />\n          </a>\n        </div>\n      </div>\n    </motion.div>\n  );\n}\n\nfunction VisionBlock() {\n  return (\n    <motion.section\n      initial={{ opacity: 0, y: 24 }}\n      whileInView={{ opacity: 1, y: 0 }}\n      viewport={{ once: true, amount: 0.4 }}\n      transition={{ duration: 0.6 }}\n      className=\"max-w-4xl mx-auto text-center mt-16 md:mt-24\"\n    >\n      <div className=\"inline-flex items-center gap-2 px-3 py-1 rounded-full bg-white/10 text-white/90 text-xs font-semibold\">\n        <Star className=\"h-4 w-4\" aria-hidden />\n        <span>Our Vision</span>\n      </div>\n      <p className=\"mt-4 text-lg md:text-xl leading-relaxed text-white/80 dark:text-white/80\">\n        5Best is more than a contest platform — it's a growing ecosystem where creativity,\n        technology and blockchain meet, rewarding every artist, creator and dreamer with Glory.\n      </p>\n    </motion.section>\n  );\n}\n\nfunction GradientBackdrop() {\n  return (\n    <div aria-hidden className=\"pointer-events-none absolute inset-0 overflow-hidden\">\n      <div className=\"absolute -top-56 -left-40 h-96 w-96 rounded-full bg-fuchsia-500/20 blur-3xl\" />\n      <div className=\"absolute -bottom-40 -right-24 h-[28rem] w-[28rem] rounded-full bg-indigo-500/20 blur-3xl\" />\n    </div>\n  );\n}\n\nexport default function RoadmapPage() {\n  useEffect(() => {\n    document.title = \"Roadmap - 5Best\";\n  }, []);\n\n  return (\n    <main className=\"relative min-h-screen w-full bg-gradient-to-b from-[#0b0b12] via-[#0b0b12] to-[#0a0a0f] dark:from-[#0b0b12] dark:via-[#0b0b12] dark:to-[#0a0a0f] text-white\">\n      <GradientBackdrop />\n\n      {/* Header */}\n      <section className=\"relative px-4 sm:px-6 lg:px-8 pt-16 md:pt-24\">\n        <SectionTitle label=\"5Best & Glory Token Roadmap\" eyebrow=\"Roadmap\" />\n\n        {/* Hero pills */}\n        <div className=\"mt-8 flex flex-wrap justify-center gap-3\">\n          <span className=\"inline-flex items-center gap-2 rounded-full border border-white/10 bg-white/5 px-3 py-1.5 text-sm text-white/80\">\n            <Trophy className=\"h-4 w-4\" /> Contest-first platform\n          </span>\n          <span className=\"inline-flex items-center gap-2 rounded-full border border-white/10 bg-white/5 px-3 py-1.5 text-sm text-white/80\">\n            <Wallet className=\"h-4 w-4\" /> Glory utility\n          </span>\n          <span className=\"inline-flex items-center gap-2 rounded-full border border-white/10 bg-white/5 px-3 py-1.5 text-sm text-white/80\">\n            <ImageIcon className=\"h-4 w-4\" /> AI generator\n          </span>\n          <span className=\"inline-flex items-center gap-2 rounded-full border border-white/10 bg-white/5 px-3 py-1.5 text-sm text-white/80\">\n            <Users className=\"h-4 w-4\" /> Hire Me economy\n          </span>\n        </div>\n      </section>\n\n      {/* Timeline */}\n      <section className=\"relative px-4 sm:px-6 lg:px-8 mt-12 md:mt-16\">\n        <ol className=\"max-w-5xl mx-auto space-y-8 md:space-y-12\">\n          {phases.map((p, i) => (\n            <PhaseCard key={p.id} phase={p} index={i} />\n          ))}\n        </ol>\n\n        <CTASection />\n        <VisionBlock />\n\n        <footer className=\"max-w-5xl mx-auto text-center py-16 md:py-20\">\n          <p className=\"text-xs text-white/50 dark:text-white/50\">\n            © {new Date().getFullYear()} 5Best / Glory Token. All rights reserved.\n          </p>\n        </footer>\n      </section>\n    </main>\n  );\n}\n","size_bytes":10706},"client/src/utils/debug.ts":{"content":"/**\n * Debug logging utility that reduces console spam\n * Only logs important information and throttles repetitive logs\n */\n\n// Control debug level - set to false to reduce console output\nconst DEBUG_ENABLED = false; // Set to true to enable verbose debugging\n\nexport const debugLog = {\n  info: (...args: any[]) => {\n    if (DEBUG_ENABLED) {\n      console.log(...args);\n    }\n  },\n  \n  error: (...args: any[]) => {\n    // Always show errors, but can be controlled\n    if (DEBUG_ENABLED) {\n      console.error(...args);\n    }\n  },\n  \n  warn: (...args: any[]) => {\n    if (DEBUG_ENABLED) {\n      console.warn(...args);\n    }\n  },\n  \n  // For critical events that should always be shown\n  critical: (...args: any[]) => {\n    console.log(...args);\n  },\n  \n  // Throttled logging to prevent spam\n  throttle: (() => {\n    const lastLogTimes = new Map<string, number>();\n    const THROTTLE_MS = 10000; // 10 seconds\n    \n    return (key: string, ...args: any[]) => {\n      if (!DEBUG_ENABLED) return;\n      \n      const now = Date.now();\n      const lastTime = lastLogTimes.get(key) || 0;\n      \n      if (now - lastTime >= THROTTLE_MS) {\n        console.log(...args);\n        lastLogTimes.set(key, now);\n      }\n    };\n  })()\n};\n\nexport default debugLog;","size_bytes":1248},"client/src/pages/admin/settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Loader2, Save, Sparkles } from \"lucide-react\";\n\n// Settings form schema\nconst settingsFormSchema = z.object({\n  privateMode: z.boolean(),\n  platformWalletAddress: z.string().optional().refine(\n    (val) => !val || /^[1-9A-HJ-NP-Za-km-z]{32,44}$/.test(val),\n    { message: \"Invalid Solana wallet address\" }\n  ),\n});\n\ntype SettingsFormValues = z.infer<typeof settingsFormSchema>;\n\nconst MODEL_NAMES: Record<string, string> = {\n  \"leonardo\": \"Leonardo Lucid (Fast)\",\n  \"nano-banana\": \"Nano Banana (Style Reference)\",\n  \"flux-1.1-pro\": \"Flux 1.1 Pro (High Quality)\",\n  \"sd-3.5-large\": \"Stable Diffusion 3.5\",\n  \"ideogram-v3\": \"Ideogram v3 (Premium)\",\n  \"upscale\": \"AI Upscaling (4x)\",\n};\n\nexport default function AdminSettings() {\n  const { toast } = useToast();\n  const [pricingValues, setPricingValues] = useState<Record<string, number>>({});\n\n  // Fetch current settings\n  const { data: settings, isLoading } = useQuery<{\n    privateMode: boolean;\n    platformWalletAddress?: string | null;\n  }>({\n    queryKey: [\"/api/admin/settings\"],\n  });\n\n  // Fetch pricing settings\n  const { data: pricing, isLoading: loadingPricing } = useQuery<Record<string, number>>({\n    queryKey: [\"/api/admin/settings/pricing\"],\n  });\n\n  useEffect(() => {\n    if (pricing) {\n      setPricingValues(pricing);\n    }\n  }, [pricing]);\n\n  // Form setup\n  const form = useForm<SettingsFormValues>({\n    resolver: zodResolver(settingsFormSchema),\n    values: {\n      privateMode: settings?.privateMode || false,\n      platformWalletAddress: settings?.platformWalletAddress || \"\",\n    },\n  });\n\n  // Update settings mutation\n  const updateMutation = useMutation({\n    mutationFn: async (values: SettingsFormValues) => {\n      const res = await apiRequest(\"PATCH\", \"/api/admin/settings\", values);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/settings\"] });\n      toast({\n        title: \"Settings Updated\",\n        description: \"Site settings have been successfully updated\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update pricing mutation\n  const updatePricingMutation = useMutation({\n    mutationFn: async () => {\n      const updates = Object.entries(pricingValues).map(([key, value]) =>\n        apiRequest(\"PUT\", `/api/admin/settings/pricing/${key}`, { value })\n      );\n      await Promise.all(updates);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/settings/pricing\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/pricing\"] });\n      toast({\n        title: \"Pricing Updated\",\n        description: \"AI model pricing has been successfully updated\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update pricing\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (values: SettingsFormValues) => {\n    updateMutation.mutate(values);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" data-testid=\"loader-settings\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-8 px-4\">\n      <div className=\"max-w-2xl mx-auto space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-settings-title\">Site Settings</h1>\n          <p className=\"text-muted-foreground\">Configure global platform settings</p>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Private Mode */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Access Control</CardTitle>\n                <CardDescription>Manage who can access the platform</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <FormField\n                  control={form.control}\n                  name=\"privateMode\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel className=\"text-base\">Private Mode</FormLabel>\n                        <FormDescription>\n                          When enabled, only logged-in users can access the site\n                        </FormDescription>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                          data-testid=\"switch-private-mode\"\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Platform Wallet */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Payment Configuration</CardTitle>\n                <CardDescription>Configure Solana wallet for receiving entry fees</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <FormField\n                  control={form.control}\n                  name=\"platformWalletAddress\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Platform Wallet Address</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Enter Solana wallet address (e.g., 7xK...abc)\"\n                          {...field}\n                          data-testid=\"input-platform-wallet\"\n                        />\n                      </FormControl>\n                      <FormDescription>\n                        This wallet will receive all entry fees paid with SOL, USDC, or custom tokens.\n                        Make sure you have access to this wallet.\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Save Button */}\n            <div className=\"flex justify-end\">\n              <Button\n                type=\"submit\"\n                disabled={updateMutation.isPending}\n                data-testid=\"button-save-settings\"\n              >\n                {updateMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Saving...\n                  </>\n                ) : (\n                  <>\n                    <Save className=\"mr-2 h-4 w-4\" />\n                    Save Changes\n                  </>\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n\n        {/* AI Model Pricing */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Sparkles className=\"h-5 w-5\" />\n              AI Model Pricing\n            </CardTitle>\n            <CardDescription>Configure credit costs for AI image generation and upscaling</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {loadingPricing ? (\n              <div className=\"flex justify-center py-4\">\n                <Loader2 className=\"h-6 w-6 animate-spin\" />\n              </div>\n            ) : (\n              <>\n                <div className=\"grid gap-4\">\n                  {Object.entries(MODEL_NAMES).map(([key, label]) => (\n                    <div key={key} className=\"flex items-center justify-between\">\n                      <div className=\"flex-1\">\n                        <label htmlFor={`pricing-${key}`} className=\"text-sm font-medium\">\n                          {label}\n                        </label>\n                        <p className=\"text-xs text-muted-foreground\">Cost per generation</p>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Input\n                          id={`pricing-${key}`}\n                          type=\"number\"\n                          min=\"0\"\n                          step=\"1\"\n                          value={pricingValues[key] || 0}\n                          onChange={(e) =>\n                            setPricingValues({ ...pricingValues, [key]: parseInt(e.target.value) || 0 })\n                          }\n                          className=\"w-24\"\n                          data-testid={`input-pricing-${key}`}\n                        />\n                        <span className=\"text-sm text-muted-foreground\">credits</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                <div className=\"flex justify-end pt-4\">\n                  <Button\n                    onClick={() => updatePricingMutation.mutate()}\n                    disabled={updatePricingMutation.isPending}\n                    data-testid=\"button-save-pricing\"\n                  >\n                    {updatePricingMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Saving...\n                      </>\n                    ) : (\n                      <>\n                        <Save className=\"mr-2 h-4 w-4\" />\n                        Save Pricing\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10546},"client/src/pages/pricing.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Crown, \n  Sparkles, \n  Zap, \n  Star, \n  Gift,\n  Check, \n  X,\n  CreditCard,\n  Coins,\n  Loader2\n} from \"lucide-react\";\n\n// Model names mapping\nconst MODEL_NAMES: Record<string, string> = {\n  \"leonardo\": \"Leonardo Lucid\",\n  \"nano-banana\": \"Nano Banana\",\n  \"ideogram-v3\": \"Ideogram v3\",\n  \"sd-3.5-large\": \"Stable Diffusion 3.5\",\n  \"flux-1.1-pro\": \"Flux 1.1 Pro\"\n};\n\n// Tier icons\nconst TIER_ICONS: Record<string, any> = {\n  free: Gift,\n  starter: Zap,\n  creator: Star,\n  pro: Sparkles,\n  studio: Crown,\n};\n\n// Tier color schemes\nconst TIER_COLORS: Record<string, { gradient: string; badge: string; button: string }> = {\n  free: {\n    gradient: \"from-gray-500/20 to-gray-600/20\",\n    badge: \"bg-gray-500/20 text-gray-300 border-gray-500/30\",\n    button: \"bg-gray-600 hover:bg-gray-500\",\n  },\n  starter: {\n    gradient: \"from-blue-500/20 to-cyan-500/20\",\n    badge: \"bg-blue-500/20 text-blue-300 border-blue-500/30\",\n    button: \"bg-blue-600 hover:bg-blue-500\",\n  },\n  creator: {\n    gradient: \"from-purple-500/20 to-pink-500/20\",\n    badge: \"bg-purple-500/20 text-purple-300 border-purple-500/30\",\n    button: \"bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-500 hover:to-pink-500\",\n  },\n  pro: {\n    gradient: \"from-amber-500/20 to-yellow-500/20\",\n    badge: \"bg-amber-500/20 text-amber-300 border-amber-500/30\",\n    button: \"bg-gradient-to-r from-amber-600 to-yellow-600 hover:from-amber-500 hover:to-yellow-500\",\n  },\n  studio: {\n    gradient: \"from-pink-500/20 via-purple-500/20 to-cyan-500/20\",\n    badge: \"bg-gradient-to-r from-pink-500/20 via-purple-500/20 to-cyan-500/20 text-white border-pink-500/30\",\n    button: \"bg-gradient-to-r from-pink-600 via-purple-600 to-cyan-600 hover:from-pink-500 hover:via-purple-500 hover:to-cyan-500\",\n  },\n};\n\n// Tier type from backend\ntype SubscriptionTier = {\n  id: string;\n  slug: string;\n  name: string;\n  description: string | null;\n  priceUsd: number;\n  monthlyCredits: number;\n  canEdit: boolean;\n  canUpscale: boolean;\n  allowedModels: string[];\n  promptCommission: number;\n  imageCommission: number;\n  features: Record<string, any> | null;\n  isActive: boolean;\n  sortOrder: number;\n};\n\ntype UserSubscription = {\n  id: string;\n  tierId: string;\n  status: string;\n  tier: {\n    slug: string;\n    name: string;\n  };\n};\n\nexport default function PricingPage() {\n  const { data: user } = useAuth();\n  const [, setLocation] = useLocation();\n  const [paymentMethod, setPaymentMethod] = useState<\"card\" | \"crypto\">(\"card\");\n\n  // Fetch tiers\n  const { data: tiers = [], isLoading } = useQuery<SubscriptionTier[]>({\n    queryKey: [\"/api/tiers\"],\n  });\n\n  // Fetch user's current subscription\n  const { data: subscription } = useQuery<UserSubscription | null>({\n    queryKey: [\"/api/subscription\"],\n    enabled: !!user,\n  });\n\n  const formatPrice = (cents: number) => {\n    if (cents === 0) return \"Free\";\n    return `$${(cents / 100).toFixed(2)}`;\n  };\n\n  const handleGetStarted = (tier: SubscriptionTier) => {\n    if (!user) {\n      setLocation(\"/register\");\n      return;\n    }\n\n    // TODO: Navigate to subscription flow\n    // For now, just navigate to profile or payment page\n    setLocation(\"/profile\");\n  };\n\n  const isCurrentTier = (tier: SubscriptionTier) => {\n    return subscription?.tier.slug === tier.slug;\n  };\n\n  const getButtonText = (tier: SubscriptionTier) => {\n    if (isCurrentTier(tier)) {\n      return \"Current Plan\";\n    }\n    if (tier.slug === \"free\") {\n      return subscription ? \"Downgrade\" : \"Get Started\";\n    }\n    return \"Get Started\";\n  };\n\n  const getMostPopularTier = () => {\n    const creatorTier = tiers.find(t => t.slug === \"creator\");\n    const proTier = tiers.find(t => t.slug === \"pro\");\n    return creatorTier || proTier;\n  };\n\n  const mostPopularTier = getMostPopularTier();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" data-testid=\"loader-pricing\" />\n      </div>\n    );\n  }\n\n  const sortedTiers = [...tiers].sort((a, b) => a.sortOrder - b.sortOrder);\n\n  return (\n    <div className=\"container mx-auto py-12 px-4\">\n      <div className=\"max-w-7xl mx-auto space-y-12\">\n        {/* Hero Section */}\n        <div className=\"text-center space-y-4\">\n          <h1 className=\"text-5xl font-bold mb-4 gradient-text\" data-testid=\"text-pricing-title\">\n            Choose Your Plan\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\" data-testid=\"text-pricing-subtitle\">\n            Unlock powerful AI tools, exclusive features, and earn from your creativity.\n            Start free and upgrade as you grow.\n          </p>\n        </div>\n\n        {/* Payment Method Toggle */}\n        <div className=\"flex justify-center\">\n          <Tabs\n            value={paymentMethod}\n            onValueChange={(v) => setPaymentMethod(v as \"card\" | \"crypto\")}\n            className=\"w-auto\"\n          >\n            <TabsList className=\"grid w-full grid-cols-2 bg-black/40 backdrop-blur-xl border border-white/10\" data-testid=\"tabs-payment-method\">\n              <TabsTrigger value=\"card\" className=\"gap-2\" data-testid=\"tab-payment-card\">\n                <CreditCard className=\"w-4 h-4\" />\n                Credit Card (Stripe)\n              </TabsTrigger>\n              <TabsTrigger value=\"crypto\" className=\"gap-2\" data-testid=\"tab-payment-crypto\">\n                <Coins className=\"w-4 h-4\" />\n                Crypto (USDC)\n              </TabsTrigger>\n            </TabsList>\n          </Tabs>\n        </div>\n\n        {/* Pricing Cards Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {sortedTiers.map((tier) => {\n            const colors = TIER_COLORS[tier.slug] || TIER_COLORS.free;\n            const Icon = TIER_ICONS[tier.slug] || Gift;\n            const isMostPopular = tier.id === mostPopularTier?.id;\n            const isUserCurrentTier = isCurrentTier(tier);\n\n            return (\n              <Card\n                key={tier.id}\n                className={`relative overflow-hidden border border-white/10 bg-gradient-to-br ${colors.gradient} backdrop-blur-xl transition-all duration-300 hover:scale-105 hover:shadow-2xl ${\n                  isMostPopular ? \"ring-2 ring-purple-500\" : \"\"\n                }`}\n                data-testid={`card-pricing-${tier.slug}`}\n              >\n                {/* Most Popular Badge */}\n                {isMostPopular && (\n                  <div className=\"absolute top-0 right-0 bg-gradient-to-r from-purple-600 to-pink-600 text-white text-xs font-bold px-3 py-1 rounded-bl-lg\" data-testid=\"badge-most-popular\">\n                    MOST POPULAR\n                  </div>\n                )}\n\n                {/* Current Plan Badge */}\n                {isUserCurrentTier && (\n                  <div className=\"absolute top-0 left-0 bg-green-600 text-white text-xs font-bold px-3 py-1 rounded-br-lg\" data-testid={`badge-current-plan-${tier.slug}`}>\n                    CURRENT PLAN\n                  </div>\n                )}\n\n                <div className=\"absolute inset-0 bg-black/40 backdrop-blur-sm\" />\n                \n                <CardHeader className=\"relative space-y-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <Icon className=\"h-8 w-8 text-white\" />\n                    <CardTitle className=\"text-2xl\" data-testid={`text-tier-name-${tier.slug}`}>\n                      {tier.name}\n                    </CardTitle>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-baseline gap-1\">\n                      <span className=\"text-4xl font-bold\" data-testid={`text-price-${tier.slug}`}>\n                        {formatPrice(tier.priceUsd)}\n                      </span>\n                      {tier.priceUsd > 0 && (\n                        <span className=\"text-muted-foreground\">/month</span>\n                      )}\n                    </div>\n                    <Badge variant=\"outline\" className={colors.badge} data-testid={`badge-credits-${tier.slug}`}>\n                      {tier.monthlyCredits.toLocaleString()} Credits/mo\n                    </Badge>\n                  </div>\n\n                  {tier.description && (\n                    <CardDescription className=\"text-gray-300\">\n                      {tier.description}\n                    </CardDescription>\n                  )}\n                </CardHeader>\n\n                <CardContent className=\"relative space-y-4\">\n                  {/* Key Features */}\n                  <ul className=\"space-y-3 text-sm\">\n                    {/* AI Models */}\n                    {tier.allowedModels && tier.allowedModels.length > 0 && (\n                      <li className=\"flex items-start gap-2\">\n                        <Check className=\"h-5 w-5 text-green-500 shrink-0 mt-0.5\" />\n                        <span>\n                          <strong>AI Models:</strong> {tier.allowedModels.length} model{tier.allowedModels.length !== 1 ? 's' : ''} ({tier.allowedModels.map(m => MODEL_NAMES[m] || m).join(\", \")})\n                        </span>\n                      </li>\n                    )}\n\n                    {/* Edit Permission */}\n                    <li className=\"flex items-start gap-2\">\n                      {tier.canEdit ? (\n                        <>\n                          <Check className=\"h-5 w-5 text-green-500 shrink-0 mt-0.5\" />\n                          <span>Edit & Transform Images</span>\n                        </>\n                      ) : (\n                        <>\n                          <X className=\"h-5 w-5 text-red-500 shrink-0 mt-0.5\" />\n                          <span className=\"text-muted-foreground\">Image Editing</span>\n                        </>\n                      )}\n                    </li>\n\n                    {/* Upscale Permission */}\n                    <li className=\"flex items-start gap-2\">\n                      {tier.canUpscale ? (\n                        <>\n                          <Check className=\"h-5 w-5 text-green-500 shrink-0 mt-0.5\" />\n                          <span>AI Upscaling (4K+)</span>\n                        </>\n                      ) : (\n                        <>\n                          <X className=\"h-5 w-5 text-red-500 shrink-0 mt-0.5\" />\n                          <span className=\"text-muted-foreground\">AI Upscaling</span>\n                        </>\n                      )}\n                    </li>\n\n                    {/* Commission Rates */}\n                    {tier.promptCommission > 0 && (\n                      <li className=\"flex items-start gap-2\">\n                        <Check className=\"h-5 w-5 text-green-500 shrink-0 mt-0.5\" />\n                        <span>Earn {tier.promptCommission}% from Prompt Sales</span>\n                      </li>\n                    )}\n\n                    {tier.imageCommission > 0 && (\n                      <li className=\"flex items-start gap-2\">\n                        <Check className=\"h-5 w-5 text-green-500 shrink-0 mt-0.5\" />\n                        <span>Earn {tier.imageCommission}% from Image Sales</span>\n                      </li>\n                    )}\n\n                    {/* Additional Features */}\n                    {tier.features && tier.features.prioritySupport && (\n                      <li className=\"flex items-start gap-2\">\n                        <Check className=\"h-5 w-5 text-green-500 shrink-0 mt-0.5\" />\n                        <span>Priority Support</span>\n                      </li>\n                    )}\n\n                    {tier.features && tier.features.apiAccess && (\n                      <li className=\"flex items-start gap-2\">\n                        <Check className=\"h-5 w-5 text-green-500 shrink-0 mt-0.5\" />\n                        <span>API Access</span>\n                      </li>\n                    )}\n                  </ul>\n\n                  {/* CTA Button */}\n                  <Button\n                    onClick={() => handleGetStarted(tier)}\n                    disabled={isUserCurrentTier}\n                    className={`w-full mt-6 ${colors.button} text-white font-semibold transition-all`}\n                    data-testid={`button-get-started-${tier.slug}`}\n                  >\n                    {getButtonText(tier)}\n                  </Button>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Feature Comparison Table */}\n        <div className=\"space-y-6\">\n          <div className=\"text-center\">\n            <h2 className=\"text-3xl font-bold mb-2\" data-testid=\"text-comparison-title\">\n              Compare Features\n            </h2>\n            <p className=\"text-muted-foreground\">\n              See what's included in each plan\n            </p>\n          </div>\n\n          <Card className=\"overflow-hidden border border-white/10 bg-black/40 backdrop-blur-xl\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\" data-testid=\"table-feature-comparison\">\n                <thead>\n                  <tr className=\"border-b border-white/10\">\n                    <th className=\"text-left p-4 font-semibold\">Feature</th>\n                    {sortedTiers.map((tier) => (\n                      <th key={tier.id} className=\"p-4 font-semibold text-center\" data-testid={`th-tier-${tier.slug}`}>\n                        {tier.name}\n                      </th>\n                    ))}\n                  </tr>\n                </thead>\n                <tbody>\n                  {/* Monthly Credits */}\n                  <tr className=\"border-b border-white/10 hover:bg-white/5\">\n                    <td className=\"p-4 font-medium\">Monthly Credits</td>\n                    {sortedTiers.map((tier) => (\n                      <td key={tier.id} className=\"p-4 text-center\" data-testid={`td-credits-${tier.slug}`}>\n                        {tier.monthlyCredits.toLocaleString()}\n                      </td>\n                    ))}\n                  </tr>\n\n                  {/* AI Models */}\n                  <tr className=\"border-b border-white/10 hover:bg-white/5\">\n                    <td className=\"p-4 font-medium\">AI Models Access</td>\n                    {sortedTiers.map((tier) => (\n                      <td key={tier.id} className=\"p-4 text-center\" data-testid={`td-models-${tier.slug}`}>\n                        {tier.allowedModels.length} model{tier.allowedModels.length !== 1 ? 's' : ''}\n                      </td>\n                    ))}\n                  </tr>\n\n                  {/* Edit Images */}\n                  <tr className=\"border-b border-white/10 hover:bg-white/5\">\n                    <td className=\"p-4 font-medium\">Edit Images</td>\n                    {sortedTiers.map((tier) => (\n                      <td key={tier.id} className=\"p-4 text-center\" data-testid={`td-edit-${tier.slug}`}>\n                        {tier.canEdit ? (\n                          <Check className=\"h-5 w-5 text-green-500 mx-auto\" />\n                        ) : (\n                          <X className=\"h-5 w-5 text-red-500 mx-auto\" />\n                        )}\n                      </td>\n                    ))}\n                  </tr>\n\n                  {/* Upscale */}\n                  <tr className=\"border-b border-white/10 hover:bg-white/5\">\n                    <td className=\"p-4 font-medium\">AI Upscaling</td>\n                    {sortedTiers.map((tier) => (\n                      <td key={tier.id} className=\"p-4 text-center\" data-testid={`td-upscale-${tier.slug}`}>\n                        {tier.canUpscale ? (\n                          <Check className=\"h-5 w-5 text-green-500 mx-auto\" />\n                        ) : (\n                          <X className=\"h-5 w-5 text-red-500 mx-auto\" />\n                        )}\n                      </td>\n                    ))}\n                  </tr>\n\n                  {/* Prompt Commission */}\n                  <tr className=\"border-b border-white/10 hover:bg-white/5\">\n                    <td className=\"p-4 font-medium\">Prompt Sales Commission</td>\n                    {sortedTiers.map((tier) => (\n                      <td key={tier.id} className=\"p-4 text-center\" data-testid={`td-prompt-commission-${tier.slug}`}>\n                        {tier.promptCommission}%\n                      </td>\n                    ))}\n                  </tr>\n\n                  {/* Image Commission */}\n                  <tr className=\"border-b border-white/10 hover:bg-white/5\">\n                    <td className=\"p-4 font-medium\">Image Sales Commission</td>\n                    {sortedTiers.map((tier) => (\n                      <td key={tier.id} className=\"p-4 text-center\" data-testid={`td-image-commission-${tier.slug}`}>\n                        {tier.imageCommission}%\n                      </td>\n                    ))}\n                  </tr>\n\n                  {/* Priority Support */}\n                  <tr className=\"border-b border-white/10 hover:bg-white/5\">\n                    <td className=\"p-4 font-medium\">Priority Support</td>\n                    {sortedTiers.map((tier) => (\n                      <td key={tier.id} className=\"p-4 text-center\" data-testid={`td-support-${tier.slug}`}>\n                        {tier.features?.prioritySupport ? (\n                          <Check className=\"h-5 w-5 text-green-500 mx-auto\" />\n                        ) : (\n                          <X className=\"h-5 w-5 text-red-500 mx-auto\" />\n                        )}\n                      </td>\n                    ))}\n                  </tr>\n\n                  {/* API Access */}\n                  <tr className=\"hover:bg-white/5\">\n                    <td className=\"p-4 font-medium\">API Access</td>\n                    {sortedTiers.map((tier) => (\n                      <td key={tier.id} className=\"p-4 text-center\" data-testid={`td-api-${tier.slug}`}>\n                        {tier.features?.apiAccess ? (\n                          <Check className=\"h-5 w-5 text-green-500 mx-auto\" />\n                        ) : (\n                          <X className=\"h-5 w-5 text-red-500 mx-auto\" />\n                        )}\n                      </td>\n                    ))}\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </Card>\n        </div>\n\n        {/* FAQ Section */}\n        <div className=\"space-y-6\">\n          <div className=\"text-center\">\n            <h2 className=\"text-3xl font-bold mb-2\" data-testid=\"text-faq-title\">\n              Frequently Asked Questions\n            </h2>\n            <p className=\"text-muted-foreground\">\n              Got questions? We've got answers.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card className=\"border border-white/10 bg-black/40 backdrop-blur-xl\" data-testid=\"card-faq-1\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">What are credits?</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-muted-foreground\">\n                  Credits are used to generate AI images, upscale, and edit. Different AI models consume different amounts of credits. You get monthly credits with your subscription that reset each billing cycle.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border border-white/10 bg-black/40 backdrop-blur-xl\" data-testid=\"card-faq-2\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Can I change plans anytime?</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-muted-foreground\">\n                  Yes! You can upgrade or downgrade your plan at any time. Upgrades take effect immediately, while downgrades take effect at the end of your current billing period.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border border-white/10 bg-black/40 backdrop-blur-xl\" data-testid=\"card-faq-3\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">How do commissions work?</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-muted-foreground\">\n                  When you sell prompts or images on our marketplace, you earn a percentage based on your tier. Higher tiers get better commission rates, allowing you to earn more from your creative work.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border border-white/10 bg-black/40 backdrop-blur-xl\" data-testid=\"card-faq-4\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">What payment methods do you accept?</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-muted-foreground\">\n                  We accept credit cards via Stripe and cryptocurrency payments (USDC) on the Solana blockchain. Choose the payment method that works best for you.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Final CTA */}\n        <div className=\"text-center py-8\">\n          <Card className=\"border border-white/10 bg-gradient-to-br from-purple-500/20 via-pink-500/20 to-cyan-500/20 backdrop-blur-xl\">\n            <div className=\"absolute inset-0 bg-black/40 backdrop-blur-sm\" />\n            <CardContent className=\"relative py-12 px-6\">\n              <h3 className=\"text-3xl font-bold mb-4\">Ready to Get Started?</h3>\n              <p className=\"text-lg text-muted-foreground mb-6 max-w-2xl mx-auto\">\n                Join thousands of creators using 5BEST.ai to bring their ideas to life with cutting-edge AI technology.\n              </p>\n              <Button\n                onClick={() => setLocation(user ? \"/profile\" : \"/register\")}\n                className=\"bg-gradient-to-r from-purple-600 via-pink-600 to-cyan-600 hover:from-purple-500 hover:via-pink-500 hover:to-cyan-500 text-white font-semibold px-8 py-6 text-lg\"\n                data-testid=\"button-final-cta\"\n              >\n                {user ? \"Manage Subscription\" : \"Sign Up Free\"}\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":22890},"server/replicate.ts":{"content":"import Replicate from 'replicate';\n\n// Initialize Replicate client\nconst replicate = new Replicate({\n  auth: process.env.REPLICATE_API_TOKEN,\n});\n\n// Preset configurations for different AI models\nexport const PRESET_CONFIG = {\n  clean: {\n    name: 'Clean & Denoise',\n    model: 'nightmareai/real-esrgan',\n    version: '42fed1c4974146d4d2414e2be2c5277c7fcf05fcc3a73abf41610695738c1d7b',\n    credits: 2,\n    description: 'Remove noise and artifacts from images',\n    getInput: (imageUrl: string, params: any = {}) => ({\n      image: imageUrl,\n      scale: params.scale || 2,\n      face_enhance: params.faceEnhance !== false,\n    })\n  },\n  \n  upscale4x: {\n    name: 'Upscale 4×',\n    model: 'nightmareai/real-esrgan',\n    version: '42fed1c4974146d4d2414e2be2c5277c7fcf05fcc3a73abf41610695738c1d7b',\n    credits: 4,\n    description: 'Upscale image to 4× resolution',\n    getInput: (imageUrl: string, params: any = {}) => ({\n      image: imageUrl,\n      scale: 4,\n      face_enhance: params.faceEnhance !== false,\n    })\n  },\n  \n  portrait_pro: {\n    name: 'Portrait Pro',\n    model: 'sczhou/codeformer',\n    version: '7de2ea26c616d5bf2245ad0d5e24f0ff9a6204578a5c876db53142edd9d2cd56',\n    credits: 4,\n    description: 'Professional portrait enhancement',\n    getInput: (imageUrl: string, params: any = {}) => ({\n      image: imageUrl,\n      codeformer_fidelity: params.fidelity || 0.7,\n      background_enhance: params.backgroundEnhance !== false,\n      face_upsample: params.faceUpsample !== false,\n      upscale: params.upscale || 2,\n    })\n  },\n} as const;\n\nexport type PresetKey = keyof typeof PRESET_CONFIG;\n\n// Create a new prediction\nexport async function createPrediction(\n  preset: PresetKey,\n  imageUrl: string,\n  params: any = {},\n  webhookUrl?: string\n) {\n  const config = PRESET_CONFIG[preset];\n  \n  if (!config) {\n    throw new Error(`Unknown preset: ${preset}`);\n  }\n\n  const input = config.getInput(imageUrl, params);\n  \n  console.log(`[Replicate] Creating prediction for preset: ${preset}`);\n  console.log(`[Replicate] Input:`, input);\n\n  const prediction = await replicate.predictions.create({\n    version: config.version,\n    input,\n    ...(webhookUrl && {\n      webhook: webhookUrl,\n      webhook_events_filter: ['completed'],\n    }),\n  });\n\n  console.log(`[Replicate] Prediction created:`, prediction.id);\n  \n  return prediction;\n}\n\n// Get prediction status\nexport async function getPrediction(predictionId: string) {\n  const prediction = await replicate.predictions.get(predictionId);\n  return prediction;\n}\n\n// Cancel a running prediction\nexport async function cancelPrediction(predictionId: string) {\n  const prediction = await replicate.predictions.cancel(predictionId);\n  return prediction;\n}\n\n// Get preset details\nexport function getPresetInfo(preset: PresetKey) {\n  return PRESET_CONFIG[preset];\n}\n\n// Validate preset exists\nexport function isValidPreset(preset: string): preset is PresetKey {\n  return preset in PRESET_CONFIG;\n}\n","size_bytes":2957},"client/src/components/pro-edit/ProEditModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Loader2, Sparkles, ImageUp, User2, Download, RotateCcw, Scissors, Sun, Wand2 } from \"lucide-react\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { ImageComparisonSlider } from \"./ImageComparisonSlider\";\n\ninterface ProEditModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  imageUrl: string;\n  submissionId?: string;\n  generationId?: string;\n}\n\ninterface Preset {\n  key: string;\n  name: string;\n  description: string;\n  credits: number;\n  icon: typeof Sparkles;\n}\n\nconst PRESETS: Preset[] = [\n  {\n    key: 'clean',\n    name: 'Clean & Denoise',\n    description: 'Remove noise and artifacts from images',\n    credits: 2,\n    icon: Sparkles\n  },\n  {\n    key: 'upscale4x',\n    name: 'Upscale 4×',\n    description: 'Upscale image to 4× resolution',\n    credits: 4,\n    icon: ImageUp\n  },\n  {\n    key: 'portrait_pro',\n    name: 'Portrait Pro',\n    description: 'Professional portrait enhancement',\n    credits: 4,\n    icon: User2\n  },\n  {\n    key: 'enhance',\n    name: 'Smart Enhance',\n    description: 'General AI enhancement for any image',\n    credits: 3,\n    icon: Wand2\n  },\n  {\n    key: 'bg_remove',\n    name: 'Remove Background',\n    description: 'Remove image background with AI',\n    credits: 2,\n    icon: Scissors\n  },\n  {\n    key: 'relight',\n    name: 'Relight Scene',\n    description: 'Change lighting and background',\n    credits: 4,\n    icon: Sun\n  }\n];\n\nexport function ProEditModal({ open, onOpenChange, imageUrl, submissionId, generationId }: ProEditModalProps) {\n  const { toast } = useToast();\n  const [selectedPreset, setSelectedPreset] = useState<string | null>(null);\n  const [jobId, setJobId] = useState<string | null>(null);\n  const [processing, setProcessing] = useState(false);\n  const [currentImageUrl, setCurrentImageUrl] = useState<string>(imageUrl); // For chain editing\n  const [originalUrl, setOriginalUrl] = useState<string>(imageUrl);\n  const [sourceMode, setSourceMode] = useState<'current' | 'original'>('current'); // Toggle between current/original\n  const [imageId, setImageId] = useState<string | null>(null); // Track imageId for version history\n\n  // Reset state when modal opens/closes\n  useEffect(() => {\n    if (open) {\n      setCurrentImageUrl(imageUrl);\n      setOriginalUrl(imageUrl);\n      setSourceMode('current');\n      setJobId(null);\n      setProcessing(false);\n      setImageId(null); // Reset imageId when modal opens with new image\n    } else {\n      // Clear state when modal closes to prevent cross-image leakage\n      setImageId(null);\n      setJobId(null);\n      setCurrentImageUrl(imageUrl);\n      setOriginalUrl(imageUrl);\n    }\n  }, [open, imageUrl]);\n\n  // Create edit job mutation\n  const createEditMutation = useMutation({\n    mutationFn: async (preset: string) => {\n      // Use source mode to determine which URL to send\n      const sourceUrl = sourceMode === 'original' ? originalUrl : currentImageUrl;\n      \n      const response = await fetch(\"/api/edits\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({\n          imageUrl: sourceUrl,\n          preset,\n          submissionId,\n          generationId\n        })\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Failed to start processing\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data: any) => {\n      setJobId(data.jobId);\n      setImageId(data.imageId); // Track imageId for version history\n      setProcessing(true);\n      toast({\n        title: \"Processing started\",\n        description: `Your image is being enhanced. Credits used: ${data.creditsDeducted}`\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to start processing\",\n        variant: \"destructive\"\n      });\n      setProcessing(false);\n    }\n  });\n\n  // Poll job status\n  const { data: jobStatus } = useQuery<any>({\n    queryKey: ['/api/edit-jobs', jobId],\n    enabled: !!jobId && processing,\n    refetchInterval: (query) => {\n      const data = query.state.data;\n      // Stop polling if job is done\n      if (data?.status === 'succeeded' || data?.status === 'failed') {\n        return false;\n      }\n      return 2000; // Poll every 2 seconds\n    }\n  });\n\n  // Fetch version history\n  const { data: versionsData, refetch: refetchVersions } = useQuery<any>({\n    queryKey: ['/api/images', imageId, 'versions'],\n    enabled: !!imageId,\n    refetchInterval: processing ? 3000 : false // Refetch while processing to show new versions\n  });\n\n  // Handle job completion\n  useEffect(() => {\n    if (jobStatus?.status === 'succeeded' && processing) {\n      setProcessing(false);\n      \n      // Update current image URL with the output\n      if (jobStatus.outputUrl) {\n        setCurrentImageUrl(jobStatus.outputUrl);\n        setSourceMode('current'); // Default to using current result\n      }\n      \n      // CRITICAL: Always update original URL from backend response\n      // This ensures \"Use Original\" toggle works correctly for chain/parallel editing\n      if (jobStatus.originalUrl) {\n        setOriginalUrl(jobStatus.originalUrl);\n      }\n      \n      toast({\n        title: \"Success!\",\n        description: \"Your image has been enhanced. You can continue editing or download.\"\n      });\n      \n      // Invalidate galleries to show updated images\n      queryClient.invalidateQueries({ queryKey: ['/api/me'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/ai/generations'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/submissions'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/images', imageId, 'versions'] });\n      \n      setJobId(null); // Clear job ID to stop polling\n    } else if (jobStatus?.status === 'failed' && processing) {\n      setProcessing(false);\n      toast({\n        title: \"Processing failed\",\n        description: jobStatus.error || \"An error occurred\",\n        variant: \"destructive\"\n      });\n      setJobId(null);\n    }\n  }, [jobStatus, processing]);\n\n  const handlePresetSelect = (presetKey: string) => {\n    if (processing) return;\n    createEditMutation.mutate(presetKey);\n  };\n\n  const handleDownload = async () => {\n    try {\n      const response = await fetch(currentImageUrl);\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `enhanced-${Date.now()}.png`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n      \n      toast({\n        title: \"Downloaded\",\n        description: \"Image saved to your device\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Download failed\",\n        description: \"Could not download the image\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleClose = () => {\n    if (!processing) {\n      onOpenChange(false);\n      setJobId(null);\n      setSelectedPreset(null);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-[600px] bg-white/90 dark:bg-gray-900/90 backdrop-blur-md border-gray-200/50 dark:border-gray-700/50\" data-testid=\"dialog-pro-edit\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent\">\n            Pro Edit\n          </DialogTitle>\n          <DialogDescription className=\"text-gray-600 dark:text-gray-400\">\n            {processing \n              ? \"Processing your image...\" \n              : \"Choose an AI enhancement preset\"}\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4 py-4\">\n          {/* Image Preview Section with Before/After Slider */}\n          {currentImageUrl && currentImageUrl !== imageUrl && !processing && (\n            <div className=\"space-y-3\">\n              <div className=\"rounded-lg overflow-hidden border-2 border-purple-200 dark:border-purple-800\">\n                <ImageComparisonSlider\n                  beforeImage={originalUrl}\n                  afterImage={currentImageUrl}\n                />\n              </div>\n              \n              {/* Source Toggle */}\n              <div className=\"bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm rounded-lg p-4 border border-gray-200 dark:border-gray-700\">\n                <Label className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 block\">\n                  Process from:\n                </Label>\n                <RadioGroup \n                  value={sourceMode} \n                  onValueChange={(value: 'current' | 'original') => setSourceMode(value)}\n                  className=\"flex gap-4\"\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"current\" id=\"source-current\" data-testid=\"radio-source-current\" />\n                    <Label htmlFor=\"source-current\" className=\"cursor-pointer text-gray-700 dark:text-gray-300\">\n                      📸 Use Current Result\n                    </Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"original\" id=\"source-original\" data-testid=\"radio-source-original\" />\n                    <Label htmlFor=\"source-original\" className=\"cursor-pointer text-gray-700 dark:text-gray-300\">\n                      🎨 Use Original\n                    </Label>\n                  </div>\n                </RadioGroup>\n                <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-2\">\n                  {sourceMode === 'current' \n                    ? \"Next preset will enhance the current result (chain editing)\" \n                    : \"Next preset will process the original image (parallel editing)\"}\n                </p>\n              </div>\n\n              {/* Version History */}\n              {versionsData?.versions && versionsData.versions.length > 1 && (\n                <div className=\"bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm rounded-lg p-4 border border-gray-200 dark:border-gray-700\">\n                  <Label className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3 block\">\n                    Version History ({versionsData.versions.length})\n                  </Label>\n                  <div className=\"flex gap-2 overflow-x-auto pb-2\">\n                    {versionsData.versions.map((version: any, index: number) => (\n                      <button\n                        key={version.id}\n                        onClick={() => {\n                          setCurrentImageUrl(version.url);\n                          toast({\n                            title: \"Version loaded\",\n                            description: version.preset \n                              ? `Showing: ${version.preset} enhancement` \n                              : \"Showing: Original image\"\n                          });\n                        }}\n                        className={`flex-shrink-0 group relative rounded-lg overflow-hidden border-2 transition-all ${\n                          currentImageUrl === version.url\n                            ? \"border-purple-500 ring-2 ring-purple-300 dark:ring-purple-700\"\n                            : \"border-gray-300 dark:border-gray-600 hover:border-purple-400\"\n                        }`}\n                        data-testid={`button-version-${index}`}\n                      >\n                        <img \n                          src={version.url} \n                          alt={version.preset || \"Original\"} \n                          className=\"w-20 h-20 object-cover\"\n                        />\n                        <div className=\"absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center\">\n                          <span className=\"text-white text-xs font-medium px-2 py-1 bg-black/70 rounded\">\n                            {version.preset || \"Original\"}\n                          </span>\n                        </div>\n                        {currentImageUrl === version.url && (\n                          <div className=\"absolute top-1 right-1 w-3 h-3 bg-purple-500 rounded-full border-2 border-white\"></div>\n                        )}\n                      </button>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Processing Indicator */}\n          {processing && (\n            <div className=\"flex flex-col items-center justify-center py-12 space-y-4\">\n              <Loader2 className=\"w-16 h-16 animate-spin text-purple-600\" />\n              <div className=\"text-center space-y-2\">\n                <p className=\"text-lg font-medium text-gray-900 dark:text-gray-100\">\n                  Enhancing your image...\n                </p>\n                <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                  This may take 30-60 seconds\n                </p>\n                {jobStatus?.status === 'running' && (\n                  <p className=\"text-xs text-purple-600 dark:text-purple-400\">\n                    Status: {jobStatus.status}\n                  </p>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Preset Selection - Always Visible */}\n          <div>\n            <Label className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3 block\">\n              {currentImageUrl !== imageUrl ? \"Apply another enhancement:\" : \"Choose enhancement:\"}\n            </Label>\n            <div className=\"grid gap-3\">\n              {PRESETS.map((preset) => {\n                const Icon = preset.icon;\n                return (\n                  <Card\n                    key={preset.key}\n                    className={`p-4 transition-all border-2 bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm ${\n                      processing \n                        ? \"opacity-50 cursor-not-allowed\" \n                        : \"cursor-pointer hover:shadow-lg hover:scale-[1.02] hover:border-purple-400 dark:hover:border-purple-600\"\n                    }`}\n                    onClick={() => !processing && handlePresetSelect(preset.key)}\n                    data-testid={`card-preset-${preset.key}`}\n                  >\n                    <div className=\"flex items-start gap-4\">\n                      <div className=\"p-3 rounded-lg bg-gradient-to-br from-purple-500 to-pink-500\">\n                        <Icon className=\"w-6 h-6 text-white\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center justify-between mb-1\">\n                          <h3 className=\"font-semibold text-lg text-gray-900 dark:text-gray-100\">\n                            {preset.name}\n                          </h3>\n                          <span className=\"text-sm font-medium px-2 py-1 rounded-full bg-purple-100 dark:bg-purple-900/30 text-purple-700 dark:text-purple-300\">\n                            {preset.credits} credits\n                          </span>\n                        </div>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                          {preset.description}\n                        </p>\n                      </div>\n                    </div>\n                  </Card>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-between items-center pt-4 gap-3\">\n            <div className=\"flex gap-2\">\n              {currentImageUrl !== imageUrl && (\n                <Button\n                  onClick={handleDownload}\n                  disabled={processing}\n                  className=\"bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700\"\n                  data-testid=\"button-download\"\n                >\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Download\n                </Button>\n              )}\n            </div>\n            <Button\n              variant=\"outline\"\n              onClick={handleClose}\n              disabled={processing}\n              data-testid=\"button-close\"\n            >\n              Close\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":17030},"client/src/components/payment/SubscriptionSolanaPayment.tsx":{"content":"import { useEffect, useState, useCallback, useMemo, useRef } from \"react\";\nimport { QRCodeSVG } from \"qrcode.react\";\nimport { PublicKey, Keypair } from \"@solana/web3.js\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Copy, Check, Loader2, AlertTriangle } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { SubscriptionTier } from \"@shared/schema\";\n\ninterface SubscriptionSolanaPaymentProps {\n  tier: SubscriptionTier;\n  currency: \"SOL\" | \"USDC\";\n  recipient?: string; // Optional - will fetch from backend if not provided\n  userId: string; // Current user ID\n  onSuccess: (txHash: string) => void;\n  onCancel?: () => void;\n}\n\nexport function SubscriptionSolanaPayment({\n  tier,\n  currency,\n  recipient: recipientProp,\n  userId,\n  onSuccess,\n  onCancel,\n}: SubscriptionSolanaPaymentProps) {\n  const [paymentUrl, setPaymentUrl] = useState<string>(\"\");\n  const [copied, setCopied] = useState(false);\n  const [isVerifying, setIsVerifying] = useState(false);\n  const [timeoutSeconds, setTimeoutSeconds] = useState<number>(300); // 5 minutes\n  const [walletDetected, setWalletDetected] = useState<boolean>(false);\n  const [recipient, setRecipient] = useState<string>(recipientProp || \"\");\n  const pollingIntervalRef = useRef<NodeJS.Timeout | null>(null);\n  const { toast } = useToast();\n\n  // Convert cents to dollars for USDC payment\n  const amount = tier.priceUsd / 100;\n\n  // Generate unique reference for transaction tracking (stable across renders)\n  const reference = useMemo(() => Keypair.generate().publicKey, []);\n\n  // Fetch platform wallet from backend if not provided\n  useEffect(() => {\n    const fetchPlatformWallet = async () => {\n      if (recipientProp) {\n        setRecipient(recipientProp);\n        return;\n      }\n\n      try {\n        const res = await apiRequest(\"GET\", \"/api/settings/platform-wallet\");\n        const data = await res.json();\n        if (data.platformWalletAddress) {\n          setRecipient(data.platformWalletAddress);\n        } else {\n          toast({\n            title: \"Configuration Error\",\n            description: \"Platform wallet address not configured. Please contact support.\",\n            variant: \"destructive\",\n          });\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch platform wallet:\", error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to fetch payment address. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    };\n\n    fetchPlatformWallet();\n  }, [recipientProp, toast]);\n\n  // Detect available Solana wallets\n  useEffect(() => {\n    const detectWallet = async () => {\n      let detected = false;\n      \n      const hasPhantom = typeof window !== 'undefined' && (window as any).solana && (window as any).solana.isPhantom;\n      const hasSolflare = typeof window !== 'undefined' && (window as any).solflare;\n      const hasGlow = typeof window !== 'undefined' && (window as any).glowSolana;\n      \n      if (hasPhantom || hasSolflare || hasGlow) {\n        detected = true;\n      }\n      \n      setWalletDetected(detected);\n    };\n\n    detectWallet();\n    const timeout1 = setTimeout(detectWallet, 1000);\n    const timeout2 = setTimeout(detectWallet, 3000);\n    \n    return () => {\n      clearTimeout(timeout1);\n      clearTimeout(timeout2);\n    };\n  }, []);\n\n  // Generate Solana Pay URL\n  useEffect(() => {\n    // Wait for recipient to be loaded\n    if (!recipient) return;\n\n    try {\n      const params = new URLSearchParams();\n      \n      params.append('amount', amount.toString());\n      params.append('reference', reference.toBase58());\n      params.append('label', `${tier.name} Subscription`);\n      params.append('message', `Subscribe to ${tier.name} tier - ${tier.monthlyCredits} credits/month`);\n      params.append('memo', `subscription:${tier.id}:user:${userId}`);\n      \n      // Add SPL token mint if using USDC\n      if (currency === \"USDC\") {\n        // USDC mainnet mint address\n        params.append('spl-token', \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\");\n      }\n\n      const url = `solana:${recipient}?${params.toString()}`;\n      setPaymentUrl(url);\n    } catch (error) {\n      console.error(\"Error generating payment URL:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate payment link\",\n        variant: \"destructive\",\n      });\n    }\n  }, [amount, currency, recipient, tier, userId, reference, toast]);\n\n  // Copy payment URL to clipboard\n  const copyToClipboard = useCallback(() => {\n    navigator.clipboard.writeText(paymentUrl);\n    setCopied(true);\n    toast({\n      title: \"Copied!\",\n      description: \"Payment link copied to clipboard\",\n    });\n    setTimeout(() => setCopied(false), 2000);\n  }, [paymentUrl, toast]);\n\n  // Direct wallet transaction (desktop wallet integration)\n  const openInWallet = useCallback(async () => {\n    console.log(\"🚀 openInWallet called for subscription!\");\n    \n    if (!paymentUrl) {\n      toast({\n        title: \"Error\",\n        description: \"Payment URL not ready\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    \n    // Mobile: always use deep link (works with or without extension)\n    if (isMobile) {\n      // Use Phantom universal link for better mobile UX\n      const phantomDeepLink = `https://phantom.app/ul/v1/browse/${encodeURIComponent(paymentUrl)}?ref=${encodeURIComponent(window.location.origin)}`;\n      \n      window.location.href = phantomDeepLink;\n      \n      toast({\n        title: \"Opening Wallet\",\n        description: \"Redirecting to your mobile wallet...\",\n      });\n      \n      // Fallback to direct Solana Pay URL after 2 seconds if Phantom not installed\n      setTimeout(() => {\n        if (document.visibilityState === 'visible') {\n          // User still on page, try direct protocol\n          window.location.href = paymentUrl;\n        }\n      }, 2000);\n      \n      // Start polling for mobile flow (user will complete payment in wallet app)\n      startPolling();\n      \n      return;\n    }\n\n    // Desktop: Check for wallet extension\n    if (!walletDetected) {\n      // No extension found, open in browser instead\n      toast({\n        title: \"Opening Payment Link\",\n        description: \"Opening Solana Pay link in your browser...\",\n      });\n      window.open(paymentUrl, '_blank');\n      \n      // Start polling for fallback flow (user will complete payment in new tab)\n      startPolling();\n      \n      return;\n    }\n\n    // Desktop with extension: Try wallet integration\n    try{\n      const win = window as any;\n      \n      if (win.solana && win.solana.isPhantom) {\n        toast({\n          title: \"Connecting to Phantom...\",\n          description: \"Please approve the connection in your wallet.\",\n        });\n\n        // Connect wallet\n        let walletResponse;\n        if (win.solana.isConnected) {\n          walletResponse = { publicKey: win.solana.publicKey };\n        } else {\n          walletResponse = await win.solana.connect();\n        }\n\n        toast({\n          title: \"Creating Transaction\",\n          description: \"Preparing subscription payment...\",\n        });\n\n        // Parse payment URL\n        const url = new URL(paymentUrl);\n        const recipientAddress = url.pathname;\n        const amount = parseFloat(url.searchParams.get('amount') || '0');\n        const referenceParam = url.searchParams.get('reference');\n        const splToken = url.searchParams.get('spl-token'); // USDC mint address\n        \n        // Import Solana web3.js, SPL token, and Solana Pay\n        const { Connection, PublicKey, Transaction } = await import('@solana/web3.js');\n        const { \n          getAssociatedTokenAddress, \n          createTransferCheckedInstruction,\n          createAssociatedTokenAccountInstruction,\n          getAccount\n        } = await import('@solana/spl-token');\n        const { findReference } = await import('@solana/pay');\n        \n        const rpcUrl = import.meta.env.VITE_HELIUS_RPC_URL || 'https://api.mainnet-beta.solana.com';\n        const connection = new Connection(rpcUrl, 'confirmed');\n        \n        // Create transaction\n        const transaction = new Transaction();\n        \n        if (splToken) {\n          // USDC SPL Token transfer\n          const usdcMint = new PublicKey(splToken);\n          const sender = walletResponse.publicKey;\n          const recipient = new PublicKey(recipientAddress);\n          \n          // Get associated token accounts\n          const senderTokenAccount = await getAssociatedTokenAddress(usdcMint, sender);\n          const recipientTokenAccount = await getAssociatedTokenAddress(usdcMint, recipient);\n          \n          // Check if accounts exist, create if needed\n          try {\n            await getAccount(connection, senderTokenAccount);\n          } catch (error) {\n            // Sender token account doesn't exist - this shouldn't happen for USDC holders\n            // but we can create it if needed\n            console.log(\"Creating sender token account...\");\n            transaction.add(\n              createAssociatedTokenAccountInstruction(\n                sender,\n                senderTokenAccount,\n                sender,\n                usdcMint\n              )\n            );\n          }\n          \n          try {\n            await getAccount(connection, recipientTokenAccount);\n          } catch (error) {\n            // Recipient (platform) token account doesn't exist, create it\n            console.log(\"Creating recipient token account...\");\n            transaction.add(\n              createAssociatedTokenAccountInstruction(\n                sender, // payer\n                recipientTokenAccount,\n                recipient, // owner\n                usdcMint\n              )\n            );\n          }\n          \n          // USDC has 6 decimals\n          const usdcDecimals = 6;\n          const transferAmount = Math.round(amount * Math.pow(10, usdcDecimals));\n          \n          // Create USDC transfer instruction (using TransferChecked for proper validation)\n          let transferInstruction = createTransferCheckedInstruction(\n            senderTokenAccount,     // source\n            usdcMint,              // mint\n            recipientTokenAccount, // destination\n            sender,                // owner\n            transferAmount,        // amount\n            usdcDecimals          // decimals\n          );\n          \n          // Add reference BEFORE adding to transaction (Solana Pay spec)\n          if (referenceParam) {\n            const referenceKey = new PublicKey(referenceParam);\n            // Clone the instruction with reference added to keys\n            transferInstruction = {\n              ...transferInstruction,\n              keys: [\n                ...transferInstruction.keys,\n                {\n                  pubkey: referenceKey,\n                  isSigner: false,\n                  isWritable: false,\n                }\n              ]\n            };\n            console.log(\"Added reference to USDC transfer:\", referenceParam);\n          }\n          \n          transaction.add(transferInstruction);\n        } else {\n          // Fallback to SOL transfer (not expected for subscriptions)\n          const { SystemProgram, LAMPORTS_PER_SOL } = await import('@solana/web3.js');\n          let transferInstruction = SystemProgram.transfer({\n            fromPubkey: walletResponse.publicKey,\n            toPubkey: new PublicKey(recipientAddress),\n            lamports: Math.round(amount * LAMPORTS_PER_SOL),\n          });\n          \n          if (referenceParam) {\n            const referenceKey = new PublicKey(referenceParam);\n            transferInstruction = {\n              ...transferInstruction,\n              keys: [\n                ...transferInstruction.keys,\n                {\n                  pubkey: referenceKey,\n                  isSigner: false,\n                  isWritable: false,\n                }\n              ]\n            };\n            console.log(\"Added reference to SOL transaction:\", referenceParam);\n          }\n          \n          transaction.add(transferInstruction);\n        }\n        \n        const { blockhash } = await connection.getLatestBlockhash();\n        transaction.recentBlockhash = blockhash;\n        transaction.feePayer = walletResponse.publicKey;\n\n        console.log(\"Transaction details:\", {\n          instructions: transaction.instructions.length,\n          feePayer: transaction.feePayer?.toBase58(),\n          recentBlockhash: transaction.recentBlockhash\n        });\n\n        toast({\n          title: \"Sending Transaction\",\n          description: \"Please approve the subscription payment in Phantom...\",\n        });\n\n        const signedTransaction = await win.solana.signAndSendTransaction(transaction);\n        \n        console.log(\"✅ Subscription payment sent:\", signedTransaction.signature);\n        \n        toast({\n          title: \"Payment Sent!\",\n          description: \"Verifying your subscription payment...\",\n        });\n        \n        // Start polling AFTER transaction is successfully sent\n        // NOTE: onSuccess will be called by startPolling() when backend confirms\n        startPolling();\n        \n        return;\n      }\n      \n      // Fallback: Copy link (for non-Phantom wallets or errors)\n      await navigator.clipboard.writeText(paymentUrl);\n      toast({\n        title: \"Payment Link Copied\",\n        description: \"Open your wallet extension and paste this link in the browser tab.\",\n        duration: 8000,\n      });\n      \n      // Start polling for fallback flow\n      startPolling();\n      \n    } catch (error: any) {\n      console.error(\"Wallet integration error:\", error);\n      console.error(\"Error details:\", JSON.stringify(error, null, 2));\n      \n      if (error.code === 4001) {\n        toast({\n          title: \"Transaction Cancelled\",\n          description: \"You cancelled the transaction.\",\n          variant: \"destructive\",\n        });\n      } else if (error.code === -32603) {\n        toast({\n          title: \"Transaction Failed\",\n          description: \"RPC error. Make sure Phantom is on Solana Mainnet and you have USDC + SOL for fees.\",\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Wallet Integration Error\",\n          description: `${error.message || \"Please use the QR code or copy link method as a backup.\"}`,\n          variant: \"destructive\",\n        });\n      }\n    }\n  }, [paymentUrl, walletDetected, onSuccess, toast, tier]);\n\n  // Poll backend for payment verification\n  const startPolling = useCallback(() => {\n    // Stop any existing polling\n    if (pollingIntervalRef.current) {\n      clearInterval(pollingIntervalRef.current);\n      pollingIntervalRef.current = null;\n    }\n\n    let pollCount = 0;\n    const maxPolls = 100; // 5 minutes (enough time for user to complete wallet transaction)\n    \n    const interval = setInterval(async () => {\n      try {\n        pollCount++;\n        \n        const remainingSeconds = Math.max(0, (maxPolls - pollCount) * 3);\n        setTimeoutSeconds(remainingSeconds);\n        \n        if (pollCount > maxPolls) {\n          console.log(\"⏰ Subscription payment polling timeout\");\n          clearInterval(interval);\n          pollingIntervalRef.current = null;\n          setTimeoutSeconds(0);\n          return;\n        }\n\n        const res = await apiRequest(\"POST\", \"/api/subscription/purchase-crypto\", {\n          reference: reference.toBase58(),\n          tierId: tier.id,\n          currency,\n        });\n        \n        const data = await res.json();\n        \n        if (data.found || data.error) {\n          console.log(\"📡 Subscription payment verification response:\", data);\n        }\n        \n        if (data.found && data.success && data.txHash) {\n          console.log(\"✅ Subscription payment verified:\", data.txHash);\n          clearInterval(interval);\n          pollingIntervalRef.current = null;\n          \n          toast({\n            title: \"Subscription Activated!\",\n            description: data.message || `Successfully subscribed to ${tier.name} tier!`,\n          });\n          \n          onSuccess(data.txHash);\n        } else if (data.error) {\n          console.error(\"❌ Subscription payment error:\", data.error);\n        }\n      } catch (error) {\n        console.error(\"💥 Error checking subscription payment:\", error);\n      }\n    }, 3000); // Poll every 3 seconds\n\n    pollingIntervalRef.current = interval;\n  }, [reference, tier, currency, onSuccess, toast]);\n\n  // Cleanup polling on unmount\n  useEffect(() => {\n    return () => {\n      if (pollingIntervalRef.current) {\n        clearInterval(pollingIntervalRef.current);\n        pollingIntervalRef.current = null;\n      }\n    };\n  }, []);\n\n  // Manual verification\n  const verifyPayment = useCallback(async () => {\n    setIsVerifying(true);\n    \n    try {\n      const res = await apiRequest(\"POST\", \"/api/subscription/purchase-crypto\", {\n        reference: reference.toBase58(),\n        tierId: tier.id,\n        currency,\n      });\n      \n      const data = await res.json();\n      \n      if (data.found && data.success && data.txHash) {\n        console.log(\"✅ Manual subscription verification successful:\", data.txHash);\n        \n        toast({\n          title: \"Subscription Activated!\",\n          description: data.message || `Successfully subscribed to ${tier.name} tier!`,\n        });\n        \n        onSuccess(data.txHash);\n      } else {\n        const isNotFoundMessage = data.message && data.message.includes(\"Payment not found yet\");\n        toast({\n          title: isNotFoundMessage ? \"Transaction Not Detected\" : \"Payment Not Found\",\n          description: isNotFoundMessage \n            ? \"Transaction may still be processing. Please wait and try again.\"\n            : data.message || data.error || \"Please complete the payment and try again\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      console.error(\"💥 Manual subscription verification error:\", error);\n      toast({\n        title: \"Verification Error\",\n        description: error instanceof Error ? error.message : \"Failed to verify payment. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsVerifying(false);\n    }\n  }, [reference, tier, currency, recipient, onSuccess, toast]);\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\" data-testid=\"card-subscription-payment\">\n      <CardHeader>\n        <CardTitle>Subscribe to {tier.name}</CardTitle>\n        <CardDescription>\n          Pay {amount} {currency} to activate your subscription\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Mainnet Warning */}\n        <Alert className=\"bg-amber-50 dark:bg-amber-950 border-amber-200 dark:border-amber-800\">\n          <AlertTriangle className=\"h-4 w-4 text-amber-600 dark:text-amber-500\" />\n          <AlertDescription className=\"text-amber-800 dark:text-amber-200\">\n            <strong>Real Money Transaction:</strong> This payment uses mainnet with real {currency}. You'll receive {tier.monthlyCredits} credits immediately.\n          </AlertDescription>\n        </Alert>\n\n        {/* QR Code */}\n        {paymentUrl && (\n          <div className=\"flex justify-center p-4 bg-white rounded-lg\" data-testid=\"container-qr-code\">\n            <QRCodeSVG value={paymentUrl} size={200} level=\"H\" />\n          </div>\n        )}\n\n        {/* Payment URL */}\n        <div className=\"space-y-2\">\n          <p className=\"text-sm text-muted-foreground\">Payment Link:</p>\n          <div className=\"flex gap-2\">\n            <input\n              type=\"text\"\n              value={paymentUrl}\n              readOnly\n              className=\"flex-1 px-3 py-2 text-sm border rounded-md bg-muted\"\n              data-testid=\"input-payment-url\"\n            />\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={copyToClipboard}\n              data-testid=\"button-copy-link\"\n            >\n              {copied ? <Check className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n            </Button>\n          </div>\n        </div>\n\n        {/* Instructions */}\n        <div className=\"p-3 bg-muted rounded-lg text-sm space-y-2\">\n          <p className=\"font-medium\">Payment Options:</p>\n          <ol className=\"list-decimal ml-4 space-y-1\">\n            <li><strong>QR Code:</strong> Scan with your mobile Solana wallet</li>\n            {walletDetected ? (\n              <li><strong>Pay with Wallet:</strong> Direct transaction in browser wallet ✅</li>\n            ) : (\n              <li><strong>No Wallet:</strong> Install browser extension first ⚠️</li>\n            )}\n            <li><strong>Manual Copy:</strong> Copy link and paste in wallet browser</li>\n            <li><strong>Verification:</strong> Automatic detection after completion</li>\n          </ol>\n        </div>\n\n        {/* Timeout counter */}\n        {timeoutSeconds > 0 && (\n          <p className=\"text-xs text-center text-muted-foreground\">\n            Auto-verifying... ({Math.floor(timeoutSeconds / 60)}:{(timeoutSeconds % 60).toString().padStart(2, '0')})\n          </p>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"flex gap-2\">\n          <Button\n            className=\"flex-1\"\n            onClick={() => {\n              openInWallet();\n            }}\n            data-testid=\"button-pay-with-wallet\"\n          >\n            {walletDetected ? \"Pay with Phantom\" : \"Open in Browser\"}\n          </Button>\n          <Button\n            variant=\"outline\"\n            onClick={verifyPayment}\n            disabled={isVerifying}\n            data-testid=\"button-verify-payment\"\n          >\n            {isVerifying ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Checking...\n              </>\n            ) : (\n              \"Verify Payment\"\n            )}\n          </Button>\n        </div>\n\n        {onCancel && (\n          <Button\n            variant=\"ghost\"\n            className=\"w-full\"\n            onClick={onCancel}\n            data-testid=\"button-cancel-payment\"\n          >\n            Cancel\n          </Button>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":22562},"server/ai-cleanup-scheduler.ts":{"content":"import type { IStorage } from \"./storage\";\nimport { db } from \"./db\";\nimport { aiGenerations, images, imageVersions, editJobs } from \"@shared/schema\";\nimport { lt, eq, or, inArray } from \"drizzle-orm\";\nimport { v2 as cloudinary } from \"cloudinary\";\nimport { supabaseAdmin } from \"./supabase\";\n\nexport class AiCleanupScheduler {\n  private storage: IStorage;\n  private intervalId: NodeJS.Timeout | null = null;\n\n  constructor(storage: IStorage) {\n    this.storage = storage;\n  }\n\n  async initialize() {\n    console.log(\"[AI Cleanup] Scheduler initialized - running daily at midnight\");\n    \n    // Run cleanup immediately on startup\n    await this.runCleanup();\n    \n    // Then schedule to run daily (24 hours)\n    this.intervalId = setInterval(async () => {\n      await this.runCleanup();\n    }, 24 * 60 * 60 * 1000); // 24 hours in milliseconds\n  }\n\n  async runCleanup() {\n    try {\n      const sevenDaysAgo = new Date();\n      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n\n      console.log(`[AI Cleanup] Starting cleanup of generations older than ${sevenDaysAgo.toISOString()}`);\n\n      // Find all AI generations older than 7 days\n      const oldGenerations = await db.select()\n        .from(aiGenerations)\n        .where(lt(aiGenerations.createdAt, sevenDaysAgo));\n\n      console.log(`[AI Cleanup] Found ${oldGenerations.length} generations to delete`);\n\n      let deletedCount = 0;\n      let failedCount = 0;\n\n      for (const generation of oldGenerations) {\n        try {\n          // Delete from Cloudinary if cloudinaryPublicId exists\n          if (generation.cloudinaryPublicId) {\n            try {\n              await cloudinary.uploader.destroy(generation.cloudinaryPublicId);\n              console.log(`[AI Cleanup] Deleted from Cloudinary: ${generation.cloudinaryPublicId}`);\n            } catch (cloudinaryError) {\n              console.error(`[AI Cleanup] Cloudinary deletion failed for ${generation.cloudinaryPublicId}:`, cloudinaryError);\n            }\n          }\n\n          // Find associated image record for this generation\n          const [imageRecord] = await db.select()\n            .from(images)\n            .where(eq(images.generationId, generation.id))\n            .limit(1);\n\n          if (imageRecord) {\n            // First get all versions for this image\n            const versions = await db.select()\n              .from(imageVersions)\n              .where(eq(imageVersions.imageId, imageRecord.id));\n\n            if (versions.length > 0) {\n              const versionIds = versions.map(v => v.id);\n              \n              // Delete all edit_jobs that reference these versions (input OR output)\n              await db.delete(editJobs)\n                .where(\n                  or(\n                    inArray(editJobs.inputVersionId, versionIds),\n                    inArray(editJobs.outputVersionId, versionIds)\n                  )\n                );\n            }\n\n            // Now safe to delete versions\n            for (const version of versions) {\n              // Delete from Supabase Storage if it's stored there\n              if (version.url.includes('supabase.co')) {\n                try {\n                  const urlParts = version.url.split('/');\n                  const bucketName = urlParts[urlParts.indexOf('public') + 1];\n                  const filePath = urlParts.slice(urlParts.indexOf('public') + 2).join('/');\n                  \n                  await supabaseAdmin.storage\n                    .from(bucketName)\n                    .remove([filePath]);\n                  \n                  console.log(`[AI Cleanup] Deleted from Supabase: ${filePath}`);\n                } catch (supabaseError) {\n                  console.error(`[AI Cleanup] Supabase deletion failed for ${version.url}:`, supabaseError);\n                }\n              }\n\n              // Delete version from DB\n              await db.delete(imageVersions)\n                .where(eq(imageVersions.id, version.id));\n            }\n\n            // Delete image record from DB\n            await db.delete(images)\n              .where(eq(images.id, imageRecord.id));\n          }\n\n          // Delete generation from DB\n          await db.delete(aiGenerations)\n            .where(eq(aiGenerations.id, generation.id));\n\n          deletedCount++;\n        } catch (error) {\n          console.error(`[AI Cleanup] Failed to delete generation ${generation.id}:`, error);\n          failedCount++;\n        }\n      }\n\n      console.log(`[AI Cleanup] Cleanup complete: ${deletedCount} deleted, ${failedCount} failed`);\n    } catch (error) {\n      console.error(\"[AI Cleanup] Cleanup job failed:\", error);\n    }\n  }\n\n  stop() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n      console.log(\"[AI Cleanup] Scheduler stopped\");\n    }\n  }\n}\n","size_bytes":4806},"server/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js';\n\nif (!process.env.SUPABASE_URL) {\n  throw new Error(\"SUPABASE_URL is not set\");\n}\n\nif (!process.env.SUPABASE_ANON_KEY) {\n  throw new Error(\"SUPABASE_ANON_KEY is not set\");\n}\n\nif (!process.env.SUPABASE_SERVICE_KEY) {\n  throw new Error(\"SUPABASE_SERVICE_KEY is not set\");\n}\n\nexport const supabase = createClient(\n  process.env.SUPABASE_URL,\n  process.env.SUPABASE_ANON_KEY\n);\n\nexport const supabaseAdmin = createClient(\n  process.env.SUPABASE_URL,\n  process.env.SUPABASE_SERVICE_KEY,\n  {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  }\n);\n\nconst TEMP_BUCKET = 'pro-edit-images';\nconst PERMANENT_BUCKET = '5best-uploads';\n\nexport async function uploadImageToSupabase(\n  imageUrl: string,\n  userId: string,\n  imageId: string,\n  versionId: string\n): Promise<{ url: string; path: string }> {\n  try {\n    console.log(`[Supabase] Downloading image from: ${imageUrl}`);\n    \n    const response = await fetch(imageUrl);\n    if (!response.ok) {\n      throw new Error(`Failed to download image: ${response.statusText}`);\n    }\n    \n    const arrayBuffer = await response.arrayBuffer();\n    const buffer = Buffer.from(arrayBuffer);\n    \n    const contentType = response.headers.get('content-type') || 'image/jpeg';\n    const extension = contentType.includes('png') ? 'png' : 'jpg';\n    \n    const filePath = `${userId}/${imageId}/${versionId}.${extension}`;\n    \n    console.log(`[Supabase] Uploading to bucket: ${TEMP_BUCKET}, path: ${filePath}`);\n    \n    const { data, error } = await supabaseAdmin.storage\n      .from(TEMP_BUCKET)\n      .upload(filePath, buffer, {\n        contentType,\n        cacheControl: '3600',\n        upsert: true\n      });\n    \n    if (error) {\n      console.error('[Supabase] Upload error:', error);\n      throw error;\n    }\n    \n    console.log(`[Supabase] Upload successful:`, data);\n    \n    const { data: publicUrlData } = supabaseAdmin.storage\n      .from(TEMP_BUCKET)\n      .getPublicUrl(filePath);\n    \n    const publicUrl = publicUrlData.publicUrl;\n    \n    console.log(`[Supabase] Public URL generated: ${publicUrl}`);\n    \n    return {\n      url: publicUrl,\n      path: filePath\n    };\n  } catch (error) {\n    console.error('[Supabase] Error uploading image:', error);\n    throw new Error(\n      `Failed to upload image to Supabase: ${error instanceof Error ? error.message : 'Unknown error'}`\n    );\n  }\n}\n\nexport async function copySupabaseFile(\n  sourceUrl: string,\n  destPath: string\n): Promise<{ url: string; path: string }> {\n  try {\n    console.log(`[Supabase] Copying file from ${sourceUrl} to ${destPath}`);\n    \n    // Download the source file\n    const response = await fetch(sourceUrl);\n    if (!response.ok) {\n      throw new Error(`Failed to download source file: ${response.statusText}`);\n    }\n    \n    const arrayBuffer = await response.arrayBuffer();\n    const buffer = Buffer.from(arrayBuffer);\n    \n    const contentType = response.headers.get('content-type') || 'image/jpeg';\n    \n    // Upload to permanent bucket\n    const { data, error } = await supabaseAdmin.storage\n      .from(PERMANENT_BUCKET)\n      .upload(destPath, buffer, {\n        contentType,\n        cacheControl: '31536000', // 1 year for permanent files\n        upsert: false // Don't overwrite existing files\n      });\n    \n    if (error) {\n      console.error('[Supabase] Copy error:', error);\n      throw error;\n    }\n    \n    console.log(`[Supabase] File copied successfully:`, data);\n    \n    const { data: publicUrlData } = supabaseAdmin.storage\n      .from(PERMANENT_BUCKET)\n      .getPublicUrl(destPath);\n    \n    const publicUrl = publicUrlData.publicUrl;\n    \n    console.log(`[Supabase] Permanent URL generated: ${publicUrl}`);\n    \n    return {\n      url: publicUrl,\n      path: destPath\n    };\n  } catch (error) {\n    console.error('[Supabase] Error copying file:', error);\n    throw new Error(\n      `Failed to copy file to permanent storage: ${error instanceof Error ? error.message : 'Unknown error'}`\n    );\n  }\n}\n\nexport async function copyCloudinaryFile(\n  sourceUrl: string,\n  userId: string\n): Promise<{ url: string; thumbnailUrl: string; publicId: string; resourceType: string }> {\n  try {\n    const { v2: cloudinary } = await import('cloudinary');\n    \n    console.log(`[Cloudinary] Copying AI image to permanent folder: ${sourceUrl}`);\n    \n    // Download the image from source URL\n    const response = await fetch(sourceUrl);\n    if (!response.ok) {\n      throw new Error(`Failed to download image: ${response.statusText}`);\n    }\n    \n    const arrayBuffer = await response.arrayBuffer();\n    const buffer = Buffer.from(arrayBuffer);\n    \n    // Generate new public_id in permanent folder\n    const timestamp = Date.now();\n    const newPublicId = `5best-submissions/${userId}_${timestamp}`;\n    \n    console.log(`[Cloudinary] Uploading to permanent folder: ${newPublicId}`);\n    \n    // Upload to Cloudinary using stream for buffer upload\n    const result = await new Promise<any>((resolve, reject) => {\n      const uploadStream = cloudinary.uploader.upload_stream(\n        {\n          public_id: newPublicId,\n          resource_type: 'image',\n          quality: 'auto:good',\n          fetch_format: 'auto'\n        },\n        (error: any, result: any) => {\n          if (error) reject(error);\n          else resolve(result);\n        }\n      );\n      \n      uploadStream.end(buffer);\n    });\n    \n    const permanentUrl = result.secure_url;\n    \n    // Generate thumbnail URL using Cloudinary transformations (no upload needed)\n    const thumbnailUrl = cloudinary.url(result.public_id, {\n      transformation: [\n        { width: 400, height: 400, crop: 'fill', quality: 'auto:good' },\n        { fetch_format: 'auto' }\n      ]\n    });\n    \n    console.log(`[Cloudinary] Copy successful. URL: ${permanentUrl}`);\n    console.log(`[Cloudinary] Thumbnail URL: ${thumbnailUrl}`);\n    \n    return {\n      url: permanentUrl,\n      thumbnailUrl,\n      publicId: result.public_id,\n      resourceType: 'image'\n    };\n  } catch (error) {\n    console.error('[Cloudinary] Error copying file:', error);\n    throw new Error(\n      `Failed to copy Cloudinary file: ${error instanceof Error ? error.message : 'Unknown error'}`\n    );\n  }\n}\n\nexport async function ensureBucketExists(): Promise<void> {\n  try {\n    const { data: buckets, error: listError } = await supabase.storage.listBuckets();\n    \n    if (listError) {\n      console.error('[Supabase] Error listing buckets:', listError);\n      return;\n    }\n    \n    const tempBucketExists = buckets?.some(b => b.name === TEMP_BUCKET);\n    const permanentBucketExists = buckets?.some(b => b.name === PERMANENT_BUCKET);\n    \n    if (tempBucketExists) {\n      console.log(`[Supabase] Bucket verified: ${TEMP_BUCKET}`);\n    } else {\n      console.warn(`[Supabase] Bucket not found: ${TEMP_BUCKET}. Please create it manually in Supabase Dashboard.`);\n    }\n    \n    if (permanentBucketExists) {\n      console.log(`[Supabase] Bucket verified: ${PERMANENT_BUCKET}`);\n    } else {\n      console.warn(`[Supabase] Bucket not found: ${PERMANENT_BUCKET}. Please create it manually in Supabase Dashboard.`);\n    }\n  } catch (error) {\n    console.error('[Supabase] Error checking bucket:', error);\n  }\n}\n","size_bytes":7251},"client/src/components/layout/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth, useLogout, isAuthenticated, isAdmin } from \"@/lib/auth\";\nimport { useSidebar } from \"@/contexts/SidebarContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { GlassButton } from \"@/components/GlassButton\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Upload, \n  LogOut, \n  User, \n  Shield, \n  Image, \n  Sparkles, \n  CreditCard,\n  Home,\n  Trophy,\n  ChevronLeft,\n  ChevronRight,\n  Menu,\n  Info,\n  Map,\n  MessageCircle,\n  HelpCircle,\n  FileText,\n  Compass\n} from \"lucide-react\";\n\nexport function Sidebar() {\n  const { isCollapsed, toggleSidebar } = useSidebar();\n  const { data: user } = useAuth();\n  const logout = useLogout();\n  const [location, setLocation] = useLocation();\n\n  const handleLogout = () => {\n    logout.mutate();\n    setLocation(\"/\");\n  };\n\n  const getInitials = (username: string) => {\n    return username.substring(0, 2).toUpperCase();\n  };\n\n  return (\n    <aside\n      className={`\n        hidden md:flex\n        fixed left-0 top-0 h-screen\n        glass-effect border-r border-border\n        transition-all duration-300 ease-in-out\n        z-40\n        ${isCollapsed ? 'w-[90px]' : 'w-64'}\n      `}\n      data-testid=\"sidebar\"\n    >\n      <div className=\"flex flex-col h-full\">\n        {/* Logo & Toggle */}\n        <div className=\"flex items-center justify-between p-4 border-b border-border/40\">\n          {!isCollapsed && (\n            <Link href=\"/\" className=\"flex items-center space-x-3\" data-testid=\"link-logo\">\n              <img \n                src=\"/logo.png\" \n                alt=\"5BEST.ai Logo\" \n                className=\"w-8 h-8 object-contain\"\n              />\n              <span className=\"text-xl font-bold tracking-tight gradient-text\">5BEST.ai</span>\n            </Link>\n          )}\n          {isCollapsed && (\n            <Link href=\"/\" className=\"flex items-center justify-center w-full\" data-testid=\"link-logo-collapsed\">\n              <img \n                src=\"/logo.png\" \n                alt=\"5BEST.ai Logo\" \n                className=\"w-8 h-8 object-contain\"\n              />\n            </Link>\n          )}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={toggleSidebar}\n            className={`p-2 ${isCollapsed ? 'absolute -right-3 top-4 rounded-full bg-background border border-border' : ''}`}\n            data-testid=\"button-toggle-sidebar\"\n          >\n            {isCollapsed ? <ChevronRight className=\"h-4 w-4\" /> : <ChevronLeft className=\"h-4 w-4\" />}\n          </Button>\n        </div>\n\n        {/* Navigation Links */}\n        <nav className=\"flex-1 overflow-y-auto p-3 space-y-1\">\n          <Link href=\"/\" data-testid=\"link-home\">\n            <Button \n              variant=\"ghost\" \n              className={`w-full ${isCollapsed ? 'justify-center px-2' : 'justify-start'}`}\n            >\n              <Home className=\"h-4 w-4\" />\n              {!isCollapsed && <span className=\"ml-2\">Home</span>}\n            </Button>\n          </Link>\n\n          <Link href=\"/explore\" data-testid=\"link-explore\">\n            <Button \n              variant=\"ghost\" \n              className={`w-full ${isCollapsed ? 'justify-center px-2' : 'justify-start'}`}\n            >\n              <Compass className=\"h-4 w-4\" />\n              {!isCollapsed && <span className=\"ml-2\">Explore</span>}\n            </Button>\n          </Link>\n\n          <Link href=\"/contests\" data-testid=\"link-contests\">\n            <Button \n              variant=\"ghost\" \n              className={`w-full ${isCollapsed ? 'justify-center px-2' : 'justify-start'}`}\n            >\n              <Trophy className=\"h-4 w-4\" />\n              {!isCollapsed && <span className=\"ml-2\">Contests</span>}\n            </Button>\n          </Link>\n\n          <Link href=\"/pricing\" data-testid=\"link-pricing\">\n            <Button \n              variant=\"ghost\" \n              className={`w-full ${isCollapsed ? 'justify-center px-2' : 'justify-start'}`}\n            >\n              <CreditCard className=\"h-4 w-4\" />\n              {!isCollapsed && <span className=\"ml-2\">Pricing</span>}\n            </Button>\n          </Link>\n\n          {isAuthenticated(user) && (\n            <>\n              <Link href=\"/ai-generator\" data-testid=\"link-ai-generator\">\n                <Button \n                  variant=\"ghost\" \n                  className={`w-full ${isCollapsed ? 'justify-center px-2' : 'justify-start'}`}\n                >\n                  <Sparkles className=\"h-4 w-4\" />\n                  {!isCollapsed && <span className=\"ml-2\">AI Studio</span>}\n                </Button>\n              </Link>\n\n              {location !== '/ai-generator' && (\n                <Link href=\"/upload\" data-testid=\"link-upload\">\n                  <GlassButton className={`w-full ${isCollapsed ? 'px-2 justify-center' : 'px-4 py-2'}`}>\n                    <Upload className=\"h-4 w-4\" />\n                    {!isCollapsed && <span className=\"ml-2\">Upload</span>}\n                  </GlassButton>\n                </Link>\n              )}\n            </>\n          )}\n        </nav>\n\n        {/* Footer Links Menu */}\n        <div className=\"border-t border-border/40 p-3\">\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button \n                variant=\"ghost\" \n                className={`w-full ${isCollapsed ? 'justify-center px-2' : 'justify-start'}`}\n                data-testid=\"footer-menu\"\n              >\n                <Info className=\"h-4 w-4\" />\n                {!isCollapsed && <span className=\"ml-2\">More Links</span>}\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-56\">\n              {/* Platform Section */}\n              <div className=\"px-2 py-1.5\">\n                <p className=\"text-xs font-semibold text-muted-foreground uppercase\">Platform</p>\n              </div>\n              <Link href=\"/contests\" data-testid=\"footer-link-contests\">\n                <DropdownMenuItem>\n                  <Trophy className=\"w-4 h-4 mr-2\" />\n                  Contests\n                </DropdownMenuItem>\n              </Link>\n              <Link href=\"/roadmap\" data-testid=\"footer-link-roadmap\">\n                <DropdownMenuItem>\n                  <Map className=\"w-4 h-4 mr-2\" />\n                  Roadmap\n                </DropdownMenuItem>\n              </Link>\n              <DropdownMenuItem>\n                <FileText className=\"w-4 h-4 mr-2\" />\n                How It Works\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <FileText className=\"w-4 h-4 mr-2\" />\n                Rules\n              </DropdownMenuItem>\n              \n              <DropdownMenuSeparator />\n              \n              {/* Community Section */}\n              <div className=\"px-2 py-1.5\">\n                <p className=\"text-xs font-semibold text-muted-foreground uppercase\">Community</p>\n              </div>\n              <DropdownMenuItem>\n                <MessageCircle className=\"w-4 h-4 mr-2\" />\n                Discord\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <svg className=\"w-4 h-4 mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z\" />\n                </svg>\n                Twitter\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <svg className=\"w-4 h-4 mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z\"/>\n                </svg>\n                Instagram\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <FileText className=\"w-4 h-4 mr-2\" />\n                Blog\n              </DropdownMenuItem>\n              \n              <DropdownMenuSeparator />\n              \n              {/* Support Section */}\n              <div className=\"px-2 py-1.5\">\n                <p className=\"text-xs font-semibold text-muted-foreground uppercase\">Support</p>\n              </div>\n              <DropdownMenuItem>\n                <HelpCircle className=\"w-4 h-4 mr-2\" />\n                Help Center\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <MessageCircle className=\"w-4 h-4 mr-2\" />\n                Contact Us\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <FileText className=\"w-4 h-4 mr-2\" />\n                Privacy Policy\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <FileText className=\"w-4 h-4 mr-2\" />\n                Terms of Service\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n\n        {/* User Section */}\n        <div className=\"border-t border-border/40 p-3 space-y-3\">\n          {isAuthenticated(user) ? (\n            <>\n              {/* User Menu */}\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button \n                    variant=\"ghost\" \n                    className={`w-full p-2 h-auto ${isCollapsed ? 'justify-center' : 'justify-start'}`}\n                    data-testid=\"user-menu\"\n                  >\n                    <Avatar className=\"w-8 h-8\">\n                      <AvatarFallback className=\"gradient-glory text-white font-bold text-xs\">\n                        {getInitials(user.username)}\n                      </AvatarFallback>\n                    </Avatar>\n                    {!isCollapsed && (\n                      <div className=\"ml-2 text-left overflow-hidden\">\n                        <p className=\"text-sm font-medium truncate\">{user.username}</p>\n                        <p className=\"text-xs text-muted-foreground truncate\">{user.email}</p>\n                      </div>\n                    )}\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-56\">\n                  <div className=\"px-3 py-2\">\n                    <p className=\"text-sm font-medium\">{user.username}</p>\n                    <p className=\"text-xs text-muted-foreground\">{user.email}</p>\n                    <div className=\"flex items-center gap-2 mt-1\">\n                      <Badge \n                        variant={user.status === \"approved\" ? \"default\" : user.status === \"pending\" ? \"secondary\" : \"destructive\"}\n                        className=\"text-xs\"\n                        data-testid={`status-${user.status}`}\n                      >\n                        {user.status}\n                      </Badge>\n                      {isAdmin(user) && (\n                        <Badge variant=\"outline\" className=\"text-xs\" data-testid=\"admin-badge\">\n                          <Shield className=\"w-3 h-3 mr-1\" />\n                          Admin\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                  <DropdownMenuSeparator />\n                  <Link href=\"/profile\" data-testid=\"link-profile\">\n                    <DropdownMenuItem>\n                      <User className=\"w-4 h-4 mr-2\" />\n                      Profile\n                    </DropdownMenuItem>\n                  </Link>\n                  <Link href=\"/subscription\" data-testid=\"link-subscription\">\n                    <DropdownMenuItem>\n                      <CreditCard className=\"w-4 h-4 mr-2\" />\n                      Subscription\n                    </DropdownMenuItem>\n                  </Link>\n                  <Link href=\"/my-submissions\" data-testid=\"link-my-submissions\">\n                    <DropdownMenuItem>\n                      <Image className=\"w-4 h-4 mr-2\" />\n                      My Gallery\n                    </DropdownMenuItem>\n                  </Link>\n                  {isAdmin(user) && (\n                    <>\n                      <Link href=\"/admin\" data-testid=\"link-admin\">\n                        <DropdownMenuItem>\n                          <Shield className=\"w-4 h-4 mr-2\" />\n                          Admin Dashboard\n                        </DropdownMenuItem>\n                      </Link>\n                      <Link href=\"/admin/subscription-tiers\" data-testid=\"link-admin-tiers\">\n                        <DropdownMenuItem>\n                          <CreditCard className=\"w-4 h-4 mr-2\" />\n                          Subscription Tiers\n                        </DropdownMenuItem>\n                      </Link>\n                    </>\n                  )}\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={handleLogout} data-testid=\"button-logout\">\n                    <LogOut className=\"w-4 h-4 mr-2\" />\n                    Logout\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </>\n          ) : (\n            <div className={`space-y-2 ${isCollapsed ? 'flex flex-col items-center' : ''}`}>\n              <Link href=\"/login\" data-testid=\"link-login\" className=\"block\">\n                <Button variant=\"ghost\" className={`w-full ${isCollapsed ? 'px-2' : ''}`}>\n                  {isCollapsed ? <User className=\"h-4 w-4\" /> : 'Login'}\n                </Button>\n              </Link>\n              <Link href=\"/register\" data-testid=\"link-register\" className=\"block\">\n                <GlassButton className={`w-full ${isCollapsed ? 'px-2 justify-center' : ''}`}>\n                  {isCollapsed ? <Sparkles className=\"h-4 w-4\" /> : 'Sign Up'}\n                </GlassButton>\n              </Link>\n            </div>\n          )}\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":15023},"client/src/pages/explore.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { SubmissionCard } from \"@/components/submission-card\";\nimport { ContestLightboxModal } from \"@/components/ContestLightboxModal\";\nimport { Image as ImageIcon, Play, Search, Loader2 } from \"lucide-react\";\nimport { useAuth, isAuthenticated, isApproved } from \"@/lib/auth\";\nimport { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Sidebar } from \"@/components/layout/Sidebar\";\nimport { SidebarProvider, useSidebar } from \"@/contexts/SidebarContext\";\n\nfunction ExploreContent() {\n  const { data: user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [page, setPage] = useState(1);\n  const [allSubmissions, setAllSubmissions] = useState<any[]>([]);\n  const [hasMore, setHasMore] = useState(true);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [selectedSubmission, setSelectedSubmission] = useState<any>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [searchTag, setSearchTag] = useState('');\n  const [searchInput, setSearchInput] = useState('');\n\n  // Clear submissions cache on mount to ensure fresh data\n  useEffect(() => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n    queryClient.removeQueries({ queryKey: [\"/api/submissions\"] });\n    setAllSubmissions([]);\n    setPage(1);\n  }, []);\n\n  // Reset pagination when search tag changes\n  useEffect(() => {\n    setAllSubmissions([]);\n    setPage(1);\n    setHasMore(true);\n  }, [searchTag]);\n\n  const { data: submissions = [], isLoading } = useQuery({\n    queryKey: [\"/api/submissions\", page, searchTag],\n    queryFn: async () => {\n      const params = new URLSearchParams({\n        status: 'approved',\n        page: page.toString(),\n        limit: '12'\n      });\n      if (searchTag) {\n        params.append('tag', searchTag);\n      }\n      const response = await fetch(`/api/submissions?${params}`);\n      if (!response.ok) throw new Error(\"Failed to fetch submissions\");\n      return response.json();\n    },\n  });\n\n  // Update submissions when new data arrives\n  useEffect(() => {\n    if (submissions && submissions.length >= 0) {\n      if (page === 1) {\n        setAllSubmissions(submissions);\n      } else if (submissions.length > 0) {\n        setAllSubmissions(prev => [...prev, ...submissions]);\n      }\n      // hasMore is true only if we got a full page (12 items)\n      setHasMore(submissions.length === 12);\n      setIsLoadingMore(false);\n    }\n  }, [submissions, page]);\n\n  // Infinite scroll logic\n  const handleScroll = useCallback(() => {\n    if (isLoadingMore || !hasMore || allSubmissions.length < 12) return;\n    \n    const scrollTop = document.documentElement.scrollTop;\n    const scrollHeight = document.documentElement.scrollHeight;\n    const clientHeight = document.documentElement.clientHeight;\n    \n    if (scrollTop + clientHeight >= scrollHeight - 500) {\n      setIsLoadingMore(true);\n      setPage(prev => prev + 1);\n    }\n  }, [isLoadingMore, hasMore, allSubmissions.length]);\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [handleScroll]);\n\n  // Vote mutation for modal\n  const voteMutation = useMutation({\n    mutationFn: async (submissionId: string) => {\n      const response = await apiRequest(\"POST\", \"/api/votes\", {\n        submissionId,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      toast({\n        title: \"Vote recorded!\",\n        description: \"Your vote has been counted successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to vote. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handle voting from modal\n  const handleVoteFromModal = (submissionId: string) => {\n    if (!isAuthenticated(user)) {\n      toast({\n        title: \"Authentication required\",\n        description: \"Please log in to vote on submissions.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!isApproved(user)) {\n      toast({\n        title: \"Account approval required\",\n        description: \"Your account must be approved to vote.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    voteMutation.mutate(submissionId);\n  };\n\n  // Buy prompt mutation for modal\n  const buyPromptMutation = useMutation({\n    mutationFn: async (submissionId: string) => {\n      const response = await apiRequest(\"POST\", `/api/prompts/purchase/${submissionId}`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      toast({\n        title: \"Prompt purchased!\",\n        description: \"The prompt is now visible to you.\",\n      });\n      // Refresh modal to show unlocked prompt\n      if (selectedSubmission) {\n        setIsModalOpen(false);\n        setTimeout(() => setIsModalOpen(true), 100);\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Purchase failed\",\n        description: error.message || \"Failed to purchase prompt. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handle buying prompt from modal\n  const handleBuyPromptFromModal = (submissionId: string) => {\n    if (!isAuthenticated(user)) {\n      toast({\n        title: \"Authentication required\",\n        description: \"Please log in to purchase prompts.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!isApproved(user)) {\n      toast({\n        title: \"Account approval required\",\n        description: \"Your account must be approved to make purchases.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    buyPromptMutation.mutate(submissionId);\n  };\n\n  const handleOpenSubmissionModal = (submission: any) => {\n    setSelectedSubmission(submission);\n    setIsModalOpen(true);\n  };\n\n  const handleCloseSubmissionModal = () => {\n    setIsModalOpen(false);\n    setSelectedSubmission(null);\n  };\n\n  const handleLoadMore = () => {\n    if (!isLoadingMore && hasMore) {\n      setIsLoadingMore(true);\n      setPage(prev => prev + 1);\n    }\n  };\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    setSearchTag(searchInput.trim());\n  };\n\n  const { isCollapsed } = useSidebar();\n\n  return (\n    <div className={`min-h-screen transition-all duration-300 ${isCollapsed ? 'md:ml-[90px]' : 'md:ml-64'}`}>\n      <div className=\"w-full px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Search Bar */}\n        <form onSubmit={handleSearch} className=\"flex gap-2 mb-8\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              type=\"text\"\n              placeholder=\"Search by tag (e.g., nature, portrait, abstract...)\"\n              value={searchInput}\n              onChange={(e) => setSearchInput(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-tag\"\n            />\n          </div>\n          <Button type=\"submit\" data-testid=\"button-search\">\n            Search\n          </Button>\n          {searchTag && (\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => {\n                setSearchInput('');\n                setSearchTag('');\n              }}\n              data-testid=\"button-clear-search\"\n            >\n              Clear\n            </Button>\n          )}\n        </form>\n\n        {/* Submissions Grid */}\n        {allSubmissions.length > 0 ? (\n          <>\n            <div className=\"masonry-grid\" data-testid=\"submissions-grid\">\n              {allSubmissions.map((submission: any) => (\n                <SubmissionCard \n                  key={submission.id}\n                  submission={submission}\n                  showVoting={true}\n                  onExpand={() => handleOpenSubmissionModal(submission)}\n                />\n              ))}\n            </div>\n            \n            {/* Loading indicator for infinite scroll */}\n            {isLoadingMore && (\n              <div className=\"mt-8 text-center\">\n                <div className=\"inline-flex items-center px-4 py-2 text-sm text-muted-foreground\">\n                  <Loader2 className=\"animate-spin rounded-full h-4 w-4 mr-2\" />\n                  Loading more submissions...\n                </div>\n              </div>\n            )}\n            \n            {/* End of content indicator */}\n            {!hasMore && allSubmissions.length > 0 && (\n              <div className=\"mt-8 text-center\">\n                <p className=\"text-sm text-muted-foreground\">\n                  {searchTag ? \"No more results\" : \"You've reached the end! 🎉\"}\n                </p>\n              </div>\n            )}\n          </>\n        ) : isLoading ? (\n          <div className=\"text-center py-12\">\n            <div className=\"inline-flex items-center px-4 py-2 text-sm text-muted-foreground\">\n              <Loader2 className=\"animate-spin rounded-full h-4 w-4 mr-2\" />\n              Loading submissions...\n            </div>\n          </div>\n        ) : (\n          <div className=\"text-center py-12\">\n            <ImageIcon className=\"h-12 w-12 mx-auto text-muted-foreground mb-3\" />\n            <p className=\"text-sm text-muted-foreground\">\n              {searchTag ? `No submissions found for \"${searchTag}\"` : \"No submissions available\"}\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Submission Lightbox Modal */}\n      {selectedSubmission && (\n        <ContestLightboxModal\n          submission={selectedSubmission}\n          isOpen={isModalOpen}\n          onClose={handleCloseSubmissionModal}\n          onVote={handleVoteFromModal}\n          onBuyPrompt={handleBuyPromptFromModal}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default function Explore() {\n  return (\n    <SidebarProvider>\n      <Sidebar />\n      <ExploreContent />\n    </SidebarProvider>\n  );\n}\n","size_bytes":10393}},"version":2}